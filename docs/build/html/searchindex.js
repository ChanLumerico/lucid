Search.setIndex({"alltitles": {"@ Operator": [[330, "operator"]], "Activation Functions": [[161, null], [183, null]], "Activation Layers": [[241, null], [257, null]], "Additional Details": [[23, "additional-details"]], "Additional Options": [[242, "additional-options"]], "Admonitions and Usage Guidelines": [[316, "admonitions-and-usage-guidelines"]], "Advanced Example with Dilation": [[174, "advanced-example-with-dilation"]], "Advanced Features": [[403, "advanced-features"]], "Advantages": [[10, "advantages"], [12, "advantages"], [13, "advantages"]], "AlexNet": [[27, null]], "Algorithm": [[300, "algorithm"], [301, "algorithm"], [302, "algorithm"], [303, "algorithm"], [304, "algorithm"], [305, "algorithm"], [306, "algorithm"], [307, "algorithm"], [308, "algorithm"], [309, "algorithm"], [310, "algorithm"]], "Architecture": [[27, "architecture"], [29, "architecture"], [77, "architecture"], [78, "architecture"], [79, "architecture"], [142, "architecture"]], "Architecture Details": [[111, "architecture-details"], [112, "architecture-details"]], "Attention Functions": [[168, null], [183, null]], "Attention Layers": [[244, null], [257, null]], "Attention Mechanism": [[169, "attention-mechanism"], [219, "attention-mechanism"]], "Attributes": [[5, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [27, "attributes"], [72, "attributes"], [76, "attributes"], [102, "attributes"], [113, "attributes"], [120, "attributes"], [130, "attributes"], [135, "attributes"], [140, "attributes"], [142, "attributes"], [150, "attributes"], [152, "attributes"], [153, "attributes"], [154, "attributes"], [155, "attributes"], [156, "attributes"], [157, "attributes"], [212, "attributes"], [213, "attributes"], [214, "attributes"], [215, "attributes"], [216, "attributes"], [217, "attributes"], [218, "attributes"], [229, "attributes"], [230, "attributes"], [233, "attributes"], [234, "attributes"], [236, "attributes"], [237, "attributes"], [238, "attributes"], [240, "attributes"], [245, "attributes"], [246, "attributes"], [247, "attributes"], [249, "attributes"], [251, "attributes"], [252, "attributes"], [253, "attributes"], [254, "attributes"], [255, "attributes"], [258, "attributes"], [259, "attributes"], [260, "attributes"], [262, "attributes"], [263, "attributes"], [264, "attributes"], [265, "attributes"], [266, "attributes"], [268, "attributes"], [269, "attributes"], [270, "attributes"], [272, "attributes"], [273, "attributes"], [274, "attributes"], [275, "attributes"], [277, "attributes"], [278, "attributes"], [279, "attributes"], [280, "attributes"], [281, "attributes"], [282, "attributes"], [283, "attributes"], [284, "attributes"], [285, "attributes"], [325, "attributes"], [394, "attributes"], [395, "attributes"], [396, "attributes"], [397, "attributes"], [398, "attributes"], [399, "attributes"], [400, "attributes"], [401, "attributes"]], "Backward Gradient Calculation": [[16, "backward-gradient-calculation"], [17, "backward-gradient-calculation"], [18, "backward-gradient-calculation"], [20, "backward-gradient-calculation"], [21, "backward-gradient-calculation"], [22, "backward-gradient-calculation"], [23, "backward-gradient-calculation"], [24, "backward-gradient-calculation"], [25, "backward-gradient-calculation"], [26, "backward-gradient-calculation"], [153, "backward-gradient-calculation"], [154, "backward-gradient-calculation"], [155, "backward-gradient-calculation"], [156, "backward-gradient-calculation"], [157, "backward-gradient-calculation"], [159, "backward-gradient-calculation"], [160, "backward-gradient-calculation"], [162, "backward-gradient-calculation"], [163, "backward-gradient-calculation"], [164, "backward-gradient-calculation"], [165, "backward-gradient-calculation"], [166, "backward-gradient-calculation"], [167, "backward-gradient-calculation"], [176, "backward-gradient-calculation"], [184, "backward-gradient-calculation"], [186, "backward-gradient-calculation"], [210, "backward-gradient-calculation"], [218, "backward-gradient-calculation"], [228, "backward-gradient-calculation"], [229, "backward-gradient-calculation"], [230, "backward-gradient-calculation"], [231, "backward-gradient-calculation"], [232, "backward-gradient-calculation"], [233, "backward-gradient-calculation"], [234, "backward-gradient-calculation"], [236, "backward-gradient-calculation"], [237, "backward-gradient-calculation"], [238, "backward-gradient-calculation"], [239, "backward-gradient-calculation"], [240, "backward-gradient-calculation"], [245, "backward-gradient-calculation"], [246, "backward-gradient-calculation"], [247, "backward-gradient-calculation"], [249, "backward-gradient-calculation"], [252, "backward-gradient-calculation"], [253, "backward-gradient-calculation"], [254, "backward-gradient-calculation"], [255, "backward-gradient-calculation"], [258, "backward-gradient-calculation"], [259, "backward-gradient-calculation"], [260, "backward-gradient-calculation"], [262, "backward-gradient-calculation"], [263, "backward-gradient-calculation"], [264, "backward-gradient-calculation"], [265, "backward-gradient-calculation"], [266, "backward-gradient-calculation"], [268, "backward-gradient-calculation"], [269, "backward-gradient-calculation"], [270, "backward-gradient-calculation"], [272, "backward-gradient-calculation"], [273, "backward-gradient-calculation"], [274, "backward-gradient-calculation"], [275, "backward-gradient-calculation"], [280, "backward-gradient-calculation"], [281, "backward-gradient-calculation"], [282, "backward-gradient-calculation"], [283, "backward-gradient-calculation"], [284, "backward-gradient-calculation"], [285, "backward-gradient-calculation"], [326, "backward-gradient-calculation"], [327, "backward-gradient-calculation"], [328, "backward-gradient-calculation"], [329, "backward-gradient-calculation"], [330, "backward-gradient-calculation"], [331, "backward-gradient-calculation"], [332, "backward-gradient-calculation"], [333, "backward-gradient-calculation"], [334, "backward-gradient-calculation"], [335, "backward-gradient-calculation"], [336, "backward-gradient-calculation"], [348, "backward-gradient-calculation"], [349, "backward-gradient-calculation"], [350, "backward-gradient-calculation"], [351, "backward-gradient-calculation"], [352, "backward-gradient-calculation"], [353, "backward-gradient-calculation"], [354, "backward-gradient-calculation"], [355, "backward-gradient-calculation"], [356, "backward-gradient-calculation"], [357, "backward-gradient-calculation"], [358, "backward-gradient-calculation"], [359, "backward-gradient-calculation"], [360, "backward-gradient-calculation"], [361, "backward-gradient-calculation"], [362, "backward-gradient-calculation"], [363, "backward-gradient-calculation"], [364, "backward-gradient-calculation"], [365, "backward-gradient-calculation"], [366, "backward-gradient-calculation"], [367, "backward-gradient-calculation"], [368, "backward-gradient-calculation"], [369, "backward-gradient-calculation"], [370, "backward-gradient-calculation"], [371, "backward-gradient-calculation"], [372, "backward-gradient-calculation"], [374, "backward-gradient-calculation"], [375, "backward-gradient-calculation"], [377, "backward-gradient-calculation"], [379, "backward-gradient-calculation"], [380, "backward-gradient-calculation"], [381, "backward-gradient-calculation"], [382, "backward-gradient-calculation"], [383, "backward-gradient-calculation"], [385, "backward-gradient-calculation"], [386, "backward-gradient-calculation"], [387, "backward-gradient-calculation"], [388, "backward-gradient-calculation"], [389, "backward-gradient-calculation"], [390, "backward-gradient-calculation"], [391, "backward-gradient-calculation"]], "Behavior": [[198, "behavior"], [199, "behavior"], [200, "behavior"], [277, "behavior"], [278, "behavior"], [279, "behavior"]], "Benefits": [[314, "benefits"]], "Binary Functions": [[347, null]], "Bottleneck Configuration": [[86, "bottleneck-configuration"], [87, "bottleneck-configuration"]], "Broadcasting Rules": [[374, "broadcasting-rules"]], "CIFAR10": [[5, null]], "CIFAR100": [[6, null]], "Class Signature": [[0, "class-signature"], [1, "class-signature"], [2, "class-signature"], [5, "class-signature"], [6, "class-signature"], [7, "class-signature"], [8, "class-signature"], [27, "class-signature"], [29, "class-signature"], [30, "class-signature"], [44, "class-signature"], [49, "class-signature"], [50, "class-signature"], [63, "class-signature"], [67, "class-signature"], [72, "class-signature"], [76, "class-signature"], [80, "class-signature"], [81, "class-signature"], [82, "class-signature"], [83, "class-signature"], [93, "class-signature"], [102, "class-signature"], [113, "class-signature"], [120, "class-signature"], [130, "class-signature"], [135, "class-signature"], [140, "class-signature"], [142, "class-signature"], [146, "class-signature"], [150, "class-signature"], [151, "class-signature"], [152, "class-signature"], [153, "class-signature"], [154, "class-signature"], [155, "class-signature"], [156, "class-signature"], [157, "class-signature"], [212, "class-signature"], [213, "class-signature"], [214, "class-signature"], [215, "class-signature"], [216, "class-signature"], [217, "class-signature"], [218, "class-signature"], [219, "class-signature"], [229, "class-signature"], [230, "class-signature"], [231, "class-signature"], [232, "class-signature"], [233, "class-signature"], [234, "class-signature"], [235, "class-signature"], [236, "class-signature"], [237, "class-signature"], [238, "class-signature"], [239, "class-signature"], [240, "class-signature"], [242, "class-signature"], [243, "class-signature"], [245, "class-signature"], [246, "class-signature"], [247, "class-signature"], [249, "class-signature"], [250, "class-signature"], [251, "class-signature"], [252, "class-signature"], [253, "class-signature"], [254, "class-signature"], [255, "class-signature"], [258, "class-signature"], [259, "class-signature"], [260, "class-signature"], [262, "class-signature"], [263, "class-signature"], [264, "class-signature"], [265, "class-signature"], [266, "class-signature"], [268, "class-signature"], [269, "class-signature"], [270, "class-signature"], [271, "class-signature"], [272, "class-signature"], [273, "class-signature"], [274, "class-signature"], [275, "class-signature"], [277, "class-signature"], [278, "class-signature"], [279, "class-signature"], [280, "class-signature"], [281, "class-signature"], [282, "class-signature"], [283, "class-signature"], [284, "class-signature"], [285, "class-signature"], [287, "class-signature"], [289, "class-signature"], [290, "class-signature"], [291, "class-signature"], [292, "class-signature"], [293, "class-signature"], [295, "class-signature"], [298, "class-signature"], [300, "class-signature"], [301, "class-signature"], [302, "class-signature"], [303, "class-signature"], [304, "class-signature"], [305, "class-signature"], [306, "class-signature"], [307, "class-signature"], [308, "class-signature"], [309, "class-signature"], [310, "class-signature"], [325, "class-signature"], [392, "class-signature"], [393, "class-signature"], [394, "class-signature"], [395, "class-signature"], [396, "class-signature"], [397, "class-signature"], [398, "class-signature"], [399, "class-signature"], [400, "class-signature"], [401, "class-signature"]], "Combining multiple datasets": [[0, null]], "Conclusion": [[3, "conclusion"], [10, "conclusion"], [12, "conclusion"], [13, "conclusion"], [14, "conclusion"], [297, "conclusion"], [312, "conclusion"], [313, "conclusion"], [314, "conclusion"], [324, "conclusion"], [393, "conclusion"], [403, "conclusion"]], "Configurations": [[49, "configurations"]], "Containers": [[158, null]], "Conv-BatchNorm-ReLU": [[220, null]], "ConvNeXt": [[29, null]], "ConvNeXt_V2": [[30, null]], "ConvNets": [[75, null], [144, "convnets"]], "Convolution Functions": [[173, null], [183, null]], "Convolution Layers": [[248, null], [257, null]], "Core Components": [[14, "core-components"]], "Create a Tensor from a list": [[373, null]], "Creating a Parameter": [[152, null]], "Creating a tensor with gradient tracking": [[325, null]], "Custom Data Pipelines": [[3, "custom-data-pipelines"]], "Custom Pipelines": [[403, "custom-pipelines"]], "Defining a Custom Optimizer": [[299, null]], "Defining a custom dataset": [[2, null]], "Defining a custom module": [[151, null]], "Defining a custom optimizer": [[298, null]], "DenseNet": [[44, null]], "Depthwise Separable Convolution": [[220, null]], "Description": [[114, "description"], [115, "description"], [116, "description"], [117, "description"], [118, "description"], [119, "description"], [131, "description"], [132, "description"], [133, "description"], [315, "description"]], "Details": [[88, "details"], [89, "details"], [90, "details"], [91, "details"], [92, "details"]], "Differences from nn.Transformer": [[146, "differences-from-nn-transformer"]], "Dropout Functions": [[182, null], [183, null]], "Dropout Layers": [[256, null], [257, null]], "EfficientNet": [[49, null]], "EfficientNet Configurations": [[49, "id1"]], "EfficientNet_V2": [[50, null]], "Einops Functions": [[11, null]], "Embedding Process": [[208, "embedding-process"]], "Example": [[3, null], [3, null], [3, null], [10, null], [10, null], [16, "example"], [17, "example"], [18, "example"], [20, "example"], [21, "example"], [22, "example"], [23, "example"], [24, "example"], [25, "example"], [26, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [84, "example"], [85, "example"], [174, "example"], [297, null], [297, null], [297, null], [312, "example"], [314, "example"], [317, "example"], [319, "example"], [320, "example"], [321, "example"], [322, "example"], [323, "example"], [324, null], [324, null], [324, null], [337, "example"], [338, "example"], [339, "example"], [340, "example"], [341, "example"], [343, "example"], [344, "example"], [345, "example"], [346, "example"], [348, "example"], [349, "example"], [350, "example"], [351, "example"], [352, "example"], [353, "example"], [354, "example"], [355, "example"], [357, "example"], [359, "example"], [361, "example"], [362, "example"], [363, "example"], [364, "example"], [365, "example"], [366, "example"], [367, "example"], [368, "example"], [369, "example"], [370, "example"], [371, "example"], [372, "example"], [375, "example"], [377, "example"], [381, "example"], [383, "example"], [385, "example"], [386, "example"], [388, "example"], [389, "example"], [390, "example"], [391, "example"]], "Example 1: Adding a new axis to a 1D tensor": [[313, null]], "Example 2: Adding a new axis to a 2D tensor": [[313, null]], "Example 3: Adding a new axis to align tensors for broadcasting": [[313, null]], "Example Usage": [[14, "example-usage"], [64, "example-usage"], [65, "example-usage"], [66, "example-usage"], [73, "example-usage"], [74, "example-usage"], [76, "example-usage"], [77, "example-usage"], [78, "example-usage"], [79, "example-usage"], [126, "example-usage"], [127, "example-usage"], [128, "example-usage"], [129, "example-usage"], [134, "example-usage"], [211, "example-usage"], [392, "example-usage"], [393, "example-usage"], [403, "example-usage"]], "Example Use Cases": [[316, "example-use-cases"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [12, "examples"], [13, "examples"], [15, "examples"], [27, "examples"], [28, "examples"], [29, "examples"], [30, "examples"], [31, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [36, "examples"], [37, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [44, "examples"], [45, "examples"], [46, "examples"], [47, "examples"], [48, "examples"], [49, "examples"], [51, "examples"], [52, "examples"], [53, "examples"], [54, "examples"], [55, "examples"], [56, "examples"], [57, "examples"], [58, "examples"], [59, "examples"], [60, "examples"], [61, "examples"], [62, "examples"], [67, "examples"], [82, "examples"], [86, "examples"], [87, "examples"], [93, "examples"], [94, "examples"], [95, "examples"], [96, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [105, "examples"], [106, "examples"], [107, "examples"], [108, "examples"], [109, "examples"], [110, "examples"], [111, "examples"], [112, "examples"], [114, "examples"], [115, "examples"], [116, "examples"], [117, "examples"], [118, "examples"], [119, "examples"], [121, "examples"], [122, "examples"], [123, "examples"], [124, "examples"], [125, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [145, "examples"], [146, "examples"], [147, "examples"], [148, "examples"], [150, "examples"], [151, "examples"], [152, "examples"], [153, "examples"], [154, "examples"], [155, "examples"], [156, "examples"], [157, "examples"], [159, "examples"], [160, "examples"], [162, "examples"], [163, "examples"], [164, "examples"], [165, "examples"], [166, "examples"], [167, "examples"], [169, "examples"], [170, "examples"], [171, "examples"], [172, "examples"], [175, "examples"], [176, "examples"], [177, "examples"], [178, "examples"], [179, "examples"], [180, "examples"], [181, "examples"], [184, "examples"], [186, "examples"], [187, "examples"], [188, "examples"], [189, "examples"], [191, "examples"], [192, "examples"], [193, "examples"], [194, "examples"], [196, "examples"], [197, "examples"], [198, "examples"], [199, "examples"], [200, "examples"], [201, "examples"], [202, "examples"], [203, "examples"], [205, "examples"], [206, "examples"], [207, "examples"], [208, "examples"], [210, "examples"], [212, "examples"], [213, "examples"], [214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [221, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [231, "examples"], [232, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [236, "examples"], [237, "examples"], [238, "examples"], [239, "examples"], [240, "examples"], [243, "examples"], [245, "examples"], [246, "examples"], [247, "examples"], [249, "examples"], [250, "examples"], [251, "examples"], [252, "examples"], [253, "examples"], [254, "examples"], [255, "examples"], [258, "examples"], [259, "examples"], [260, "examples"], [262, "examples"], [263, "examples"], [264, "examples"], [265, "examples"], [266, "examples"], [268, "examples"], [269, "examples"], [270, "examples"], [271, "examples"], [272, "examples"], [273, "examples"], [274, "examples"], [275, "examples"], [277, "examples"], [278, "examples"], [279, "examples"], [280, "examples"], [281, "examples"], [282, "examples"], [283, "examples"], [284, "examples"], [285, "examples"], [287, "examples"], [295, "examples"], [298, "examples"], [299, "examples"], [300, "examples"], [301, "examples"], [302, "examples"], [303, "examples"], [304, "examples"], [305, "examples"], [306, "examples"], [307, "examples"], [308, "examples"], [309, "examples"], [310, "examples"], [315, "examples"], [325, "examples"], [326, "examples"], [327, "examples"], [328, "examples"], [329, "examples"], [331, "examples"], [332, "examples"], [333, "examples"], [334, "examples"], [335, "examples"], [336, "examples"], [342, "examples"], [356, "examples"], [358, "examples"], [360, "examples"], [373, "examples"], [374, "examples"], [376, "examples"], [379, "examples"], [380, "examples"], [382, "examples"], [384, "examples"], [387, "examples"], [394, "examples"], [395, "examples"], [396, "examples"], [397, "examples"], [398, "examples"], [399, "examples"], [400, "examples"], [401, "examples"]], "FashionMNIST": [[7, null]], "Features": [[15, "features"]], "Forward Calculation": [[16, "forward-calculation"], [17, "forward-calculation"], [18, "forward-calculation"], [20, "forward-calculation"], [21, "forward-calculation"], [22, "forward-calculation"], [23, "forward-calculation"], [24, "forward-calculation"], [25, "forward-calculation"], [26, "forward-calculation"], [102, "forward-calculation"], [113, "forward-calculation"], [120, "forward-calculation"], [130, "forward-calculation"], [153, "forward-calculation"], [154, "forward-calculation"], [155, "forward-calculation"], [156, "forward-calculation"], [157, "forward-calculation"], [159, "forward-calculation"], [160, "forward-calculation"], [162, "forward-calculation"], [163, "forward-calculation"], [164, "forward-calculation"], [165, "forward-calculation"], [166, "forward-calculation"], [167, "forward-calculation"], [174, "forward-calculation"], [177, "forward-calculation"], [184, "forward-calculation"], [186, "forward-calculation"], [198, "forward-calculation"], [199, "forward-calculation"], [200, "forward-calculation"], [210, "forward-calculation"], [212, "forward-calculation"], [213, "forward-calculation"], [214, "forward-calculation"], [215, "forward-calculation"], [216, "forward-calculation"], [217, "forward-calculation"], [218, "forward-calculation"], [219, "forward-calculation"], [223, "forward-calculation"], [224, "forward-calculation"], [227, "forward-calculation"], [228, "forward-calculation"], [229, "forward-calculation"], [230, "forward-calculation"], [231, "forward-calculation"], [232, "forward-calculation"], [233, "forward-calculation"], [234, "forward-calculation"], [235, "forward-calculation"], [236, "forward-calculation"], [237, "forward-calculation"], [238, "forward-calculation"], [239, "forward-calculation"], [240, "forward-calculation"], [243, "forward-calculation"], [245, "forward-calculation"], [246, "forward-calculation"], [247, "forward-calculation"], [249, "forward-calculation"], [250, "forward-calculation"], [251, "forward-calculation"], [252, "forward-calculation"], [253, "forward-calculation"], [254, "forward-calculation"], [255, "forward-calculation"], [258, "forward-calculation"], [259, "forward-calculation"], [260, "forward-calculation"], [262, "forward-calculation"], [263, "forward-calculation"], [264, "forward-calculation"], [265, "forward-calculation"], [266, "forward-calculation"], [268, "forward-calculation"], [269, "forward-calculation"], [270, "forward-calculation"], [271, "forward-calculation"], [272, "forward-calculation"], [273, "forward-calculation"], [274, "forward-calculation"], [275, "forward-calculation"], [277, "forward-calculation"], [278, "forward-calculation"], [279, "forward-calculation"], [280, "forward-calculation"], [281, "forward-calculation"], [282, "forward-calculation"], [283, "forward-calculation"], [284, "forward-calculation"], [285, "forward-calculation"], [326, "forward-calculation"], [327, "forward-calculation"], [328, "forward-calculation"], [329, "forward-calculation"], [330, "forward-calculation"], [331, "forward-calculation"], [332, "forward-calculation"], [333, "forward-calculation"], [334, "forward-calculation"], [335, "forward-calculation"], [336, "forward-calculation"], [348, "forward-calculation"], [349, "forward-calculation"], [350, "forward-calculation"], [351, "forward-calculation"], [352, "forward-calculation"], [353, "forward-calculation"], [354, "forward-calculation"], [355, "forward-calculation"], [356, "forward-calculation"], [357, "forward-calculation"], [358, "forward-calculation"], [359, "forward-calculation"], [360, "forward-calculation"], [361, "forward-calculation"], [362, "forward-calculation"], [363, "forward-calculation"], [364, "forward-calculation"], [365, "forward-calculation"], [366, "forward-calculation"], [367, "forward-calculation"], [368, "forward-calculation"], [369, "forward-calculation"], [370, "forward-calculation"], [371, "forward-calculation"], [372, "forward-calculation"], [375, "forward-calculation"], [377, "forward-calculation"], [379, "forward-calculation"], [380, "forward-calculation"], [381, "forward-calculation"], [382, "forward-calculation"], [383, "forward-calculation"], [385, "forward-calculation"], [386, "forward-calculation"], [387, "forward-calculation"], [388, "forward-calculation"], [389, "forward-calculation"], [390, "forward-calculation"], [391, "forward-calculation"], [394, "forward-calculation"], [395, "forward-calculation"], [396, "forward-calculation"], [397, "forward-calculation"], [398, "forward-calculation"], [399, "forward-calculation"], [400, "forward-calculation"], [401, "forward-calculation"]], "Forward Method": [[289, "forward-method"], [290, "forward-method"], [291, "forward-method"], [292, "forward-method"], [293, "forward-method"]], "Forward Pass": [[140, "forward-pass"]], "Function Signature": [[12, "function-signature"], [13, "function-signature"], [16, "function-signature"], [17, "function-signature"], [18, "function-signature"], [20, "function-signature"], [21, "function-signature"], [22, "function-signature"], [23, "function-signature"], [24, "function-signature"], [25, "function-signature"], [26, "function-signature"], [28, "function-signature"], [31, "function-signature"], [32, "function-signature"], [33, "function-signature"], [34, "function-signature"], [35, "function-signature"], [36, "function-signature"], [37, "function-signature"], [38, "function-signature"], [39, "function-signature"], [40, "function-signature"], [41, "function-signature"], [42, "function-signature"], [43, "function-signature"], [45, "function-signature"], [46, "function-signature"], [47, "function-signature"], [48, "function-signature"], [51, "function-signature"], [52, "function-signature"], [53, "function-signature"], [54, "function-signature"], [55, "function-signature"], [56, "function-signature"], [57, "function-signature"], [58, "function-signature"], [59, "function-signature"], [60, "function-signature"], [61, "function-signature"], [62, "function-signature"], [64, "function-signature"], [65, "function-signature"], [66, "function-signature"], [68, "function-signature"], [69, "function-signature"], [70, "function-signature"], [71, "function-signature"], [73, "function-signature"], [74, "function-signature"], [77, "function-signature"], [78, "function-signature"], [79, "function-signature"], [84, "function-signature"], [85, "function-signature"], [86, "function-signature"], [87, "function-signature"], [88, "function-signature"], [89, "function-signature"], [90, "function-signature"], [91, "function-signature"], [92, "function-signature"], [94, "function-signature"], [95, "function-signature"], [96, "function-signature"], [97, "function-signature"], [98, "function-signature"], [99, "function-signature"], [100, "function-signature"], [101, "function-signature"], [103, "function-signature"], [104, "function-signature"], [105, "function-signature"], [106, "function-signature"], [107, "function-signature"], [108, "function-signature"], [109, "function-signature"], [110, "function-signature"], [111, "function-signature"], [112, "function-signature"], [114, "function-signature"], [115, "function-signature"], [116, "function-signature"], [117, "function-signature"], [118, "function-signature"], [119, "function-signature"], [121, "function-signature"], [122, "function-signature"], [123, "function-signature"], [124, "function-signature"], [125, "function-signature"], [126, "function-signature"], [127, "function-signature"], [128, "function-signature"], [129, "function-signature"], [131, "function-signature"], [132, "function-signature"], [133, "function-signature"], [134, "function-signature"], [136, "function-signature"], [137, "function-signature"], [138, "function-signature"], [139, "function-signature"], [141, "function-signature"], [143, "function-signature"], [145, "function-signature"], [147, "function-signature"], [148, "function-signature"], [159, "function-signature"], [160, "function-signature"], [162, "function-signature"], [163, "function-signature"], [164, "function-signature"], [165, "function-signature"], [166, "function-signature"], [167, "function-signature"], [169, "function-signature"], [170, "function-signature"], [171, "function-signature"], [172, "function-signature"], [174, "function-signature"], [175, "function-signature"], [176, "function-signature"], [177, "function-signature"], [178, "function-signature"], [179, "function-signature"], [180, "function-signature"], [181, "function-signature"], [184, "function-signature"], [186, "function-signature"], [187, "function-signature"], [188, "function-signature"], [189, "function-signature"], [191, "function-signature"], [192, "function-signature"], [193, "function-signature"], [194, "function-signature"], [196, "function-signature"], [197, "function-signature"], [198, "function-signature"], [199, "function-signature"], [200, "function-signature"], [201, "function-signature"], [202, "function-signature"], [203, "function-signature"], [205, "function-signature"], [206, "function-signature"], [207, "function-signature"], [208, "function-signature"], [210, "function-signature"], [211, "function-signature"], [221, "function-signature"], [223, "function-signature"], [224, "function-signature"], [225, "function-signature"], [226, "function-signature"], [227, "function-signature"], [228, "function-signature"], [312, "function-signature"], [314, "function-signature"], [315, "function-signature"], [317, "function-signature"], [319, "function-signature"], [320, "function-signature"], [321, "function-signature"], [322, "function-signature"], [323, "function-signature"], [326, "function-signature"], [327, "function-signature"], [328, "function-signature"], [329, "function-signature"], [330, "function-signature"], [331, "function-signature"], [332, "function-signature"], [333, "function-signature"], [334, "function-signature"], [335, "function-signature"], [336, "function-signature"], [337, "function-signature"], [338, "function-signature"], [339, "function-signature"], [340, "function-signature"], [341, "function-signature"], [342, "function-signature"], [343, "function-signature"], [344, "function-signature"], [345, "function-signature"], [346, "function-signature"], [348, "function-signature"], [349, "function-signature"], [350, "function-signature"], [351, "function-signature"], [352, "function-signature"], [353, "function-signature"], [354, "function-signature"], [355, "function-signature"], [356, "function-signature"], [357, "function-signature"], [358, "function-signature"], [359, "function-signature"], [360, "function-signature"], [361, "function-signature"], [362, "function-signature"], [363, "function-signature"], [364, "function-signature"], [365, "function-signature"], [366, "function-signature"], [367, "function-signature"], [368, "function-signature"], [369, "function-signature"], [370, "function-signature"], [371, "function-signature"], [372, "function-signature"], [373, "function-signature"], [374, "function-signature"], [375, "function-signature"], [376, "function-signature"], [377, "function-signature"], [379, "function-signature"], [380, "function-signature"], [381, "function-signature"], [382, "function-signature"], [383, "function-signature"], [384, "function-signature"], [385, "function-signature"], [386, "function-signature"], [387, "function-signature"], [388, "function-signature"], [389, "function-signature"], [390, "function-signature"], [391, "function-signature"]], "Fused Layers": [[220, null]], "Future Work": [[4, "future-work"]], "Getting Started": [[299, "getting-started"]], "How It Works": [[312, "how-it-works"], [314, "how-it-works"]], "Hyperparameter Configuration": [[100, "hyperparameter-configuration"], [101, "hyperparameter-configuration"]], "Image Datasets": [[9, null]], "Image Transformations": [[402, null]], "Inception": [[63, null]], "InceptionNeXt": [[67, null]], "InceptionResNet": [[72, null]], "Indexing and slicing": [[325, null]], "Inspecting Optimizer State": [[299, null], [300, null], [301, null], [302, null], [303, null], [304, null], [305, null], [306, null], [307, null], [308, null], [309, null], [310, null]], "Integration with lucid": [[3, "integration-with-lucid"], [297, "integration-with-lucid"], [324, "integration-with-lucid"], [403, "integration-with-lucid"]], "Iterating through a tensor": [[325, null]], "Key Components": [[3, "key-components"], [297, "key-components"]], "Key Features": [[4, "key-features"], [14, "key-features"], [126, "key-features"], [127, "key-features"], [128, "key-features"], [129, "key-features"], [134, "key-features"], [299, "key-features"], [324, "key-features"]], "Key Transformations": [[403, "key-transformations"]], "Layer Configuration": [[94, "layer-configuration"], [95, "layer-configuration"], [96, "layer-configuration"], [97, "layer-configuration"], [98, "layer-configuration"], [99, "layer-configuration"]], "LeNet": [[76, null]], "Learn More": [[324, null]], "Limitations": [[14, "limitations"]], "Linear Algebra Operations": [[19, null]], "Linear Functions": [[183, null], [185, null]], "Linear Layers": [[257, null], [261, null]], "Loading a custom dataset": [[1, null]], "Loss Functions": [[183, null], [190, null]], "Loss Layers": [[257, null], [267, null]], "Lucid": [[14, null]], "MNIST": [[8, null]], "Mathematical Definition": [[12, "mathematical-definition"], [13, "mathematical-definition"]], "Mathematical Details": [[242, "mathematical-details"], [289, "mathematical-details"], [290, "mathematical-details"], [291, "mathematical-details"], [292, "mathematical-details"], [293, "mathematical-details"]], "Mathematical Expression": [[194, "mathematical-expression"], [384, "mathematical-expression"]], "Matrix Multiplication Rules": [[330, "matrix-multiplication-rules"]], "Metadata Captured": [[315, "metadata-captured"]], "Methods": [[0, "methods"], [1, "methods"], [2, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [72, "methods"], [76, "methods"], [135, "methods"], [151, "methods"], [152, "methods"], [298, "methods"], [325, "methods"]], "MobileNet": [[80, null]], "MobileNet_V2": [[81, null]], "MobileNet_V3": [[82, null]], "MobileNet_V4": [[83, null]], "Modules": [[257, null]], "Normalization Functions": [[183, null], [195, null]], "Normalization Layers": [[257, null], [276, null]], "Notes": [[14, "notes"]], "Optimizers": [[311, null]], "Organizing Models": [[297, "organizing-models"]], "Overview": [[3, "overview"], [4, "overview"], [10, "overview"], [14, "overview"], [63, "overview"], [64, "overview"], [65, "overview"], [66, "overview"], [72, "overview"], [73, "overview"], [74, "overview"], [76, "overview"], [77, "overview"], [78, "overview"], [79, "overview"], [80, "overview"], [81, "overview"], [82, "overview"], [83, "overview"], [88, "overview"], [89, "overview"], [90, "overview"], [91, "overview"], [92, "overview"], [103, "overview"], [104, "overview"], [105, "overview"], [106, "overview"], [107, "overview"], [108, "overview"], [109, "overview"], [110, "overview"], [121, "overview"], [122, "overview"], [123, "overview"], [124, "overview"], [125, "overview"], [242, "overview"], [289, "overview"], [290, "overview"], [291, "overview"], [292, "overview"], [293, "overview"], [297, "overview"], [299, "overview"], [324, "overview"], [403, "overview"]], "Parameters": [[1, "parameters"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [12, "parameters"], [13, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [20, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [56, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [76, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [116, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [124, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [137, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [145, "parameters"], [146, "parameters"], [147, "parameters"], [148, "parameters"], [150, "parameters"], [152, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [156, "parameters"], [157, "parameters"], [159, "parameters"], [160, "parameters"], [162, "parameters"], [163, "parameters"], [164, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [169, "parameters"], [170, "parameters"], [171, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [184, "parameters"], [186, "parameters"], [187, "parameters"], [188, "parameters"], [189, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [194, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [200, "parameters"], [201, "parameters"], [202, "parameters"], [203, "parameters"], [205, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [210, "parameters"], [211, "parameters"], [212, "parameters"], [213, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [218, "parameters"], [219, "parameters"], [221, "parameters"], [223, "parameters"], [224, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [230, "parameters"], [233, "parameters"], [234, "parameters"], [236, "parameters"], [237, "parameters"], [238, "parameters"], [240, "parameters"], [242, "parameters"], [243, "parameters"], [245, "parameters"], [246, "parameters"], [247, "parameters"], [249, "parameters"], [250, "parameters"], [251, "parameters"], [252, "parameters"], [253, "parameters"], [254, "parameters"], [255, "parameters"], [258, "parameters"], [259, "parameters"], [260, "parameters"], [262, "parameters"], [263, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [268, "parameters"], [269, "parameters"], [270, "parameters"], [271, "parameters"], [272, "parameters"], [273, "parameters"], [274, "parameters"], [275, "parameters"], [277, "parameters"], [278, "parameters"], [279, "parameters"], [280, "parameters"], [281, "parameters"], [282, "parameters"], [283, "parameters"], [284, "parameters"], [285, "parameters"], [287, "parameters"], [289, "parameters"], [290, "parameters"], [291, "parameters"], [292, "parameters"], [293, "parameters"], [295, "parameters"], [300, "parameters"], [301, "parameters"], [302, "parameters"], [303, "parameters"], [304, "parameters"], [305, "parameters"], [306, "parameters"], [307, "parameters"], [308, "parameters"], [309, "parameters"], [310, "parameters"], [314, "parameters"], [315, "parameters"], [317, "parameters"], [319, "parameters"], [320, "parameters"], [321, "parameters"], [322, "parameters"], [323, "parameters"], [325, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [330, "parameters"], [331, "parameters"], [332, "parameters"], [333, "parameters"], [334, "parameters"], [335, "parameters"], [336, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [342, "parameters"], [343, "parameters"], [344, "parameters"], [345, "parameters"], [346, "parameters"], [348, "parameters"], [349, "parameters"], [350, "parameters"], [351, "parameters"], [352, "parameters"], [353, "parameters"], [354, "parameters"], [355, "parameters"], [356, "parameters"], [357, "parameters"], [358, "parameters"], [359, "parameters"], [360, "parameters"], [361, "parameters"], [362, "parameters"], [363, "parameters"], [364, "parameters"], [365, "parameters"], [366, "parameters"], [367, "parameters"], [368, "parameters"], [369, "parameters"], [370, "parameters"], [371, "parameters"], [372, "parameters"], [373, "parameters"], [374, "parameters"], [375, "parameters"], [376, "parameters"], [377, "parameters"], [379, "parameters"], [380, "parameters"], [381, "parameters"], [382, "parameters"], [383, "parameters"], [384, "parameters"], [385, "parameters"], [386, "parameters"], [387, "parameters"], [388, "parameters"], [389, "parameters"], [390, "parameters"], [391, "parameters"], [392, "parameters"], [393, "parameters"], [394, "parameters"], [395, "parameters"], [396, "parameters"], [397, "parameters"], [398, "parameters"], [399, "parameters"], [400, "parameters"], [401, "parameters"]], "Performing backpropagation": [[325, null]], "Pooling Functions": [[183, null], [204, null]], "Pooling Layers": [[257, null], [286, null]], "Potential Pitfalls": [[312, "potential-pitfalls"], [314, "potential-pitfalls"]], "Properties": [[152, "properties"], [325, "properties"]], "Raises": [[16, "raises"], [17, "raises"], [18, "raises"], [20, "raises"], [21, "raises"], [22, "raises"], [23, "raises"], [24, "raises"], [25, "raises"], [26, "raises"]], "Random Number Generations": [[318, null]], "References": [[5, "references"], [6, "references"], [7, "references"], [8, "references"], [218, "references"], [299, "references"]], "Regularization": [[176, "regularization"]], "ResNeSt": [[93, null]], "ResNeXt": [[113, null]], "ResNet": [[102, null]], "Return Values": [[384, "return-values"]], "Returns": [[12, "returns"], [13, "returns"], [16, "returns"], [17, "returns"], [18, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [28, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [40, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [45, "returns"], [46, "returns"], [47, "returns"], [48, "returns"], [51, "returns"], [52, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [58, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [68, "returns"], [69, "returns"], [70, "returns"], [71, "returns"], [73, "returns"], [74, "returns"], [77, "returns"], [78, "returns"], [79, "returns"], [84, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [106, "returns"], [107, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [111, "returns"], [112, "returns"], [114, "returns"], [115, "returns"], [116, "returns"], [117, "returns"], [118, "returns"], [119, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [124, "returns"], [125, "returns"], [126, "returns"], [127, "returns"], [128, "returns"], [129, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [136, "returns"], [137, "returns"], [138, "returns"], [139, "returns"], [141, "returns"], [143, "returns"], [145, "returns"], [147, "returns"], [148, "returns"], [159, "returns"], [160, "returns"], [162, "returns"], [163, "returns"], [164, "returns"], [165, "returns"], [166, "returns"], [167, "returns"], [169, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [174, "returns"], [175, "returns"], [176, "returns"], [177, "returns"], [178, "returns"], [179, "returns"], [180, "returns"], [181, "returns"], [184, "returns"], [186, "returns"], [187, "returns"], [188, "returns"], [189, "returns"], [191, "returns"], [192, "returns"], [193, "returns"], [194, "returns"], [196, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [200, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [205, "returns"], [206, "returns"], [207, "returns"], [208, "returns"], [210, "returns"], [211, "returns"], [219, "returns"], [221, "returns"], [223, "returns"], [224, "returns"], [225, "returns"], [226, "returns"], [227, "returns"], [228, "returns"], [235, "returns"], [287, "returns"], [312, "returns"], [314, "returns"], [317, "returns"], [319, "returns"], [320, "returns"], [321, "returns"], [322, "returns"], [323, "returns"], [326, "returns"], [327, "returns"], [328, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, "returns"], [333, "returns"], [334, "returns"], [335, "returns"], [336, "returns"], [337, "returns"], [338, "returns"], [339, "returns"], [340, "returns"], [341, "returns"], [342, "returns"], [343, "returns"], [344, "returns"], [345, "returns"], [346, "returns"], [348, "returns"], [349, "returns"], [350, "returns"], [351, "returns"], [352, "returns"], [353, "returns"], [354, "returns"], [355, "returns"], [356, "returns"], [357, "returns"], [358, "returns"], [359, "returns"], [360, "returns"], [361, "returns"], [362, "returns"], [363, "returns"], [364, "returns"], [365, "returns"], [366, "returns"], [367, "returns"], [368, "returns"], [369, "returns"], [370, "returns"], [371, "returns"], [372, "returns"], [373, "returns"], [374, "returns"], [375, "returns"], [376, "returns"], [377, "returns"], [379, "returns"], [380, "returns"], [381, "returns"], [382, "returns"], [383, "returns"], [385, "returns"], [386, "returns"], [387, "returns"], [388, "returns"], [389, "returns"], [390, "returns"], [391, "returns"]], "SENet": [[120, null]], "SKNet": [[130, null]], "See Also": [[299, "see-also"]], "Selective Kernel": [[220, null]], "Sparse Layers": [[257, null], [288, null]], "Squeeze-and-Excitation": [[220, null]], "Summary Table": [[145, "summary-table"]], "Tensor Generating Functions": [[347, null]], "Tensor Operations": [[347, null]], "Tensor Utilites": [[378, null]], "Transformer": [[146, null]], "Transformer Layers": [[257, null], [294, null]], "Transformers": [[144, "transformers"], [149, null]], "Type Definitions": [[316, "type-definitions"]], "Unary Functions": [[347, null]], "Usage": [[4, "usage"], [59, "usage"], [60, "usage"], [61, "usage"], [62, "usage"], [150, "usage"], [211, "usage"], [312, "usage"], [313, "usage"], [314, "usage"], [379, "usage"], [392, "usage"], [393, "usage"], [403, "usage"]], "Usage Example": [[88, "usage-example"], [89, "usage-example"], [90, "usage-example"], [91, "usage-example"], [92, "usage-example"], [242, "usage-example"], [289, "usage-example"], [290, "usage-example"], [291, "usage-example"], [292, "usage-example"], [293, "usage-example"]], "Use another Tensor as input": [[373, null]], "Using DataLoader with ConcatDataset": [[1, null]], "Using the ASGD Optimizer": [[300, null]], "Using the Adadelta Optimizer": [[301, null]], "Using the Adagrad Optimizer": [[302, null]], "Using the Adam Optimizer": [[303, null]], "Using the AdamW Optimizer": [[304, null]], "Using the Adamax Optimizer": [[305, null]], "Using the NAdam Optimizer": [[306, null]], "Using the RAdam Optimizer": [[307, null]], "Using the RMSprop Optimizer": [[308, null]], "Using the Rprop Optimizer": [[309, null]], "Using the SGD Optimizer": [[310, null]], "Utility Functions": [[183, null], [209, null]], "VGGNet": [[135, null]], "Vision Layers": [[257, null], [296, null]], "Weight Initializations": [[222, null]], "Why Use Type Aliases?": [[316, null]], "Xception": [[140, null]], "ZFNet": [[142, null]], "alexnet": [[28, null]], "convnext_base": [[31, null]], "convnext_large": [[32, null]], "convnext_small": [[33, null]], "convnext_tiny": [[34, null]], "convnext_v2_atto": [[35, null]], "convnext_v2_base": [[36, null]], "convnext_v2_femto": [[37, null]], "convnext_v2_huge": [[38, null]], "convnext_v2_large": [[39, null]], "convnext_v2_nano": [[40, null]], "convnext_v2_pico": [[41, null]], "convnext_v2_tiny": [[42, null]], "convnext_xlarge": [[43, null]], "data.ConcatDataset": [[0, null]], "data.DataLoader": [[1, null]], "data.Dataset": [[2, null]], "densenet_121": [[45, null]], "densenet_169": [[46, null]], "densenet_201": [[47, null]], "densenet_264": [[48, null]], "efficientnet_b0": [[51, null]], "efficientnet_b1": [[52, null]], "efficientnet_b2": [[53, null]], "efficientnet_b3": [[54, null]], "efficientnet_b4": [[55, null]], "efficientnet_b5": [[56, null]], "efficientnet_b6": [[57, null]], "efficientnet_b7": [[58, null]], "efficientnet_v2_l": [[59, null]], "efficientnet_v2_m": [[60, null]], "efficientnet_v2_s": [[61, null]], "efficientnet_v2_xl": [[62, null]], "inception_next_atto": [[68, null]], "inception_next_base": [[69, null]], "inception_next_small": [[70, null]], "inception_next_tiny": [[71, null]], "inception_resnet_v1": [[73, null]], "inception_resnet_v2": [[74, null]], "inception_v1": [[64, null]], "inception_v3": [[65, null]], "inception_v4": [[66, null]], "lenet_1": [[77, null]], "lenet_4": [[78, null]], "lenet_5": [[79, null]], "lucid.Tensor": [[325, null]], "lucid.abs": [[348, null]], "lucid.add": [[326, null]], "lucid.arange": [[337, null]], "lucid.arccos": [[349, null]], "lucid.arcsin": [[350, null]], "lucid.arctan": [[351, null]], "lucid.broadcast_to": [[374, null]], "lucid.clip": [[352, null]], "lucid.concatenate": [[375, null]], "lucid.cos": [[353, null]], "lucid.cosh": [[354, null]], "lucid.cube": [[355, null]], "lucid.data": [[3, null]], "lucid.datasets": [[4, null]], "lucid.diag": [[338, null]], "lucid.div": [[327, null]], "lucid.dot": [[328, null]], "lucid.einops": [[10, null]], "lucid.einops.rearrange": [[12, null]], "lucid.einops.reduce": [[13, null]], "lucid.empty": [[339, null]], "lucid.empty_like": [[340, null]], "lucid.exp": [[356, null]], "lucid.eye": [[341, null]], "lucid.flatten": [[376, null]], "lucid.grad_enabled": [[312, null]], "lucid.hstack": [[377, null]], "lucid.inner": [[329, null]], "lucid.linalg": [[15, null]], "lucid.linalg.cholesky": [[16, null]], "lucid.linalg.det": [[17, null]], "lucid.linalg.eig": [[18, null]], "lucid.linalg.inv": [[20, null]], "lucid.linalg.matrix_power": [[21, null]], "lucid.linalg.norm": [[22, null]], "lucid.linalg.pinv": [[23, null]], "lucid.linalg.qr": [[24, null]], "lucid.linalg.solve": [[25, null]], "lucid.linalg.svd": [[26, null]], "lucid.linspace": [[342, null]], "lucid.log": [[357, null]], "lucid.matmul": [[330, null]], "lucid.max": [[358, null]], "lucid.maximum": [[331, null]], "lucid.mean": [[359, null]], "lucid.meshgrid": [[379, null]], "lucid.min": [[360, null]], "lucid.minimum": [[332, null]], "lucid.models": [[144, null]], "lucid.mul": [[333, null]], "lucid.newaxis": [[313, null]], "lucid.nn": [[297, null]], "lucid.nn.functional": [[183, null]], "lucid.no_grad": [[314, null]], "lucid.ones": [[343, null]], "lucid.ones_like": [[344, null]], "lucid.optim": [[299, null]], "lucid.outer": [[334, null]], "lucid.pad": [[380, null]], "lucid.power": [[335, null]], "lucid.random": [[324, null]], "lucid.random.bernoulli": [[317, null]], "lucid.random.rand": [[319, null]], "lucid.random.randint": [[320, null]], "lucid.random.randn": [[321, null]], "lucid.random.seed": [[322, null]], "lucid.random.uniform": [[323, null]], "lucid.ravel": [[381, null]], "lucid.reciprocal": [[361, null]], "lucid.register_model": [[315, null]], "lucid.repeat": [[382, null]], "lucid.reshape": [[383, null]], "lucid.sign": [[362, null]], "lucid.sin": [[363, null]], "lucid.sinh": [[364, null]], "lucid.split": [[384, null]], "lucid.sqrt": [[365, null]], "lucid.square": [[366, null]], "lucid.squeeze": [[385, null]], "lucid.stack": [[386, null]], "lucid.sub": [[336, null]], "lucid.sum": [[367, null]], "lucid.tan": [[368, null]], "lucid.tanh": [[369, null]], "lucid.tensor": [[373, null]], "lucid.tile": [[387, null]], "lucid.trace": [[370, null]], "lucid.transforms": [[403, null]], "lucid.transpose": [[371, null]], "lucid.tril": [[388, null]], "lucid.triu": [[389, null]], "lucid.types": [[316, null]], "lucid.unsqueeze": [[390, null]], "lucid.var": [[372, null]], "lucid.vstack": [[391, null]], "lucid.zeros": [[345, null]], "lucid.zeros_like": [[346, null]], "mobilenet": [[84, null]], "mobilenet_v2": [[85, null]], "mobilenet_v3_large": [[86, null]], "mobilenet_v3_small": [[87, null]], "mobilenet_v4_conv_large": [[88, null]], "mobilenet_v4_conv_medium": [[89, null]], "mobilenet_v4_conv_small": [[90, null]], "mobilenet_v4_hybrid_large": [[91, null]], "mobilenet_v4_hybrid_medium": [[92, null]], "models.summarize": [[145, null]], "nn.AdaptiveAvgPool1d": [[277, null]], "nn.AdaptiveAvgPool2d": [[278, null]], "nn.AdaptiveAvgPool3d": [[279, null]], "nn.AlphaDropout": [[249, null]], "nn.AvgPool1d": [[280, null]], "nn.AvgPool2d": [[281, null]], "nn.AvgPool3d": [[282, null]], "nn.BCELoss": [[262, null]], "nn.BatchNorm1d": [[268, null]], "nn.BatchNorm2d": [[269, null]], "nn.BatchNorm3d": [[270, null]], "nn.Bilinear": [[258, null]], "nn.Buffer": [[150, null]], "nn.Conv1d": [[245, null]], "nn.Conv2d": [[246, null]], "nn.Conv3d": [[247, null]], "nn.ConvBNReLU1d": [[212, null]], "nn.ConvBNReLU2d": [[213, null]], "nn.ConvBNReLU3d": [[214, null]], "nn.CrossEntropyLoss": [[263, null]], "nn.DepthSeparableConv1d": [[215, null]], "nn.DepthSeparableConv2d": [[216, null]], "nn.DepthSeparableConv3d": [[217, null]], "nn.DropBlock": [[250, null]], "nn.DropPath": [[251, null]], "nn.Dropout": [[252, null]], "nn.Dropout1d": [[253, null]], "nn.Dropout2d": [[254, null]], "nn.Dropout3d": [[255, null]], "nn.ELU": [[229, null]], "nn.Embedding": [[287, null]], "nn.GELU": [[230, null]], "nn.GlobalResponseNorm": [[271, null]], "nn.HardSigmoid": [[231, null]], "nn.HardSwish": [[232, null]], "nn.HuberLoss": [[264, null]], "nn.Identity": [[259, null]], "nn.InstanceNorm1d": [[272, null]], "nn.InstanceNorm2d": [[273, null]], "nn.InstanceNorm3d": [[274, null]], "nn.LayerNorm": [[275, null]], "nn.LeakyReLU": [[233, null]], "nn.Linear": [[260, null]], "nn.MSELoss": [[265, null]], "nn.MaxPool1d": [[283, null]], "nn.MaxPool2d": [[284, null]], "nn.MaxPool3d": [[285, null]], "nn.Module": [[151, null]], "nn.ModuleDict": [[153, null]], "nn.ModuleList": [[154, null]], "nn.MultiHeadAttention": [[242, null]], "nn.NLLLoss": [[266, null]], "nn.Parameter": [[152, null]], "nn.ParameterDict": [[155, null]], "nn.ParameterList": [[156, null]], "nn.ReLU": [[234, null]], "nn.ReLU6": [[235, null]], "nn.SELU": [[236, null]], "nn.SEModule": [[218, null]], "nn.ScaledDotProductAttention": [[243, null]], "nn.SelectiveKernel": [[219, null]], "nn.Sequential": [[157, null]], "nn.Sigmoid": [[237, null]], "nn.Softmax": [[238, null]], "nn.Swish": [[239, null]], "nn.Tanh": [[240, null]], "nn.Transformer": [[289, null]], "nn.TransformerDecoder": [[290, null]], "nn.TransformerDecoderLayer": [[291, null]], "nn.TransformerEncoder": [[292, null]], "nn.TransformerEncoderLayer": [[293, null]], "nn.Upsample": [[295, null]], "nn.functional.adaptive_avg_pool1d": [[198, null]], "nn.functional.adaptive_avg_pool2d": [[199, null]], "nn.functional.adaptive_avg_pool3d": [[200, null]], "nn.functional.alpha_dropout": [[175, null]], "nn.functional.avg_pool1d": [[201, null]], "nn.functional.avg_pool2d": [[202, null]], "nn.functional.avg_pool3d": [[203, null]], "nn.functional.batch_norm": [[193, null]], "nn.functional.bilinear": [[184, null]], "nn.functional.binary_cross_entropy": [[187, null]], "nn.functional.conv1d": [[170, null]], "nn.functional.conv2d": [[171, null]], "nn.functional.conv3d": [[172, null]], "nn.functional.cross_entropy": [[188, null]], "nn.functional.drop_block": [[176, null]], "nn.functional.drop_path": [[177, null]], "nn.functional.dropout": [[178, null]], "nn.functional.dropout1d": [[179, null]], "nn.functional.dropout2d": [[180, null]], "nn.functional.dropout3d": [[181, null]], "nn.functional.elu": [[159, null]], "nn.functional.embedding": [[208, null]], "nn.functional.gelu": [[160, null]], "nn.functional.global_response_norm": [[194, null]], "nn.functional.huber_loss": [[189, null]], "nn.functional.instance_norm": [[196, null]], "nn.functional.interpolate": [[210, null]], "nn.functional.layer_norm": [[197, null]], "nn.functional.leaky_relu": [[162, null]], "nn.functional.linear": [[186, null]], "nn.functional.max_pool1d": [[205, null]], "nn.functional.max_pool2d": [[206, null]], "nn.functional.max_pool3d": [[207, null]], "nn.functional.mse_loss": [[191, null]], "nn.functional.nll_loss": [[192, null]], "nn.functional.relu": [[163, null]], "nn.functional.rotate": [[211, null]], "nn.functional.scaled_dot_product_attention": [[169, null]], "nn.functional.selu": [[164, null]], "nn.functional.sigmoid": [[165, null]], "nn.functional.softmax": [[166, null]], "nn.functional.tanh": [[167, null]], "nn.functional.unfold": [[174, null]], "nn.init.constant": [[221, null]], "nn.init.kaiming_normal": [[223, null]], "nn.init.kaiming_uniform": [[224, null]], "nn.init.normal": [[225, null]], "nn.init.uniform": [[226, null]], "nn.init.xavier_normal": [[227, null]], "nn.init.xavier_uniform": [[228, null]], "optim.ASGD": [[300, null]], "optim.Adadelta": [[301, null]], "optim.Adagrad": [[302, null]], "optim.Adam": [[303, null]], "optim.AdamW": [[304, null]], "optim.Adamax": [[305, null]], "optim.NAdam": [[306, null]], "optim.Optimizer": [[298, null]], "optim.RAdam": [[307, null]], "optim.RMSprop": [[308, null]], "optim.Rprop": [[309, null]], "optim.SGD": [[310, null]], "rearrange": [[10, "rearrange"]], "reduce": [[10, "reduce"]], "resnest_101": [[94, null]], "resnest_14": [[95, null]], "resnest_200": [[96, null]], "resnest_26": [[97, null]], "resnest_269": [[98, null]], "resnest_50": [[99, null]], "resnest_50_1s4x24d": [[100, null]], "resnest_50_4s2x40d": [[101, null]], "resnet_1001": [[103, null]], "resnet_101": [[104, null]], "resnet_152": [[105, null]], "resnet_18": [[106, null]], "resnet_200": [[107, null]], "resnet_269": [[108, null]], "resnet_34": [[109, null]], "resnet_50": [[110, null]], "resnext_101_32x16d": [[114, null]], "resnext_101_32x32d": [[115, null]], "resnext_101_32x4d": [[116, null]], "resnext_101_32x8d": [[117, null]], "resnext_101_64x4d": [[118, null]], "resnext_50_32x4d": [[119, null]], "se_resnet_101": [[121, null]], "se_resnet_152": [[122, null]], "se_resnet_18": [[123, null]], "se_resnet_34": [[124, null]], "se_resnet_50": [[125, null]], "se_resnext_101_32x4d": [[126, null]], "se_resnext_101_32x8d": [[127, null]], "se_resnext_101_64x4d": [[128, null]], "se_resnext_50_32x4d": [[129, null]], "sk_resnet_18": [[131, null]], "sk_resnet_34": [[132, null]], "sk_resnet_50": [[133, null]], "sk_resnext_50_32x4d": [[134, null]], "transformer_base": [[147, null]], "transformer_big": [[148, null]], "transforms.CenterCrop": [[394, null]], "transforms.Compose": [[392, null]], "transforms.Normalize": [[395, null]], "transforms.RandomCrop": [[396, null]], "transforms.RandomGrayscale": [[397, null]], "transforms.RandomHorizontalFlip": [[398, null]], "transforms.RandomRotation": [[399, null]], "transforms.RandomVerticalFlip": [[400, null]], "transforms.Resize": [[401, null]], "transforms.ToTensor": [[393, null]], "vggnet_11": [[136, null]], "vggnet_13": [[137, null]], "vggnet_16": [[138, null]], "vggnet_19": [[139, null]], "wide_resnet_101": [[111, null]], "wide_resnet_50": [[112, null]], "xception": [[141, null]], "zfnet": [[143, null]]}, "docnames": ["data/ConcatDataset", "data/DataLoader", "data/Dataset", "data/data", "datasets/datasets", "datasets/image/CIFAR10", "datasets/image/CIFAR100", "datasets/image/FashionMNIST", "datasets/image/MNIST", "datasets/image/index", "einops/einops", "einops/functions/index", "einops/functions/rearrange", "einops/functions/reduce", "index", "linalg/linalg", "linalg/operations/cholesky", "linalg/operations/det", "linalg/operations/eig", "linalg/operations/index", "linalg/operations/inv", "linalg/operations/matrix_power", "linalg/operations/norm", "linalg/operations/pinv", "linalg/operations/qr", "linalg/operations/solve", "linalg/operations/svd", "models/conv/alex/AlexNet_", "models/conv/alex/alexnet", "models/conv/convnext/ConvNeXt", "models/conv/convnext/ConvNeXt_V2", "models/conv/convnext/convnext_base", "models/conv/convnext/convnext_large", "models/conv/convnext/convnext_small", "models/conv/convnext/convnext_tiny", "models/conv/convnext/convnext_v2_atto", "models/conv/convnext/convnext_v2_base", "models/conv/convnext/convnext_v2_femto", "models/conv/convnext/convnext_v2_huge", "models/conv/convnext/convnext_v2_large", "models/conv/convnext/convnext_v2_nano", "models/conv/convnext/convnext_v2_pico", "models/conv/convnext/convnext_v2_tiny", "models/conv/convnext/convnext_xlarge", "models/conv/dense/DenseNet", "models/conv/dense/densenet_121", "models/conv/dense/densenet_169", "models/conv/dense/densenet_201", "models/conv/dense/densenet_264", "models/conv/efficient/EfficientNet", "models/conv/efficient/EfficientNet_V2", "models/conv/efficient/efficientnet_b0", "models/conv/efficient/efficientnet_b1", "models/conv/efficient/efficientnet_b2", "models/conv/efficient/efficientnet_b3", "models/conv/efficient/efficientnet_b4", "models/conv/efficient/efficientnet_b5", "models/conv/efficient/efficientnet_b6", "models/conv/efficient/efficientnet_b7", "models/conv/efficient/efficientnet_v2_l", "models/conv/efficient/efficientnet_v2_m", "models/conv/efficient/efficientnet_v2_s", "models/conv/efficient/efficientnet_v2_xl", "models/conv/inception/Inception", "models/conv/inception/inception_v1", "models/conv/inception/inception_v3", "models/conv/inception/inception_v4", "models/conv/inception_next/InceptionNeXt", "models/conv/inception_next/inception_next_atto", "models/conv/inception_next/inception_next_base", "models/conv/inception_next/inception_next_small", "models/conv/inception_next/inception_next_tiny", "models/conv/inception_res/InceptionResNet", "models/conv/inception_res/inception_resnet_v1", "models/conv/inception_res/inception_resnet_v2", "models/conv/index", "models/conv/lenet/LeNet", "models/conv/lenet/lenet_1", "models/conv/lenet/lenet_4", "models/conv/lenet/lenet_5", "models/conv/mobile/MobileNet_", "models/conv/mobile/MobileNet_V2_", "models/conv/mobile/MobileNet_V3", "models/conv/mobile/MobileNet_V4", "models/conv/mobile/mobilenet", "models/conv/mobile/mobilenet_v2", "models/conv/mobile/mobilenet_v3_large", "models/conv/mobile/mobilenet_v3_small", "models/conv/mobile/mobilenet_v4_conv_large", "models/conv/mobile/mobilenet_v4_conv_medium", "models/conv/mobile/mobilenet_v4_conv_small", "models/conv/mobile/mobilenet_v4_hybrid_large", "models/conv/mobile/mobilenet_v4_hybrid_medium", "models/conv/resnest/ResNeSt", "models/conv/resnest/resnest_101", "models/conv/resnest/resnest_14", "models/conv/resnest/resnest_200", "models/conv/resnest/resnest_26", "models/conv/resnest/resnest_269", "models/conv/resnest/resnest_50", "models/conv/resnest/resnest_50_1s4x24d", "models/conv/resnest/resnest_50_4s2x40d", "models/conv/resnet/ResNet", "models/conv/resnet/resnet_1001", "models/conv/resnet/resnet_101", "models/conv/resnet/resnet_152", "models/conv/resnet/resnet_18", "models/conv/resnet/resnet_200", "models/conv/resnet/resnet_269", "models/conv/resnet/resnet_34", "models/conv/resnet/resnet_50", "models/conv/resnet/wide_resnet_101", "models/conv/resnet/wide_resnet_50", "models/conv/resnext/ResNeXt", "models/conv/resnext/resnext_101_32x16d", "models/conv/resnext/resnext_101_32x32d", "models/conv/resnext/resnext_101_32x4d", "models/conv/resnext/resnext_101_32x8d", "models/conv/resnext/resnext_101_64x4d", "models/conv/resnext/resnext_50_32x4d", "models/conv/senet/SENet", "models/conv/senet/se_resnet_101", "models/conv/senet/se_resnet_152", "models/conv/senet/se_resnet_18", "models/conv/senet/se_resnet_34", "models/conv/senet/se_resnet_50", "models/conv/senet/se_resnext_101_32x4d", "models/conv/senet/se_resnext_101_32x8d", "models/conv/senet/se_resnext_101_64x4d", "models/conv/senet/se_resnext_50_32x4d", "models/conv/sknet/SKNet", "models/conv/sknet/sk_resnet_18", "models/conv/sknet/sk_resnet_34", "models/conv/sknet/sk_resnet_50", "models/conv/sknet/sk_resnext_50_32x4d", "models/conv/vgg/VGGNet", "models/conv/vgg/vggnet_11", "models/conv/vgg/vggnet_13", "models/conv/vgg/vggnet_16", "models/conv/vgg/vggnet_19", "models/conv/xception/Xception_", "models/conv/xception/xception", "models/conv/zfnet/ZFNet_", "models/conv/zfnet/zfnet", "models/models", "models/summarize", "models/transformer/base/Transformer", "models/transformer/base/transformer_base", "models/transformer/base/transformer_big", "models/transformer/index", "nn/Buffer", "nn/Module", "nn/Parameter", "nn/containers/ModuleDict", "nn/containers/ModuleList", "nn/containers/ParameterDict", "nn/containers/ParameterList", "nn/containers/Sequential", "nn/containers/index", "nn/functions/activation/elu", "nn/functions/activation/gelu", "nn/functions/activation/index", "nn/functions/activation/leaky_relu", "nn/functions/activation/relu", "nn/functions/activation/selu", "nn/functions/activation/sigmoid", "nn/functions/activation/softmax", "nn/functions/activation/tanh", "nn/functions/attention/index", "nn/functions/attention/scaled_dot_product_attention", "nn/functions/conv/conv1d", "nn/functions/conv/conv2d", "nn/functions/conv/conv3d", "nn/functions/conv/index", "nn/functions/conv/unfold", "nn/functions/drop/alpha_dropout", "nn/functions/drop/drop_block", "nn/functions/drop/drop_path", "nn/functions/drop/dropout", "nn/functions/drop/dropout1d", "nn/functions/drop/dropout2d", "nn/functions/drop/dropout3d", "nn/functions/drop/index", "nn/functions/index", "nn/functions/linear/bilinear", "nn/functions/linear/index", "nn/functions/linear/linear", "nn/functions/loss/binary_cross_entropy", "nn/functions/loss/cross_entropy", "nn/functions/loss/huber_loss", "nn/functions/loss/index", "nn/functions/loss/mse_loss", "nn/functions/loss/nll_loss", "nn/functions/norm/batch_norm", "nn/functions/norm/global_response_norm", "nn/functions/norm/index", "nn/functions/norm/instance_norm", "nn/functions/norm/layer_norm", "nn/functions/pool/adaptive_avg_pool1d", "nn/functions/pool/adaptive_avg_pool2d", "nn/functions/pool/adaptive_avg_pool3d", "nn/functions/pool/avg_pool1d", "nn/functions/pool/avg_pool2d", "nn/functions/pool/avg_pool3d", "nn/functions/pool/index", "nn/functions/pool/max_pool1d", "nn/functions/pool/max_pool2d", "nn/functions/pool/max_pool3d", "nn/functions/util/embedding", "nn/functions/util/index", "nn/functions/util/interpolate", "nn/functions/util/rotate", "nn/fused/ConvBNReLU1d", "nn/fused/ConvBNReLU2d", "nn/fused/ConvBNReLU3d", "nn/fused/DepthSeparableConv1d", "nn/fused/DepthSeparableConv2d", "nn/fused/DepthSeparableConv3d", "nn/fused/SEModule", "nn/fused/SelectiveKernel", "nn/fused/index", "nn/init/constant", "nn/init/index", "nn/init/kaiming_normal", "nn/init/kaiming_uniform", "nn/init/normal", "nn/init/uniform", "nn/init/xavier_normal", "nn/init/xavier_uniform", "nn/modules/activation/ELU", "nn/modules/activation/GELU", "nn/modules/activation/HardSigmoid", "nn/modules/activation/HardSwish", "nn/modules/activation/LeakyReLU", "nn/modules/activation/ReLU", "nn/modules/activation/ReLU6", "nn/modules/activation/SELU", "nn/modules/activation/Sigmoid", "nn/modules/activation/Softmax", "nn/modules/activation/Swish", "nn/modules/activation/Tanh", "nn/modules/activation/index", "nn/modules/attention/MultiHeadAttention", "nn/modules/attention/ScaledDotProductAttention", "nn/modules/attention/index", "nn/modules/conv/Conv1d", "nn/modules/conv/Conv2d", "nn/modules/conv/Conv3d", "nn/modules/conv/index", "nn/modules/drop/AlphaDropout", "nn/modules/drop/DropBlock", "nn/modules/drop/DropPath", "nn/modules/drop/Dropout", "nn/modules/drop/Dropout1d", "nn/modules/drop/Dropout2d", "nn/modules/drop/Dropout3d", "nn/modules/drop/index", "nn/modules/index", "nn/modules/linear/Bilinear", "nn/modules/linear/Identity", "nn/modules/linear/Linear", "nn/modules/linear/index", "nn/modules/loss/BCELoss", "nn/modules/loss/CrossEntropyLoss", "nn/modules/loss/HuberLoss", "nn/modules/loss/MSELoss", "nn/modules/loss/NLLLoss", "nn/modules/loss/index", "nn/modules/norm/BatchNorm1d", "nn/modules/norm/BatchNorm2d", "nn/modules/norm/BatchNorm3d", "nn/modules/norm/GlobalResponseNorm", "nn/modules/norm/InstanceNorm1d", "nn/modules/norm/InstanceNorm2d", "nn/modules/norm/InstanceNorm3d", "nn/modules/norm/LayerNorm", "nn/modules/norm/index", "nn/modules/pool/AdaptiveAvgPool1d", "nn/modules/pool/AdaptiveAvgPool2d", "nn/modules/pool/AdaptiveAvgPool3d", "nn/modules/pool/AvgPool1d", "nn/modules/pool/AvgPool2d", "nn/modules/pool/AvgPool3d", "nn/modules/pool/MaxPool1d", "nn/modules/pool/MaxPool2d", "nn/modules/pool/MaxPool3d", "nn/modules/pool/index", "nn/modules/sparse/Embedding", "nn/modules/sparse/index", "nn/modules/transformer/Transformer", "nn/modules/transformer/TransformerDecoder", "nn/modules/transformer/TransformerDecoderLayer", "nn/modules/transformer/TransformerEncoder", "nn/modules/transformer/TransformerEncoderLayer", "nn/modules/transformer/index", "nn/modules/vision/Upsample", "nn/modules/vision/index", "nn/nn", "optim/Optimizer", "optim/optim", "optim/optimizers/ASGD", "optim/optimizers/Adadelta", "optim/optimizers/Adagrad", "optim/optimizers/Adam", "optim/optimizers/AdamW", "optim/optimizers/Adamax", "optim/optimizers/NAdam", "optim/optimizers/RAdam", "optim/optimizers/RMSprop", "optim/optimizers/Rprop", "optim/optimizers/SGD", "optim/optimizers/index", "others/grad_enabled", "others/newaxis", "others/no_grad", "others/register_model", "others/types", "random/functions/bernoulli", "random/functions/index", "random/functions/rand", "random/functions/randint", "random/functions/randn", "random/functions/seed", "random/functions/uniform", "random/random", "tensor/Tensor_", "tensor/operations/bfunc/add", "tensor/operations/bfunc/div", "tensor/operations/bfunc/dot", "tensor/operations/bfunc/inner", "tensor/operations/bfunc/matmul", "tensor/operations/bfunc/maximum", "tensor/operations/bfunc/minimum", "tensor/operations/bfunc/mul", "tensor/operations/bfunc/outer", "tensor/operations/bfunc/power", "tensor/operations/bfunc/sub", "tensor/operations/gfunc/arange", "tensor/operations/gfunc/diag", "tensor/operations/gfunc/empty", "tensor/operations/gfunc/empty_like", "tensor/operations/gfunc/eye", "tensor/operations/gfunc/linspace", "tensor/operations/gfunc/ones", "tensor/operations/gfunc/ones_like", "tensor/operations/gfunc/zeros", "tensor/operations/gfunc/zeros_like", "tensor/operations/index", "tensor/operations/ufunc/abs", "tensor/operations/ufunc/arccos", "tensor/operations/ufunc/arcsin", "tensor/operations/ufunc/arctan", "tensor/operations/ufunc/clip", "tensor/operations/ufunc/cos", "tensor/operations/ufunc/cosh", "tensor/operations/ufunc/cube", "tensor/operations/ufunc/exp", "tensor/operations/ufunc/log", "tensor/operations/ufunc/max", "tensor/operations/ufunc/mean", "tensor/operations/ufunc/min", "tensor/operations/ufunc/reciprocal", "tensor/operations/ufunc/sign", "tensor/operations/ufunc/sin", "tensor/operations/ufunc/sinh", "tensor/operations/ufunc/sqrt", "tensor/operations/ufunc/square", "tensor/operations/ufunc/sum", "tensor/operations/ufunc/tan", "tensor/operations/ufunc/tanh", "tensor/operations/ufunc/trace", "tensor/operations/ufunc/transpose", "tensor/operations/ufunc/var", "tensor/tensor", "tensor/utilities/broadcast_to", "tensor/utilities/concatenate", "tensor/utilities/flatten", "tensor/utilities/hstack", "tensor/utilities/index", "tensor/utilities/meshgrid", "tensor/utilities/pad", "tensor/utilities/ravel", "tensor/utilities/repeat", "tensor/utilities/reshape", "tensor/utilities/split", "tensor/utilities/squeeze", "tensor/utilities/stack", "tensor/utilities/tile", "tensor/utilities/tril", "tensor/utilities/triu", "tensor/utilities/unsqueeze", "tensor/utilities/vstack", "transforms/Compose", "transforms/ToTensor", "transforms/image/CenterCrop", "transforms/image/Normalize", "transforms/image/RandomCrop", "transforms/image/RandomGrayscale", "transforms/image/RandomHorizontalFlip", "transforms/image/RandomRotation", "transforms/image/RandomVerticalFlip", "transforms/image/Resize", "transforms/image/index", "transforms/transforms"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["data/ConcatDataset.rst", "data/DataLoader.rst", "data/Dataset.rst", "data/data.rst", "datasets/datasets.rst", "datasets/image/CIFAR10.rst", "datasets/image/CIFAR100.rst", "datasets/image/FashionMNIST.rst", "datasets/image/MNIST.rst", "datasets/image/index.rst", "einops/einops.rst", "einops/functions/index.rst", "einops/functions/rearrange.rst", "einops/functions/reduce.rst", "index.rst", "linalg/linalg.rst", "linalg/operations/cholesky.rst", "linalg/operations/det.rst", "linalg/operations/eig.rst", "linalg/operations/index.rst", "linalg/operations/inv.rst", "linalg/operations/matrix_power.rst", "linalg/operations/norm.rst", "linalg/operations/pinv.rst", "linalg/operations/qr.rst", "linalg/operations/solve.rst", "linalg/operations/svd.rst", "models/conv/alex/AlexNet_.rst", "models/conv/alex/alexnet.rst", "models/conv/convnext/ConvNeXt.rst", "models/conv/convnext/ConvNeXt_V2.rst", "models/conv/convnext/convnext_base.rst", "models/conv/convnext/convnext_large.rst", "models/conv/convnext/convnext_small.rst", "models/conv/convnext/convnext_tiny.rst", "models/conv/convnext/convnext_v2_atto.rst", "models/conv/convnext/convnext_v2_base.rst", "models/conv/convnext/convnext_v2_femto.rst", "models/conv/convnext/convnext_v2_huge.rst", "models/conv/convnext/convnext_v2_large.rst", "models/conv/convnext/convnext_v2_nano.rst", "models/conv/convnext/convnext_v2_pico.rst", "models/conv/convnext/convnext_v2_tiny.rst", "models/conv/convnext/convnext_xlarge.rst", "models/conv/dense/DenseNet.rst", "models/conv/dense/densenet_121.rst", "models/conv/dense/densenet_169.rst", "models/conv/dense/densenet_201.rst", "models/conv/dense/densenet_264.rst", "models/conv/efficient/EfficientNet.rst", "models/conv/efficient/EfficientNet_V2.rst", "models/conv/efficient/efficientnet_b0.rst", "models/conv/efficient/efficientnet_b1.rst", "models/conv/efficient/efficientnet_b2.rst", "models/conv/efficient/efficientnet_b3.rst", "models/conv/efficient/efficientnet_b4.rst", "models/conv/efficient/efficientnet_b5.rst", "models/conv/efficient/efficientnet_b6.rst", "models/conv/efficient/efficientnet_b7.rst", "models/conv/efficient/efficientnet_v2_l.rst", "models/conv/efficient/efficientnet_v2_m.rst", "models/conv/efficient/efficientnet_v2_s.rst", "models/conv/efficient/efficientnet_v2_xl.rst", "models/conv/inception/Inception.rst", "models/conv/inception/inception_v1.rst", "models/conv/inception/inception_v3.rst", "models/conv/inception/inception_v4.rst", "models/conv/inception_next/InceptionNeXt.rst", "models/conv/inception_next/inception_next_atto.rst", "models/conv/inception_next/inception_next_base.rst", "models/conv/inception_next/inception_next_small.rst", "models/conv/inception_next/inception_next_tiny.rst", "models/conv/inception_res/InceptionResNet.rst", "models/conv/inception_res/inception_resnet_v1.rst", "models/conv/inception_res/inception_resnet_v2.rst", "models/conv/index.rst", "models/conv/lenet/LeNet.rst", "models/conv/lenet/lenet_1.rst", "models/conv/lenet/lenet_4.rst", "models/conv/lenet/lenet_5.rst", "models/conv/mobile/MobileNet_.rst", "models/conv/mobile/MobileNet_V2_.rst", "models/conv/mobile/MobileNet_V3.rst", "models/conv/mobile/MobileNet_V4.rst", "models/conv/mobile/mobilenet.rst", "models/conv/mobile/mobilenet_v2.rst", "models/conv/mobile/mobilenet_v3_large.rst", "models/conv/mobile/mobilenet_v3_small.rst", "models/conv/mobile/mobilenet_v4_conv_large.rst", "models/conv/mobile/mobilenet_v4_conv_medium.rst", "models/conv/mobile/mobilenet_v4_conv_small.rst", "models/conv/mobile/mobilenet_v4_hybrid_large.rst", "models/conv/mobile/mobilenet_v4_hybrid_medium.rst", "models/conv/resnest/ResNeSt.rst", "models/conv/resnest/resnest_101.rst", "models/conv/resnest/resnest_14.rst", "models/conv/resnest/resnest_200.rst", "models/conv/resnest/resnest_26.rst", "models/conv/resnest/resnest_269.rst", "models/conv/resnest/resnest_50.rst", "models/conv/resnest/resnest_50_1s4x24d.rst", "models/conv/resnest/resnest_50_4s2x40d.rst", "models/conv/resnet/ResNet.rst", "models/conv/resnet/resnet_1001.rst", "models/conv/resnet/resnet_101.rst", "models/conv/resnet/resnet_152.rst", "models/conv/resnet/resnet_18.rst", "models/conv/resnet/resnet_200.rst", "models/conv/resnet/resnet_269.rst", "models/conv/resnet/resnet_34.rst", "models/conv/resnet/resnet_50.rst", "models/conv/resnet/wide_resnet_101.rst", "models/conv/resnet/wide_resnet_50.rst", "models/conv/resnext/ResNeXt.rst", "models/conv/resnext/resnext_101_32x16d.rst", "models/conv/resnext/resnext_101_32x32d.rst", "models/conv/resnext/resnext_101_32x4d.rst", "models/conv/resnext/resnext_101_32x8d.rst", "models/conv/resnext/resnext_101_64x4d.rst", "models/conv/resnext/resnext_50_32x4d.rst", "models/conv/senet/SENet.rst", "models/conv/senet/se_resnet_101.rst", "models/conv/senet/se_resnet_152.rst", "models/conv/senet/se_resnet_18.rst", "models/conv/senet/se_resnet_34.rst", "models/conv/senet/se_resnet_50.rst", "models/conv/senet/se_resnext_101_32x4d.rst", "models/conv/senet/se_resnext_101_32x8d.rst", "models/conv/senet/se_resnext_101_64x4d.rst", "models/conv/senet/se_resnext_50_32x4d.rst", "models/conv/sknet/SKNet.rst", "models/conv/sknet/sk_resnet_18.rst", "models/conv/sknet/sk_resnet_34.rst", "models/conv/sknet/sk_resnet_50.rst", "models/conv/sknet/sk_resnext_50_32x4d.rst", "models/conv/vgg/VGGNet.rst", "models/conv/vgg/vggnet_11.rst", "models/conv/vgg/vggnet_13.rst", "models/conv/vgg/vggnet_16.rst", "models/conv/vgg/vggnet_19.rst", "models/conv/xception/Xception_.rst", "models/conv/xception/xception.rst", "models/conv/zfnet/ZFNet_.rst", "models/conv/zfnet/zfnet.rst", "models/models.rst", "models/summarize.rst", "models/transformer/base/Transformer.rst", "models/transformer/base/transformer_base.rst", "models/transformer/base/transformer_big.rst", "models/transformer/index.rst", "nn/Buffer.rst", "nn/Module.rst", "nn/Parameter.rst", "nn/containers/ModuleDict.rst", "nn/containers/ModuleList.rst", "nn/containers/ParameterDict.rst", "nn/containers/ParameterList.rst", "nn/containers/Sequential.rst", "nn/containers/index.rst", "nn/functions/activation/elu.rst", "nn/functions/activation/gelu.rst", "nn/functions/activation/index.rst", "nn/functions/activation/leaky_relu.rst", "nn/functions/activation/relu.rst", "nn/functions/activation/selu.rst", "nn/functions/activation/sigmoid.rst", "nn/functions/activation/softmax.rst", "nn/functions/activation/tanh.rst", "nn/functions/attention/index.rst", "nn/functions/attention/scaled_dot_product_attention.rst", "nn/functions/conv/conv1d.rst", "nn/functions/conv/conv2d.rst", "nn/functions/conv/conv3d.rst", "nn/functions/conv/index.rst", "nn/functions/conv/unfold.rst", "nn/functions/drop/alpha_dropout.rst", "nn/functions/drop/drop_block.rst", "nn/functions/drop/drop_path.rst", "nn/functions/drop/dropout.rst", "nn/functions/drop/dropout1d.rst", "nn/functions/drop/dropout2d.rst", "nn/functions/drop/dropout3d.rst", "nn/functions/drop/index.rst", "nn/functions/index.rst", "nn/functions/linear/bilinear.rst", "nn/functions/linear/index.rst", "nn/functions/linear/linear.rst", "nn/functions/loss/binary_cross_entropy.rst", "nn/functions/loss/cross_entropy.rst", "nn/functions/loss/huber_loss.rst", "nn/functions/loss/index.rst", "nn/functions/loss/mse_loss.rst", "nn/functions/loss/nll_loss.rst", "nn/functions/norm/batch_norm.rst", "nn/functions/norm/global_response_norm.rst", "nn/functions/norm/index.rst", "nn/functions/norm/instance_norm.rst", "nn/functions/norm/layer_norm.rst", "nn/functions/pool/adaptive_avg_pool1d.rst", "nn/functions/pool/adaptive_avg_pool2d.rst", "nn/functions/pool/adaptive_avg_pool3d.rst", "nn/functions/pool/avg_pool1d.rst", "nn/functions/pool/avg_pool2d.rst", "nn/functions/pool/avg_pool3d.rst", "nn/functions/pool/index.rst", "nn/functions/pool/max_pool1d.rst", "nn/functions/pool/max_pool2d.rst", "nn/functions/pool/max_pool3d.rst", "nn/functions/util/embedding.rst", "nn/functions/util/index.rst", "nn/functions/util/interpolate.rst", "nn/functions/util/rotate.rst", "nn/fused/ConvBNReLU1d.rst", "nn/fused/ConvBNReLU2d.rst", "nn/fused/ConvBNReLU3d.rst", "nn/fused/DepthSeparableConv1d.rst", "nn/fused/DepthSeparableConv2d.rst", "nn/fused/DepthSeparableConv3d.rst", "nn/fused/SEModule.rst", "nn/fused/SelectiveKernel.rst", "nn/fused/index.rst", "nn/init/constant.rst", "nn/init/index.rst", "nn/init/kaiming_normal.rst", "nn/init/kaiming_uniform.rst", "nn/init/normal.rst", "nn/init/uniform.rst", "nn/init/xavier_normal.rst", "nn/init/xavier_uniform.rst", "nn/modules/activation/ELU.rst", "nn/modules/activation/GELU.rst", "nn/modules/activation/HardSigmoid.rst", "nn/modules/activation/HardSwish.rst", "nn/modules/activation/LeakyReLU.rst", "nn/modules/activation/ReLU.rst", "nn/modules/activation/ReLU6.rst", "nn/modules/activation/SELU.rst", "nn/modules/activation/Sigmoid.rst", "nn/modules/activation/Softmax.rst", "nn/modules/activation/Swish.rst", "nn/modules/activation/Tanh.rst", "nn/modules/activation/index.rst", "nn/modules/attention/MultiHeadAttention.rst", "nn/modules/attention/ScaledDotProductAttention.rst", "nn/modules/attention/index.rst", "nn/modules/conv/Conv1d.rst", "nn/modules/conv/Conv2d.rst", "nn/modules/conv/Conv3d.rst", "nn/modules/conv/index.rst", "nn/modules/drop/AlphaDropout.rst", "nn/modules/drop/DropBlock.rst", "nn/modules/drop/DropPath.rst", "nn/modules/drop/Dropout.rst", "nn/modules/drop/Dropout1d.rst", "nn/modules/drop/Dropout2d.rst", "nn/modules/drop/Dropout3d.rst", "nn/modules/drop/index.rst", "nn/modules/index.rst", "nn/modules/linear/Bilinear.rst", "nn/modules/linear/Identity.rst", "nn/modules/linear/Linear.rst", "nn/modules/linear/index.rst", "nn/modules/loss/BCELoss.rst", "nn/modules/loss/CrossEntropyLoss.rst", "nn/modules/loss/HuberLoss.rst", "nn/modules/loss/MSELoss.rst", "nn/modules/loss/NLLLoss.rst", "nn/modules/loss/index.rst", "nn/modules/norm/BatchNorm1d.rst", "nn/modules/norm/BatchNorm2d.rst", "nn/modules/norm/BatchNorm3d.rst", "nn/modules/norm/GlobalResponseNorm.rst", "nn/modules/norm/InstanceNorm1d.rst", "nn/modules/norm/InstanceNorm2d.rst", "nn/modules/norm/InstanceNorm3d.rst", "nn/modules/norm/LayerNorm.rst", "nn/modules/norm/index.rst", "nn/modules/pool/AdaptiveAvgPool1d.rst", "nn/modules/pool/AdaptiveAvgPool2d.rst", "nn/modules/pool/AdaptiveAvgPool3d.rst", "nn/modules/pool/AvgPool1d.rst", "nn/modules/pool/AvgPool2d.rst", "nn/modules/pool/AvgPool3d.rst", "nn/modules/pool/MaxPool1d.rst", "nn/modules/pool/MaxPool2d.rst", "nn/modules/pool/MaxPool3d.rst", "nn/modules/pool/index.rst", "nn/modules/sparse/Embedding.rst", "nn/modules/sparse/index.rst", "nn/modules/transformer/Transformer.rst", "nn/modules/transformer/TransformerDecoder.rst", "nn/modules/transformer/TransformerDecoderLayer.rst", "nn/modules/transformer/TransformerEncoder.rst", "nn/modules/transformer/TransformerEncoderLayer.rst", "nn/modules/transformer/index.rst", "nn/modules/vision/Upsample.rst", "nn/modules/vision/index.rst", "nn/nn.rst", "optim/Optimizer.rst", "optim/optim.rst", "optim/optimizers/ASGD.rst", "optim/optimizers/Adadelta.rst", "optim/optimizers/Adagrad.rst", "optim/optimizers/Adam.rst", "optim/optimizers/AdamW.rst", "optim/optimizers/Adamax.rst", "optim/optimizers/NAdam.rst", "optim/optimizers/RAdam.rst", "optim/optimizers/RMSprop.rst", "optim/optimizers/Rprop.rst", "optim/optimizers/SGD.rst", "optim/optimizers/index.rst", "others/grad_enabled.rst", "others/newaxis.rst", "others/no_grad.rst", "others/register_model.rst", "others/types.rst", "random/functions/bernoulli.rst", "random/functions/index.rst", "random/functions/rand.rst", "random/functions/randint.rst", "random/functions/randn.rst", "random/functions/seed.rst", "random/functions/uniform.rst", "random/random.rst", "tensor/Tensor_.rst", "tensor/operations/bfunc/add.rst", "tensor/operations/bfunc/div.rst", "tensor/operations/bfunc/dot.rst", "tensor/operations/bfunc/inner.rst", "tensor/operations/bfunc/matmul.rst", "tensor/operations/bfunc/maximum.rst", "tensor/operations/bfunc/minimum.rst", "tensor/operations/bfunc/mul.rst", "tensor/operations/bfunc/outer.rst", "tensor/operations/bfunc/power.rst", "tensor/operations/bfunc/sub.rst", "tensor/operations/gfunc/arange.rst", "tensor/operations/gfunc/diag.rst", "tensor/operations/gfunc/empty.rst", "tensor/operations/gfunc/empty_like.rst", "tensor/operations/gfunc/eye.rst", "tensor/operations/gfunc/linspace.rst", "tensor/operations/gfunc/ones.rst", "tensor/operations/gfunc/ones_like.rst", "tensor/operations/gfunc/zeros.rst", "tensor/operations/gfunc/zeros_like.rst", "tensor/operations/index.rst", "tensor/operations/ufunc/abs.rst", "tensor/operations/ufunc/arccos.rst", "tensor/operations/ufunc/arcsin.rst", "tensor/operations/ufunc/arctan.rst", "tensor/operations/ufunc/clip.rst", "tensor/operations/ufunc/cos.rst", "tensor/operations/ufunc/cosh.rst", "tensor/operations/ufunc/cube.rst", "tensor/operations/ufunc/exp.rst", "tensor/operations/ufunc/log.rst", "tensor/operations/ufunc/max.rst", "tensor/operations/ufunc/mean.rst", "tensor/operations/ufunc/min.rst", "tensor/operations/ufunc/reciprocal.rst", "tensor/operations/ufunc/sign.rst", "tensor/operations/ufunc/sin.rst", "tensor/operations/ufunc/sinh.rst", "tensor/operations/ufunc/sqrt.rst", "tensor/operations/ufunc/square.rst", "tensor/operations/ufunc/sum.rst", "tensor/operations/ufunc/tan.rst", "tensor/operations/ufunc/tanh.rst", "tensor/operations/ufunc/trace.rst", "tensor/operations/ufunc/transpose.rst", "tensor/operations/ufunc/var.rst", "tensor/tensor.rst", "tensor/utilities/broadcast_to.rst", "tensor/utilities/concatenate.rst", "tensor/utilities/flatten.rst", "tensor/utilities/hstack.rst", "tensor/utilities/index.rst", "tensor/utilities/meshgrid.rst", "tensor/utilities/pad.rst", "tensor/utilities/ravel.rst", "tensor/utilities/repeat.rst", "tensor/utilities/reshape.rst", "tensor/utilities/split.rst", "tensor/utilities/squeeze.rst", "tensor/utilities/stack.rst", "tensor/utilities/tile.rst", "tensor/utilities/tril.rst", "tensor/utilities/triu.rst", "tensor/utilities/unsqueeze.rst", "tensor/utilities/vstack.rst", "transforms/Compose.rst", "transforms/ToTensor.rst", "transforms/image/CenterCrop.rst", "transforms/image/Normalize.rst", "transforms/image/RandomCrop.rst", "transforms/image/RandomGrayscale.rst", "transforms/image/RandomHorizontalFlip.rst", "transforms/image/RandomRotation.rst", "transforms/image/RandomVerticalFlip.rst", "transforms/image/Resize.rst", "transforms/image/index.rst", "transforms/transforms.rst"], "indexentries": {"abs() (in module lucid)": [[348, "lucid.abs", false]], "adadelta (class in lucid.optim)": [[301, "lucid.optim.Adadelta", false]], "adagrad (class in lucid.optim)": [[302, "lucid.optim.Adagrad", false]], "adam (class in lucid.optim)": [[303, "lucid.optim.Adam", false]], "adamax (class in lucid.optim)": [[305, "lucid.optim.Adamax", false]], "adamw (class in lucid.optim)": [[304, "lucid.optim.AdamW", false]], "adaptive_avg_pool1d() (in module lucid.nn.functional)": [[198, "lucid.nn.functional.adaptive_avg_pool1d", false]], "adaptive_avg_pool2d() (in module lucid.nn.functional)": [[199, "lucid.nn.functional.adaptive_avg_pool2d", false]], "adaptive_avg_pool3d() (in module lucid.nn.functional)": [[200, "lucid.nn.functional.adaptive_avg_pool3d", false]], "adaptiveavgpool1d (class in lucid.nn)": [[277, "lucid.nn.AdaptiveAvgPool1d", false]], "adaptiveavgpool2d (class in lucid.nn)": [[278, "lucid.nn.AdaptiveAvgPool2d", false]], "adaptiveavgpool3d (class in lucid.nn)": [[279, "lucid.nn.AdaptiveAvgPool3d", false]], "add() (in module lucid)": [[326, "lucid.add", false]], "alexnet (class in lucid.models)": [[27, "lucid.models.AlexNet", false]], "alexnet() (in module lucid.models)": [[28, "lucid.models.alexnet", false]], "alpha_dropout() (in module lucid.nn.functional)": [[175, "lucid.nn.functional.alpha_dropout", false]], "alphadropout (class in lucid.nn)": [[249, "lucid.nn.AlphaDropout", false]], "arange() (in module lucid)": [[337, "lucid.arange", false]], "arccos() (in module lucid)": [[349, "lucid.arccos", false]], "arcsin() (in module lucid)": [[350, "lucid.arcsin", false]], "arctan() (in module lucid)": [[351, "lucid.arctan", false]], "asgd (class in lucid.optim)": [[300, "lucid.optim.ASGD", false]], "avg_pool1d() (in module lucid.nn.functional)": [[201, "lucid.nn.functional.avg_pool1d", false]], "avg_pool2d() (in module lucid.nn.functional)": [[202, "lucid.nn.functional.avg_pool2d", false]], "avg_pool3d() (in module lucid.nn.functional)": [[203, "lucid.nn.functional.avg_pool3d", false]], "avgpool1d (class in lucid.nn)": [[280, "lucid.nn.AvgPool1d", false]], "avgpool2d (class in lucid.nn)": [[281, "lucid.nn.AvgPool2d", false]], "avgpool3d (class in lucid.nn)": [[282, "lucid.nn.AvgPool3d", false]], "batch_norm() (in module lucid.nn.functional)": [[193, "lucid.nn.functional.batch_norm", false]], "batchnorm1d (class in lucid.nn)": [[268, "lucid.nn.BatchNorm1d", false]], "batchnorm2d (class in lucid.nn)": [[269, "lucid.nn.BatchNorm2d", false]], "batchnorm3d (class in lucid.nn)": [[270, "lucid.nn.BatchNorm3d", false]], "bceloss (class in lucid.nn)": [[262, "lucid.nn.BCELoss", false]], "bernoulli() (in module lucid.random)": [[317, "lucid.random.bernoulli", false]], "bilinear (class in lucid.nn)": [[258, "lucid.nn.Bilinear", false]], "bilinear() (in module lucid.nn.functional)": [[184, "lucid.nn.functional.bilinear", false]], "binary_cross_entropy() (in module lucid.nn.functional)": [[187, "lucid.nn.functional.binary_cross_entropy", false]], "broadcast_to() (in module lucid)": [[374, "lucid.broadcast_to", false]], "buffer (class in lucid.nn)": [[150, "lucid.nn.Buffer", false]], "centercrop (class in lucid.transforms)": [[394, "lucid.transforms.CenterCrop", false]], "cholesky() (in module lucid.linalg)": [[16, "lucid.linalg.cholesky", false]], "cifar10 (class in lucid.datasets)": [[5, "lucid.datasets.CIFAR10", false]], "cifar100 (class in lucid.datasets)": [[6, "lucid.datasets.CIFAR100", false]], "clip() (in module lucid)": [[352, "lucid.clip", false]], "compose (class in lucid.transforms)": [[392, "lucid.transforms.Compose", false]], "concatdataset (class in lucid.data)": [[0, "lucid.data.ConcatDataset", false]], "concatenate() (in module lucid)": [[375, "lucid.concatenate", false]], "constant() (in module lucid.nn.init)": [[221, "lucid.nn.init.constant", false]], "conv1d (class in lucid.nn)": [[245, "lucid.nn.Conv1d", false]], "conv1d() (in module lucid.nn.functional)": [[170, "lucid.nn.functional.conv1d", false]], "conv2d (class in lucid.nn)": [[246, "lucid.nn.Conv2d", false]], "conv2d() (in module lucid.nn.functional)": [[171, "lucid.nn.functional.conv2d", false]], "conv3d (class in lucid.nn)": [[247, "lucid.nn.Conv3d", false]], "conv3d() (in module lucid.nn.functional)": [[172, "lucid.nn.functional.conv3d", false]], "convbnrelu1d (class in lucid.nn)": [[212, "lucid.nn.ConvBNReLU1d", false]], "convbnrelu2d (class in lucid.nn)": [[213, "lucid.nn.ConvBNReLU2d", false]], "convbnrelu3d (class in lucid.nn)": [[214, "lucid.nn.ConvBNReLU3d", false]], "convnext (class in lucid.models)": [[29, "lucid.models.ConvNeXt", false]], "convnext_base() (in module lucid.models)": [[31, "lucid.models.convnext_base", false]], "convnext_large() (in module lucid.models)": [[32, "lucid.models.convnext_large", false]], "convnext_small() (in module lucid.models)": [[33, "lucid.models.convnext_small", false]], "convnext_tiny() (in module lucid.models)": [[34, "lucid.models.convnext_tiny", false]], "convnext_v2 (class in lucid.models)": [[30, "lucid.models.ConvNeXt_V2", false]], "convnext_v2_atto() (in module lucid.models)": [[35, "lucid.models.convnext_v2_atto", false]], "convnext_v2_base() (in module lucid.models)": [[36, "lucid.models.convnext_v2_base", false]], "convnext_v2_femto() (in module lucid.models)": [[37, "lucid.models.convnext_v2_femto", false]], "convnext_v2_huge() (in module lucid.models)": [[38, "lucid.models.convnext_v2_huge", false]], "convnext_v2_large() (in module lucid.models)": [[39, "lucid.models.convnext_v2_large", false]], "convnext_v2_nano() (in module lucid.models)": [[40, "lucid.models.convnext_v2_nano", false]], "convnext_v2_pico() (in module lucid.models)": [[41, "lucid.models.convnext_v2_pico", false]], "convnext_v2_tiny() (in module lucid.models)": [[42, "lucid.models.convnext_v2_tiny", false]], "convnext_xlarge() (in module lucid.models)": [[43, "lucid.models.convnext_xlarge", false]], "cos() (in module lucid)": [[353, "lucid.cos", false]], "cosh() (in module lucid)": [[354, "lucid.cosh", false]], "cross_entropy() (in module lucid.nn.functional)": [[188, "lucid.nn.functional.cross_entropy", false]], "crossentropyloss (class in lucid.nn)": [[263, "lucid.nn.CrossEntropyLoss", false]], "cube() (in module lucid)": [[355, "lucid.cube", false]], "dataloader (class in lucid.data)": [[1, "lucid.data.DataLoader", false]], "dataset (class in lucid.data)": [[2, "lucid.data.Dataset", false]], "densenet (class in lucid.models)": [[44, "lucid.models.DenseNet", false]], "densenet_121() (in module lucid.models)": [[45, "lucid.models.densenet_121", false]], "densenet_169() (in module lucid.models)": [[46, "lucid.models.densenet_169", false]], "densenet_201() (in module lucid.models)": [[47, "lucid.models.densenet_201", false]], "densenet_264() (in module lucid.models)": [[48, "lucid.models.densenet_264", false]], "depthseparableconv1d (class in lucid.nn)": [[215, "lucid.nn.DepthSeparableConv1d", false]], "depthseparableconv2d (class in lucid.nn)": [[216, "lucid.nn.DepthSeparableConv2d", false]], "depthseparableconv3d (class in lucid.nn)": [[217, "lucid.nn.DepthSeparableConv3d", false]], "det() (in module lucid.linalg)": [[17, "lucid.linalg.det", false]], "diag() (in module lucid)": [[338, "lucid.diag", false]], "div() (in module lucid)": [[327, "lucid.div", false]], "dot() (in module lucid)": [[328, "lucid.dot", false]], "drop_block() (in module lucid.nn.functional)": [[176, "lucid.nn.functional.drop_block", false]], "drop_path() (in module lucid.nn.functional)": [[177, "lucid.nn.functional.drop_path", false]], "dropblock (class in lucid.nn)": [[250, "lucid.nn.DropBlock", false]], "dropout (class in lucid.nn)": [[252, "lucid.nn.Dropout", false]], "dropout() (in module lucid.nn.functional)": [[178, "lucid.nn.functional.dropout", false]], "dropout1d (class in lucid.nn)": [[253, "lucid.nn.Dropout1d", false]], "dropout1d() (in module lucid.nn.functional)": [[179, "lucid.nn.functional.dropout1d", false]], "dropout2d (class in lucid.nn)": [[254, "lucid.nn.Dropout2d", false]], "dropout2d() (in module lucid.nn.functional)": [[180, "lucid.nn.functional.dropout2d", false]], "dropout3d (class in lucid.nn)": [[255, "lucid.nn.Dropout3d", false]], "dropout3d() (in module lucid.nn.functional)": [[181, "lucid.nn.functional.dropout3d", false]], "droppath (class in lucid.nn)": [[251, "lucid.nn.DropPath", false]], "efficientnet (class in lucid.models)": [[49, "lucid.models.EfficientNet", false]], "efficientnet_b0() (in module lucid.models)": [[51, "lucid.models.efficientnet_b0", false]], "efficientnet_b1() (in module lucid.models)": [[52, "lucid.models.efficientnet_b1", false]], "efficientnet_b2() (in module lucid.models)": [[53, "lucid.models.efficientnet_b2", false]], "efficientnet_b3() (in module lucid.models)": [[54, "lucid.models.efficientnet_b3", false]], "efficientnet_b4() (in module lucid.models)": [[55, "lucid.models.efficientnet_b4", false]], "efficientnet_b5() (in module lucid.models)": [[56, "lucid.models.efficientnet_b5", false]], "efficientnet_b6() (in module lucid.models)": [[57, "lucid.models.efficientnet_b6", false]], "efficientnet_b7() (in module lucid.models)": [[58, "lucid.models.efficientnet_b7", false]], "efficientnet_v2 (class in lucid.models)": [[50, "lucid.models.EfficientNet_V2", false]], "efficientnet_v2_l() (in module lucid.models)": [[59, "lucid.models.efficientnet_v2_l", false]], "efficientnet_v2_m() (in module lucid.models)": [[60, "lucid.models.efficientnet_v2_m", false]], "efficientnet_v2_s() (in module lucid.models)": [[61, "lucid.models.efficientnet_v2_s", false]], "efficientnet_v2_xl() (in module lucid.models)": [[62, "lucid.models.efficientnet_v2_xl", false]], "eig() (in module lucid.linalg)": [[18, "lucid.linalg.eig", false]], "elu (class in lucid.nn)": [[229, "lucid.nn.ELU", false]], "elu() (in module lucid.nn.functional)": [[159, "lucid.nn.functional.elu", false]], "embedding (class in lucid.nn)": [[287, "lucid.nn.Embedding", false]], "embedding() (in module lucid.nn.functional)": [[208, "lucid.nn.functional.embedding", false]], "empty() (in module lucid)": [[339, "lucid.empty", false]], "empty_like() (in module lucid)": [[340, "lucid.empty_like", false]], "exp() (in module lucid)": [[356, "lucid.exp", false]], "eye() (in module lucid)": [[341, "lucid.eye", false]], "fashionmnist (class in lucid.datasets)": [[7, "lucid.datasets.FashionMNIST", false]], "flatten() (in module lucid)": [[376, "lucid.flatten", false]], "gelu (class in lucid.nn)": [[230, "lucid.nn.GELU", false]], "gelu() (in module lucid.nn.functional)": [[160, "lucid.nn.functional.gelu", false]], "global_response_norm() (in module lucid.nn.functional)": [[194, "lucid.nn.functional.global_response_norm", false]], "globalresponsenorm (class in lucid.nn)": [[271, "lucid.nn.GlobalResponseNorm", false]], "grad_enabled() (in module lucid)": [[312, "lucid.grad_enabled", false]], "hardsigmoid (class in lucid.nn)": [[231, "lucid.nn.HardSigmoid", false]], "hardswish (class in lucid.nn)": [[232, "lucid.nn.HardSwish", false]], "hstack() (in module lucid)": [[377, "lucid.hstack", false]], "huber_loss() (in module lucid.nn.functional)": [[189, "lucid.nn.functional.huber_loss", false]], "huberloss (class in lucid.nn)": [[264, "lucid.nn.HuberLoss", false]], "identity (class in lucid.nn)": [[259, "lucid.nn.Identity", false]], "inception (class in lucid.models)": [[63, "lucid.models.Inception", false]], "inception_next_atto() (in module lucid.models)": [[68, "lucid.models.inception_next_atto", false]], "inception_next_base() (in module lucid.models)": [[69, "lucid.models.inception_next_base", false]], "inception_next_small() (in module lucid.models)": [[70, "lucid.models.inception_next_small", false]], "inception_next_tiny() (in module lucid.models)": [[71, "lucid.models.inception_next_tiny", false]], "inception_resnet_v1() (in module lucid.models)": [[73, "lucid.models.inception_resnet_v1", false]], "inception_resnet_v2() (in module lucid.models)": [[74, "lucid.models.inception_resnet_v2", false]], "inception_v1() (in module lucid.models)": [[64, "lucid.models.inception_v1", false]], "inception_v3() (in module lucid.models)": [[65, "lucid.models.inception_v3", false]], "inception_v4() (in module lucid.models)": [[66, "lucid.models.inception_v4", false]], "inceptionnext (class in lucid.models)": [[67, "lucid.models.InceptionNeXt", false]], "inceptionresnet (class in lucid.models)": [[72, "lucid.models.InceptionResNet", false]], "inner() (in module lucid)": [[329, "lucid.inner", false]], "instance_norm() (in module lucid.nn.functional)": [[196, "lucid.nn.functional.instance_norm", false]], "instancenorm1d (class in lucid.nn)": [[272, "lucid.nn.InstanceNorm1d", false]], "instancenorm2d (class in lucid.nn)": [[273, "lucid.nn.InstanceNorm2d", false]], "instancenorm3d (class in lucid.nn)": [[274, "lucid.nn.InstanceNorm3d", false]], "interpolate() (in module lucid.nn.functional)": [[210, "lucid.nn.functional.interpolate", false]], "inv() (in module lucid.linalg)": [[20, "lucid.linalg.inv", false]], "kaiming_normal() (in module lucid.nn.init)": [[223, "lucid.nn.init.kaiming_normal", false]], "kaiming_uniform() (in module lucid.nn.init)": [[224, "lucid.nn.init.kaiming_uniform", false]], "layer_norm() (in module lucid.nn.functional)": [[197, "lucid.nn.functional.layer_norm", false]], "layernorm (class in lucid.nn)": [[275, "lucid.nn.LayerNorm", false]], "leaky_relu() (in module lucid.nn.functional)": [[162, "lucid.nn.functional.leaky_relu", false]], "leakyrelu (class in lucid.nn)": [[233, "lucid.nn.LeakyReLU", false]], "lenet (class in lucid.models)": [[76, "lucid.models.LeNet", false]], "lenet_1() (in module lucid.models)": [[77, "lucid.models.lenet_1", false]], "lenet_4() (in module lucid.models)": [[78, "lucid.models.lenet_4", false]], "lenet_5() (in module lucid.models)": [[79, "lucid.models.lenet_5", false]], "linear (class in lucid.nn)": [[260, "lucid.nn.Linear", false]], "linear() (in module lucid.nn.functional)": [[186, "lucid.nn.functional.linear", false]], "linspace() (in module lucid)": [[342, "lucid.linspace", false]], "log() (in module lucid)": [[357, "lucid.log", false]], "lucid": [[14, "module-lucid", false]], "matmul() (in module lucid)": [[330, "lucid.matmul", false]], "matrix_power() (in module lucid.linalg)": [[21, "lucid.linalg.matrix_power", false]], "max() (in module lucid)": [[358, "lucid.max", false]], "max_pool1d() (in module lucid.nn.functional)": [[205, "lucid.nn.functional.max_pool1d", false]], "max_pool2d() (in module lucid.nn.functional)": [[206, "lucid.nn.functional.max_pool2d", false]], "max_pool3d() (in module lucid.nn.functional)": [[207, "lucid.nn.functional.max_pool3d", false]], "maximum() (in module lucid)": [[331, "lucid.maximum", false]], "maxpool1d (class in lucid.nn)": [[283, "lucid.nn.MaxPool1d", false]], "maxpool2d (class in lucid.nn)": [[284, "lucid.nn.MaxPool2d", false]], "maxpool3d (class in lucid.nn)": [[285, "lucid.nn.MaxPool3d", false]], "mean() (in module lucid)": [[359, "lucid.mean", false]], "meshgrid() (in module lucid)": [[379, "lucid.meshgrid", false]], "min() (in module lucid)": [[360, "lucid.min", false]], "minimum() (in module lucid)": [[332, "lucid.minimum", false]], "mnist (class in lucid.datasets)": [[8, "lucid.datasets.MNIST", false]], "mobilenet (class in lucid.models)": [[80, "lucid.models.MobileNet", false]], "mobilenet() (in module lucid.models)": [[84, "lucid.models.mobilenet", false]], "mobilenet_v2 (class in lucid.models)": [[81, "lucid.models.MobileNet_V2", false]], "mobilenet_v2() (in module lucid.models)": [[85, "lucid.models.mobilenet_v2", false]], "mobilenet_v3 (class in lucid.models)": [[82, "lucid.models.MobileNet_V3", false]], "mobilenet_v3_large() (in module lucid.models)": [[86, "lucid.models.mobilenet_v3_large", false]], "mobilenet_v3_small() (in module lucid.models)": [[87, "lucid.models.mobilenet_v3_small", false]], "mobilenet_v4 (class in lucid.models)": [[83, "lucid.models.MobileNet_V4", false]], "mobilenet_v4_conv_large() (in module lucid.models)": [[88, "lucid.models.mobilenet_v4_conv_large", false]], "mobilenet_v4_conv_medium() (in module lucid.models)": [[89, "lucid.models.mobilenet_v4_conv_medium", false]], "mobilenet_v4_conv_small() (in module lucid.models)": [[90, "lucid.models.mobilenet_v4_conv_small", false]], "mobilenet_v4_hybrid_large() (in module lucid.models)": [[91, "lucid.models.mobilenet_v4_hybrid_large", false]], "mobilenet_v4_hybrid_medium() (in module lucid.models)": [[92, "lucid.models.mobilenet_v4_hybrid_medium", false]], "module": [[14, "module-lucid", false]], "module (class in lucid.nn)": [[151, "lucid.nn.Module", false]], "moduledict (class in lucid.nn)": [[153, "lucid.nn.ModuleDict", false]], "modulelist (class in lucid.nn)": [[154, "lucid.nn.ModuleList", false]], "mse_loss() (in module lucid.nn.functional)": [[191, "lucid.nn.functional.mse_loss", false]], "mseloss (class in lucid.nn)": [[265, "lucid.nn.MSELoss", false]], "mul() (in module lucid)": [[333, "lucid.mul", false]], "multiheadattention (class in lucid.nn)": [[242, "lucid.nn.MultiHeadAttention", false]], "nadam (class in lucid.optim)": [[306, "lucid.optim.NAdam", false]], "nll_loss() (in module lucid.nn.functional)": [[192, "lucid.nn.functional.nll_loss", false]], "nllloss (class in lucid.nn)": [[266, "lucid.nn.NLLLoss", false]], "no_grad() (in module lucid)": [[314, "lucid.no_grad", false]], "norm() (in module lucid.linalg)": [[22, "lucid.linalg.norm", false]], "normal() (in module lucid.nn.init)": [[225, "lucid.nn.init.normal", false]], "normalize (class in lucid.transforms)": [[395, "lucid.transforms.Normalize", false]], "ones() (in module lucid)": [[343, "lucid.ones", false]], "ones_like() (in module lucid)": [[344, "lucid.ones_like", false]], "optimizer (class in lucid.optim)": [[298, "lucid.optim.Optimizer", false]], "outer() (in module lucid)": [[334, "lucid.outer", false]], "pad() (in module lucid)": [[380, "lucid.pad", false]], "parameter (class in lucid.nn)": [[152, "lucid.nn.Parameter", false]], "parameterdict (class in lucid.nn)": [[155, "lucid.nn.ParameterDict", false]], "parameterlist (class in lucid.nn)": [[156, "lucid.nn.ParameterList", false]], "pinv() (in module lucid.linalg)": [[23, "lucid.linalg.pinv", false]], "power() (in module lucid)": [[335, "lucid.power", false]], "qr() (in module lucid.linalg)": [[24, "lucid.linalg.qr", false]], "radam (class in lucid.optim)": [[307, "lucid.optim.RAdam", false]], "rand() (in module lucid.random)": [[319, "lucid.random.rand", false]], "randint() (in module lucid.random)": [[320, "lucid.random.randint", false]], "randn() (in module lucid.random)": [[321, "lucid.random.randn", false]], "randomcrop (class in lucid.transforms)": [[396, "lucid.transforms.RandomCrop", false]], "randomgrayscale (class in lucid.transforms)": [[397, "lucid.transforms.RandomGrayscale", false]], "randomhorizontalflip (class in lucid.transforms)": [[398, "lucid.transforms.RandomHorizontalFlip", false]], "randomrotation (class in lucid.transforms)": [[399, "lucid.transforms.RandomRotation", false]], "randomverticalflip (class in lucid.transforms)": [[400, "lucid.transforms.RandomVerticalFlip", false]], "ravel() (in module lucid)": [[381, "lucid.ravel", false]], "rearrange() (in module lucid.einops)": [[12, "lucid.einops.rearrange", false]], "reciprocal() (in module lucid)": [[361, "lucid.reciprocal", false]], "reduce() (in module lucid.einops)": [[13, "lucid.einops.reduce", false]], "register_model() (in module lucid)": [[315, "lucid.register_model", false]], "relu (class in lucid.nn)": [[234, "lucid.nn.ReLU", false]], "relu() (in module lucid.nn.functional)": [[163, "lucid.nn.functional.relu", false]], "relu6 (class in lucid.nn)": [[235, "lucid.nn.ReLU6", false]], "repeat() (in module lucid)": [[382, "lucid.repeat", false]], "reshape() (in module lucid)": [[383, "lucid.reshape", false]], "resize (class in lucid.transforms)": [[401, "lucid.transforms.Resize", false]], "resnest (class in lucid.models)": [[93, "lucid.models.ResNeSt", false]], "resnest_101() (in module lucid.models)": [[94, "lucid.models.resnest_101", false]], "resnest_14() (in module lucid.models)": [[95, "lucid.models.resnest_14", false]], "resnest_200() (in module lucid.models)": [[96, "lucid.models.resnest_200", false]], "resnest_26() (in module lucid.models)": [[97, "lucid.models.resnest_26", false]], "resnest_269() (in module lucid.models)": [[98, "lucid.models.resnest_269", false]], "resnest_50() (in module lucid.models)": [[99, "lucid.models.resnest_50", false]], "resnest_50_1s4x24d() (in module lucid.models)": [[100, "lucid.models.resnest_50_1s4x24d", false]], "resnest_50_4s2x40d() (in module lucid.models)": [[101, "lucid.models.resnest_50_4s2x40d", false]], "resnet (class in lucid.models)": [[102, "lucid.models.ResNet", false]], "resnet_1001() (in module lucid.models)": [[103, "lucid.models.resnet_1001", false]], "resnet_101() (in module lucid.models)": [[104, "lucid.models.resnet_101", false]], "resnet_152() (in module lucid.models)": [[105, "lucid.models.resnet_152", false]], "resnet_18() (in module lucid.models)": [[106, "lucid.models.resnet_18", false]], "resnet_200() (in module lucid.models)": [[107, "lucid.models.resnet_200", false]], "resnet_269() (in module lucid.models)": [[108, "lucid.models.resnet_269", false]], "resnet_34() (in module lucid.models)": [[109, "lucid.models.resnet_34", false]], "resnet_50() (in module lucid.models)": [[110, "lucid.models.resnet_50", false]], "resnext (class in lucid.models)": [[113, "lucid.models.ResNeXt", false]], "resnext_101_32x16d() (in module lucid.models)": [[114, "lucid.models.resnext_101_32x16d", false]], "resnext_101_32x32d() (in module lucid.models)": [[115, "lucid.models.resnext_101_32x32d", false]], "resnext_101_32x4d() (in module lucid.models)": [[116, "lucid.models.resnext_101_32x4d", false]], "resnext_101_32x8d() (in module lucid.models)": [[117, "lucid.models.resnext_101_32x8d", false]], "resnext_101_64x4d() (in module lucid.models)": [[118, "lucid.models.resnext_101_64x4d", false]], "resnext_50_32x4d() (in module lucid.models)": [[119, "lucid.models.resnext_50_32x4d", false]], "rmsprop (class in lucid.optim)": [[308, "lucid.optim.RMSprop", false]], "rotate() (in module lucid.nn.functional)": [[211, "lucid.nn.functional.rotate", false]], "rprop (class in lucid.optim)": [[309, "lucid.optim.Rprop", false]], "scaled_dot_product_attention() (in module lucid.nn.functional)": [[169, "lucid.nn.functional.scaled_dot_product_attention", false]], "scaleddotproductattention (class in lucid.nn)": [[243, "lucid.nn.ScaledDotProductAttention", false]], "se_resnet_101() (in module lucid.models)": [[121, "lucid.models.se_resnet_101", false]], "se_resnet_152() (in module lucid.models)": [[122, "lucid.models.se_resnet_152", false]], "se_resnet_18() (in module lucid.models)": [[123, "lucid.models.se_resnet_18", false]], "se_resnet_34() (in module lucid.models)": [[124, "lucid.models.se_resnet_34", false]], "se_resnet_50() (in module lucid.models)": [[125, "lucid.models.se_resnet_50", false]], "se_resnext_101_32x4d() (in module lucid.models)": [[126, "lucid.models.se_resnext_101_32x4d", false]], "se_resnext_101_32x8d() (in module lucid.models)": [[127, "lucid.models.se_resnext_101_32x8d", false]], "se_resnext_101_64x4d() (in module lucid.models)": [[128, "lucid.models.se_resnext_101_64x4d", false]], "se_resnext_50_32x4d() (in module lucid.models)": [[129, "lucid.models.se_resnext_50_32x4d", false]], "seed() (in module lucid.random)": [[322, "lucid.random.seed", false]], "selectivekernel (class in lucid.nn)": [[219, "lucid.nn.SelectiveKernel", false]], "selu (class in lucid.nn)": [[236, "lucid.nn.SELU", false]], "selu() (in module lucid.nn.functional)": [[164, "lucid.nn.functional.selu", false]], "semodule (class in lucid.nn)": [[218, "lucid.nn.SEModule", false]], "senet (class in lucid.models)": [[120, "lucid.models.SENet", false]], "sequential (class in lucid.nn)": [[157, "lucid.nn.Sequential", false]], "sgd (class in lucid.optim)": [[310, "lucid.optim.SGD", false]], "sigmoid (class in lucid.nn)": [[237, "lucid.nn.Sigmoid", false]], "sigmoid() (in module lucid.nn.functional)": [[165, "lucid.nn.functional.sigmoid", false]], "sign() (in module lucid)": [[362, "lucid.sign", false]], "sin() (in module lucid)": [[363, "lucid.sin", false]], "sinh() (in module lucid)": [[364, "lucid.sinh", false]], "sk_resnet_18() (in module lucid.models)": [[131, "lucid.models.sk_resnet_18", false]], "sk_resnet_34() (in module lucid.models)": [[132, "lucid.models.sk_resnet_34", false]], "sk_resnet_50() (in module lucid.models)": [[133, "lucid.models.sk_resnet_50", false]], "sk_resnext_50_32x4d() (in module lucid.models)": [[134, "lucid.models.sk_resnext_50_32x4d", false]], "sknet (class in lucid.models)": [[130, "lucid.models.SKNet", false]], "softmax (class in lucid.nn)": [[238, "lucid.nn.Softmax", false]], "softmax() (in module lucid.nn.functional)": [[166, "lucid.nn.functional.softmax", false]], "solve() (in module lucid.linalg)": [[25, "lucid.linalg.solve", false]], "split() (in module lucid)": [[384, "lucid.split", false]], "sqrt() (in module lucid)": [[365, "lucid.sqrt", false]], "square() (in module lucid)": [[366, "lucid.square", false]], "squeeze() (in module lucid)": [[385, "lucid.squeeze", false]], "stack() (in module lucid)": [[386, "lucid.stack", false]], "sub() (in module lucid)": [[336, "lucid.sub", false]], "sum() (in module lucid)": [[367, "lucid.sum", false]], "summarize() (in module lucid.models)": [[145, "lucid.models.summarize", false]], "svd() (in module lucid.linalg)": [[26, "lucid.linalg.svd", false]], "swish (class in lucid.nn)": [[239, "lucid.nn.Swish", false]], "tan() (in module lucid)": [[368, "lucid.tan", false]], "tanh (class in lucid.nn)": [[240, "lucid.nn.Tanh", false]], "tanh() (in module lucid)": [[369, "lucid.tanh", false]], "tanh() (in module lucid.nn.functional)": [[167, "lucid.nn.functional.tanh", false]], "tensor (class in lucid)": [[325, "lucid.Tensor", false]], "tensor() (in module lucid)": [[373, "lucid.tensor", false]], "tile() (in module lucid)": [[387, "lucid.tile", false]], "totensor (class in lucid.transforms)": [[393, "lucid.transforms.ToTensor", false]], "trace() (in module lucid)": [[370, "lucid.trace", false]], "transformer (class in lucid.models)": [[146, "lucid.models.Transformer", false]], "transformer (class in lucid.nn)": [[289, "lucid.nn.Transformer", false]], "transformer_base() (in module lucid.models)": [[147, "lucid.models.transformer_base", false]], "transformer_big() (in module lucid.models)": [[148, "lucid.models.transformer_big", false]], "transformerdecoder (class in lucid.nn)": [[290, "lucid.nn.TransformerDecoder", false]], "transformerdecoderlayer (class in lucid.nn)": [[291, "lucid.nn.TransformerDecoderLayer", false]], "transformerencoder (class in lucid.nn)": [[292, "lucid.nn.TransformerEncoder", false]], "transformerencoderlayer (class in lucid.nn)": [[293, "lucid.nn.TransformerEncoderLayer", false]], "transpose() (in module lucid)": [[371, "lucid.transpose", false]], "tril() (in module lucid)": [[388, "lucid.tril", false]], "triu() (in module lucid)": [[389, "lucid.triu", false]], "unfold() (in module lucid.nn.functional)": [[174, "lucid.nn.functional.unfold", false]], "uniform() (in module lucid.nn.init)": [[226, "lucid.nn.init.uniform", false]], "uniform() (in module lucid.random)": [[323, "lucid.random.uniform", false]], "unsqueeze() (in module lucid)": [[390, "lucid.unsqueeze", false]], "upsample (class in lucid.nn)": [[295, "lucid.nn.Upsample", false]], "var() (in module lucid)": [[372, "lucid.var", false]], "vggnet (class in lucid.models)": [[135, "lucid.models.VGGNet", false]], "vggnet_11() (in module lucid.models)": [[136, "lucid.models.vggnet_11", false]], "vggnet_13() (in module lucid.models)": [[137, "lucid.models.vggnet_13", false]], "vggnet_16() (in module lucid.models)": [[138, "lucid.models.vggnet_16", false]], "vggnet_19() (in module lucid.models)": [[139, "lucid.models.vggnet_19", false]], "vstack() (in module lucid)": [[391, "lucid.vstack", false]], "wide_resnet_101() (in module lucid.models)": [[111, "lucid.models.wide_resnet_101", false]], "wide_resnet_50() (in module lucid.models)": [[112, "lucid.models.wide_resnet_50", false]], "xavier_normal() (in module lucid.nn.init)": [[227, "lucid.nn.init.xavier_normal", false]], "xavier_uniform() (in module lucid.nn.init)": [[228, "lucid.nn.init.xavier_uniform", false]], "xception (class in lucid.models)": [[140, "lucid.models.Xception", false]], "xception() (in module lucid.models)": [[141, "lucid.models.xception", false]], "zeros() (in module lucid)": [[345, "lucid.zeros", false]], "zeros_like() (in module lucid)": [[346, "lucid.zeros_like", false]], "zfnet (class in lucid.models)": [[142, "lucid.models.ZFNet", false]], "zfnet() (in module lucid.models)": [[143, "lucid.models.zfnet", false]]}, "objects": {"": [[14, 0, 0, "-", "lucid"]], "lucid": [[325, 1, 1, "", "Tensor"], [348, 2, 1, "", "abs"], [326, 2, 1, "", "add"], [337, 2, 1, "", "arange"], [349, 2, 1, "", "arccos"], [350, 2, 1, "", "arcsin"], [351, 2, 1, "", "arctan"], [374, 2, 1, "", "broadcast_to"], [352, 2, 1, "", "clip"], [375, 2, 1, "", "concatenate"], [353, 2, 1, "", "cos"], [354, 2, 1, "", "cosh"], [355, 2, 1, "", "cube"], [338, 2, 1, "", "diag"], [327, 2, 1, "", "div"], [328, 2, 1, "", "dot"], [339, 2, 1, "", "empty"], [340, 2, 1, "", "empty_like"], [356, 2, 1, "", "exp"], [341, 2, 1, "", "eye"], [376, 2, 1, "", "flatten"], [312, 2, 1, "", "grad_enabled"], [377, 2, 1, "", "hstack"], [329, 2, 1, "", "inner"], [342, 2, 1, "", "linspace"], [357, 2, 1, "", "log"], [330, 2, 1, "", "matmul"], [358, 2, 1, "", "max"], [331, 2, 1, "", "maximum"], [359, 2, 1, "", "mean"], [379, 2, 1, "", "meshgrid"], [360, 2, 1, "", "min"], [332, 2, 1, "", "minimum"], [333, 2, 1, "", "mul"], [314, 2, 1, "", "no_grad"], [343, 2, 1, "", "ones"], [344, 2, 1, "", "ones_like"], [334, 2, 1, "", "outer"], [380, 2, 1, "", "pad"], [335, 2, 1, "", "power"], [381, 2, 1, "", "ravel"], [361, 2, 1, "", "reciprocal"], [315, 2, 1, "", "register_model"], [382, 2, 1, "", "repeat"], [383, 2, 1, "", "reshape"], [362, 2, 1, "", "sign"], [363, 2, 1, "", "sin"], [364, 2, 1, "", "sinh"], [384, 2, 1, "", "split"], [365, 2, 1, "", "sqrt"], [366, 2, 1, "", "square"], [385, 2, 1, "", "squeeze"], [386, 2, 1, "", "stack"], [336, 2, 1, "", "sub"], [367, 2, 1, "", "sum"], [368, 2, 1, "", "tan"], [369, 2, 1, "", "tanh"], [373, 2, 1, "", "tensor"], [387, 2, 1, "", "tile"], [370, 2, 1, "", "trace"], [371, 2, 1, "", "transpose"], [388, 2, 1, "", "tril"], [389, 2, 1, "", "triu"], [390, 2, 1, "", "unsqueeze"], [372, 2, 1, "", "var"], [391, 2, 1, "", "vstack"], [345, 2, 1, "", "zeros"], [346, 2, 1, "", "zeros_like"]], "lucid.data": [[0, 1, 1, "", "ConcatDataset"], [1, 1, 1, "", "DataLoader"], [2, 1, 1, "", "Dataset"]], "lucid.datasets": [[5, 1, 1, "", "CIFAR10"], [6, 1, 1, "", "CIFAR100"], [7, 1, 1, "", "FashionMNIST"], [8, 1, 1, "", "MNIST"]], "lucid.einops": [[12, 2, 1, "", "rearrange"], [13, 2, 1, "", "reduce"]], "lucid.linalg": [[16, 2, 1, "", "cholesky"], [17, 2, 1, "", "det"], [18, 2, 1, "", "eig"], [20, 2, 1, "", "inv"], [21, 2, 1, "", "matrix_power"], [22, 2, 1, "", "norm"], [23, 2, 1, "", "pinv"], [24, 2, 1, "", "qr"], [25, 2, 1, "", "solve"], [26, 2, 1, "", "svd"]], "lucid.models": [[27, 1, 1, "", "AlexNet"], [29, 1, 1, "", "ConvNeXt"], [30, 1, 1, "", "ConvNeXt_V2"], [44, 1, 1, "", "DenseNet"], [49, 1, 1, "", "EfficientNet"], [50, 1, 1, "", "EfficientNet_V2"], [63, 1, 1, "", "Inception"], [67, 1, 1, "", "InceptionNeXt"], [72, 1, 1, "", "InceptionResNet"], [76, 1, 1, "", "LeNet"], [80, 1, 1, "", "MobileNet"], [81, 1, 1, "", "MobileNet_V2"], [82, 1, 1, "", "MobileNet_V3"], [83, 1, 1, "", "MobileNet_V4"], [93, 1, 1, "", "ResNeSt"], [113, 1, 1, "", "ResNeXt"], [102, 1, 1, "", "ResNet"], [120, 1, 1, "", "SENet"], [130, 1, 1, "", "SKNet"], [146, 1, 1, "", "Transformer"], [135, 1, 1, "", "VGGNet"], [140, 1, 1, "", "Xception"], [142, 1, 1, "", "ZFNet"], [28, 2, 1, "", "alexnet"], [31, 2, 1, "", "convnext_base"], [32, 2, 1, "", "convnext_large"], [33, 2, 1, "", "convnext_small"], [34, 2, 1, "", "convnext_tiny"], [35, 2, 1, "", "convnext_v2_atto"], [36, 2, 1, "", "convnext_v2_base"], [37, 2, 1, "", "convnext_v2_femto"], [38, 2, 1, "", "convnext_v2_huge"], [39, 2, 1, "", "convnext_v2_large"], [40, 2, 1, "", "convnext_v2_nano"], [41, 2, 1, "", "convnext_v2_pico"], [42, 2, 1, "", "convnext_v2_tiny"], [43, 2, 1, "", "convnext_xlarge"], [45, 2, 1, "", "densenet_121"], [46, 2, 1, "", "densenet_169"], [47, 2, 1, "", "densenet_201"], [48, 2, 1, "", "densenet_264"], [51, 2, 1, "", "efficientnet_b0"], [52, 2, 1, "", "efficientnet_b1"], [53, 2, 1, "", "efficientnet_b2"], [54, 2, 1, "", "efficientnet_b3"], [55, 2, 1, "", "efficientnet_b4"], [56, 2, 1, "", "efficientnet_b5"], [57, 2, 1, "", "efficientnet_b6"], [58, 2, 1, "", "efficientnet_b7"], [59, 2, 1, "", "efficientnet_v2_l"], [60, 2, 1, "", "efficientnet_v2_m"], [61, 2, 1, "", "efficientnet_v2_s"], [62, 2, 1, "", "efficientnet_v2_xl"], [68, 2, 1, "", "inception_next_atto"], [69, 2, 1, "", "inception_next_base"], [70, 2, 1, "", "inception_next_small"], [71, 2, 1, "", "inception_next_tiny"], [73, 2, 1, "", "inception_resnet_v1"], [74, 2, 1, "", "inception_resnet_v2"], [64, 2, 1, "", "inception_v1"], [65, 2, 1, "", "inception_v3"], [66, 2, 1, "", "inception_v4"], [77, 2, 1, "", "lenet_1"], [78, 2, 1, "", "lenet_4"], [79, 2, 1, "", "lenet_5"], [84, 2, 1, "", "mobilenet"], [85, 2, 1, "", "mobilenet_v2"], [86, 2, 1, "", "mobilenet_v3_large"], [87, 2, 1, "", "mobilenet_v3_small"], [88, 2, 1, "", "mobilenet_v4_conv_large"], [89, 2, 1, "", "mobilenet_v4_conv_medium"], [90, 2, 1, "", "mobilenet_v4_conv_small"], [91, 2, 1, "", "mobilenet_v4_hybrid_large"], [92, 2, 1, "", "mobilenet_v4_hybrid_medium"], [94, 2, 1, "", "resnest_101"], [95, 2, 1, "", "resnest_14"], [96, 2, 1, "", "resnest_200"], [97, 2, 1, "", "resnest_26"], [98, 2, 1, "", "resnest_269"], [99, 2, 1, "", "resnest_50"], [100, 2, 1, "", "resnest_50_1s4x24d"], [101, 2, 1, "", "resnest_50_4s2x40d"], [103, 2, 1, "", "resnet_1001"], [104, 2, 1, "", "resnet_101"], [105, 2, 1, "", "resnet_152"], [106, 2, 1, "", "resnet_18"], [107, 2, 1, "", "resnet_200"], [108, 2, 1, "", "resnet_269"], [109, 2, 1, "", "resnet_34"], [110, 2, 1, "", "resnet_50"], [114, 2, 1, "", "resnext_101_32x16d"], [115, 2, 1, "", "resnext_101_32x32d"], [116, 2, 1, "", "resnext_101_32x4d"], [117, 2, 1, "", "resnext_101_32x8d"], [118, 2, 1, "", "resnext_101_64x4d"], [119, 2, 1, "", "resnext_50_32x4d"], [121, 2, 1, "", "se_resnet_101"], [122, 2, 1, "", "se_resnet_152"], [123, 2, 1, "", "se_resnet_18"], [124, 2, 1, "", "se_resnet_34"], [125, 2, 1, "", "se_resnet_50"], [126, 2, 1, "", "se_resnext_101_32x4d"], [127, 2, 1, "", "se_resnext_101_32x8d"], [128, 2, 1, "", "se_resnext_101_64x4d"], [129, 2, 1, "", "se_resnext_50_32x4d"], [131, 2, 1, "", "sk_resnet_18"], [132, 2, 1, "", "sk_resnet_34"], [133, 2, 1, "", "sk_resnet_50"], [134, 2, 1, "", "sk_resnext_50_32x4d"], [145, 2, 1, "", "summarize"], [147, 2, 1, "", "transformer_base"], [148, 2, 1, "", "transformer_big"], [136, 2, 1, "", "vggnet_11"], [137, 2, 1, "", "vggnet_13"], [138, 2, 1, "", "vggnet_16"], [139, 2, 1, "", "vggnet_19"], [111, 2, 1, "", "wide_resnet_101"], [112, 2, 1, "", "wide_resnet_50"], [141, 2, 1, "", "xception"], [143, 2, 1, "", "zfnet"]], "lucid.nn": [[277, 1, 1, "", "AdaptiveAvgPool1d"], [278, 1, 1, "", "AdaptiveAvgPool2d"], [279, 1, 1, "", "AdaptiveAvgPool3d"], [249, 1, 1, "", "AlphaDropout"], [280, 1, 1, "", "AvgPool1d"], [281, 1, 1, "", "AvgPool2d"], [282, 1, 1, "", "AvgPool3d"], [262, 1, 1, "", "BCELoss"], [268, 1, 1, "", "BatchNorm1d"], [269, 1, 1, "", "BatchNorm2d"], [270, 1, 1, "", "BatchNorm3d"], [258, 1, 1, "", "Bilinear"], [150, 1, 1, "", "Buffer"], [245, 1, 1, "", "Conv1d"], [246, 1, 1, "", "Conv2d"], [247, 1, 1, "", "Conv3d"], [212, 1, 1, "", "ConvBNReLU1d"], [213, 1, 1, "", "ConvBNReLU2d"], [214, 1, 1, "", "ConvBNReLU3d"], [263, 1, 1, "", "CrossEntropyLoss"], [215, 1, 1, "", "DepthSeparableConv1d"], [216, 1, 1, "", "DepthSeparableConv2d"], [217, 1, 1, "", "DepthSeparableConv3d"], [250, 1, 1, "", "DropBlock"], [251, 1, 1, "", "DropPath"], [252, 1, 1, "", "Dropout"], [253, 1, 1, "", "Dropout1d"], [254, 1, 1, "", "Dropout2d"], [255, 1, 1, "", "Dropout3d"], [229, 1, 1, "", "ELU"], [287, 1, 1, "", "Embedding"], [230, 1, 1, "", "GELU"], [271, 1, 1, "", "GlobalResponseNorm"], [231, 1, 1, "", "HardSigmoid"], [232, 1, 1, "", "HardSwish"], [264, 1, 1, "", "HuberLoss"], [259, 1, 1, "", "Identity"], [272, 1, 1, "", "InstanceNorm1d"], [273, 1, 1, "", "InstanceNorm2d"], [274, 1, 1, "", "InstanceNorm3d"], [275, 1, 1, "", "LayerNorm"], [233, 1, 1, "", "LeakyReLU"], [260, 1, 1, "", "Linear"], [265, 1, 1, "", "MSELoss"], [283, 1, 1, "", "MaxPool1d"], [284, 1, 1, "", "MaxPool2d"], [285, 1, 1, "", "MaxPool3d"], [151, 1, 1, "", "Module"], [153, 1, 1, "", "ModuleDict"], [154, 1, 1, "", "ModuleList"], [242, 1, 1, "", "MultiHeadAttention"], [266, 1, 1, "", "NLLLoss"], [152, 1, 1, "", "Parameter"], [155, 1, 1, "", "ParameterDict"], [156, 1, 1, "", "ParameterList"], [234, 1, 1, "", "ReLU"], [235, 1, 1, "", "ReLU6"], [236, 1, 1, "", "SELU"], [218, 1, 1, "", "SEModule"], [243, 1, 1, "", "ScaledDotProductAttention"], [219, 1, 1, "", "SelectiveKernel"], [157, 1, 1, "", "Sequential"], [237, 1, 1, "", "Sigmoid"], [238, 1, 1, "", "Softmax"], [239, 1, 1, "", "Swish"], [240, 1, 1, "", "Tanh"], [289, 1, 1, "", "Transformer"], [290, 1, 1, "", "TransformerDecoder"], [291, 1, 1, "", "TransformerDecoderLayer"], [292, 1, 1, "", "TransformerEncoder"], [293, 1, 1, "", "TransformerEncoderLayer"], [295, 1, 1, "", "Upsample"]], "lucid.nn.functional": [[198, 2, 1, "", "adaptive_avg_pool1d"], [199, 2, 1, "", "adaptive_avg_pool2d"], [200, 2, 1, "", "adaptive_avg_pool3d"], [175, 2, 1, "", "alpha_dropout"], [201, 2, 1, "", "avg_pool1d"], [202, 2, 1, "", "avg_pool2d"], [203, 2, 1, "", "avg_pool3d"], [193, 2, 1, "", "batch_norm"], [184, 2, 1, "", "bilinear"], [187, 2, 1, "", "binary_cross_entropy"], [170, 2, 1, "", "conv1d"], [171, 2, 1, "", "conv2d"], [172, 2, 1, "", "conv3d"], [188, 2, 1, "", "cross_entropy"], [176, 2, 1, "", "drop_block"], [177, 2, 1, "", "drop_path"], [178, 2, 1, "", "dropout"], [179, 2, 1, "", "dropout1d"], [180, 2, 1, "", "dropout2d"], [181, 2, 1, "", "dropout3d"], [159, 2, 1, "", "elu"], [208, 2, 1, "", "embedding"], [160, 2, 1, "", "gelu"], [194, 2, 1, "", "global_response_norm"], [189, 2, 1, "", "huber_loss"], [196, 2, 1, "", "instance_norm"], [210, 2, 1, "", "interpolate"], [197, 2, 1, "", "layer_norm"], [162, 2, 1, "", "leaky_relu"], [186, 2, 1, "", "linear"], [205, 2, 1, "", "max_pool1d"], [206, 2, 1, "", "max_pool2d"], [207, 2, 1, "", "max_pool3d"], [191, 2, 1, "", "mse_loss"], [192, 2, 1, "", "nll_loss"], [163, 2, 1, "", "relu"], [211, 2, 1, "", "rotate"], [169, 2, 1, "", "scaled_dot_product_attention"], [164, 2, 1, "", "selu"], [165, 2, 1, "", "sigmoid"], [166, 2, 1, "", "softmax"], [167, 2, 1, "", "tanh"], [174, 2, 1, "", "unfold"]], "lucid.nn.init": [[221, 2, 1, "", "constant"], [223, 2, 1, "", "kaiming_normal"], [224, 2, 1, "", "kaiming_uniform"], [225, 2, 1, "", "normal"], [226, 2, 1, "", "uniform"], [227, 2, 1, "", "xavier_normal"], [228, 2, 1, "", "xavier_uniform"]], "lucid.optim": [[300, 1, 1, "", "ASGD"], [301, 1, 1, "", "Adadelta"], [302, 1, 1, "", "Adagrad"], [303, 1, 1, "", "Adam"], [304, 1, 1, "", "AdamW"], [305, 1, 1, "", "Adamax"], [306, 1, 1, "", "NAdam"], [298, 1, 1, "", "Optimizer"], [307, 1, 1, "", "RAdam"], [308, 1, 1, "", "RMSprop"], [309, 1, 1, "", "Rprop"], [310, 1, 1, "", "SGD"]], "lucid.random": [[317, 2, 1, "", "bernoulli"], [319, 2, 1, "", "rand"], [320, 2, 1, "", "randint"], [321, 2, 1, "", "randn"], [322, 2, 1, "", "seed"], [323, 2, 1, "", "uniform"]], "lucid.transforms": [[394, 1, 1, "", "CenterCrop"], [392, 1, 1, "", "Compose"], [395, 1, 1, "", "Normalize"], [396, 1, 1, "", "RandomCrop"], [397, 1, 1, "", "RandomGrayscale"], [398, 1, 1, "", "RandomHorizontalFlip"], [399, 1, 1, "", "RandomRotation"], [400, 1, 1, "", "RandomVerticalFlip"], [401, 1, 1, "", "Resize"], [393, 1, 1, "", "ToTensor"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function"}, "terms": {"": [3, 14, 15, 21, 23, 26, 61, 86, 87, 92, 94, 95, 96, 97, 98, 99, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 169, 198, 199, 200, 219, 243, 263, 266, 277, 278, 279, 280, 283, 284, 289, 297, 298, 299, 313, 315, 330, 338, 357, 359, 367, 370, 372, 373, 385, 393, 395, 403], "0": [0, 1, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 49, 50, 59, 60, 61, 62, 65, 67, 72, 76, 84, 120, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 375, 377, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403], "000": [5, 6, 7, 8, 147, 148, 339, 340], "0000": [263, 264, 266], "0001": 300, "000e": [339, 340], "001": [300, 303, 304, 306, 307, 310], "002": [305, 306], "004": 306, "005": 233, "008": [84, 144], "00808": 144, "01": [162, 233, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310], "01051757": 321, "013": [47, 144], "016": [103, 144], "0205": 263, "0217": 263, "0227": 263, "024": [90, 125, 144], "026": [114, 144], "028": [119, 144], "0299": 263, "032": [59, 110, 144], "03545": 144, "044715": [160, 230], "0450": 263, "0451": 263, "046": [57, 144], "047": [137, 144], "04719755": 349, "0474259": 165, "048": [127, 144], "0480": 263, "04861": 144, "05": [193, 196, 197, 212, 213, 214, 233, 268, 269, 270, 272, 273, 274, 275, 289, 291, 293], "0507": [164, 236], "06": [29, 67, 194, 271, 301, 309], "066": [41, 144], "069": [97, 108, 144], "07": [176, 187, 188, 250, 262, 263], "070": [92, 144], "0700": 263, "0706508": 240, "071": [103, 144], "0721": 263, "073": [133, 144], "07722396": 239, "0794": 266, "08": [303, 304, 305, 306, 307, 308], "0802": 266, "083": [71, 144], "08333333": 23, "085537": 356, "088": [125, 144], "08955": 144, "0900": [238, 263], "096": [141, 144], "0986": [166, 238], "09861229": 357, "0992": 263, "1": [0, 1, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 120, 126, 127, 128, 129, 130, 134, 135, 140, 142, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "10": [0, 1, 2, 3, 5, 6, 7, 27, 28, 29, 44, 76, 77, 78, 79, 94, 95, 96, 97, 98, 99, 100, 101, 135, 142, 143, 144, 145, 153, 154, 157, 171, 172, 184, 186, 198, 242, 245, 246, 247, 254, 255, 258, 260, 269, 270, 273, 277, 281, 282, 284, 289, 290, 291, 292, 293, 302, 315, 320, 323, 324, 327, 330, 333, 334, 342, 351, 367, 394, 396, 397, 399], "100": [6, 28, 59, 60, 61, 62, 136, 137, 138, 139, 144, 315, 403], "1000": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "1000000": 300, "1001": [103, 144, 263], "1003": 263, "1007": 144, "10096": 144, "101": [93, 94, 104, 111, 114, 115, 116, 117, 118, 121, 126, 127, 128, 144], "10106": 144, "1014": 164, "102": [108, 144], "1024": 148, "1025": [154, 157], "1026": [154, 157], "1027": [154, 157], "10499": 165, "1050": 237, "1054": 266, "1056": [154, 157], "10590": 144, "108": [60, 144], "1097": 144, "11": [92, 106, 123, 135, 136, 144, 184, 245, 246, 247, 254, 258, 269, 270, 273, 281, 282, 284, 330, 394, 395, 396, 397, 399], "110": [98, 144], "1105": 144, "1109": 144, "111": [53, 144], "1111": 262, "112": [86, 99, 144], "1134": 184, "114b": 397, "119": 184, "1192": [165, 166, 238], "12": [44, 45, 46, 47, 48, 54, 77, 78, 144, 147, 148, 155, 184, 200, 245, 246, 247, 254, 255, 258, 269, 270, 273, 279, 281, 282, 284, 330, 334, 335, 394, 396, 397, 399], "120": [59, 76, 79, 86, 87, 144], "12000": [147, 148], "121": [44, 45, 144], "123": [223, 224, 225, 226, 227, 228, 322, 323], "124": [223, 224, 227, 228], "125": 282, "1250": 264, "1251": 144, "1258": 144, "126": [111, 144], "128": [29, 34, 57, 73, 102, 111, 112, 135, 144, 157, 219, 392, 403], "1280": 82, "128x128": [392, 403], "13": [64, 135, 137, 144, 184, 245, 246, 247, 258, 270, 281, 282, 284, 330, 394, 396, 397, 399], "1314": 144, "132": [136, 144], "1324": 144, "133": [137, 144], "136": [61, 92, 144], "138": [138, 144], "14": [46, 95, 144, 245, 246, 247, 254, 255, 258, 270, 281, 282, 284, 316, 330, 334, 394, 396, 397, 399], "1409": 144, "143": [139, 144], "144": 87, "145": 184, "148": [33, 144], "149": [46, 103, 144], "15": [0, 40, 144, 184, 245, 246, 247, 258, 270, 281, 282, 284, 330, 334, 370, 394, 396, 397, 399, 403], "1513": 266, "152": [91, 105, 122, 144], "155": 330, "1556": 144, "156": [68, 144], "1588": [160, 230], "16": [44, 45, 76, 79, 82, 86, 87, 114, 120, 135, 138, 144, 154, 155, 157, 169, 199, 200, 212, 213, 214, 218, 219, 242, 243, 245, 246, 247, 254, 255, 258, 269, 270, 278, 279, 281, 282, 284, 289, 290, 291, 292, 293, 297, 330, 334, 365, 394, 396, 397, 399], "160": [86, 104, 144], "16227766": 24, "16425": 266, "1643": 262, "166": 330, "167": 232, "169": [44, 46, 144], "17": [97, 144, 245, 246, 247, 258, 270, 282, 329, 394, 396, 397, 399], "170": 184, "1704": 144, "17520119": 364, "177": [116, 144], "18": [78, 106, 123, 131, 144, 245, 246, 247, 254, 258, 270, 282, 333, 334, 394, 396, 397, 399], "1800": 263, "184": 86, "18877099": 239, "19": [55, 135, 139, 144, 171, 172, 184, 246, 247, 270, 328, 330], "192": [29, 30, 67, 77, 78, 105, 144], "194": [114, 144], "196": [43, 144], "1966": [166, 237, 238], "197": [32, 39, 144], "198": [86, 144], "1998": [144, 263], "1_53": 144, "1d": [170, 198, 201, 205, 212, 215, 268, 272, 277, 323, 330, 338, 370, 379, 380, 381, 382, 387], "1e": [29, 67, 176, 187, 188, 193, 194, 196, 197, 212, 213, 214, 250, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 289, 291, 293, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "1e6": 300, "1s4x24d": 100, "1st": [27, 142], "2": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 49, 50, 59, 60, 61, 62, 77, 78, 79, 82, 86, 87, 93, 94, 95, 96, 97, 98, 99, 101, 106, 123, 131, 142, 144, 145, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "20": [0, 5, 6, 7, 8, 47, 144, 153, 154, 157, 246, 247, 254, 270, 290, 291, 334, 356], "200": [86, 96, 107, 144], "2004": 144, "201": [47, 96, 144], "2011": 218, "2012": 144, "2014": 144, "2015": 144, "2016": 144, "2017": [144, 289], "2018": [144, 218], "2019": 144, "2020": 144, "2021": 144, "2022": 144, "2023": [144, 218], "2024": 144, "2039": 266, "204": 247, "2048": [146, 289, 291, 293], "21": [61, 109, 124, 144, 155, 184, 246, 247, 270, 334], "210": [62, 144], "211": 330, "213": [144, 148], "21841": [38, 43], "22": [73, 141, 144, 184, 246, 247, 254, 270, 328, 330], "2201": 144, "221": [62, 144], "2231": [263, 266], "224": [27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 112, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 142, 144], "2247": [268, 269, 270, 272, 273, 274, 275], "224x224": [49, 64, 126, 127, 128, 129, 134], "226": 330, "22752314": 321, "2278": 144, "23": [94, 104, 111, 114, 115, 116, 117, 118, 121, 246, 247, 270], "2301": 144, "232": [84, 128, 144], "2324": [144, 236], "233": [37, 144], "234": [223, 224, 225, 226, 227, 228, 323], "235": [54, 144], "237": [144, 148], "238": [87, 144], "23840584": 239, "24": [44, 45, 82, 86, 87, 96, 100, 107, 184, 199, 246, 247, 254, 270, 278, 334], "240": [37, 86, 87, 139, 144], "240x240": 49, "2424": [166, 238], "2447": 238, "246": [77, 144], "24d": 100, "25": [0, 100, 110, 119, 131, 144, 165, 177, 237, 247, 265, 270, 281, 282, 327, 342, 361, 372], "2500": [262, 264, 266], "2512": 229, "2547": 236, "256": [29, 102, 135], "26": [97, 144, 155, 186, 247, 260, 270, 334], "260": 144, "260x260": 49, "26325684": 321, "264": [48, 144], "2689": [166, 237, 238], "26894142": 239, "269": [98, 108, 144], "27": [99, 129, 144, 184, 245, 247, 270, 355], "272": [118, 144], "274": [94, 134, 144], "276": [223, 224, 227, 228], "28": [34, 42, 71, 77, 78, 125, 144, 184, 247, 334], "280": [41, 144], "288": [87, 96, 144], "289": [38, 51, 144], "28x28": [7, 8, 77, 78], "29": [134, 144, 247], "299": [140, 144], "299r": 397, "299x299": [65, 66, 73, 74], "2_i": [272, 273, 274], "2d": [171, 180, 199, 202, 206, 213, 216, 269, 273, 278, 330, 338, 341, 370, 376, 379, 380, 382, 387, 399], "2e": 305, "2nd": [27, 142], "2x": 101, "2x2": [174, 394, 396], "3": [1, 2, 3, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 77, 82, 84, 85, 86, 87, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 140, 142, 144, 150, 151, 152, 154, 155, 156, 157, 160, 165, 166, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 189, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401], "30": [56, 65, 98, 101, 108, 144, 154, 211, 247, 399], "300": 144, "300x300": 49, "302": [60, 144], "3026": 266, "30823025": 239, "31": [184, 247, 330], "310": [339, 340], "31622777": 24, "319": 144, "32": [44, 46, 47, 79, 88, 93, 94, 95, 96, 97, 98, 99, 114, 115, 116, 117, 119, 144, 154, 157, 184, 186, 199, 212, 213, 214, 218, 219, 246, 247, 260, 278, 297, 328, 329, 334], "320": [97, 144], "321": [223, 224, 227, 228], "326": [121, 144], "32x16d": 144, "32x32": [5, 6, 76, 79], "32x32d": 144, "32x4d": [126, 129, 134, 144], "32x8d": [127, 144], "33": [48, 144, 154, 157, 186, 247, 260], "33333333": 23, "336": [32, 117, 136, 144], "337": [48, 144], "34": [109, 124, 132, 144, 154, 157, 184, 247, 330, 334], "342": [223, 224, 227, 228], "344": [55, 144], "345": [223, 224, 225, 226, 227, 228, 323], "35": [74, 144, 154, 157, 247], "350": [43, 144], "352": [64, 144], "355": [58, 144], "3567": [262, 266], "357": [138, 143, 144], "36": [96, 105, 107, 122, 247], "3679": [159, 164, 229], "368": [131, 133, 144], "36th": 144, "37": [91, 144, 245], "370": [53, 144], "372": 184, "375": 265, "3750": 264, "37754067": 239, "378": [78, 144], "380": 144, "380x380": 49, "38344152": 319, "384": [29, 30, 67], "38629436": 357, "389056": 356, "38th": 144, "392": [65, 144], "393": [56, 64, 144], "3935": 229, "3d": [172, 181, 200, 203, 207, 214, 217, 247, 270, 274, 279], "3x3": [144, 324], "4": [0, 1, 2, 3, 10, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 29, 44, 49, 67, 68, 76, 77, 78, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 124, 125, 132, 133, 144, 145, 155, 157, 169, 170, 171, 172, 174, 176, 177, 179, 180, 181, 184, 186, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 295, 300, 303, 307, 308, 310, 313, 316, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 346, 352, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401], "40": [66, 82, 86, 87, 101, 144], "400": [35, 79, 144], "4044": 262, "4076": 263, "4096": [27, 142], "40d": 101, "41421356": 16, "416": [108, 126, 144], "41666667": 23, "417": [101, 144], "41808962": 321, "419974": 167, "4199743": 240, "42": [184, 218, 316, 324], "421": [223, 224, 227, 228], "423": [223, 224, 225, 226], "42718872": 24, "4278": 144, "4284": 144, "4286": 262, "43": [57, 144, 328, 330], "431": [70, 144], "432": [56, 144], "4323": 229, "4375": 264, "43758721": 319, "44": [104, 116, 144], "440": [61, 144], "4472136": 18, "448": [58, 144], "4495": [270, 274], "45": [132, 144, 184, 211, 399], "4510": 144, "4520": 144, "4545": 249, "455": [118, 144], "456": 144, "456x456": 49, "46": [33, 144], "464": [31, 101, 144], "468": [115, 144], "4700": 144, "4708": 144, "47112767": 351, "472": [115, 144, 148], "48": [44, 47, 48, 87, 94, 98, 108, 126, 144, 186, 260], "480": [46, 86, 144], "481": [86, 144], "483": [99, 144], "49": [70, 121, 144], "496": [42, 144], "4979": 229, "4s2x40d": [101, 144], "4x": 100, "4x4": 401, "5": [1, 2, 12, 13, 14, 15, 20, 21, 22, 23, 27, 29, 37, 49, 51, 65, 76, 77, 78, 79, 82, 86, 87, 130, 131, 132, 133, 142, 144, 145, 151, 152, 153, 154, 155, 157, 160, 165, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 189, 191, 193, 196, 197, 198, 201, 202, 208, 210, 212, 213, 214, 219, 221, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 280, 281, 282, 284, 285, 289, 291, 293, 309, 313, 316, 317, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 348, 349, 350, 358, 359, 360, 361, 362, 367, 370, 371, 372, 373, 377, 379, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "50": [5, 6, 93, 99, 100, 101, 102, 110, 112, 119, 125, 129, 133, 134, 144, 186, 260, 309, 328, 330, 342, 397, 398, 400, 403], "5000": [146, 262, 264, 266], "504": [85, 144], "50_1s4x24d": 144, "510": 144, "5108": 266, "512": [29, 74, 89, 102, 106, 132, 144, 146, 147, 242, 289, 290, 291, 292, 293], "519": 144, "520": [68, 144], "52359878": 350, "528": 144, "528x528": 49, "53": [184, 329], "530": [115, 144], "536": [54, 144], "537": [87, 144], "543": [223, 224, 225, 226, 227, 228, 323], "54308063": 354, "544": [70, 138, 144, 147], "545": 335, "5455": 249, "549": [104, 144], "55": [60, 144], "557": [110, 144], "559": [129, 144], "560": [52, 95, 144], "563": [223, 224, 227, 228], "5672": 144, "568": [62, 144], "5683": 144, "569": [127, 144], "57": [133, 144, 184], "57079633": [349, 350], "5720": 144, "5730": 144, "57366333": 322, "576": 87, "584": [144, 147], "586": [66, 144], "587g": 397, "589": [34, 144], "590": [88, 144], "591": [31, 144], "592": [123, 144], "5987": 144, "5995": 144, "5998": 144, "5th": [27, 142], "6": [15, 23, 27, 29, 44, 45, 46, 47, 48, 49, 67, 76, 79, 93, 99, 102, 109, 110, 112, 119, 124, 125, 132, 133, 142, 146, 155, 156, 170, 171, 172, 174, 176, 181, 184, 186, 194, 198, 208, 224, 228, 231, 235, 245, 246, 247, 250, 252, 253, 254, 255, 258, 260, 262, 268, 269, 270, 271, 272, 273, 274, 275, 277, 281, 282, 284, 285, 289, 290, 292, 301, 309, 313, 316, 323, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 344, 346, 358, 359, 360, 367, 370, 371, 372, 373, 377, 382, 383, 384, 388, 389, 391, 393, 394, 395, 396, 397, 399, 401], "60": [5, 6, 105, 144], "600": [49, 144], "6008": 144, "600x600": 49, "6052": 266, "6065": 229, "608": [143, 144], "61": [28, 79, 144], "6105": 144, "611": [95, 144], "6114": 144, "6124": [268, 269, 270, 272, 273, 274, 275], "617": [59, 144], "62": [143, 144, 147, 184], "623": [40, 144], "62686041": 364, "630": 144, "6321": [159, 229], "63245553": 24, "635": [42, 144], "636": [51, 144], "64": [29, 44, 48, 82, 86, 93, 94, 95, 96, 97, 98, 99, 102, 107, 118, 130, 135, 144, 154, 157, 184, 218, 219], "640": [38, 55, 144], "645": 144, "64589411": 319, "647": [131, 144], "64x4d": [128, 144], "654": [223, 224, 225, 226, 227, 228, 323], "657": [223, 224, 227, 228], "6590": [166, 238], "66": [58, 122, 144], "660": [38, 144], "6652": 238, "66666667": 23, "6667": 262, "667": [139, 144], "6682": 262, "669": [107, 144], "67": 330, "672": [86, 109, 144], "67326": 236, "6733": 164, "676": [100, 144], "678": [223, 224, 225, 226, 227, 228], "68811989": 321, "689": [106, 144], "69314718": 357, "696": [111, 144], "7": [10, 13, 22, 45, 52, 135, 144, 155, 170, 171, 172, 174, 176, 181, 184, 186, 187, 188, 198, 208, 219, 230, 235, 236, 237, 240, 245, 246, 247, 250, 254, 255, 258, 260, 262, 263, 265, 269, 270, 273, 274, 277, 281, 282, 284, 285, 316, 317, 320, 323, 326, 328, 329, 330, 334, 336, 338, 342, 356, 359, 367, 370, 371, 372, 384, 387, 388, 389, 393, 394, 395, 396, 397, 399, 401], "70": [7, 8, 96, 144], "7001": 263, "704": [48, 116, 144], "706": [79, 144], "70710678": [18, 363], "708": [35, 144], "7132": 144, "7141": 144, "7147": 266, "715": [89, 144], "717": [36, 144], "7182818": 356, "72": [82, 86, 87], "726791": 144, "7311": [166, 237, 238], "739": [73, 144], "74": 330, "748": [69, 144], "75": [186, 260, 265, 300, 342], "755": [91, 144], "7581": 164, "760": [94, 134, 144], "76159416": [239, 369], "7616": [167, 240], "76219569": 354, "7635": 236, "767": [32, 144], "768": [29, 30, 67], "770": 144, "772": 335, "774": [90, 144], "778": [123, 144], "78": [112, 144], "78357324": 321, "78539816": 351, "791": [117, 144], "79172504": 319, "792": [114, 144], "795": [52, 144], "797": [109, 144], "7x7": 142, "8": [21, 25, 44, 49, 98, 102, 105, 108, 114, 115, 116, 117, 118, 119, 122, 131, 132, 133, 145, 146, 154, 155, 157, 169, 170, 171, 172, 174, 176, 181, 184, 186, 187, 198, 199, 200, 208, 212, 213, 214, 218, 230, 231, 236, 237, 240, 242, 243, 245, 246, 247, 250, 252, 253, 254, 255, 258, 260, 262, 265, 269, 270, 273, 274, 277, 278, 279, 281, 282, 284, 285, 289, 290, 291, 292, 293, 303, 304, 305, 306, 307, 308, 316, 317, 320, 327, 328, 329, 330, 334, 335, 337, 338, 355, 359, 367, 370, 371, 372, 384, 388, 389, 393, 394, 395, 396, 397, 399, 401], "80": [5, 6, 7, 8, 86], "800": [36, 40, 144], "8005": 263, "808": [105, 144], "817": [65, 144], "818": 144, "8182": 249, "82": 184, "821": [122, 144], "83": [118, 144], "832": [71, 144], "833": 144, "84": [76, 78, 79], "840": [28, 39, 69, 144], "8413": [160, 230], "847": [74, 144], "848": [122, 137, 144], "856": [45, 144], "85772238": 239, "8584": 236, "86": [69, 144], "862": [141, 144], "863": [136, 144], "864": [88, 107, 144], "868": [124, 144], "872": [85, 100, 121, 144], "876": [223, 224, 227, 228, 323], "88": [31, 36, 87, 117, 128, 144], "8808": [166, 237, 238], "884": [33, 144], "886": [111, 144], "887": 335, "891773": 319, "89442719": 18, "895": [132, 144], "896": [129, 144], "9": [0, 1, 3, 8, 25, 29, 30, 41, 53, 67, 89, 144, 171, 174, 176, 184, 186, 198, 208, 245, 246, 247, 250, 254, 258, 260, 262, 269, 270, 273, 277, 281, 282, 284, 300, 301, 303, 304, 305, 306, 307, 308, 310, 316, 317, 320, 323, 326, 330, 334, 335, 336, 338, 365, 366, 388, 389, 393, 394, 395, 396, 397, 399], "904": [119, 144], "90709145": 322, "9091": 249, "9120": 266, "9163": 266, "928": [47, 144], "929": [98, 144], "93": [127, 144], "94": 103, "9486833": 24, "949e": [339, 340], "9526": 165, "9545": 230, "955": [126, 144], "956": [39, 144], "958": [124, 144], "96": [29, 30, 67, 87], "960": 86, "96366276": 319, "9640": 240, "96402758": 369, "968": [43, 144], "973": [112, 144], "978": [45, 144], "984": [66, 128, 144], "99": 308, "9957": 266, "99734545": 322, "999": [0, 303, 304, 305, 306, 307], "A": [1, 3, 5, 6, 7, 8, 10, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 50, 72, 76, 80, 83, 93, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 135, 136, 137, 138, 139, 144, 151, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 184, 186, 187, 188, 192, 193, 194, 196, 197, 210, 219, 243, 249, 250, 252, 253, 254, 255, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 287, 289, 290, 291, 292, 293, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 316, 317, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399], "As": 322, "At": 295, "Be": [0, 10], "By": [0, 2, 3, 14, 83, 90, 103, 104, 105, 106, 107, 108, 109, 110, 152, 211, 297, 307, 313, 317, 319, 320, 321, 323, 393, 403], "For": [2, 3, 4, 13, 14, 16, 17, 18, 20, 21, 22, 23, 25, 88, 89, 90, 92, 157, 159, 160, 162, 163, 164, 165, 167, 184, 186, 210, 223, 224, 227, 228, 236, 245, 246, 247, 258, 260, 268, 269, 270, 272, 273, 274, 297, 299, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 356, 357, 358, 359, 360, 363, 365, 367, 370, 371, 372, 380, 382, 385, 387, 390, 403], "If": [0, 1, 2, 5, 6, 7, 8, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 102, 145, 151, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 177, 181, 184, 186, 193, 196, 199, 200, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 224, 242, 243, 245, 246, 247, 251, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 303, 304, 308, 309, 315, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 393, 397, 398, 400, 401], "In": [3, 14, 23, 170, 171, 172, 263, 266, 312, 313, 314, 392, 403], "It": [1, 2, 3, 7, 10, 14, 23, 24, 25, 27, 29, 30, 42, 45, 46, 47, 48, 63, 64, 65, 76, 77, 78, 79, 81, 82, 84, 92, 102, 103, 104, 105, 106, 107, 108, 109, 110, 123, 135, 141, 144, 151, 153, 154, 155, 156, 157, 177, 181, 184, 208, 210, 211, 212, 213, 214, 218, 230, 231, 234, 235, 240, 242, 243, 251, 258, 259, 262, 263, 264, 265, 266, 277, 278, 279, 287, 289, 290, 292, 295, 297, 298, 299, 300, 306, 308, 309, 310, 313, 322, 326, 327, 328, 331, 332, 333, 335, 336, 342, 358, 360, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393], "Its": [25, 324], "Near": 23, "No": [174, 177], "Not": 259, "One": [77, 403], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "There": 383, "These": [4, 10, 14, 15, 18, 21, 24, 26, 59, 60, 61, 62, 88, 89, 90, 91, 92, 111, 112, 131, 132, 133, 141, 144, 249, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 309, 316, 324, 403], "To": [3, 144, 299, 317, 321, 324, 339, 340, 379, 403], "With": [3, 174, 177, 393, 403], "_": [12, 13, 21, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 167, 186, 208, 210, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 287, 300, 301, 303, 304, 305, 306, 308, 310, 328, 329, 330, 334, 370, 371, 388, 389, 394, 395, 396, 398, 399, 400], "_1": [18, 153, 154, 155, 156, 157, 184, 258, 334, 375, 377, 391], "_2": [18, 153, 154, 155, 156, 157, 184, 258, 334, 375, 377, 391], "__call__": [1, 151], "__getitem__": [0, 2, 3, 5, 6, 7, 8], "__init__": [0, 1, 2, 3, 14, 27, 29, 30, 49, 50, 63, 67, 72, 76, 80, 81, 82, 83, 93, 135, 142, 145, 150, 151, 152, 153, 154, 155, 156, 177, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 325, 392, 393], "__iter__": [0, 1], "__len__": [0, 1, 2, 3, 5, 6, 7, 8], "__repr__": 298, "__setattr__": 151, "_activ": 166, "_arraylik": [316, 338, 340, 344, 346], "_arraylikeint": 380, "_arrayorscalar": [150, 152, 316, 317, 325, 373], "_base_activ": 76, "_base_dtyp": [337, 339, 342, 343, 345], "_block": 250, "_c": 395, "_decai": 306, "_einopspattern": [12, 13], "_fanmod": [223, 224], "_grad_en": [312, 314], "_i": [18, 22, 166, 177, 184, 238, 251, 265, 268, 275, 280, 283, 328, 329, 331, 332, 334, 335, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 382, 385, 390, 391], "_in": [223, 224, 227, 228], "_interpolatetyp": 295, "_j": [166, 238, 280, 283, 334, 359, 367, 371, 372], "_k": 386, "_layer": [290, 292], "_left": 210, "_make_lay": 135, "_mlphead": 67, "_modul": 151, "_n": [18, 153, 154, 155, 156, 157, 375, 377, 391], "_numpyarrai": 316, "_out": [223, 224, 227, 228, 382, 387], "_p": [22, 208, 287], "_pad": 380, "_paddingstr": [212, 213, 214, 215, 216, 217, 245, 246, 247], "_paramet": 151, "_reducestr": 13, "_reductiontyp": [187, 188, 189, 191, 192, 262, 263, 264, 265, 266], "_resnestbottleneck": 93, "_right": 210, "_scalar": [169, 221, 225, 226, 227, 228, 243, 316, 337, 342, 352], "_seresnetbottleneck": [121, 122, 125], "_seresnetmodul": [123, 124], "_shapelik": [145, 197, 275, 316, 320, 343, 345, 374, 383, 385, 390], "_size": [198, 199, 200, 250], "_skresnetmodul": [131, 132, 133], "_slope": 233, "_statedict": 298, "_t": [307, 308], "_tensor": [150, 152, 242, 289, 291, 293, 338, 373], "_tensorop": 325, "_u": 23, "_v": 23, "_valu": [352, 380], "_weight": 287, "_width": 380, "a_": 291, "a_1": [242, 384], "a_2": 384, "a_h": 242, "a_i": [242, 331, 332, 335, 384], "a_k": 384, "aaai": 144, "ab": 347, "abc": [2, 298], "abil": [14, 144, 403], "about": [10, 14, 145], "abov": [14, 312, 314, 322, 338, 341, 388], "absolut": [21, 22, 189, 305, 348], "abstract": [2, 3, 297, 298, 299, 300, 308, 310], "abstractmethod": 298, "abund": [38, 91], "acceler": [144, 236, 268, 269, 270, 300, 306, 308, 310], "accept": [259, 319, 325], "access": [0, 2, 3, 4, 5, 6, 7, 8, 114, 115, 116, 117, 118, 119, 150, 152, 153, 154, 155, 156, 157, 383], "accord": [12, 177, 210, 245, 246, 247, 258, 260, 263, 266, 301, 302, 303, 304, 305, 306, 307, 371, 374], "accordingli": 17, "account": [21, 23, 24, 239], "accumul": [300, 301, 302, 326, 327, 331, 332, 333, 336, 374], "accur": 122, "accuraci": [36, 38, 39, 40, 41, 59, 60, 61, 62, 69, 71, 80, 81, 82, 88, 89, 90, 91, 92, 125, 144], "achiev": [12, 113, 114, 115, 116, 117, 118, 119, 144, 170, 171, 172, 198, 277, 278, 279, 306, 398, 400], "across": [0, 5, 6, 10, 12, 13, 29, 42, 84, 144, 150, 154, 157, 194, 197, 198, 199, 200, 227, 228, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 316, 317, 319, 320, 321, 322, 323, 324, 339, 340, 359, 372], "act": 304, "activ": [14, 27, 29, 76, 86, 87, 103, 107, 108, 120, 135, 142, 144, 153, 157, 159, 160, 162, 163, 164, 165, 166, 167, 175, 212, 213, 214, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 252, 253, 254, 255, 262, 263, 266, 268, 269, 270, 275, 289, 291, 293, 358, 360], "actual": [152, 262, 263, 265, 266, 325, 396], "ad": [44, 82, 102, 151, 153, 154, 155, 156, 157, 170, 171, 172, 176, 184, 186, 187, 188, 193, 194, 196, 197, 201, 202, 203, 205, 206, 207, 212, 213, 214, 242, 245, 246, 247, 250, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 315, 390, 403], "adadelta": 311, "adagrad": [301, 311], "adam": [144, 304, 305, 306, 307, 311], "adamax": 311, "adamw": 311, "adapt": [10, 27, 63, 76, 88, 91, 93, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 144, 198, 199, 200, 218, 219, 277, 278, 279, 301, 302, 303, 306, 307, 308, 309], "adaptive_avg_pool1d": [183, 204, 277], "adaptive_avg_pool2d": [183, 204, 278], "adaptive_avg_pool3d": [183, 204, 279], "adaptiveavgpool1d": [257, 286], "adaptiveavgpool2d": [27, 120, 135, 142, 257, 286], "adaptiveavgpool3d": [257, 286], "add": [4, 151, 153, 154, 157, 184, 186, 242, 245, 246, 247, 258, 260, 275, 298, 300, 303, 308, 310, 313, 347, 380, 390], "add_bias_kv": 242, "add_modul": [151, 157], "add_param_group": 298, "add_zero_attn": 242, "addit": [4, 14, 21, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 151, 154, 157, 184, 186, 193, 196, 258, 260, 268, 269, 270, 272, 273, 274, 300, 306, 313, 324, 326, 386], "addition": 306, "address": [263, 266, 303, 304, 307], "adjust": [73, 80, 82, 84, 92, 126, 127, 128, 129, 130, 134, 198, 199, 200, 219, 249, 250, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 299, 303, 307, 308, 309, 377, 391], "advanc": [3, 23, 50, 67, 81, 91, 107, 144, 154, 157, 170, 171, 172, 198, 199, 200, 277, 278, 279, 297, 300], "advantag": [74, 314], "affect": [312, 381, 385, 392], "affin": [212, 213, 214, 268, 269, 270, 272, 273, 274, 275, 399], "after": [10, 21, 27, 86, 87, 142, 152, 153, 154, 155, 156, 157, 181, 218, 219, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 247, 249, 252, 253, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 289, 291, 293, 304, 314, 325, 326, 327, 331, 332, 333, 335, 336, 342, 380, 384, 393], "afterward": 314, "aggreg": [10, 144, 219, 334, 382, 387], "aim": [4, 14], "al": [64, 144, 289], "alex": [5, 6, 144], "alexnet": [75, 142, 144], "algebra": [14, 15, 341], "algorithm": [7, 14, 21, 23, 24, 298, 299, 324], "align": [10, 25, 91, 210, 295, 329, 330], "align_corn": [210, 295], "all": [0, 3, 4, 14, 24, 49, 144, 151, 153, 154, 155, 156, 157, 171, 172, 198, 199, 200, 202, 203, 206, 207, 210, 213, 214, 219, 233, 234, 242, 247, 277, 278, 279, 281, 282, 285, 289, 297, 298, 299, 300, 303, 308, 309, 310, 335, 358, 359, 360, 367, 370, 372, 375, 376, 377, 382, 385, 386, 387, 388, 389, 391, 394, 395, 403], "allevi": [144, 159], "alloc": [339, 340], "allow": [0, 1, 3, 4, 10, 12, 14, 23, 24, 74, 76, 83, 86, 87, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 113, 126, 127, 128, 129, 130, 134, 144, 152, 153, 154, 155, 156, 157, 159, 162, 163, 166, 172, 174, 211, 219, 229, 230, 233, 236, 237, 238, 240, 243, 245, 246, 247, 287, 295, 297, 301, 302, 313, 337, 343, 345, 346, 371, 373, 379, 392, 393, 403], "along": [10, 13, 166, 210, 219, 238, 329, 330, 334, 358, 359, 360, 367, 370, 372, 374, 375, 377, 379, 382, 384, 386, 387, 390, 391, 398, 400], "alongsid": 150, "alpha": [159, 162, 164, 175, 229, 236, 249, 300, 308], "alpha_dropout": [182, 183, 249], "alphadropout": [256, 257], "alphadropoutmodel": 249, "alreadi": 315, "also": [145, 159, 160, 162, 163, 164, 165, 167, 184, 186, 210, 306, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 390, 391], "alter": [157, 383], "altern": [1, 230, 301, 330], "alwai": [10, 152, 381, 397, 398, 400], "among": [65, 219], "amount": [170, 171, 172, 201, 202, 203, 205, 206, 207, 215, 216, 217, 306], "ampl": 88, "amsgrad": [303, 304], "an": [0, 1, 3, 10, 12, 13, 14, 18, 20, 21, 23, 24, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 141, 142, 143, 144, 145, 147, 148, 151, 153, 154, 155, 156, 157, 160, 170, 171, 172, 174, 175, 178, 179, 180, 181, 184, 199, 200, 208, 210, 211, 215, 216, 217, 219, 227, 228, 229, 235, 237, 242, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 260, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 298, 299, 300, 303, 306, 308, 314, 315, 316, 325, 330, 338, 341, 352, 359, 367, 372, 374, 375, 382, 384, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "analog": [382, 387], "analysi": [4, 218, 245, 246, 247, 274, 280, 282, 283, 285], "andreetto": 144, "andrew": 144, "angl": [211, 399], "ani": [0, 1, 2, 3, 12, 21, 23, 28, 102, 130, 141, 143, 150, 151, 152, 153, 155, 156, 159, 160, 162, 163, 164, 165, 167, 175, 178, 184, 186, 193, 196, 237, 275, 297, 298, 312, 314, 315, 322, 325, 337, 338, 339, 341, 343, 344, 345, 346, 358, 360, 371, 373, 375, 376, 377, 380, 382, 386, 387, 390, 391, 392, 403], "anoth": [83, 156, 336, 344, 346, 393, 403], "api": [4, 277, 278, 279, 403], "appear": 298, "append": [154, 156, 157, 242], "appli": [2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 21, 27, 29, 49, 50, 67, 113, 130, 140, 142, 144, 146, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 194, 212, 213, 214, 218, 219, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 300, 301, 302, 304, 305, 306, 307, 330, 380, 382, 388, 389, 392, 395, 397, 398, 399, 400, 401, 403], "applic": [4, 10, 13, 23, 31, 32, 33, 36, 38, 43, 44, 70, 73, 74, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 144, 170, 196, 245, 246, 247, 258, 260, 324, 337, 345, 380, 384, 388, 389, 401], "approach": [3, 10, 12, 72, 157, 304], "appropri": [23, 82, 86, 87, 144, 151, 155, 157, 177, 245, 246, 247, 249, 252, 253, 263, 281, 282, 312, 314], "approx": 164, "approxim": [23, 160, 230, 231, 232, 281, 284], "ar": [1, 2, 3, 4, 13, 14, 17, 18, 20, 21, 23, 24, 25, 26, 59, 60, 61, 62, 63, 64, 65, 88, 90, 91, 144, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 171, 172, 174, 177, 184, 186, 194, 199, 200, 208, 210, 215, 216, 217, 218, 219, 223, 224, 226, 227, 228, 231, 238, 242, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 260, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 293, 295, 297, 300, 303, 304, 306, 307, 308, 309, 310, 312, 314, 315, 316, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 348, 352, 356, 358, 359, 360, 361, 362, 367, 370, 371, 374, 375, 379, 382, 383, 384, 387, 388, 389, 392, 393, 394, 396, 397, 401, 403], "arang": 347, "arbitrari": [154, 259, 339, 340, 352, 357, 359, 363, 365, 367, 371, 372], "arcco": 347, "arch": 315, "architectur": [10, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 153, 154, 155, 156, 157, 160, 218, 231, 232, 234, 239, 242, 243, 258, 259, 289, 297, 315], "arcsin": 347, "arctan": 347, "area": [210, 295], "arg": [151, 259, 315, 339], "argument": [3, 4, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 151, 157, 259, 319, 339, 371], "around": [18, 211, 240], "arr": [316, 375, 377, 386, 391], "arrai": [14, 150, 152, 313, 316, 325, 330, 338, 344, 346, 373, 381, 382, 393, 403], "art": [38, 144], "artifici": 144, "arxiv": 144, "asarrai": 316, "asgd": 311, "ashish": 144, "aspect": 401, "assign": [151, 153, 155, 157, 210, 263, 266], "assist": [63, 64, 65], "associ": [155, 156], "assum": [0, 1, 298, 299, 312], "attempt": [153, 157], "attend": [169, 243, 290, 292, 293], "attent": [93, 100, 101, 130, 144, 146, 156, 184, 218, 242, 243, 289, 290, 291, 292, 293], "attn": [169, 243], "attn_mask": [169, 243], "atto": [35, 68, 144], "attribut": 151, "audio": 245, "augment": [3, 4, 123, 211, 324, 382, 387, 392, 396, 397, 398, 399, 400, 403], "autodiff": 14, "autoencod": 144, "autograd": 297, "automat": [4, 14, 152, 153, 154, 155, 156, 297, 317, 319, 320, 321, 323, 325, 339, 340, 346, 379, 393], "autoregress": [169, 243], "auxiliari": [63, 64, 65, 150], "avail": [4, 5, 6, 7, 8, 14], "avd": 93, "averag": [13, 27, 77, 78, 79, 93, 102, 113, 120, 130, 135, 142, 150, 198, 199, 200, 201, 202, 203, 210, 218, 219, 265, 277, 278, 279, 280, 281, 282, 300, 301, 303, 308, 359], "avg_down": 102, "avg_pool": [280, 281, 282], "avg_pool1d": [183, 204], "avg_pool2d": [183, 204], "avg_pool3d": [183, 204], "avgpool": [27, 120, 135, 142, 219], "avgpool1d": [257, 286], "avgpool1dmodel": 280, "avgpool2d": [257, 286], "avgpool2dmodel": 281, "avgpool3d": [257, 286], "avgpool3dmodel": 282, "avoid": [2, 3, 12, 13, 23, 50, 155, 314, 342], "ax": [10, 12, 13, 15, 313, 358, 359, 360, 367, 371, 372, 374, 382, 385, 387], "axi": [13, 22, 166, 238, 329, 330, 358, 359, 360, 367, 372, 375, 377, 379, 380, 382, 384, 385, 386, 387, 390, 391, 398, 400], "b": [12, 13, 15, 25, 144, 184, 186, 226, 245, 246, 247, 258, 260, 313, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 374, 375, 377, 379, 386, 391, 397], "b0": [49, 51, 144], "b1": [49, 52, 144], "b2": [49, 53, 144], "b3": [49, 54, 144], "b4": [49, 55, 144], "b5": [49, 56, 144], "b6": [49, 57, 144], "b7": [49, 58, 144], "b_1": [291, 293], "b_2": [291, 293], "b_i": [331, 332, 335], "b_k": 242, "b_v": 242, "back": [210, 242, 281, 282, 315, 329, 334, 382, 387], "backbon": [131, 132, 133], "backpropag": [10, 14, 17, 18, 20, 21, 23, 24, 26, 144, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 184, 186, 210, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 297, 314, 321, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 356, 358, 360, 373, 374, 380, 382, 387, 388, 389, 393], "backward": [14, 150, 152, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 325, 342, 393], "balanc": [33, 36, 37, 40, 50, 59, 60, 61, 62, 71, 82, 83, 89, 90, 92, 114, 115, 116, 117, 118, 119, 144, 264], "bar": 300, "base": [3, 12, 13, 15, 20, 21, 24, 25, 31, 34, 36, 44, 63, 64, 65, 66, 69, 72, 73, 74, 76, 83, 89, 90, 92, 93, 100, 101, 113, 114, 115, 116, 117, 118, 119, 130, 135, 140, 144, 146, 147, 151, 153, 154, 155, 156, 169, 174, 184, 198, 199, 200, 219, 243, 249, 263, 264, 277, 278, 279, 297, 298, 299, 300, 304, 308, 309, 310, 317, 326, 327, 331, 332, 333, 335, 336, 346, 356, 357, 358, 360, 371, 379, 380, 384, 396, 397, 398, 399, 400], "base_width": [93, 94, 95, 96, 97, 98, 99, 111, 112, 113, 130], "basic": [14, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 140, 142, 145, 169, 170, 171, 172, 176, 177, 198, 199, 200, 208, 212, 213, 214, 215, 216, 217, 218, 223, 224, 227, 228, 243, 250, 277, 278, 279, 287, 342, 374, 394, 395, 396, 397, 398, 399, 400, 401], "basicblock": [102, 106, 109], "batch": [1, 2, 3, 15, 21, 24, 26, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 67, 73, 74, 120, 126, 127, 128, 129, 134, 169, 170, 171, 172, 174, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 242, 243, 245, 246, 247, 258, 260, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 307, 330, 394, 395, 396, 397, 399, 401], "batch_norm": [183, 195, 268, 269, 270], "batch_norm1": 157, "batch_norm2": 157, "batch_siz": [1, 2, 3, 140, 219], "batchnorm": [212, 213, 214], "batchnorm1d": [212, 257, 276], "batchnorm1dmodel": 268, "batchnorm2d": [157, 213, 257, 276], "batchnorm2dmodel": 269, "batchnorm3d": [214, 257, 276], "batchnorm3dmodel": 270, "bceloss": [257, 267], "becaus": [2, 320], "becom": [22, 151, 301, 309], "been": 239, "befor": [10, 21, 120, 145, 152, 169, 243, 289, 291, 293, 300, 306, 314, 322, 380, 395, 403], "begin": [1, 22, 159, 162, 163, 164, 177, 229, 231, 232, 233, 234, 236, 251, 264, 265, 266, 280, 281, 282, 283, 284, 285, 307, 309, 313, 324, 331, 332, 334, 348, 352, 358, 360, 362, 380, 388, 389], "behav": [251, 264, 370], "behavior": [10, 144, 154, 157, 169, 243, 312, 324, 330, 340, 403], "being": [156, 211, 249, 252, 253, 254, 255, 307, 312, 314, 375, 377, 391], "belong": 0, "below": [24, 64, 65, 66, 73, 74, 76, 77, 78, 79, 330, 338, 341, 389], "benchmark": [5, 6, 7, 8, 91], "benefici": 157, "benefit": [92, 159, 297, 306, 316], "bernoulli": [249, 252, 253, 254, 255, 318], "best": [91, 223, 224, 227, 228], "beta": [194, 268, 269, 270, 271, 272, 273, 274, 275, 303, 304, 305, 306, 307], "beta1": [303, 304, 305, 306, 307], "beta2": [303, 304, 305, 306, 307], "beta_1": [303, 304, 305, 306, 307], "beta_2": [303, 304, 305, 306, 307], "beta_c": [194, 271], "better": [20, 90, 142, 144, 160, 223, 224, 227, 228, 239, 250, 272, 273, 274, 297, 304, 306, 308, 395], "between": [33, 36, 40, 59, 60, 61, 62, 71, 83, 89, 90, 92, 114, 115, 116, 117, 118, 119, 144, 151, 170, 171, 172, 174, 184, 189, 212, 213, 214, 215, 216, 217, 219, 235, 245, 246, 247, 249, 252, 253, 254, 255, 258, 262, 263, 264, 265, 266, 300, 308, 309, 310, 324, 326, 327, 330, 333, 336, 337, 342, 372, 397, 398, 400, 401], "beyond": [10, 14, 154], "bia": [170, 171, 172, 184, 186, 193, 196, 197, 212, 213, 214, 215, 216, 217, 242, 245, 246, 247, 258, 260, 268, 269, 270, 272, 273, 274, 275, 289, 291, 293, 303, 304, 305, 306, 307], "bias": [245, 246, 247, 260, 275, 297], "bias1": 155, "bias2": 155, "big": [144, 215, 216, 217], "bilinear": [183, 185, 210, 257, 261, 295], "bilinearmodel": 258, "binari": [165, 187, 237, 249, 252, 253, 254, 255, 262], "binary_cross_entropi": [183, 190], "blend": 92, "block": [44, 45, 46, 47, 48, 49, 50, 67, 72, 81, 82, 83, 85, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 151, 174, 176, 177, 212, 213, 214, 219, 245, 246, 247, 250, 314], "block1": [145, 297], "block2": [145, 297], "block_arg": [102, 120], "block_cfg": 50, "block_config": 44, "block_siz": [176, 250], "blue": 397, "bmatrix": 334, "bn": [212, 213, 214], "bn_affin": [212, 213, 214], "bool": [1, 5, 6, 7, 8, 22, 26, 49, 63, 64, 65, 93, 102, 145, 151, 152, 169, 175, 177, 178, 179, 180, 181, 193, 196, 210, 212, 213, 214, 215, 216, 217, 242, 243, 245, 246, 247, 251, 258, 260, 268, 269, 270, 272, 273, 274, 275, 289, 290, 291, 292, 293, 295, 303, 304, 308, 312, 317, 319, 320, 321, 323, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 358, 359, 360, 367, 372, 373, 393], "boost": 88, "both": [83, 170, 186, 199, 201, 205, 212, 230, 239, 245, 246, 278, 280, 281, 283, 284, 293, 295, 328, 329, 330, 334, 338, 379, 384, 401], "bottleneck": [44, 81, 82, 85, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 144, 218], "bottleneck_cfg": 82, "bottom": 210, "bound": [224, 226, 228, 309, 323], "box": 4, "branch": [63, 64, 65, 144, 219], "break": [10, 297], "brief": 403, "bright": 403, "bring": 10, "broadcast": [254, 255, 359, 367, 372, 383, 390], "broadcast_to": 378, "budget": 40, "buffer": [300, 306, 308, 310], "build": [14, 30, 50, 74, 82, 83, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 130, 131, 132, 133, 144, 146, 151, 154, 157, 297, 403], "built": [3, 14, 103, 107, 108, 157, 297], "burg": 8, "c": [5, 6, 8, 12, 102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 144, 174, 176, 179, 180, 181, 188, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 218, 254, 255, 263, 266, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 313, 377, 391, 395], "c_": [245, 246, 247], "c_in": [170, 171, 172, 212, 213, 214], "c_out": [170, 171, 172], "calcul": [0, 1, 14, 15, 152, 295, 301, 302, 305, 306, 307, 314, 320, 325], "calculu": [16, 23], "call": [1, 151, 312, 315, 326, 327, 330, 331, 332, 333, 335, 336], "callabl": [289, 291, 293, 298, 315, 392], "can": [0, 2, 3, 4, 12, 13, 14, 16, 18, 20, 21, 23, 24, 26, 49, 82, 88, 89, 91, 92, 102, 111, 112, 126, 127, 128, 129, 140, 141, 144, 145, 150, 152, 153, 154, 155, 156, 157, 162, 170, 171, 172, 177, 211, 219, 230, 233, 235, 240, 245, 246, 247, 272, 273, 274, 281, 282, 283, 284, 285, 287, 290, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 316, 323, 324, 325, 330, 339, 340, 341, 343, 345, 346, 359, 367, 372, 374, 377, 379, 380, 382, 383, 387, 390, 391, 392, 393, 396, 398, 399, 400, 403], "cannot": [17, 18, 20, 21, 24, 25, 26, 317], "cap": 235, "capabl": [10, 14, 42, 100, 101, 337, 338, 341, 343, 344, 345, 346], "capac": [31, 32, 33, 39, 43, 80, 88, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 134, 144, 148], "captur": [130, 144, 174, 245, 246, 247, 258], "cardin": [93, 94, 95, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 117, 118, 119, 130, 144], "care": 314, "cartesian": 379, "case": [3, 22, 76, 82, 84, 159, 162, 163, 164, 177, 229, 231, 232, 233, 234, 236, 251, 264, 265, 266, 280, 281, 282, 283, 284, 285, 297, 302, 307, 309, 313, 331, 332, 348, 352, 358, 360, 362, 380, 388, 389, 403], "categor": [208, 287], "categori": [7, 103, 104, 105, 106, 107, 108, 109, 110, 287], "caus": [3, 23, 300, 308, 310], "causal": [169, 243], "cautiou": [0, 10], "cdot": [16, 17, 20, 21, 22, 25, 159, 160, 162, 164, 165, 169, 170, 171, 172, 184, 186, 194, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 218, 227, 228, 230, 231, 232, 237, 239, 243, 249, 258, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 287, 301, 302, 303, 304, 305, 306, 307, 309, 328, 329, 330, 333, 335], "center": [211, 240, 308, 394, 403], "centercrop": [402, 403], "central": 316, "certain": [17, 160, 169, 184, 239, 243, 258, 293, 303, 304, 312, 358, 360], "cfg": [83, 86, 87], "chain": [20, 21, 157, 392, 403], "challeng": [7, 144], "cham": 144, "chanc": [397, 398, 400], "chang": [10, 189, 264, 309, 313, 314, 315, 381, 383, 390, 397, 403], "channel": [29, 30, 44, 49, 76, 77, 78, 79, 80, 82, 84, 86, 87, 93, 100, 101, 102, 113, 114, 115, 116, 117, 118, 119, 124, 126, 127, 128, 129, 134, 135, 140, 144, 170, 171, 172, 174, 179, 180, 181, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 245, 246, 247, 254, 255, 268, 269, 270, 271, 272, 273, 274, 277, 280, 281, 282, 283, 284, 285, 395, 397, 401], "character": [111, 112], "check": [312, 394, 396], "checkpoint": 299, "chen": 144, "choic": [90, 92, 379], "choleski": 19, "chollet": 144, "choos": 144, "chosen": [249, 250], "christian": 144, "christoph": 8, "chu": 144, "cifar": [5, 6], "cifar10": 9, "cifar100": 9, "cifar100_train": 6, "cifar10_train": 5, "clariti": [12, 13, 316], "class": [3, 4, 14, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 145, 147, 148, 166, 177, 188, 192, 297, 299, 315, 338, 341, 342, 373, 403], "classic": 79, "classif": [4, 5, 6, 7, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 165, 166, 187, 188, 192, 237, 238, 262, 263, 266], "classifi": [27, 63, 64, 65, 76, 77, 78, 79, 102, 113, 130, 135, 140, 142], "cleaner": [1, 314, 330], "clear": [152, 325, 339, 340, 342], "clearli": 316, "clf_in_featur": 76, "clf_layer": 76, "clip": [211, 231, 235, 309, 347], "clockwis": 211, "close": [20, 23, 236, 262, 308], "closer": 229, "closur": [298, 299], "cloth": 7, "cnn": 144, "co": [144, 347, 363], "code": [10, 21, 153, 155, 157, 312, 314, 316, 324], "coeffici": [25, 49, 210, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "col": 174, "collaps": 10, "collect": [4, 15, 144, 153, 154, 156, 157, 299], "color": [397, 403], "colorjitt": 403, "column": [17, 18, 20, 24, 25, 26, 145, 174, 341, 377, 379], "com": [7, 8], "combin": [1, 3, 12, 66, 72, 73, 92, 134, 144, 154, 157, 159, 160, 212, 213, 214, 218, 219, 230, 250, 263, 297, 306, 307, 359, 367, 372, 375, 403], "combined_dataset": [0, 1], "common": [174, 211, 299, 403], "commonli": [14, 80, 81, 82, 84, 85, 86, 87, 90, 92, 160, 165, 166, 167, 170, 172, 177, 184, 191, 193, 196, 208, 211, 218, 227, 228, 231, 232, 235, 238, 243, 247, 262, 265, 266, 280, 281, 282, 283, 284, 285, 287, 289, 313, 316, 343, 385, 393, 394, 395, 396, 398, 399, 400, 403], "compact": [34, 35, 37, 42, 71, 90], "compar": [33, 34, 111, 112, 142, 144, 324, 386], "compat": [4, 10, 15, 130, 259, 275, 297, 313, 324, 342, 374, 393, 403], "competit": [35, 41, 42], "complet": [146, 289, 290, 292], "complex": [2, 3, 10, 14, 18, 32, 38, 43, 74, 91, 102, 105, 108, 109, 122, 124, 145, 148, 153, 154, 157, 163, 234, 283, 285, 297, 299, 403], "compon": [23, 63, 64, 65, 66, 72, 73, 74, 146, 151, 154, 299, 325, 403], "compos": [5, 6, 7, 8, 140, 245, 246, 247, 280, 281, 282, 283, 284, 285, 297, 403], "compound": 50, "comprehens": 3, "compris": [111, 112], "compromis": [89, 92], "comput": [10, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 40, 41, 68, 71, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 134, 144, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 297, 298, 299, 300, 308, 312, 313, 314, 316, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 379, 380, 382, 387, 393, 403], "computation": [3, 12, 23, 103, 231, 232], "compute_loss": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "concat": 242, "concaten": [0, 170, 171, 172, 242, 377, 378, 386, 391], "concept": [14, 23, 81, 144], "concis": [10, 12], "condit": [16, 17, 20], "confer": 144, "config": 135, "configur": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 148, 156, 212, 213, 214, 243], "conjunct": [174, 266], "connect": [27, 29, 44, 45, 46, 47, 48, 49, 50, 66, 72, 73, 74, 76, 77, 78, 79, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 135, 140, 142, 144, 186, 218, 219, 245, 246, 247, 260, 291, 293], "consecut": 135, "consid": [3, 20, 23, 44, 88, 89, 90, 92, 157, 223, 224, 227, 228, 297, 309, 312, 339, 340, 388, 389, 403], "consider": 23, "consist": [2, 4, 7, 13, 27, 77, 78, 79, 102, 150, 198, 199, 200, 219, 242, 277, 278, 279, 289, 291, 293, 316, 322, 324, 380, 394, 401, 403], "consistent_tensor": 324, "consol": 145, "constant": [187, 188, 193, 194, 196, 197, 222, 236, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 316, 380], "constant_pad": 380, "constrain": [35, 37, 40, 90], "constraint": [1, 12, 80, 82, 89, 219], "construct": [14, 45, 46, 47, 48, 67, 92, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 131, 132, 133, 136, 137, 138, 139, 146, 154, 297, 338, 382, 387, 388, 389], "constructor": [45, 46, 47, 48, 59, 60, 61, 62, 84, 85, 86, 87, 94, 95, 96, 97, 98, 99, 100, 101, 111, 112, 126, 127, 128, 129, 134, 136, 137, 138, 139], "consumpt": 92, "contain": [1, 5, 6, 7, 8, 17, 18, 23, 24, 25, 26, 72, 76, 102, 113, 114, 115, 116, 117, 118, 119, 120, 130, 135, 145, 151, 153, 154, 155, 156, 157, 166, 169, 174, 184, 186, 187, 188, 192, 208, 210, 262, 263, 266, 298, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 340, 342, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 376, 379, 384], "content": 211, "context": [312, 314], "contextmanag": 314, "contigu": [176, 250, 381], "continu": [233, 321], "contract": 12, "contrast": [146, 272, 273, 274, 403], "contribut": [176, 210, 249, 252, 253, 254, 255, 280, 283, 284, 285, 300, 306, 370], "control": [29, 113, 219, 229, 264, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 324, 393, 403], "conv": [67, 72, 120, 144, 212, 213, 214, 269, 270], "conv1": [77, 78, 79, 157, 245, 246, 247, 280, 281, 282, 283, 284, 285], "conv1d": [173, 183, 212, 215, 248, 257, 280, 283], "conv1dmodel": 245, "conv2": [77, 78, 79, 157, 245, 246, 247], "conv2d": [154, 157, 173, 183, 213, 216, 248, 257, 269, 281, 284, 297], "conv2dmodel": 246, "conv3d": [173, 183, 214, 217, 248, 257, 270, 282, 285], "conv3dmodel": 247, "conv_bia": [212, 213, 214], "conv_config": 135, "conv_lay": [76, 154], "convblock": 297, "convbnrelu1d": 220, "convbnrelu2d": 220, "convbnrelu3d": 220, "conveni": [4, 28, 143], "convent": 330, "converg": [23, 240, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 395], "convers": [263, 266, 397, 403], "convert": [5, 6, 7, 8, 135, 150, 152, 166, 208, 238, 325, 379, 392, 393, 397, 403], "convnetwork": 154, "convnext": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 75, 144], "convnext_bas": 144, "convnext_larg": 144, "convnext_smal": 144, "convnext_tini": 144, "convnext_v2": [35, 36, 37, 38, 39, 40, 41, 42], "convnext_v2_atto": 144, "convnext_v2_bas": 144, "convnext_v2_femto": 144, "convnext_v2_hug": 144, "convnext_v2_larg": 144, "convnext_v2_nano": 144, "convnext_v2_pico": 144, "convnext_v2_tini": 144, "convnext_xlarg": 144, "convolut": [27, 28, 29, 44, 49, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 67, 72, 76, 77, 78, 79, 80, 82, 86, 87, 88, 89, 90, 91, 92, 93, 100, 101, 102, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 130, 134, 135, 140, 142, 143, 144, 154, 170, 171, 172, 174, 212, 213, 214, 215, 216, 217, 218, 219, 245, 246, 247, 281, 282, 284, 285, 380], "convolv": [170, 171, 172, 245, 246, 247], "coordin": 379, "copi": [10, 374], "core": [0, 1, 2, 3, 151, 297, 298, 325, 403], "corinna": 8, "corner": [210, 295, 394, 396], "correct": [153, 263, 266, 303, 304, 305, 306, 307, 388, 389, 393], "correctli": [23, 151, 153, 154, 155, 156, 157, 263, 266, 324, 374], "correspond": [0, 1, 2, 5, 6, 7, 8, 18, 83, 84, 86, 87, 111, 112, 131, 132, 133, 153, 155, 157, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 184, 186, 208, 210, 231, 234, 238, 258, 260, 268, 269, 270, 272, 273, 274, 281, 282, 287, 300, 308, 310, 317, 328, 329, 331, 332, 335, 356, 357, 363, 365, 374, 377, 380, 382, 387, 391], "cort": 8, "cosh": [347, 364, 369], "cosin": [349, 353, 354, 363], "cost": [80, 82, 83, 89, 90, 92, 113, 144, 215, 216, 217], "could": 151, "count": [83, 144, 145, 375], "counterclockwis": [211, 399], "cover": [15, 170, 171, 172], "coverag": [198, 199, 200], "creat": [2, 3, 14, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 73, 74, 77, 78, 79, 82, 84, 85, 86, 87, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 150, 151, 154, 157, 219, 235, 242, 289, 290, 291, 292, 293, 297, 313, 315, 324, 337, 341, 342, 343, 344, 345, 346, 374, 379, 386, 392, 403], "creation": [59, 60, 61, 62, 154, 157, 403], "criterion": [262, 263, 264, 265, 266], "critic": [23, 90, 299, 324], "crop": [394, 396, 403], "cross": [187, 188, 262, 263, 289, 290, 291], "cross_entropi": [183, 190], "crossentropyloss": [257, 267], "crucial": 10, "cube": 347, "cumul": [160, 230], "current": [151, 300, 303, 309, 312], "custom": [4, 14, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 68, 69, 70, 71, 73, 74, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 141, 142, 143, 150, 153, 154, 155, 156, 157, 211, 212, 213, 214, 229, 233, 289, 297, 324, 341, 342, 384], "custom_config": 135, "custom_decod": 289, "custom_encod": 289, "custom_lenet": 76, "customiz": 403, "custommodul": 150, "customnetwork": 153, "customparametermodel": [155, 156], "cut": 91, "cvf": 144, "cvpr": 144, "d": [144, 169, 172, 181, 200, 203, 207, 214, 243, 270, 274, 275, 279, 282, 285, 313, 338, 399], "d_": [172, 200, 203, 207, 242, 247, 279, 282, 285, 289, 290, 291, 292, 293], "d_1": [12, 13, 275], "d_2": [12, 13, 275], "d_h": [242, 291, 293], "d_model": [146, 147, 148, 289, 290, 291, 292, 293], "d_n": [12, 13, 275], "d_out": [172, 203, 207], "dampen": [300, 308, 310], "data": [4, 5, 6, 7, 8, 10, 14, 21, 144, 150, 152, 156, 167, 170, 172, 174, 180, 181, 186, 208, 211, 212, 213, 214, 219, 234, 240, 245, 246, 247, 260, 274, 280, 282, 285, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 316, 324, 325, 326, 327, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 374, 380, 381, 382, 383, 384, 385, 387, 392, 393, 396, 397, 398, 399, 400, 403], "databas": 8, "dataload": [2, 3], "dataset": [3, 5, 6, 7, 8, 32, 59, 60, 61, 62, 77, 78, 79, 80, 83, 88, 102, 103, 104, 105, 106, 107, 108, 109, 110, 211, 302, 314, 392, 394, 403], "dataset1": [0, 1], "dataset2": [0, 1], "ddot": 334, "debug": [145, 157, 312, 322, 403], "decai": [250, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "declar": [12, 13], "decod": [146, 289, 290, 291], "decoder_lay": [290, 291], "decoderlay": 290, "decompos": [16, 24, 26], "decomposit": [15, 16, 20, 23, 24, 26], "decor": [114, 115, 116, 117, 118, 119, 315], "decoupl": [144, 301, 302, 304, 305, 306, 307], "decreas": [303, 304, 309], "deep": [1, 3, 4, 10, 13, 14, 69, 70, 72, 102, 103, 104, 105, 107, 108, 114, 115, 116, 117, 118, 119, 121, 122, 125, 144, 193, 230, 236, 297, 324, 342, 384, 388, 389, 392, 393, 403], "deeper": [14, 64, 66, 74, 102, 109, 144, 236], "def": [0, 1, 2, 3, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "default": [1, 5, 6, 7, 8, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 159, 162, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 191, 192, 193, 194, 196, 197, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 233, 238, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 299, 306, 312, 317, 319, 320, 321, 323, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 358, 359, 360, 367, 371, 372, 373, 375, 377, 379, 380, 382, 384, 386, 388, 389, 391, 393, 397, 398, 400], "defin": [1, 3, 4, 10, 13, 14, 29, 44, 50, 63, 64, 65, 66, 72, 73, 74, 76, 82, 92, 93, 102, 120, 131, 132, 133, 135, 153, 154, 155, 156, 157, 177, 230, 232, 235, 239, 262, 263, 264, 265, 266, 280, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 320, 321, 335, 340, 352, 371, 392, 403], "definit": [14, 16, 212, 213, 214, 403], "degre": [211, 399, 403], "delai": 300, "deliv": [90, 91], "delta": [12, 166, 189, 238, 264, 301], "delta_": [12, 166, 238], "demand": 91, "demonstr": [14, 15, 126, 127, 128, 129, 134, 144, 297, 316], "denomin": [193, 194, 196, 197, 212, 213, 214, 268, 269, 270, 271, 272, 273, 274, 275, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 327], "denot": [21, 100, 101, 237, 242, 245, 246, 247, 249, 252, 253, 254, 255, 371], "dens": [14, 44, 45, 46, 47, 48, 144, 177, 208, 287, 302], "dense1": 14, "dense2": 14, "densenet": [45, 46, 47, 48, 75, 144, 218], "densenet_121": 144, "densenet_169": 144, "densenet_201": 144, "densenet_264": 144, "densiti": [160, 230], "depend": [14, 21, 22, 82, 144, 156, 187, 188, 189, 191, 192, 210, 245, 328, 338, 358, 360, 382, 387, 396, 397, 401], "deploy": 92, "depth": [29, 30, 31, 32, 33, 34, 43, 49, 50, 67, 88, 144, 154, 172, 177, 181, 200, 203, 207, 247, 251, 270, 274, 279, 282, 285], "depth_coef": 49, "depthseparableconv1d": 220, "depthseparableconv2d": 220, "depthseparableconv3d": 220, "depthwis": [29, 67, 80, 140, 144, 170, 171, 172, 215, 216, 217], "depthwise_separ": [215, 216, 217], "der": 144, "deriv": [23, 24, 166, 198, 199, 200, 230, 238, 240, 245, 246, 247, 258, 260, 315], "descend": 26, "descent": [14, 300, 310], "describ": [10, 17, 18], "descript": 403, "deseri": 150, "design": [3, 4, 13, 14, 15, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 42, 59, 60, 61, 62, 64, 65, 66, 68, 71, 77, 78, 79, 82, 83, 88, 89, 90, 91, 92, 103, 104, 105, 106, 107, 108, 109, 110, 121, 124, 140, 143, 144, 152, 154, 155, 156, 157, 159, 164, 236, 249, 297, 316, 403], "desir": [10, 141, 150, 198, 199, 200, 250, 277, 278, 279, 295, 371, 373], "destin": 151, "det": [15, 19], "det_a": 17, "detail": [14, 145, 299, 324, 330], "detect": 144, "determin": [0, 14, 15, 16, 17, 76, 111, 112, 198, 199, 200, 223, 224, 227, 228, 245, 246, 247, 277, 278, 279, 281, 282, 284, 285, 308, 312, 317, 319, 320, 321, 323, 339, 340, 384, 394, 396], "determinist": 211, "develop": [10, 14, 83, 297, 324, 403], "deviat": [223, 225, 227, 392, 395, 403], "devic": [81, 82, 88, 89], "diag": [23, 347], "diagon": [23, 24, 26, 338, 341, 370, 388, 389], "diagonaliz": 18, "dict": [10, 12, 13, 28, 31, 32, 33, 34, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 112, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 131, 132, 133, 134, 141, 143, 151, 153, 155, 259, 298], "dictionari": [76, 83, 90, 151, 152, 153, 155, 157, 298], "differ": [0, 10, 13, 21, 63, 67, 76, 82, 83, 89, 90, 126, 127, 128, 129, 134, 154, 157, 166, 184, 210, 219, 238, 258, 265, 299, 313, 322, 324, 336, 346, 372, 385, 403], "differenti": [14, 16, 25, 208, 230, 297, 317, 319, 320, 321, 323, 325, 337, 339, 340, 343, 345], "digit": [7, 8, 79, 144], "dilat": [170, 171, 172, 212, 213, 214, 215, 216, 217, 245, 246, 247], "dilation_height": 174, "dilation_width": 174, "dim": [29, 30, 67, 169, 243, 263, 266], "dim_feedforward": [146, 289, 291, 293], "dimens": [10, 12, 13, 17, 18, 20, 21, 24, 25, 26, 27, 29, 31, 32, 33, 34, 43, 102, 113, 130, 135, 142, 144, 146, 152, 166, 169, 184, 186, 193, 194, 196, 197, 199, 200, 210, 218, 219, 238, 242, 243, 245, 246, 247, 250, 268, 269, 270, 272, 273, 274, 275, 278, 279, 281, 282, 283, 284, 285, 289, 291, 292, 293, 295, 313, 316, 319, 323, 325, 329, 339, 358, 359, 360, 367, 370, 371, 372, 374, 375, 377, 380, 382, 385, 386, 387, 390, 391, 394, 396, 401], "dimension": [10, 21, 23, 24, 26, 67, 170, 171, 172, 201, 202, 203, 205, 206, 207, 219, 242, 245, 246, 247, 253, 254, 255, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 289, 291, 293, 313, 329, 330, 334, 338, 356, 359, 367, 370, 372, 376, 381, 382, 385, 387, 388, 389], "diminish": 302, "direct": [18, 262, 263, 264, 265, 266, 300, 308, 309, 310], "directli": [59, 60, 61, 62, 144, 153, 154, 155, 156, 210, 295, 301, 302, 304, 305, 306, 307, 322, 324, 373, 403], "directori": [3, 4, 5, 6, 7, 8], "disabl": [177, 250, 251, 312, 314], "discontinu": 362, "discrep": [262, 263, 266], "discret": [317, 320, 324], "disk": 3, "displai": [28, 143, 145], "distinct": [83, 146], "distribut": [160, 166, 176, 210, 223, 224, 225, 226, 227, 228, 230, 238, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 260, 263, 266, 280, 281, 282, 317, 319, 320, 321, 323, 324, 359, 367, 370, 372, 386, 395, 397, 398, 399, 400], "div": 347, "divers": [36, 144, 211, 398, 400, 403], "diversifi": 403, "divid": [1, 23, 144, 154, 157, 166, 170, 171, 172, 238, 262, 263, 264, 265, 266, 327, 384, 395], "divis": [14, 23, 170, 171, 172, 242, 249, 252, 253, 254, 255, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 327, 384], "do": [23, 25, 150, 153, 154, 155, 156, 175, 178, 179, 180, 297, 307, 312, 346, 370, 380], "document": [4, 14, 144, 299, 316, 324], "doe": [14, 21, 22, 23, 24, 26, 145, 146, 150, 153, 154, 155, 156, 157, 228, 303, 304, 309, 312, 314, 317, 319, 320, 321, 322, 323, 337, 338, 339, 340, 341, 343, 344, 345, 346, 374, 383], "doesn": 314, "doi": 144, "domain": 4, "don": 314, "dot": [12, 13, 18, 21, 153, 154, 155, 156, 157, 169, 242, 243, 275, 283, 284, 285, 329, 334, 347, 375, 377, 386, 391], "down": [3, 297, 401], "download": [4, 5, 6, 7, 8], "downsampl": 93, "drawback": 159, "drawn": [319, 320, 321, 323, 324, 399], "drop": [29, 30, 67, 176, 177, 249, 250, 251, 252, 253, 254, 255], "drop_block": [182, 183], "drop_path": [29, 30, 182, 183, 251], "drop_path_r": [50, 67], "drop_prob": 251, "drop_rat": 67, "dropblock": [176, 256, 257], "dropout": [27, 49, 50, 59, 60, 61, 62, 65, 67, 135, 142, 144, 146, 160, 169, 175, 179, 180, 181, 242, 243, 249, 250, 253, 254, 255, 289, 291, 293], "dropout1d": [182, 183, 256, 257], "dropout1dmodel": 253, "dropout2d": [182, 183, 256, 257], "dropout3d": [182, 183, 256, 257], "dropout_p": [169, 243], "dropout_prob": 65, "dropoutmodel": 252, "droppath": [256, 257], "dtype": [150, 152, 208, 287, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 393], "due": [21, 23, 44, 91, 170, 171, 234, 399], "dummi": 145, "duplic": [153, 155], "dure": [3, 14, 17, 18, 20, 23, 24, 26, 50, 63, 64, 65, 102, 144, 150, 151, 152, 153, 154, 155, 156, 157, 166, 175, 176, 177, 178, 179, 180, 181, 193, 196, 211, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 314, 325, 326, 358, 359, 360, 367, 372, 393, 396, 399, 403], "dy": [162, 233], "dynam": [0, 2, 3, 130, 134, 144, 151, 154, 155, 156, 157, 198, 199, 200, 219, 250, 275, 277, 278, 279, 302, 307, 312], "dynamicnetwork": 154, "e": [0, 10, 17, 18, 20, 21, 24, 26, 49, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 73, 74, 76, 77, 78, 79, 93, 135, 150, 166, 219, 237, 238, 239, 242, 249, 263, 298, 301, 308, 309, 341, 354, 356, 357, 364, 369, 370, 375, 397], "each": [1, 2, 3, 4, 18, 21, 23, 24, 26, 27, 29, 30, 44, 50, 67, 76, 80, 82, 83, 84, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 135, 142, 144, 146, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 184, 186, 193, 196, 198, 199, 200, 208, 218, 219, 231, 234, 238, 242, 245, 246, 247, 249, 252, 253, 254, 255, 258, 260, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 317, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 342, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 377, 379, 380, 382, 384, 386, 387, 391, 392, 393, 394, 395, 396, 397, 399, 401, 403], "earli": 307, "earlier": 83, "eas": [4, 14], "easi": [2, 3, 4, 10, 14, 114, 115, 116, 117, 118, 119, 152, 153, 155], "easier": [3, 153, 154, 157], "easili": [4, 83, 152, 156, 403], "eccv": 144, "economi": 26, "edg": [82, 91, 380], "edu": [5, 6], "educ": [14, 144], "effect": [13, 144, 153, 154, 155, 156, 157, 166, 170, 171, 172, 174, 229, 230, 234, 237, 238, 240, 268, 269, 270, 272, 273, 274, 275, 295, 312, 313, 314, 377, 391], "effici": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 20, 25, 30, 33, 34, 35, 37, 40, 41, 42, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 70, 71, 73, 74, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 134, 140, 144, 174, 215, 216, 217, 231, 232, 235, 263, 297, 314], "efficientnet": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 144], "efficientnet_b0": 144, "efficientnet_b1": 144, "efficientnet_b2": 144, "efficientnet_b3": 144, "efficientnet_b4": 144, "efficientnet_b5": 144, "efficientnet_b6": 144, "efficientnet_b7": 144, "efficientnet_v2": [59, 60, 61, 62], "efficientnet_v2_": 144, "efficientnet_v2_l": 144, "efficientnet_v2_m": 144, "efficientnet_v2_xl": 144, "efficientnetv2": 144, "eig": 19, "eigenvalu": [18, 24], "eigenvector": 18, "eigval": 18, "eigvec": 18, "einstein": [10, 12, 13], "either": [186, 295, 316, 317, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 373, 379], "element": [0, 12, 23, 24, 65, 144, 152, 156, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 208, 212, 213, 214, 215, 216, 217, 218, 231, 232, 234, 238, 239, 245, 246, 247, 249, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 275, 280, 281, 282, 283, 284, 285, 313, 317, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 376, 379, 380, 382, 383, 384, 385, 387, 388, 389], "elementwise_affin": 275, "elimin": 12, "elsewher": [283, 284, 285, 341], "elu": [161, 183, 241, 257], "elumodel": 229, "embed": [80, 81, 82, 83, 85, 86, 87, 90, 169, 183, 209, 242, 243, 257, 288, 289, 291, 292, 293], "embed_dim": [242, 289, 290, 291, 292, 293], "embedding_dim": [208, 287], "embedding_lay": 287, "embedding_matrix": 208, "emphas": [83, 90], "emploi": [50, 91], "empti": [151, 157, 347], "empty_lik": 347, "enabl": [0, 1, 2, 3, 10, 12, 13, 14, 21, 26, 49, 73, 93, 130, 131, 132, 133, 144, 151, 152, 153, 154, 155, 156, 169, 177, 234, 242, 243, 245, 246, 247, 258, 260, 289, 291, 293, 297, 299, 312, 314, 317, 319, 320, 321, 323, 325, 392], "encapsul": [243, 297, 325], "encod": [146, 263, 266, 289, 290, 291, 292, 293], "encoder_lay": [292, 293], "encoderlay": 292, "encompass": 49, "encourag": [176, 250, 252, 253, 254, 255, 262, 263, 266, 303], "end": [22, 159, 162, 163, 164, 177, 229, 231, 232, 233, 234, 236, 251, 264, 265, 266, 280, 281, 282, 283, 284, 285, 307, 309, 331, 332, 334, 337, 342, 348, 352, 358, 360, 362, 375, 380, 388, 389, 403], "enforc": [12, 151, 153, 155, 290, 291, 292, 293], "engin": 23, "enhanc": [30, 31, 65, 66, 67, 73, 74, 78, 81, 91, 92, 100, 101, 111, 112, 126, 127, 128, 129, 134, 142, 143, 144, 153, 155, 219, 235, 403], "ensur": [3, 5, 6, 7, 8, 10, 12, 13, 23, 24, 25, 50, 59, 60, 61, 62, 150, 151, 152, 153, 154, 155, 156, 157, 166, 169, 198, 199, 200, 208, 212, 213, 214, 233, 238, 243, 249, 250, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 297, 298, 300, 301, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 335, 342, 359, 367, 372, 374, 380, 388, 389, 393, 394, 395, 396, 397, 401, 403], "enter": 314, "entir": [3, 177, 179, 180, 181, 251, 254, 255, 324], "entri": [50, 76, 86, 87, 385], "entropi": [187, 188, 262, 263], "environ": [14, 35, 37, 86, 87, 90], "ep": [176, 187, 188, 193, 194, 196, 197, 212, 213, 214, 250, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 301, 302, 303, 304, 305, 306, 307, 308], "epoch": [1, 3], "epsilon": [194, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 301, 302, 303, 304, 305, 306, 307, 308], "equal": [21, 210, 280, 281, 282, 342, 384, 394, 396], "equat": [18, 23, 25], "equival": [330, 370, 381], "error": [0, 3, 12, 18, 20, 50, 151, 154, 155, 156, 157, 160, 189, 191, 230, 251, 262, 263, 264, 265, 297, 298, 314, 316, 342, 374], "especi": [3, 153, 155, 156, 237, 313, 314, 316, 322, 392, 393, 397, 403], "essenti": [1, 3, 14, 15, 21, 23, 72, 171, 174, 297, 322, 324, 358, 392, 393, 397, 403], "estim": [265, 303, 304, 305, 306, 307, 308], "et": [64, 144, 289], "eta": 309, "eta_": 309, "etc": [10, 44, 50, 83, 93, 262, 295, 393], "euclidean": 22, "european": 144, "eval": 251, "evalu": [151, 193, 196, 249, 250, 251, 252, 253, 254, 255, 268, 269, 270, 272, 273, 274, 403], "even": [301, 314, 337, 338, 341, 343, 344, 345, 346], "evenli": [198, 199, 200, 277, 278, 279, 337, 342, 384], "everi": [1, 403], "everywher": 362, "exact": [151, 154, 371, 397, 399], "exactli": 157, "exampl": [4, 330], "excel": [66, 90], "except": [0, 362, 375, 377, 391], "excit": [49, 82, 86, 87, 120, 123, 126, 127, 128, 129, 144, 218], "exclud": [388, 389], "exclus": [320, 323, 337], "exdb": 8, "execut": [154, 314], "exist": [25, 153, 155, 157, 315, 375], "exit": 314, "exp": [159, 164, 165, 167, 229, 236, 347], "expand": [4, 10, 39, 144, 174, 374, 382, 387], "expans": [12, 43, 67, 83, 86, 87], "expansion_factor": 82, "expect": [16, 154, 157, 177, 242, 249, 251, 252, 253, 254, 255, 275, 289, 290, 291, 292, 293, 297, 316], "expens": 3, "experi": [14, 83, 322, 324, 403], "experiment": 324, "explan": [21, 23, 27, 29, 135, 142, 198, 199, 200, 277, 278, 279, 300], "explicit": [12, 13, 157], "explicitli": [144, 153, 155], "explod": [236, 268, 269, 270], "explor": [89, 297, 324], "expon": [21, 335], "exponenti": [159, 164, 166, 229, 236, 238, 249, 303, 304, 305, 306, 307, 356], "express": [10, 12, 32], "extend": [4, 93, 113, 130, 144], "extens": [144, 299], "extern": [4, 14], "extra": [43, 62, 91, 374], "extract": [63, 69, 72, 102, 113, 130, 140, 144, 174, 247, 280, 282, 315, 338, 358, 360, 388, 389, 394, 396], "extractor": [76, 77, 78, 79, 140], "extrem": [23, 103, 144], "ey": 347, "f": [1, 4, 5, 6, 7, 8, 14, 144, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 235, 238, 289, 291, 293], "f_1": 218, "f_2": 218, "facilit": [10, 13, 63, 153, 157, 166, 238, 245, 246, 247, 297, 299, 395, 403], "factor": [49, 65, 83, 159, 169, 170, 171, 172, 174, 218, 227, 228, 242, 243, 295, 300, 307, 308, 309, 310, 316], "factori": 141, "failur": [153, 154, 155, 156, 297], "fals": [1, 5, 6, 7, 8, 22, 26, 49, 86, 87, 102, 145, 150, 151, 152, 169, 175, 177, 178, 179, 180, 181, 193, 196, 210, 221, 223, 224, 225, 226, 227, 228, 242, 243, 245, 246, 247, 251, 258, 260, 289, 290, 291, 292, 293, 295, 303, 304, 308, 312, 317, 319, 320, 321, 323, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 358, 359, 360, 367, 372, 373, 393], "famili": [43, 83, 144, 315], "fan": [223, 224, 227, 228], "fan_in": [223, 224], "fan_out": [223, 224], "fashion": 7, "fashion_train": 7, "fashionmnist": 9, "fast": 307, "faster": [144, 302, 306, 314], "fc": [72, 102, 113, 120, 130, 154, 218, 246, 247, 280, 281, 282, 283, 284, 285], "fc1": [78, 79, 145, 153, 157, 230, 231, 232, 234, 235, 236, 237, 239, 240, 260], "fc2": [78, 79, 145, 153, 157, 230, 231, 232, 234, 236, 237, 239, 240, 260], "fc3": 79, "featur": [3, 27, 29, 32, 33, 43, 44, 63, 66, 67, 69, 72, 76, 77, 78, 79, 92, 100, 101, 102, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 130, 131, 132, 133, 135, 140, 142, 143, 144, 176, 184, 186, 193, 194, 212, 213, 214, 218, 219, 247, 250, 252, 253, 254, 255, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 297, 302], "feature_extractor": 76, "fed": [3, 403], "feed": [3, 325, 403], "feedforward": [145, 146, 289, 291, 293], "femto": [37, 144], "fergu": [142, 144], "fetch": 0, "few": 145, "fewer": [1, 94, 95, 96, 97, 98, 99, 144, 374], "field": [5, 6, 8, 130, 134, 144, 219], "file": [3, 315], "fill": [221, 225, 226, 319, 320, 321, 323, 343, 344, 345, 346], "filter": [50, 83, 142, 144, 170, 171, 172, 174, 212, 213, 214, 246, 247], "filter_height": 174, "filter_s": 174, "filter_width": 174, "final": [29, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 146, 153, 154, 155, 156, 157, 169, 219, 242, 289, 290, 292, 392, 403], "find": [25, 358, 360], "fine": [89, 92, 218, 403], "finish": 314, "first": [5, 6, 7, 8, 18, 76, 142, 145, 154, 155, 184, 218, 258, 303, 304, 305, 306, 307, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 379, 391, 392, 393, 403], "fit": 297, "fix": [154, 380], "flatten": [12, 72, 76, 157, 174, 334, 378, 381, 382], "flexibl": [1, 3, 4, 10, 12, 14, 30, 63, 72, 73, 74, 76, 83, 84, 93, 102, 126, 127, 128, 129, 134, 135, 140, 144, 153, 154, 155, 156, 157, 295, 297, 299, 316, 343, 344, 393, 403], "flexibli": 13, "flip": [398, 400, 403], "float": [2, 5, 6, 7, 8, 29, 30, 49, 50, 65, 67, 80, 84, 146, 150, 152, 159, 162, 169, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 193, 194, 196, 197, 208, 211, 212, 213, 214, 221, 225, 226, 227, 228, 229, 233, 242, 243, 249, 250, 251, 252, 253, 254, 255, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 287, 289, 291, 293, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 317, 323, 325, 337, 340, 342, 352, 373, 395, 397, 398, 399, 400], "float32": [150, 152, 325, 337, 338, 341, 342, 343, 345, 373, 393], "float64": [346, 373, 393], "flow": [66, 72, 120, 144, 157, 176, 228, 230, 237, 240, 245, 246, 247, 258, 260, 312], "fly": [2, 3], "fname": 3, "focu": 14, "focus": 14, "follow": [0, 12, 14, 15, 18, 24, 25, 26, 27, 29, 45, 46, 47, 48, 49, 86, 87, 126, 127, 128, 129, 134, 135, 140, 142, 145, 146, 159, 160, 162, 163, 164, 165, 166, 167, 169, 184, 186, 210, 212, 213, 214, 215, 216, 217, 218, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 358, 360, 374, 379, 383, 394, 395, 396, 397, 398, 399, 400, 403], "foral": [290, 292], "forc": 176, "form": [24, 219, 290, 292, 334, 379, 382, 387, 403], "format": [2, 3, 5, 6, 7, 8, 145, 263, 266, 393], "formul": 160, "formula": [18, 26, 166, 198, 199, 200, 238, 239, 264, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 330, 372, 397], "forward": [14, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 142, 145, 150, 151, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "found": 14, "foundat": [72, 83, 120, 151, 297, 299, 325], "four": [45, 46, 47, 48, 94, 95, 96, 97, 98, 99, 380], "frac": [13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 177, 184, 186, 194, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 395], "frame": 181, "framework": [4, 10, 14, 144, 263, 266, 268, 269, 270, 272, 273, 274, 298, 299, 403], "frequent": [263, 266], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 21, 23, 31, 32, 33, 34, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 145, 150, 151, 152, 153, 154, 155, 156, 157, 174, 176, 184, 193, 196, 208, 210, 212, 213, 214, 218, 219, 221, 223, 224, 225, 226, 227, 228, 235, 242, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 290, 292, 293, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 330, 331, 332, 336, 338, 358, 359, 360, 367, 372, 375, 377, 379, 382, 384, 385, 386, 387, 391, 394, 395, 396, 397, 398, 399, 400, 403], "full": [26, 84, 86, 87, 146], "full_matric": 26, "fulli": [4, 15, 27, 29, 44, 45, 46, 47, 48, 49, 50, 72, 76, 77, 78, 79, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 135, 140, 142, 144, 186, 218, 219, 260, 324], "func": 315, "function": [3, 4, 5, 6, 7, 8, 10, 14, 15, 67, 151, 153, 154, 155, 156, 157, 212, 213, 214, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 289, 291, 293, 297, 299, 316, 324, 392, 403], "fundament": [14, 169, 186, 260, 393], "further": [13, 14, 31, 32, 33, 34, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 82, 84, 85, 86, 87, 89, 91, 100, 101, 324, 359, 367, 372], "fuse": 130, "fusion": [131, 132, 133], "futur": [169, 243, 259, 292, 293], "g": [0, 10, 17, 18, 21, 24, 26, 49, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 73, 74, 76, 77, 78, 79, 93, 135, 144, 218, 219, 249, 298, 301, 308, 375, 397], "g_": 302, "g_t": 308, "gain": [227, 228], "gamma": [194, 268, 269, 270, 271, 272, 273, 274, 275], "gamma_c": [194, 271], "gap": [102, 113, 130, 218], "gaussian": [160, 230], "gelu": [161, 183, 241, 257], "gelunetwork": 230, "gener": [23, 31, 36, 40, 145, 146, 177, 211, 249, 250, 252, 253, 254, 255, 273, 289, 304, 306, 307, 314, 317, 319, 320, 321, 322, 323, 324, 329, 337, 339, 340, 342, 379, 396, 397, 398, 400, 403], "geoffrei": [5, 6], "geq": 388, "get": [5, 6, 7, 8], "github": 7, "give": [14, 300, 308], "given": [12, 13, 17, 18, 21, 23, 24, 26, 147, 174, 208, 242, 243, 262, 263, 266, 298, 312, 317, 344, 346, 384, 392, 397, 398, 400, 403], "global": [0, 49, 102, 113, 120, 130, 194, 218, 271, 312, 314, 322, 324], "global_response_norm": [183, 195], "globalresponsenorm": [257, 276], "go": [10, 64, 144], "goal": [262, 263, 266], "googlenet": [64, 144], "gpu": 144, "grad": [150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 174, 177, 184, 186, 210, 215, 216, 217, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 298, 299, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401], "grad_output": 21, "gradient": [10, 14, 15, 66, 72, 144, 150, 152, 250, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 317, 319, 320, 321, 323, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 393], "grain": 218, "graph": [14, 228, 325, 337, 338, 341, 343, 344, 345, 346, 393], "grayscal": [7, 8, 76, 77, 78, 79, 397, 403], "greater": [39, 352], "green": 397, "grid": 379, "grn": 271, "groundbreak": 144, "group": [83, 93, 100, 101, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 134, 144, 154, 170, 171, 172, 212, 213, 214, 219, 245, 246, 247, 298, 299], "group1": 154, "group2": 154, "groupedconvblock": 113, "growth_rat": [44, 45, 46, 47, 48], "guarante": 322, "h": [10, 12, 13, 102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 144, 169, 171, 172, 174, 176, 180, 181, 194, 199, 200, 202, 203, 206, 207, 210, 211, 213, 214, 218, 242, 243, 269, 270, 271, 273, 274, 278, 279, 282, 285, 289, 291, 293, 394, 396], "h_": [171, 172, 199, 200, 202, 203, 206, 207, 210, 246, 247, 278, 279, 281, 282, 284, 285], "h_out": [171, 172, 202, 203, 206, 207], "h_stack": 377, "ha": [0, 18, 31, 145, 157, 170, 171, 172, 212, 213, 214, 235, 239, 262, 263, 268, 269, 270, 272, 273, 274, 275, 295, 298, 299, 330, 370, 374, 375, 377, 386, 391, 397], "half": 365, "han": 7, "hand": 25, "handl": [0, 3, 10, 14, 23, 144, 151, 153, 154, 155, 156, 157, 208, 263, 266, 297, 299, 314], "handwritten": [7, 8, 79], "hang": 144, "hard": [86, 87, 232], "hard_sigmoid": 231, "hardsigmoid": [232, 241, 257], "hardswish": [241, 257], "hardwar": 14, "hat": [303, 304, 305, 306, 307], "have": [0, 1, 17, 18, 20, 23, 24, 26, 152, 154, 156, 157, 171, 172, 176, 208, 228, 287, 297, 341, 343, 344, 345, 346, 358, 360, 375, 377, 379, 385, 386, 391, 395, 401], "he": 144, "head": [29, 67, 82, 140, 146, 169, 242, 243, 289, 291, 293], "head_fn": 67, "height": [140, 171, 172, 174, 180, 181, 194, 199, 200, 202, 203, 206, 207, 210, 211, 219, 246, 247, 269, 270, 271, 273, 274, 278, 279, 281, 282, 284, 285, 295, 394, 396, 401], "help": [14, 65, 162, 164, 181, 208, 229, 233, 235, 236, 240, 268, 269, 270, 280, 281, 283, 284, 287, 300, 303, 304, 306, 312, 313, 314, 316], "henc": 383, "here": [3, 16, 151, 184, 297, 299, 313, 314, 316, 324, 392, 393, 403], "hidden": [27, 142, 146, 154], "hidden_s": 154, "hierarch": [29, 30, 154, 157, 297], "hierarchi": 246, "hierarchicalnetwork": 154, "high": [14, 32, 38, 39, 59, 60, 61, 62, 69, 82, 90, 91, 110, 125, 134, 320, 323], "higher": [39, 50, 80, 88, 113, 263, 266, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 329, 330, 334, 356], "highest": [43, 91, 320], "highli": [35, 43, 85, 144], "highlight": [218, 283, 284, 285], "hint": 316, "hinton": [5, 6], "histor": 302, "histori": [317, 319, 320, 321, 323, 337, 338, 339, 340, 341, 343, 344, 345, 346], "hold": [83, 153, 154, 155, 156], "horizont": [377, 386, 398, 403], "hot": [263, 266], "how": [2, 3, 12, 14, 126, 127, 128, 129, 134, 154, 157, 297, 316, 403], "howard": 144, "howev": [150, 228], "hstack": 378, "html": [5, 6], "http": [5, 6, 7, 8], "hu": [144, 218], "huang": 144, "huber": [189, 264], "huber_loss": [183, 190], "huberloss": [257, 267], "huberregressionmodel": 264, "hue": 403, "huge": [38, 144], "hybrid": [91, 92, 144], "hyperbol": [167, 240, 354, 364, 369], "hyperparamet": [94, 95, 96, 97, 98, 99, 102, 113, 141, 147, 298, 300], "i": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "i_1": [12, 13], "i_2": [12, 13], "i_m": 12, "iccv": 144, "idea": 144, "ideal": [14, 32, 36, 40, 80, 83, 92, 157], "ident": [20, 21, 67, 144, 211, 251, 257, 261, 322, 324, 341, 383], "identifi": 155, "idx": [2, 3], "ieee": [144, 218], "ignor": [289, 290, 291, 292, 293], "ii": 370, "ij": [166, 210, 238, 328, 329, 330, 334, 379, 388, 389], "ik": [328, 329, 330], "ill": [17, 23], "ilsvrc": 144, "imag": [3, 4, 5, 6, 7, 8, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 50, 59, 60, 61, 62, 64, 65, 66, 72, 73, 74, 76, 77, 78, 79, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 143, 144, 171, 196, 211, 213, 218, 246, 273, 379, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "image_dir": 3, "image_path": 3, "imagedataset": 3, "imageio": 3, "imagenet": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 111, 112, 126, 127, 128, 129, 134, 144], "imbal": [263, 266], "impact": [144, 306], "implement": [2, 3, 14, 23, 27, 29, 44, 49, 63, 64, 65, 66, 67, 73, 74, 76, 80, 81, 82, 102, 111, 112, 114, 115, 116, 117, 118, 119, 120, 140, 142, 144, 146, 151, 174, 177, 215, 216, 217, 219, 242, 243, 251, 271, 291, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 377, 391, 397], "impli": [245, 246], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 112, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 176, 177, 178, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "improp": [10, 154, 157, 324], "improv": [29, 50, 64, 65, 66, 70, 72, 74, 92, 93, 102, 113, 126, 127, 128, 129, 130, 142, 144, 148, 176, 177, 193, 208, 211, 218, 230, 236, 240, 287, 300, 301, 302, 303, 304, 305, 306, 307, 308, 316, 396, 399, 403], "imread": 3, "in1_featur": [184, 258], "in2_featur": [184, 258], "in_channel": [102, 154, 157, 212, 213, 214, 215, 216, 217, 218, 219, 245, 246, 247, 269, 270, 280, 281, 282, 283, 284, 285, 297], "in_featur": [153, 154, 157, 186, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 247, 249, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 272, 275, 280, 281, 282, 283, 284, 285], "incept": [64, 65, 66, 67, 72, 73, 74, 75, 144], "inception_next": 67, "inception_next_atto": 144, "inception_next_bas": 144, "inception_next_smal": 144, "inception_next_tini": 144, "inception_resnet_v1": 144, "inception_resnet_v2": 144, "inception_v1": 144, "inception_v3": 144, "inception_v4": 144, "inceptionnext": [68, 69, 70, 71, 75, 144], "inceptionresnet": [73, 74], "includ": [3, 4, 7, 14, 15, 21, 22, 27, 29, 63, 64, 65, 73, 76, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 135, 141, 142, 145, 146, 151, 152, 154, 156, 157, 210, 212, 213, 214, 215, 216, 217, 291, 293, 295, 297, 298, 299, 306, 316, 324, 330, 380, 388, 389], "inclus": [152, 155, 320, 323, 342], "incom": [186, 260], "incompat": 374, "incomplet": 2, "incompletedataset": 2, "incorpor": [26, 85, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 144, 230], "increas": [32, 33, 80, 88, 91, 113, 114, 115, 116, 117, 118, 119, 130, 148, 170, 171, 172, 174, 211, 302, 309, 313, 377, 391, 397, 398, 400, 403], "independ": [154, 170, 171, 172, 242, 249, 252, 253, 254, 255, 275, 330, 340, 395, 397, 399, 401], "index": [0, 2, 5, 6, 7, 8, 10, 12, 194, 208, 271, 287, 313, 337, 338, 341, 379, 383], "indexerror": 0, "indic": [0, 1, 13, 100, 101, 135, 145, 152, 154, 156, 157, 188, 192, 208, 263, 266, 280, 287, 289, 290, 291, 292, 293, 312, 325, 394, 396], "individu": [3, 154, 157, 264, 275, 299, 302, 309], "induc": [164, 236], "inf": 368, "infer": [126, 127, 128, 129, 134, 154, 157, 314], "infin": [24, 26, 305], "inform": [14, 144, 145, 150, 218, 299, 301, 314], "infti": [22, 307], "inherit": [1, 300, 308, 310], "init": 222, "initi": [1, 29, 44, 67, 72, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 136, 137, 138, 139, 141, 147, 150, 152, 153, 154, 155, 156, 157, 219, 221, 223, 224, 225, 226, 227, 228, 242, 245, 246, 247, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 275, 287, 291, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 319, 322, 323, 324, 337, 341, 342, 343, 344, 345, 346, 373], "initial_accumulator_valu": 302, "inner": [14, 328, 347], "innov": [82, 92], "input": [10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 113, 126, 127, 128, 129, 130, 134, 140, 142, 144, 145, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 316, 324, 325, 326, 328, 329, 330, 334, 338, 340, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "input1": 258, "input2": 258, "input_": [27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 142, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 271, 277, 278, 279, 287, 388, 389], "input_1": 184, "input_2": 184, "input_data": [229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285], "input_indic": [208, 287], "input_s": [154, 156, 238, 263, 266], "input_shap": 145, "input_tensor": [14, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 140, 150, 153, 154, 155, 156, 157, 166, 176, 177, 215, 216, 217, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 295, 297, 394, 395, 396, 397, 398, 399, 400, 401], "insid": [3, 312, 314], "insight": [14, 144], "inspect": [151, 152, 157, 298], "inspir": [10, 12, 29, 144], "instabl": [23, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "instal": 14, "instanc": [0, 1, 14, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 141, 143, 145, 147, 148, 151, 152, 153, 155, 156, 157, 196, 235, 272, 273, 274, 275, 289, 290, 292, 298, 315, 373, 382, 387, 403], "instance_norm": [183, 195, 272, 273, 274], "instancenorm1d": [257, 276], "instancenorm1dmodel": 272, "instancenorm2d": [257, 276], "instancenorm3d": [257, 276], "instanti": [2, 49, 59, 60, 61, 62, 67, 68, 69, 70, 71, 88, 89, 90, 91, 126, 127, 128, 129, 134, 315], "instead": [14, 145, 153, 154, 155, 156, 157, 223, 224, 227, 228, 287, 289, 291, 293, 303, 304, 305, 314, 316, 339, 340], "int": [0, 1, 2, 5, 6, 7, 8, 12, 13, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 152, 166, 169, 170, 171, 172, 174, 176, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 226, 227, 228, 238, 242, 243, 245, 246, 247, 250, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 303, 304, 305, 306, 307, 309, 315, 317, 319, 320, 321, 322, 323, 325, 337, 338, 339, 341, 342, 343, 345, 352, 358, 359, 360, 367, 371, 372, 373, 374, 375, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 396, 401], "int32": 287, "integ": [1, 3, 21, 120, 135, 170, 171, 172, 199, 200, 242, 245, 246, 247, 275, 278, 279, 281, 282, 283, 284, 285, 316, 320, 321, 323, 324, 339, 343, 345, 359, 367, 371, 372, 380, 382, 383, 384, 387], "integr": [1, 2, 4, 5, 6, 7, 8, 13, 15, 91, 93, 144, 146, 152, 154, 156, 157, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 258, 260, 280, 281, 282, 283, 284, 285], "intellig": [144, 218], "intend": [10, 150, 155, 156], "intens": [23, 44, 103, 395, 397], "intent": 316, "interact": [184, 258, 297, 324], "interdepend": 144, "interfac": [2, 151, 154, 299], "interfer": [312, 314], "intermedi": [23, 100, 101, 218, 289, 291, 293], "intern": [103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 144, 153, 154, 155, 156, 157, 263, 266, 297, 394, 395, 396, 397, 398, 399, 400, 401], "interpol": [183, 209, 295, 342, 401], "interpret": [10, 144, 166, 238, 316, 375], "interv": [319, 323, 337], "introduc": [30, 50, 64, 65, 80, 81, 82, 113, 144, 163, 218, 230, 234, 235, 237, 240, 249, 252, 253, 254, 255, 289, 396, 399, 403], "introspect": 157, "intuit": [10, 12, 14, 153, 155, 297, 403], "inv": 19, "inv_a": 20, "invari": [281, 284], "invers": [14, 17, 20, 21, 23, 302, 349, 350, 351], "invert": [17, 20, 21, 25, 81, 82, 85, 144], "invok": 315, "involv": [12, 16, 17, 18, 20, 23, 24, 26, 130, 159, 160, 162, 163, 164, 165, 167, 184, 186, 210, 245, 246, 247, 258, 260, 316, 317, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 346, 356, 357, 358, 360, 363, 365, 379, 380, 382, 387], "is_caus": [169, 243, 292, 293], "is_leaf": 325, "issu": [3, 236, 268, 269, 270, 303, 304], "item": [7, 265], "iter": [0, 1, 2, 3, 150, 151, 154, 156, 290, 292, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 337], "ith": [166, 238], "its": [4, 21, 23, 27, 30, 83, 91, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 124, 125, 131, 132, 133, 142, 144, 145, 150, 153, 154, 155, 156, 170, 171, 172, 174, 211, 219, 228, 230, 234, 239, 250, 283, 284, 285, 297, 298, 301, 309, 312, 313, 314, 315, 337, 339, 340, 345, 358, 360, 373, 374, 383, 384, 395, 398, 400, 403], "itself": [16, 21, 153, 154, 155, 156], "j": [8, 12, 13, 166, 208, 218, 238, 268, 269, 270, 272, 273, 274, 280, 281, 283, 284, 287, 379, 386, 388, 389, 394, 396], "j_1": 12, "j_2": 12, "j_n": 12, "jie": 144, "jk": 329, "join": [3, 375], "json": 315, "k": [21, 144, 169, 170, 242, 243, 245, 263, 269, 270, 273, 274, 280, 283, 284, 293, 328, 329, 338, 341, 375, 384], "k_d": [172, 247, 282, 285], "k_h": [171, 172, 246, 247, 281, 282, 285], "k_i": 242, "k_w": [171, 172, 246, 247, 281, 282, 285], "kaim": [144, 223, 224, 227, 228], "kaiming_norm": 222, "kaiming_uniform": 222, "kalenichenko": 144, "karen": 144, "kashif": 7, "kdim": 242, "keep": [151, 177, 234, 301, 314, 383, 388, 389], "keep_grad": [152, 317, 319, 320, 321, 323, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 393], "keep_var": 151, "keepdim": [22, 358, 359, 360, 367, 372], "kei": [83, 144, 151, 153, 155, 157, 169, 242, 243, 293, 298], "kept": [359, 367, 372], "kernel": [76, 77, 78, 79, 83, 86, 87, 130, 131, 132, 133, 134, 142, 144, 170, 171, 172, 174, 198, 199, 200, 201, 202, 203, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 277, 278, 279, 281, 282, 285], "kernel_s": [82, 86, 87, 130, 131, 132, 133, 154, 157, 201, 202, 203, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 269, 270, 280, 281, 282, 283, 284, 285], "keyerror": 151, "keyword": [28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 143, 151, 259], "kj": [328, 330], "known": 144, "kriz": [5, 6], "krizhevski": [5, 6, 144], "kroneck": [12, 166, 238], "kwarg": [28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 151, 259, 315], "l": [16, 23, 59, 144, 169, 170, 179, 198, 201, 205, 212, 218, 243, 249, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 292, 293, 374], "l2": [300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "l_": [144, 170, 198, 201, 205, 245, 277, 280, 283, 289], "l_k": 242, "l_m": [290, 291], "l_out": [170, 201, 205], "l_q": 242, "l_t": [289, 290, 291], "l_v": 242, "label": [4, 5, 6, 7, 8, 65, 262, 263, 266], "lambd": 300, "lambda": [18, 164, 236, 300, 304], "lambda_1": 18, "lambda_2": 18, "lambda_i": 18, "lambda_n": 18, "languag": [4, 245, 258, 280, 283, 289], "larg": [0, 3, 23, 32, 38, 39, 43, 44, 59, 62, 82, 86, 88, 91, 92, 103, 104, 105, 108, 121, 122, 144, 215, 216, 217, 235, 264, 297, 300, 303, 304, 305, 308, 309, 310, 314], "larger": [31, 49, 50, 102, 130, 148, 153, 155, 170, 171, 172, 174, 176, 250, 300, 331, 380, 394, 396, 401], "largest": [43, 358], "last": [1, 166, 197, 238, 329, 330, 375, 398, 400], "last_channel": 82, "latest": 4, "layer": [10, 14, 27, 29, 30, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 92, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 144, 145, 146, 151, 153, 154, 157, 166, 177, 186, 193, 196, 197, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 238, 243, 245, 246, 247, 251, 258, 259, 260, 266, 275, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 297, 324, 380, 393], "layer1": 315, "layer2": 315, "layer_group": 154, "layer_norm": [183, 195, 275], "layer_norm_ep": [289, 291, 293], "layer_scale_init": 29, "layer_sequ": [154, 157], "layernorm": [257, 276, 289, 290, 291, 292, 293], "layernormmodel": 275, "le": 144, "lead": [10, 154, 157, 230, 272, 273, 274, 275, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 324, 374], "leaf": 325, "leaki": [162, 233], "leaky_relu": [161, 183, 233], "leakyrelu": [241, 257], "learn": [1, 3, 4, 7, 8, 10, 13, 14, 21, 23, 50, 69, 70, 113, 114, 115, 116, 117, 118, 119, 142, 143, 144, 153, 154, 155, 156, 163, 166, 218, 229, 233, 234, 238, 245, 246, 247, 252, 253, 254, 255, 258, 260, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 322, 342, 384, 388, 389, 392, 393, 403], "learnabl": [150, 151, 152, 193, 194, 196, 197, 212, 213, 214, 242, 245, 246, 247, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 293, 297], "least": [23, 24, 26, 295, 370, 388, 389], "lecun": [8, 144], "left": [21, 22, 23, 26, 160, 166, 230, 238, 242, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 283, 284, 285, 291, 293, 394, 396], "leftarrow": 306, "len": [0, 1, 2, 3, 379], "lenet": [75, 77, 78, 79, 144], "lenet_1": 144, "lenet_4": 144, "lenet_5": 144, "length": [154, 169, 170, 179, 198, 201, 205, 245, 259, 268, 272, 277, 280, 283, 292, 293, 380, 395], "leq": [231, 232, 264, 307, 335, 352, 389], "lerp": 210, "less": [0, 159, 162, 189, 229, 233, 263, 264, 266, 342, 352], "let": 18, "level": [14, 72], "leverag": [12, 13, 25, 66, 67, 74, 88, 91, 114, 115, 116, 117, 118, 119, 140, 144, 219, 297], "li": 144, "librari": [3, 10, 14, 15, 151, 297, 298, 299, 315, 316, 324, 325, 403], "lie": 317, "lightweight": [14, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 81, 86, 87, 94, 95, 96, 97, 98, 99, 106, 123, 219, 232, 235], "like": [12, 13, 14, 50, 72, 83, 91, 114, 115, 116, 117, 118, 119, 131, 132, 133, 144, 146, 150, 151, 154, 157, 170, 176, 227, 228, 236, 249, 250, 268, 269, 270, 272, 273, 274, 312, 313, 316, 373, 393, 403], "likelihood": [192, 263, 266], "limit": [34, 41, 86, 87, 88, 90, 145, 235, 301, 352], "linalg": [14, 19], "linalgerror": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26], "linear": [14, 15, 16, 23, 24, 25, 67, 81, 85, 120, 144, 145, 153, 154, 155, 157, 159, 160, 162, 163, 164, 177, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 247, 249, 251, 252, 253, 258, 259, 262, 263, 264, 265, 266, 268, 272, 275, 280, 281, 282, 283, 284, 285, 289, 291, 293, 315, 341], "linearli": 264, "linspac": 347, "linspace_tensor": 342, "list": [0, 1, 29, 30, 50, 67, 76, 82, 93, 102, 113, 120, 130, 135, 145, 150, 152, 153, 154, 155, 156, 197, 219, 259, 275, 298, 316, 317, 319, 320, 321, 323, 325, 338, 339, 340, 343, 344, 345, 346, 371, 374, 383, 384, 385, 390, 392], "listdir": 3, "liter": [13, 102, 187, 188, 189, 191, 192, 210, 212, 213, 214, 215, 216, 217, 219, 223, 224, 245, 246, 247, 262, 263, 264, 265, 266, 295, 379], "liu": 144, "ln": 335, "load": [3, 4, 5, 6, 7, 8, 150, 151, 152, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315], "load_state_dict": [151, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "loader": [1, 2, 3], "local": [144, 174, 245], "locat": [144, 210], "log": [192, 262, 263, 266, 347], "log_softmax": 266, "logarithm": [335, 356, 357], "logic": [3, 277, 278, 279, 297, 298], "logit": [27, 29, 142, 166, 238, 263], "logsoftmax": [263, 266], "long": [144, 306, 371], "lookup": [208, 287], "loop": [1, 12, 13, 154, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "loss": [14, 23, 153, 154, 155, 156, 157, 166, 187, 188, 189, 191, 192, 229, 230, 233, 234, 236, 237, 238, 240, 249, 252, 253, 254, 255, 259, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "low": [14, 72, 81, 86, 87, 90, 320, 323], "lower": [16, 80, 226, 290, 291, 292, 293, 300, 308, 309, 310, 323, 388, 389], "lower_triangular": 388, "lowest": 320, "lr": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "ls_init_valu": 67, "lu": 20, "lucid": [0, 1, 2, 5, 6, 7, 8, 11, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 318, 347, 378, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "m": [60, 135, 144, 153, 154, 157, 242, 281, 282, 284, 285, 289, 290, 293, 303, 304, 305, 306, 307, 341, 388, 389], "m_": [303, 304, 305, 306, 307, 388, 389], "m_m": 291, "m_t": [291, 306, 307], "maaten": 144, "machin": [3, 7, 8, 14, 23, 144, 146, 218, 289, 303, 313, 322], "magnitud": [177, 208, 287, 308, 309, 403], "mai": [3, 10, 12, 14, 18, 20, 23, 90, 154, 156, 211, 251, 264, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 314, 324, 397, 403], "main": [14, 24, 72, 154, 338, 341, 388, 389], "maintain": [23, 30, 35, 59, 60, 61, 62, 70, 80, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 134, 144, 150, 151, 153, 154, 155, 157, 164, 177, 223, 224, 227, 228, 229, 230, 236, 249, 251, 252, 253, 254, 255, 268, 269, 270, 272, 273, 274, 303, 308, 394, 397, 401], "make": [1, 3, 10, 14, 32, 33, 36, 37, 63, 72, 76, 81, 83, 85, 86, 87, 89, 90, 92, 102, 144, 154, 157, 237, 263, 264, 275, 281, 284, 297, 302, 303, 304, 305, 313, 315, 324, 325, 330, 379, 384, 392, 403], "manag": [14, 151, 153, 154, 155, 156, 157, 297, 299, 312, 314, 315, 324], "manhattan": 22, "mani": 145, "manipul": [10, 12, 14, 153, 155, 403], "manner": [10, 12, 13, 154, 157], "manual": [10, 187, 188, 192, 262, 263, 266, 314], "map": [12, 67, 100, 101, 102, 113, 123, 130, 144, 151, 165, 167, 176, 194, 218, 237, 240, 251, 271, 287], "mask": [144, 150, 169, 242, 243, 249, 252, 253, 254, 255, 289, 290, 291, 292, 293, 388, 389], "match": [25, 151, 154, 157, 169, 187, 189, 191, 197, 212, 213, 214, 250, 287, 298, 356, 374, 382, 383, 384, 387, 390, 395, 403], "math": [242, 353, 363, 368], "mathbb": [242, 384], "mathbf": [12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 140, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 184, 186, 210, 215, 216, 217, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 328, 329, 330, 334, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401], "mathcal": [223, 225, 227, 249, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275], "mathemat": [20, 212, 213, 214, 396, 398, 399, 400], "mathrm": 23, "matmul": 347, "matric": [15, 17, 18, 20, 23, 25, 26, 242, 293, 328, 329, 330, 341, 379, 388, 389], "matrix": [12, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 174, 184, 208, 259, 260, 287, 297, 328, 379], "matrix_pow": 19, "matthew": 144, "max": [10, 22, 120, 135, 163, 205, 206, 207, 208, 231, 232, 234, 235, 283, 284, 285, 287, 305, 331, 347, 352], "max_norm": [208, 287], "max_pool": [283, 284, 285], "max_pool1d": [183, 204], "max_pool2d": [183, 204], "max_pool3d": [183, 204], "max_valu": 352, "maxim": [3, 38, 91], "maximum": [22, 234, 235, 283, 284, 285, 303, 305, 347, 352, 358, 399], "maxpool": [27, 142], "maxpool1d": [257, 286], "maxpool1dmodel": 283, "maxpool2d": [154, 157, 246, 257, 286], "maxpool2dmodel": 284, "maxpool3d": [247, 257, 286], "maxpool3dmodel": 285, "mean": [5, 6, 7, 8, 10, 12, 13, 24, 100, 101, 145, 150, 164, 170, 171, 172, 175, 187, 188, 189, 191, 192, 193, 196, 212, 213, 214, 225, 229, 230, 231, 233, 234, 236, 237, 240, 247, 249, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 303, 304, 305, 306, 307, 308, 312, 321, 347, 352, 356, 357, 358, 360, 363, 365, 367, 370, 371, 372, 392, 395, 403], "meaning": [13, 157, 316], "measur": [262, 263, 265, 266], "mechan": [14, 100, 101, 120, 130, 134, 144, 146, 156, 184, 242], "medium": [37, 41, 60, 88, 89, 92, 144], "meet": 144, "mem_is_caus": [290, 291], "mem_key_padding_mask": [289, 290, 291], "mem_mask": [289, 290, 291], "membership": 262, "memori": [2, 3, 44, 289, 290, 291, 314, 339, 340], "merg": 12, "meshgrid": 378, "method": [3, 10, 13, 14, 15, 20, 50, 120, 140, 141, 153, 154, 155, 156, 157, 187, 188, 189, 191, 192, 223, 224, 227, 228, 262, 263, 264, 265, 266, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 324], "mha": 242, "mid": 70, "mid_channel": [86, 87], "middl": 313, "might": 297, "min": [231, 232, 235, 332, 347, 352], "min_valu": 352, "mind": [0, 3, 14, 154, 157, 314], "mingx": 144, "mini": 1, "minim": [4, 14, 68, 82, 144, 157, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 299], "minimalist": 14, "minimum": [347, 352, 360], "minu": 237, "mirror": [344, 346], "mismatch": [10, 12, 50, 151, 297, 298], "miss": [151, 297], "mitig": [162, 229, 233, 236, 268, 269, 270], "mix": 67, "mixer": 67, "mlp": [67, 219], "mlp_ratio": 67, "mnist": [4, 7, 9, 77, 78], "mnist_train": [4, 8], "mobil": [80, 81, 82, 83, 85, 86, 87, 90, 144], "mobilenet": [75, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 144, 235], "mobilenet_v2": 144, "mobilenet_v3": [86, 87], "mobilenet_v3_larg": 144, "mobilenet_v3_smal": 144, "mobilenet_v4": [88, 89, 90, 91, 92], "mobilenet_v4_conv_larg": 144, "mobilenet_v4_conv_medium": 144, "mobilenet_v4_conv_smal": 144, "mobilenet_v4_hybrid_larg": 144, "mobilenet_v4_hybrid_medium": 144, "mobilenetv2": [81, 144], "mobilenetv3": [82, 86, 87, 144], "mode": [14, 181, 193, 196, 210, 223, 224, 249, 251, 252, 253, 254, 255, 295, 380], "model": [1, 3, 4, 10, 14, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 166, 169, 176, 208, 211, 212, 213, 214, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 251, 252, 253, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 324, 392, 393, 403], "model_b0": 49, "model_b7": 49, "model_tini": 67, "moder": [33, 37, 71, 89, 124], "modern": [29, 30, 67, 144], "modif": [141, 157, 314], "modifi": [28, 88, 102, 140, 143, 153, 154, 155, 156, 221, 223, 224, 225, 226, 227, 228, 249, 312, 314, 322, 377, 391], "modul": [5, 6, 7, 8, 10, 14, 27, 28, 29, 30, 49, 50, 63, 66, 67, 72, 73, 74, 76, 80, 81, 82, 83, 92, 102, 113, 120, 130, 135, 140, 142, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 157, 177, 212, 213, 214, 215, 216, 217, 218, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 324, 393, 403], "modular": [3, 14, 144, 146, 151, 154, 157, 297, 403], "moduledict": [154, 155, 157, 158], "modulelist": [156, 157, 158], "moment": [303, 304, 305, 306, 307], "momentum": [193, 196, 212, 213, 214, 268, 269, 270, 272, 273, 274, 300, 306, 308, 310], "momentum_decai": 306, "monoton": 239, "moor": 23, "more": [3, 4, 7, 10, 14, 18, 32, 102, 109, 148, 153, 154, 157, 176, 215, 216, 217, 229, 252, 253, 254, 255, 289, 297, 298, 299, 300, 301, 304, 305, 308, 309, 310, 321, 330, 370, 386, 388, 389, 403], "most": [15, 36, 144, 284, 393, 394, 403], "move": [300, 308], "mse": [189, 191, 264, 265], "mse_loss": [183, 190], "mseloss": [257, 267], "mu": [225, 268, 269, 270, 272, 273, 274, 275, 372], "mu_c": 395, "mu_i": [272, 273, 274], "much": 403, "mul": 347, "multi": [3, 4, 67, 73, 130, 131, 132, 133, 144, 146, 166, 169, 188, 192, 219, 238, 242, 263, 266, 289, 291, 293, 359, 367, 372], "multidimension": [319, 323, 339], "multiheadattent": [244, 257], "multipl": [1, 3, 12, 14, 15, 21, 25, 27, 102, 120, 134, 155, 156, 157, 174, 210, 211, 218, 219, 242, 249, 252, 253, 254, 255, 263, 266, 290, 292, 297, 313, 317, 319, 320, 321, 323, 328, 333, 339, 340, 384, 392, 397, 403], "multipli": [21, 84, 156, 186, 260, 295, 309, 333, 334], "must": [0, 1, 3, 16, 17, 18, 20, 21, 24, 25, 26, 145, 151, 153, 154, 155, 156, 157, 177, 197, 242, 249, 251, 252, 253, 254, 255, 266, 287, 289, 291, 293, 295, 298, 314, 317, 370, 374, 375, 377, 380, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 396, 397, 398, 400], "my_simple_model": 315, "mymodel": [151, 152, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "myoptim": [298, 299], "n": [12, 21, 22, 102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 144, 153, 154, 157, 169, 170, 171, 172, 174, 176, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 223, 225, 227, 242, 243, 245, 246, 247, 254, 255, 258, 260, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 341, 359, 370, 372], "n1": 22, "nabla_": [301, 302, 303, 304, 305, 306, 307, 309], "nabla_t": 307, "nadam": 311, "nair": [5, 6], "name": [10, 12, 13, 144, 145, 151, 153, 155, 157, 315, 316], "nan": [24, 26], "nano": [40, 144], "natur": [23, 144, 245, 258, 280, 283, 289, 335, 356, 357], "ndarrai": [150, 152, 316, 317, 325, 338, 340, 344, 346, 373], "ndim": [24, 26, 152, 325], "ne": 21, "nearest": [210, 295], "necessari": [4, 5, 6, 7, 8, 23, 314, 377, 391], "need": [2, 4, 13, 92, 144, 154, 155, 156, 166, 258, 289, 297, 314, 339, 340, 392, 393, 403], "neg": [21, 23, 26, 159, 192, 211, 229, 233, 234, 236, 263, 266, 309, 375], "negative_slop": [162, 233], "neglect": 156, "neighbor": 210, "neq": 22, "nest": [145, 154, 157, 297], "nestedmodel": 145, "nesterov": 306, "net": [142, 144], "network": [3, 4, 10, 13, 14, 27, 28, 29, 30, 44, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 72, 79, 80, 83, 84, 88, 91, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 130, 135, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 167, 170, 171, 172, 176, 177, 184, 186, 193, 211, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 280, 281, 282, 283, 284, 285, 287, 289, 291, 293, 297, 298, 299, 300, 308, 310, 323, 324, 325, 337, 343, 345, 358, 360, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "neural": [3, 4, 10, 13, 14, 27, 28, 29, 49, 51, 52, 53, 54, 55, 56, 57, 58, 72, 79, 143, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 167, 170, 171, 172, 177, 184, 186, 193, 211, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 280, 281, 282, 283, 284, 285, 287, 297, 298, 299, 300, 308, 310, 323, 324, 325, 337, 343, 345, 358, 360, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "neuralnetwork": [231, 232, 234, 239], "neuron": 233, "never": 397, "new": [151, 152, 159, 160, 162, 163, 164, 165, 167, 184, 186, 210, 219, 223, 224, 225, 226, 227, 228, 298, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 377, 380, 382, 383, 386, 387, 388, 389, 390, 391], "next": [157, 392], "nll": 192, "nll_loss": [183, 190], "nllloss": [257, 267], "nlp": [208, 287], "nn": [5, 6, 7, 8, 14, 27, 29, 30, 44, 49, 50, 63, 67, 72, 76, 80, 81, 82, 83, 102, 113, 120, 126, 127, 128, 129, 130, 134, 135, 142, 145, 158, 161, 168, 173, 182, 185, 190, 195, 204, 209, 220, 222, 241, 244, 248, 256, 257, 261, 267, 276, 286, 288, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 393, 403], "no_grad": 312, "node": 325, "nois": [26, 324], "non": [18, 21, 23, 26, 156, 160, 162, 163, 223, 224, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 249, 252, 253, 254, 255, 289, 290, 291, 292, 293, 303, 304, 314, 335, 352], "none": [0, 1, 2, 5, 6, 7, 8, 22, 49, 50, 63, 67, 72, 76, 80, 81, 82, 83, 93, 102, 140, 145, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 177, 184, 186, 187, 188, 189, 191, 192, 193, 196, 197, 208, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401], "norm": [15, 19, 208, 287, 290, 292, 305], "norm_first": [289, 291, 293], "norm_typ": [208, 287], "normal": [5, 6, 7, 8, 29, 120, 144, 160, 164, 166, 167, 176, 193, 194, 196, 197, 208, 212, 213, 214, 222, 223, 227, 230, 236, 238, 249, 268, 269, 270, 271, 272, 273, 274, 275, 287, 289, 290, 291, 292, 293, 308, 321, 324, 392, 402, 403], "normalized_shap": [197, 275], "notat": [10, 12, 13], "note": [170, 249], "noth": [175, 178, 179, 180], "notimplementederror": [2, 151, 298], "notin": 352, "nov": 144, "novel": [7, 144], "np": [102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 150, 152, 218, 263, 266, 287, 316, 325, 330, 337, 338, 341, 343, 345, 346, 357, 373, 393], "npy": [5, 6, 7, 8], "num": [290, 292, 342], "num_class": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 238, 263, 266], "num_decoder_lay": [146, 289], "num_embed": [208, 287], "num_encoder_lay": [146, 289], "num_featur": [157, 212, 213, 214, 268, 269, 270, 272, 273, 274], "num_head": [146, 242, 289, 290, 291, 292, 293], "num_init_featur": [44, 45, 46, 47, 48], "num_lay": [290, 292], "num_paramet": 156, "number": [0, 1, 2, 5, 6, 7, 8, 12, 17, 18, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 154, 156, 157, 169, 170, 171, 172, 174, 179, 180, 181, 184, 186, 188, 192, 193, 194, 196, 198, 199, 200, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 237, 242, 245, 246, 247, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 300, 319, 322, 323, 325, 335, 337, 339, 341, 342, 358, 359, 360, 371, 372, 375, 377, 380, 382, 383, 385, 387, 391, 395, 397, 398, 400, 403], "numer": [13, 20, 23, 176, 187, 188, 193, 194, 196, 197, 212, 213, 214, 235, 250, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 316, 327, 337, 343, 345], "numpi": [14, 150, 152, 263, 266, 316, 325, 330, 338, 341, 342, 357, 370, 373, 374, 380, 382, 387, 393, 403], "o": [3, 242, 282, 285, 343, 344], "object": [1, 3, 15, 130, 144, 151, 155, 156, 265, 297, 314, 326, 327, 331, 332, 333, 336, 373], "observ": 303, "obtain": 1, "occur": [211, 314, 315, 375], "occurr": 21, "odot": [249, 252, 253, 254, 255], "off": [33, 89, 312], "offer": [4, 10, 14, 30, 31, 33, 43, 70, 89, 297, 299, 324, 403], "offset": 341, "often": [21, 111, 112, 170, 171, 172, 174, 208, 250, 263, 266, 337, 345, 393, 397, 401, 403], "older": 306, "onc": 314, "one": [0, 13, 126, 127, 128, 129, 134, 156, 157, 166, 170, 186, 201, 205, 212, 213, 214, 236, 237, 238, 245, 253, 263, 266, 268, 272, 280, 283, 295, 298, 313, 316, 321, 336, 344, 358, 360, 376, 381, 386, 393], "ones": [184, 186, 245, 246, 247, 260, 268, 269, 270, 272, 273, 274, 275, 297, 341, 344, 347], "ones_lik": 347, "onli": [14, 145, 210, 231, 234, 249, 250, 252, 253, 254, 255, 262, 263, 266, 268, 269, 270, 272, 273, 274, 275, 283, 284, 285, 309, 312, 337, 352, 358, 360, 370, 380, 381, 383, 385, 388, 389], "onto": [24, 26], "openml": [5, 6, 7, 8], "oper": [3, 10, 12, 13, 14, 15, 20, 23, 100, 101, 120, 121, 122, 123, 124, 125, 150, 151, 154, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 177, 181, 184, 186, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 297, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 343, 345, 356, 357, 358, 359, 360, 363, 365, 367, 370, 372, 375, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 401], "operatornam": [21, 23, 242, 289, 290, 291, 292, 293], "opposit": 300, "optim": [3, 10, 13, 14, 15, 21, 23, 24, 26, 29, 34, 35, 38, 41, 43, 44, 50, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 81, 82, 86, 87, 89, 90, 91, 92, 144, 150, 152, 155, 156, 174, 245, 246, 247, 287, 297, 314], "optimizer_st": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "option": [1, 5, 6, 7, 8, 10, 12, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 159, 162, 166, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 233, 238, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 300, 308, 310, 317, 319, 320, 321, 323, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 358, 359, 360, 367, 371, 372, 373, 375, 379, 382, 384, 385, 386, 388, 389, 393, 397, 398, 400], "ord": 22, "order": [1, 3, 10, 22, 26, 153, 154, 155, 156, 157, 371, 392], "ordered_dict": 157, "ordereddict": [151, 153, 154, 157], "organ": [153, 154, 155, 157, 315], "orient": 403, "origin": [30, 65, 79, 175, 211, 218, 240, 380, 381, 382, 383, 387, 390, 401], "orthogon": [23, 24, 26], "orthonorm": 24, "oscil": [300, 308, 310], "other": [2, 3, 14, 20, 65, 74, 76, 79, 89, 150, 151, 154, 157, 223, 224, 249, 250, 297, 298, 312, 314, 324, 325, 337, 339, 343, 345, 370, 379, 403], "otherwis": [103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 159, 162, 163, 164, 166, 177, 229, 231, 232, 233, 234, 236, 238, 251, 252, 253, 254, 255, 264, 280, 281, 282, 283, 284, 285, 290, 292, 298, 309, 315, 331, 332, 358, 360, 388, 389], "otim": [23, 184, 258], "out": [0, 3, 4, 10, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 223, 224, 227, 228, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 291, 300, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391], "out_channel": [76, 82, 86, 87, 154, 157, 212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 269, 270, 280, 281, 282, 283, 284, 285, 297], "out_featur": [153, 154, 157, 184, 186, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 247, 249, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 272, 275, 280, 281, 282, 283, 284, 285], "outcom": [397, 398, 400], "outer": 347, "outlier": [189, 264], "output": [0, 1, 2, 10, 14, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 184, 186, 198, 199, 200, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 320, 321, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 341, 343, 345, 346, 356, 357, 358, 359, 360, 363, 365, 367, 370, 371, 372, 379, 380, 382, 384, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "output_height": 174, "output_lay": [154, 157], "output_s": [154, 198, 199, 200, 277, 278, 279], "output_width": 174, "output_with_norm": [208, 287], "output_with_pad": [208, 287], "outsid": [0, 251], "over": [0, 1, 2, 3, 13, 15, 81, 91, 100, 101, 130, 142, 151, 154, 156, 166, 198, 199, 200, 218, 238, 245, 246, 247, 263, 266, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 300, 301, 302, 303, 304, 319, 323, 358, 359, 360, 367, 370, 372, 397, 398, 400], "overal": [140, 177], "overdetermin": 23, "overfit": [1, 27, 142, 178, 181, 250, 252, 253, 254, 255, 300, 303, 308, 310], "overhead": [82, 144, 218], "overli": 235, "overrid": [2, 3, 89, 90, 91], "overridden": [151, 298], "overwrit": [153, 155], "own": [4, 153, 154, 155, 156, 170, 171, 172, 228, 297, 395], "p": [22, 23, 49, 152, 155, 156, 175, 176, 177, 178, 179, 180, 181, 208, 249, 250, 252, 253, 254, 255, 280, 283, 284, 287, 397, 398, 400, 403], "p_d": [282, 285], "p_h": [281, 282, 285], "p_w": [281, 282, 285], "packag": [2, 3, 4, 10, 15, 144, 297, 299, 315, 322, 324, 393, 403], "pad": [76, 154, 157, 170, 171, 172, 174, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 269, 270, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 378], "pad_after_dim1": 380, "pad_after_dim2": 380, "pad_before_dim1": 380, "pad_before_dim2": 380, "pad_width": 380, "padding_height": 174, "padding_idx": [208, 287], "padding_width": 174, "pair": 184, "pang": 144, "paper": 64, "parallel": [1, 3, 130, 144, 242], "param": [151, 152, 155, 156, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "param1": 151, "param_dict": 155, "param_group": [298, 299], "param_groups_setup": 298, "param_list": 156, "param_s": 315, "paramet": [0, 2, 14, 77, 78, 79, 144, 151, 297, 298, 299, 316, 324, 403], "parameter": 83, "parameterdict": 158, "parameterlist": 158, "parent": 297, "part": [150, 151, 228, 287, 297, 312, 314, 324, 337, 338, 341, 343, 344, 345, 346, 384, 388, 389, 393, 403], "partial": [16, 17, 18, 20, 21, 22, 23, 25, 26, 159, 160, 162, 163, 164, 165, 166, 167, 184, 186, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391], "particip": [152, 393], "particular": [153, 155], "particularli": [14, 23, 81, 89, 114, 115, 116, 117, 118, 119, 154, 155, 156, 157, 166, 176, 186, 212, 213, 214, 215, 216, 217, 238, 260, 263, 266, 272, 273, 274, 275, 304, 312, 315, 342, 392], "partit": 384, "pass": [2, 14, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 151, 152, 153, 154, 155, 156, 157, 210, 212, 213, 214, 218, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 297, 316, 325, 342, 359, 367, 370, 371, 372, 375, 377, 381, 383, 385, 388, 389, 391, 393, 403], "past": [300, 301, 303, 308], "patch": [174, 281], "path": [3, 5, 6, 7, 8, 29, 30, 67, 177, 251], "pathwai": 144, "pattern": [10, 12, 13, 144, 163, 218, 234, 245, 246, 247], "penal": [300, 308, 310], "penalti": [301, 302, 303, 304, 305, 306, 307], "penros": 23, "per": [1, 12, 82, 114, 115, 116, 117, 118, 119, 131, 132, 133, 169, 198, 242, 272, 273, 274, 275, 277, 293, 374], "perceptron": 67, "perform": [3, 10, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 59, 60, 61, 62, 67, 68, 70, 72, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 89, 90, 91, 92, 110, 126, 127, 128, 129, 130, 135, 142, 144, 148, 151, 152, 156, 160, 169, 170, 171, 172, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 295, 298, 312, 314, 322, 324, 326, 327, 330, 333, 336, 356, 358, 360, 367, 371, 374, 384, 392, 394, 396, 401, 403], "permut": [12, 371], "persist": [150, 317, 319, 320, 321, 323, 339, 340], "perturb": [18, 25, 26, 403], "phi": [160, 230], "pi": [160, 230, 353, 363, 368], "pico": [41, 144], "piecewis": [231, 232], "pil": [393, 403], "pinv": 19, "pioneer": 144, "pipelin": [5, 6, 7, 8, 324, 392, 393, 395], "pixel": [5, 6, 7, 8, 210, 295, 395, 397], "place": [221, 223, 224, 225, 226, 227, 228], "placehold": [151, 259], "plai": [316, 324], "plot": 379, "point": [4, 211, 312], "pointwis": [215, 216, 217], "pool": [10, 27, 76, 77, 78, 79, 93, 102, 113, 120, 130, 135, 142, 144, 198, 199, 200, 201, 202, 203, 205, 206, 207, 218, 219, 246, 247, 277, 278, 279, 280, 281, 282, 283, 284, 285, 358, 360], "pool1": 157, "pool2": 157, "poorli": 20, "popul": 151, "popular": [4, 144], "portion": [388, 389, 403], "pose": 23, "posit": [1, 16, 21, 146, 151, 157, 169, 211, 229, 233, 234, 236, 243, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 309, 313, 335, 382, 387, 396], "possibl": [14, 403], "potenti": [23, 259, 308, 385], "power": [10, 14, 21, 40, 81, 86, 87, 93, 144, 218, 313, 314, 347, 392, 393, 403], "pp": 144, "practic": [23, 70, 263, 266], "practition": 403, "pre": [59, 60, 61, 62, 103, 107, 108], "preactbottleneck": [103, 107, 108], "preced": [144, 152, 295, 325], "preconfigur": [51, 52, 53, 54, 55, 56, 57, 58, 73, 74], "predecessor": 30, "predefin": [4, 144, 154, 236, 287], "predict": [140, 262, 263, 265, 266], "prefix": [151, 315], "prepar": [3, 313, 380, 382, 387, 393, 403], "prepend": [151, 374], "preprint": 144, "preprocess": [3, 4, 174, 211, 324, 392, 393, 403], "present": [262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 281], "preserv": [13, 144, 175, 177, 211, 249, 251, 337, 338, 341, 343, 344, 345, 346, 359, 367, 372], "preset": 4, "prevent": [1, 10, 153, 154, 155, 156, 157, 169, 178, 181, 235, 243, 250, 252, 253, 254, 255, 262, 263, 292, 293, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 314], "previou": [144, 300, 309, 314], "previous": 303, "primari": [14, 316], "primarili": 157, "principl": 144, "print": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 312, 313, 314, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401], "priorit": [86, 87, 91, 219, 231], "prob": 317, "probabilist": 324, "probabl": [49, 65, 146, 160, 166, 169, 175, 176, 177, 178, 179, 180, 181, 187, 230, 238, 242, 243, 249, 250, 251, 252, 253, 254, 255, 262, 263, 266, 289, 291, 293, 317, 397, 398, 400, 403], "problem": [23, 24, 26, 144, 162, 229, 233, 307], "proceed": 144, "process": [2, 3, 4, 21, 24, 26, 27, 29, 73, 100, 101, 102, 130, 141, 142, 144, 156, 170, 171, 172, 196, 211, 212, 213, 214, 218, 219, 236, 240, 245, 247, 258, 268, 269, 270, 272, 273, 274, 275, 280, 282, 283, 285, 289, 290, 292, 300, 316, 379, 393, 394, 395, 396, 401, 403], "produc": [27, 142, 145, 198, 199, 200, 218, 245, 246, 247, 277, 278, 279, 322, 324], "product": [14, 24, 26, 169, 232, 237, 239, 242, 243, 258, 275, 297, 328, 329, 333, 334], "program": [312, 324], "progress": [50, 302], "project": [24, 26, 146, 242], "projector": 23, "promin": [280, 282, 283, 284, 285], "promot": [157, 263, 266, 297], "propag": [17, 18, 20, 23, 24, 25, 26, 144, 151, 157, 184, 186, 210, 218, 281, 282, 308, 309, 317, 328, 329, 330, 334, 358, 360, 379, 380, 383, 390], "proper": 208, "properli": [0, 156, 166, 238, 297], "properti": [15, 17, 20, 21, 160, 164, 175, 230, 236, 249, 302, 307], "proport": [5, 6, 7, 8, 372], "proportion": 401, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 28, 31, 40, 42, 63, 64, 65, 72, 76, 83, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 135, 140, 141, 143, 144, 146, 151, 153, 154, 155, 156, 160, 169, 186, 199, 200, 208, 211, 243, 262, 263, 264, 266, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 295, 297, 298, 299, 300, 301, 308, 310, 312, 314, 316, 322, 324, 325, 330, 337, 344, 358, 360, 371, 373, 382, 385, 387, 403], "pseudo": [20, 23], "purpos": [31, 36, 40, 319, 323, 337, 343, 345], "python": 316, "pytorch": 373, "q": [24, 144, 169, 242, 243, 293], "q_i": 242, "qk": [291, 293], "qr": 19, "quad": [23, 208, 242, 262, 263, 264, 265, 266, 283, 284, 285, 290, 292, 326, 327, 331, 332, 333, 336, 388, 389, 394], "quadrat": 264, "queri": [169, 242, 243, 293], "quoc": 144, "quotient": 327, "r": [13, 24, 144, 242, 384, 397, 398, 399, 400], "r_t": 307, "radam": 311, "radix": [93, 94, 95, 96, 97, 98, 99, 100, 101], "rais": [0, 1, 2, 151, 297, 298, 335, 374], "rand": [318, 324], "randint": [318, 324], "randn": [12, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 140, 142, 169, 215, 216, 217, 218, 219, 242, 243, 289, 290, 291, 292, 293, 297, 318, 322, 324], "random": [1, 2, 3, 12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 140, 169, 215, 216, 217, 218, 219, 242, 251, 287, 289, 290, 291, 292, 293, 396, 397, 398, 399, 400, 403], "random_integ": 324, "random_tensor": 324, "randomcrop": [402, 403], "randomgrayscal": [402, 403], "randomhorizontalflip": [402, 403], "randomli": [1, 175, 177, 178, 179, 180, 181, 211, 249, 252, 253, 254, 255, 396, 397, 398, 399, 400, 403], "randomnoisedataset": [0, 1, 2], "randomrot": [402, 403], "randomverticalflip": 402, "rang": [0, 1, 15, 33, 42, 92, 102, 110, 144, 156, 165, 167, 170, 171, 177, 188, 192, 228, 235, 237, 240, 251, 300, 308, 310, 317, 320, 342, 349, 350, 352, 395, 399, 403], "rank": 23, "rasul": 7, "rate": [29, 30, 49, 50, 67, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "rather": [7, 12, 155, 156, 304, 383], "ratio": [49, 67, 120, 218, 219, 401], "ravel": 378, "raw": [166, 238, 263, 316], "re": [152, 314], "readabl": [10, 153, 154, 155, 157, 297, 316], "readi": [3, 14, 126, 127, 128, 129, 134, 144, 146], "real": [23, 26, 81, 237], "rearrang": [11, 174], "reassembl": 144, "recalibr": [121, 123, 124, 126, 127, 128, 129, 144, 218], "receiv": [283, 284, 285, 380, 388, 389], "recent": 308, "recept": [130, 134, 144, 219], "reciproc": [23, 347, 357, 365], "recognit": [79, 100, 101, 144, 246], "rectangular": 341, "rectif": 307, "rectifi": [162, 163, 233, 234, 307], "recurr": [144, 154, 275], "recurs": [145, 151], "red": 397, "reduc": [11, 27, 80, 102, 113, 130, 135, 142, 144, 215, 216, 217, 218, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 306, 309, 314, 316, 358, 359, 360, 367, 372, 397], "reduct": [10, 13, 26, 49, 120, 187, 188, 189, 191, 192, 218, 219, 262, 263, 264, 265, 266, 358, 360], "reevalu": 298, "refer": [4, 14, 151, 324, 338, 341, 375], "refin": 144, "reflect": 312, "regardless": [23, 381], "region": [172, 176, 198, 199, 200, 210, 231, 250, 278, 279, 380, 394, 403], "regist": [89, 111, 112, 114, 115, 116, 117, 118, 119, 141, 150, 151, 152, 156, 297, 315], "register_buff": 150, "register_model": [28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 131, 132, 133, 136, 137, 138, 139, 141, 143, 147, 148], "register_paramet": 151, "registr": [151, 297], "registri": [114, 115, 116, 117, 118, 119, 315], "registry_path": 315, "regress": [4, 191, 264, 265], "regul": [208, 287], "regular": [23, 27, 29, 49, 50, 65, 142, 177, 181, 243, 250, 252, 253, 254, 255, 300, 301, 302, 305, 306, 307, 308, 310], "reimagin": 144, "relat": [314, 341, 343], "relationship": 401, "relev": [210, 300, 308, 310], "reli": [176, 314], "reliabl": [5, 6, 7, 8], "reliant": [252, 253, 254, 255], "relu": [14, 27, 120, 135, 142, 144, 145, 153, 154, 155, 157, 159, 161, 162, 183, 212, 213, 214, 218, 219, 223, 224, 227, 228, 229, 233, 235, 239, 241, 245, 246, 247, 257, 258, 259, 260, 289, 291, 293], "relu1": 157, "relu2": 157, "relu3": 157, "relu6": [241, 257], "remain": [5, 6, 7, 8, 42, 150, 177, 197, 249, 251, 252, 253, 254, 255, 287, 309], "rememb": 324, "remov": [315, 385], "reorder": [10, 12], "rep": 387, "repeat": [378, 379, 387], "repetit": [382, 387], "replac": [7, 144, 289, 324, 397], "replic": [290, 292, 374], "repres": [7, 12, 13, 20, 22, 26, 76, 83, 94, 95, 96, 97, 98, 99, 151, 152, 157, 184, 186, 193, 196, 197, 208, 245, 246, 247, 258, 260, 263, 266, 275, 287, 290, 298, 299, 300, 306, 307, 308, 309, 310, 316, 317, 326, 327, 333, 336, 338, 359, 370, 371, 372, 379, 394, 396, 398, 399, 400, 401], "represent": [93, 100, 101, 111, 112, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 134, 144, 146, 208, 218, 281, 284, 287, 298], "reproduc": [317, 319, 320, 321, 322, 323, 324, 403], "requir": [2, 3, 4, 13, 14, 32, 38, 39, 71, 82, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 114, 115, 116, 117, 118, 119, 130, 148, 150, 153, 157, 159, 160, 162, 163, 164, 165, 167, 184, 186, 210, 218, 219, 228, 259, 263, 266, 297, 312, 314, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 393, 394, 401], "requires_grad": [150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 174, 184, 186, 208, 210, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 295, 297, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393], "rescal": [187, 188, 192, 262, 263, 266], "research": 297, "reset": [152, 322, 325], "reshap": [10, 12, 14, 120, 186, 246, 247, 295, 313, 316, 378, 381], "residu": [66, 72, 73, 74, 81, 82, 85, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 124, 125, 144, 291, 293], "residualblock": 102, "resili": 309, "resiz": [210, 392, 402, 403], "resnest": [75, 94, 95, 96, 97, 98, 99, 100, 101, 144], "resnest_101": 144, "resnest_14": 144, "resnest_200": 144, "resnest_26": 144, "resnest_269": 144, "resnest_50": 144, "resnest_50_1s4x24d": 144, "resnest_50_4s2x40d": 144, "resnet": [72, 73, 74, 75, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 130, 131, 132, 133, 144, 218], "resnet_1001": 144, "resnet_101": 144, "resnet_152": 144, "resnet_18": 144, "resnet_200": 144, "resnet_269": 144, "resnet_34": 144, "resnet_50": 144, "resnet_arg": 130, "resnext": [75, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 134, 144], "resnext_101_32x16d": 144, "resnext_101_32x32d": 144, "resnext_101_32x4d": 144, "resnext_101_32x8d": 144, "resnext_101_64x4d": 144, "resnext_50_32x4d": 144, "resolut": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 126, 127, 128, 129, 134, 144], "resolv": [12, 13], "resourc": [34, 35, 37, 38, 41, 42, 68, 82, 86, 87, 88, 89, 90, 91, 92, 144, 314], "respect": [12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 76, 135, 150, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 184, 186, 210, 219, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 352, 356, 357, 358, 359, 360, 363, 365, 367, 370, 371, 372, 379, 380, 382, 387, 397], "respons": [126, 127, 128, 129, 144, 153, 194, 271, 299], "rest": [388, 389], "restor": [218, 314], "restructur": 383, "result": [12, 16, 20, 21, 23, 144, 151, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 184, 186, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 219, 231, 235, 238, 242, 251, 297, 298, 312, 314, 317, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 373, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 393, 396, 397, 403], "resum": 299, "retain": [152, 176, 250, 325, 337, 345, 358, 359, 360, 367, 372, 388, 389, 393], "retent": 393, "rethink": 144, "retriev": [0, 2, 153, 155, 156, 208], "return": [0, 1, 2, 3, 5, 6, 7, 8, 14, 72, 76, 90, 92, 120, 150, 151, 153, 154, 155, 156, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 251, 252, 253, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 290, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 392, 403], "reus": [144, 393], "reusabl": [157, 251, 297, 392], "revers": [14, 157, 371, 398, 400], "revert": 314, "revolution": 144, "rgb": [5, 6, 64, 65, 66, 73, 74], "rho": 301, "rho_": 307, "rho_t": 307, "right": [21, 22, 23, 25, 26, 160, 166, 230, 238, 242, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 283, 284, 285, 291, 293, 394], "rightarrow": [12, 242, 384], "risk": 316, "rmsprop": 311, "rob": 144, "robust": [31, 36, 69, 90, 176, 211, 249, 252, 253, 254, 255, 264, 297, 301, 396, 397, 399, 403], "roland": 7, "role": [316, 324, 403], "root": [4, 5, 6, 7, 8, 302, 308, 365], "rotat": [183, 209, 399, 403], "rotated_imag": 211, "rout": [283, 284, 285], "routin": 14, "row": [17, 18, 20, 25, 186, 208, 341, 379, 388, 389, 391], "rprop": 311, "rule": [20, 21, 313, 326, 327, 331, 332, 333, 335, 336], "run": [14, 150, 193, 196, 212, 213, 214, 268, 269, 270, 272, 273, 274, 301, 314, 322, 324], "running_mean": [150, 193, 196, 268, 269, 270, 272, 273, 274], "running_var": [193, 196, 268, 269, 270, 272, 273, 274], "runtim": [50, 154, 157, 251, 297, 342], "s_": 309, "s_1": 384, "s_2": 384, "s_d": [282, 285], "s_h": [281, 282, 285], "s_i": 384, "s_n": 384, "s_w": [281, 282, 285], "sain": 144, "same": [17, 18, 20, 21, 25, 166, 175, 176, 177, 178, 179, 180, 181, 193, 194, 196, 197, 199, 200, 211, 212, 213, 214, 215, 216, 217, 219, 235, 245, 246, 247, 249, 252, 253, 254, 255, 259, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 309, 317, 322, 324, 330, 340, 344, 346, 356, 358, 359, 360, 375, 377, 381, 383, 385, 386, 388, 389, 391, 395], "sampl": [0, 1, 2, 3, 5, 6, 7, 8, 14, 59, 60, 61, 62, 64, 65, 66, 73, 74, 76, 77, 78, 79, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 126, 127, 128, 129, 134, 198, 199, 200, 223, 224, 225, 226, 227, 228, 249, 252, 253, 254, 255, 258, 260, 263, 266, 275, 277, 278, 279, 317, 321, 324, 342, 394, 396, 398, 399, 400, 401], "sandler": 144, "satisfi": [16, 18, 25, 384], "satur": [229, 403], "save": [2, 150, 152, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315], "scalabl": [3, 36, 49, 114, 115, 116, 117, 118, 119, 140, 144, 297], "scalar": [17, 22, 187, 188, 189, 191, 192, 316, 317], "scale": [13, 18, 23, 29, 35, 37, 38, 39, 41, 43, 44, 49, 50, 67, 73, 77, 78, 79, 80, 84, 88, 89, 91, 92, 93, 100, 101, 103, 104, 105, 108, 121, 122, 130, 131, 132, 133, 144, 159, 164, 166, 169, 177, 193, 194, 196, 197, 208, 218, 219, 227, 228, 229, 231, 233, 236, 237, 238, 240, 242, 243, 249, 251, 252, 253, 254, 255, 263, 268, 269, 270, 271, 272, 273, 274, 275, 287, 295, 300, 302, 303, 304, 316, 324, 372, 401], "scale_by_keep": [177, 251], "scale_factor": 295, "scaled_dot_product_attent": [168, 183], "scaleddotproductattent": [244, 257], "scenario": [34, 39, 41, 89, 90, 91, 92, 155, 156, 275, 304, 305, 393, 397], "schedul": [250, 300], "scientif": 313, "score": [102, 113, 130, 166, 169, 243, 263], "scratch": 14, "script": 324, "se": [49, 121, 122, 123, 124, 125, 126, 127, 128, 129, 144], "se_resnet_101": 144, "se_resnet_152": 144, "se_resnet_18": 144, "se_resnet_34": 144, "se_resnet_50": 144, "se_resnext_101_32x4d": 144, "se_resnext_101_32x8d": 144, "se_resnext_101_64x4d": 144, "se_resnext_50_32x4d": 144, "se_scal": 49, "seamless": [0, 1, 3, 4, 13, 297, 324], "seamlessli": [3, 4, 10, 12, 15, 152, 154, 157, 297, 316, 403], "search": 144, "second": [18, 154, 155, 184, 218, 258, 303, 304, 305, 306, 307, 313, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 377, 379, 400], "section": 330, "see": [14, 330], "seed": [317, 318, 319, 320, 321, 323, 324, 403], "seek": 92, "seen": 301, "select": [13, 130, 131, 132, 133, 134, 144, 210, 218, 219, 283, 285, 367], "selectivekernel": 220, "self": [0, 1, 2, 3, 14, 27, 49, 50, 63, 67, 72, 76, 80, 81, 82, 83, 93, 120, 135, 142, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 164, 177, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 392, 393], "selfattent": 293, "selu": [161, 175, 183, 241, 249, 257], "selunetwork": 236, "semodul": 220, "senet": [75, 121, 122, 123, 124, 125, 126, 127, 128, 129, 144], "sensit": [189, 264, 268, 269, 270], "sentiment": 4, "separ": [0, 80, 100, 101, 140, 144, 170, 171, 172, 215, 216, 217, 272, 273, 274], "seq_len": [169, 242, 243, 289, 290, 291, 292, 293], "sequenc": [21, 102, 113, 130, 146, 153, 155, 169, 170, 242, 287, 289, 290, 292, 293, 337, 342, 375, 377, 380, 382, 386, 387, 391, 392], "sequenti": [27, 72, 76, 120, 135, 140, 142, 144, 145, 153, 154, 158, 170, 212, 213, 214, 259, 290, 292, 392, 403], "seri": [63, 77, 78, 130, 170, 212, 245, 280, 283], "serial": [150, 151, 299], "serv": [3, 7, 44, 72, 120, 135, 146, 151, 153, 154, 155, 156, 157, 297, 309, 393], "set": [3, 4, 5, 6, 7, 8, 88, 89, 90, 100, 101, 111, 112, 126, 127, 128, 129, 134, 145, 152, 156, 169, 170, 171, 172, 208, 233, 234, 236, 243, 245, 246, 247, 249, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 287, 298, 303, 304, 308, 317, 319, 320, 321, 322, 323, 324, 325, 337, 339, 340, 345, 346, 352, 358, 360, 373, 388, 389, 393, 397, 403], "setup": [4, 14, 114, 115, 116, 117, 118, 119], "sever": [23, 245, 246, 247, 280, 281, 282, 283, 284, 285, 314, 392, 403], "sgd": [14, 300, 307, 311], "sgn": 22, "shape": [3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 17, 18, 20, 21, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 76, 82, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 131, 132, 133, 134, 135, 140, 142, 144, 145, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 297, 313, 316, 317, 319, 320, 321, 323, 324, 325, 328, 339, 340, 341, 343, 344, 345, 346, 352, 357, 358, 359, 360, 363, 365, 367, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 403], "shapelik": 320, "share": 144, "shen": 218, "shift": [193, 194, 196, 197, 231, 268, 269, 270, 271, 272, 273, 274, 275], "shorthand": 330, "should": [12, 13, 76, 150, 289, 290, 291, 292, 293, 314, 317, 319, 320, 321, 323, 339, 340, 349, 350, 370, 374, 380, 392], "show": [312, 315], "showcas": 14, "shown": [239, 322], "shrink": 301, "shuffl": [1, 2, 3], "side": [25, 154, 157, 170, 171, 172, 201, 202, 203, 205, 206, 207, 212, 213, 214, 245, 246, 247, 280, 281, 282, 283, 284, 285, 314], "sigma": [23, 218, 223, 225, 227, 237, 239, 268, 269, 270, 272, 273, 274, 275, 371], "sigma_c": 395, "sigma_i": 23, "sigmoid": [161, 183, 218, 223, 224, 227, 228, 231, 232, 239, 241, 257, 262], "sigmoidnetwork": 237, "sign": [21, 264, 309, 347], "signal": [212, 245, 246, 247, 268, 272, 280, 281, 282, 283, 284, 285], "signific": [32, 314], "significantli": [81, 113, 144, 218, 392], "sim": [249, 252, 253, 254, 255], "similar": [10, 14, 223, 224, 330, 357, 373, 374, 380], "similarli": [26, 370], "simonyan": 144, "simpl": [3, 4, 14, 145, 157, 170, 171, 172, 184, 186, 201, 202, 203, 205, 206, 207, 230, 231, 232, 234, 235, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 328, 329, 334, 392], "simplebinaryclassificationmodel": 262, "simpleblock": 177, "simpleclassificationmodel": [263, 266], "simplegelumodel": 230, "simplehardsigmoidmodel": 231, "simplehardswishmodel": 232, "simpleleakyrelumodel": 233, "simplemodel": [14, 145, 235, 251, 260, 315], "simpleregressionmodel": 265, "simplerelumodel": 234, "simpleselumodel": 236, "simplesigmoidmodel": 237, "simpleswishmodel": 239, "simpletanhmodel": 240, "simpli": [312, 370, 371, 383], "simplic": [144, 231, 234], "simplifi": [4, 12, 59, 60, 61, 62, 77, 141, 144, 157, 212, 213, 214], "simul": [145, 403], "simultan": 211, "sin": [347, 353], "sinc": [21, 24, 153, 154, 155, 156, 170, 171, 172, 228, 312, 314, 317, 321, 379, 403], "sine": [350, 363, 364], "singl": [0, 4, 21, 24, 26, 102, 166, 212, 213, 214, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 263, 275, 281, 282, 283, 284, 285, 290, 291, 292, 293, 298, 316, 323, 339, 342, 375, 385, 395, 397, 403], "singleton": 275, "singular": [17, 20, 21, 23, 25, 26], "sinh": [347, 354, 369], "size": [0, 1, 2, 3, 12, 13, 26, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 67, 70, 76, 77, 78, 79, 83, 84, 86, 87, 102, 130, 142, 144, 145, 146, 147, 148, 152, 154, 169, 170, 171, 172, 174, 176, 179, 180, 181, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 242, 245, 246, 247, 250, 258, 260, 262, 263, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 292, 293, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 320, 323, 324, 325, 358, 359, 360, 367, 372, 374, 375, 377, 384, 385, 390, 391, 394, 396, 401, 403], "size_or_sect": 384, "sk": [130, 131, 132, 133, 134, 144, 219], "sk_resnet_18": 144, "sk_resnet_34": 144, "sk_resnet_50": 144, "sk_resnext_50_32x4d": 144, "skblock": 130, "skip": [144, 314], "sknet": [75, 131, 132, 133, 134, 144], "slice": [184, 370], "slide": [174, 280, 282, 283, 285], "slight": 218, "slightli": 403, "slope": [162, 229, 233], "slow": [3, 307], "small": [23, 33, 35, 37, 40, 59, 60, 61, 62, 69, 70, 77, 78, 79, 82, 86, 87, 90, 144, 162, 176, 187, 188, 193, 194, 196, 197, 233, 236, 250, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 281, 284, 289, 291, 293, 301, 302, 303, 304, 305, 306, 307, 308, 309], "smaller": [10, 34, 59, 60, 61, 62, 88, 142, 144, 154, 157, 297, 302, 303, 332, 394, 396, 401], "smallest": 360, "smooth": [65, 160, 229, 230, 239, 300, 308, 403], "smoother": 300, "so": [153, 154, 155, 156, 211, 297, 307, 339, 340, 392], "softmax": [161, 169, 183, 219, 241, 242, 243, 257, 263, 291, 293], "softmaxmodel": 238, "solut": [23, 25], "solv": [15, 16, 19, 23, 24, 26], "solver": 15, "some": [159, 177, 178, 211, 249, 251, 252, 253, 268, 269, 270, 272, 273, 274, 302, 303, 304, 314, 316], "sometim": 313, "sophist": [154, 157], "sourc": [146, 147, 148, 169, 289, 324], "space": [18, 24, 26, 146, 170, 171, 172, 174, 198, 199, 200, 212, 213, 214, 215, 216, 217, 245, 246, 247, 277, 278, 279, 337, 342, 403], "span": 4, "spars": [302, 303], "spatial": [27, 102, 113, 130, 135, 142, 144, 176, 194, 213, 218, 246, 247, 268, 269, 270, 272, 273, 274, 275, 281, 282, 283, 284, 285, 295, 379], "spatial_dim": 218, "spatio": 247, "special": [0, 1, 14, 23, 150, 151, 152, 249, 324], "specif": [4, 14, 45, 46, 47, 48, 59, 60, 61, 62, 72, 80, 88, 89, 90, 91, 92, 100, 101, 111, 112, 153, 154, 155, 156, 157, 219, 228, 249, 252, 253, 254, 255, 272, 273, 274, 287, 297, 298, 312, 324, 339, 358, 360, 382, 387], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 22, 28, 44, 50, 76, 83, 84, 85, 88, 89, 90, 91, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 132, 133, 135, 136, 137, 138, 139, 141, 143, 145, 154, 166, 174, 181, 187, 188, 189, 191, 192, 197, 198, 199, 200, 208, 210, 211, 218, 238, 242, 245, 246, 247, 262, 263, 264, 265, 266, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 295, 298, 316, 319, 320, 321, 322, 323, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 352, 358, 359, 360, 367, 371, 372, 373, 374, 375, 377, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 401, 403], "speech": 272, "speed": [86, 87, 231, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "split": [4, 93, 100, 101, 144, 242, 375, 377, 378, 391], "split_tensor": 384, "springer": 144, "sqrt": [160, 169, 194, 223, 224, 227, 228, 230, 242, 243, 268, 269, 270, 271, 272, 273, 274, 275, 291, 293, 301, 302, 303, 304, 306, 307, 308, 347, 349, 350], "squar": [1, 3, 16, 17, 18, 20, 21, 23, 24, 25, 26, 176, 189, 191, 250, 264, 265, 301, 302, 303, 308, 347, 365], "squaredataset": [0, 1, 2, 3], "squeez": [49, 82, 86, 87, 120, 123, 126, 127, 128, 129, 144, 218, 378], "src": [144, 289, 292, 293], "src_key_pad": 292, "src_key_padding_mask": [289, 293], "src_mask": [289, 292, 293], "src_vocab_s": [146, 147, 148], "stabil": [20, 23, 144, 176, 187, 188, 193, 194, 196, 197, 208, 212, 213, 214, 235, 250, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 287, 289, 291, 293, 300, 301, 302, 303, 304, 305, 306, 307, 308, 395], "stabl": [223, 224, 227, 228, 249, 263, 300, 304, 305, 308, 309, 310], "stack": [157, 219, 289, 290, 292, 377, 378, 391, 403], "stage": [29, 30, 67, 93, 94, 95, 96, 97, 98, 99, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 131, 132, 133, 144], "stage1": 120, "stage2": 120, "stage3": 120, "stage4": 120, "standalon": 235, "standard": [31, 36, 69, 88, 91, 102, 111, 112, 146, 147, 160, 162, 215, 216, 217, 223, 225, 227, 229, 230, 233, 249, 289, 309, 321, 324, 330, 392, 395, 403], "start": [1, 3, 10, 300, 302, 309, 337, 342, 394, 396], "state": [38, 144, 150, 151, 152, 154, 157, 298, 312, 314, 322], "state_dict": [151, 152, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "static": 157, "statist": [23, 175, 193, 196], "std": [5, 6, 7, 8, 225, 392, 395, 403], "stem": [72, 93, 102, 113, 130, 144], "stem_typ": 102, "stem_width": [93, 94, 95, 96, 97, 98, 99, 102], "step": [10, 152, 174, 219, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 337, 392, 393], "step_siz": 309, "still": [41, 301], "stochast": [14, 29, 30, 49, 50, 67, 177, 251, 300, 310], "stochastic_depth": 49, "stop": [337, 342], "storag": [153, 155, 325], "store": [2, 4, 5, 6, 7, 8, 102, 113, 130, 150, 151, 152, 153, 154, 155, 156, 218, 277, 278, 279, 314, 325, 394, 395, 396, 397, 398, 399, 400, 401], "str": [5, 6, 7, 8, 10, 12, 13, 83, 102, 135, 151, 153, 155, 157, 187, 188, 189, 191, 192, 210, 295, 298, 315, 379], "straightforward": [310, 312, 326], "strategi": [91, 299], "streamlin": [2, 3, 144], "strength": 250, "strict": [151, 298], "stride": [50, 76, 77, 78, 79, 82, 83, 86, 87, 154, 157, 170, 171, 172, 174, 198, 199, 200, 201, 202, 203, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 277, 278, 279, 280, 281, 282, 283, 284, 285], "stride_height": 174, "stride_width": 174, "strike": [36, 83, 90], "string": [10, 12, 13, 151, 153, 155, 157, 245, 246, 247, 298], "structur": [0, 10, 13, 14, 24, 50, 82, 140, 150, 151, 154, 176, 250, 297, 298, 315, 316, 341, 393], "style": [10, 72, 196, 272, 273, 379], "sub": [153, 154, 155, 156, 157, 297, 347, 384, 394, 396], "sub_tensor": 325, "subclass": [1, 2, 3, 14, 151, 152, 153, 297, 298], "sublay": [145, 289, 291, 293], "submodul": [145, 151, 297], "subsequ": [154, 157, 228, 324], "subset": [100, 101, 252, 253], "subspac": 242, "subtract": [14, 336, 395], "suffer": 302, "suit": [41, 45, 46, 47, 48, 65, 80, 88, 89, 91, 130, 223, 224, 227, 228], "suitabl": [31, 33, 34, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 72, 77, 78, 79, 81, 86, 87, 89, 92, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 125, 144, 147, 264, 302, 303, 319], "sum": [10, 13, 22, 153, 154, 155, 156, 157, 166, 169, 187, 188, 189, 191, 192, 219, 238, 262, 263, 264, 265, 266, 302, 326, 329, 334, 347, 370, 372, 374, 375, 377, 379, 382, 384, 387, 391], "sum_": [12, 13, 21, 166, 194, 238, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 328, 329, 359, 367, 370, 372, 374, 379, 382], "sum_i": [22, 334], "sum_j": 334, "sum_k": 330, "summar": [49, 111, 112, 140, 280, 281, 282], "summari": [111, 112, 126, 127, 128, 129, 134], "summat": [10, 12, 13, 21], "sun": 218, "super": [14, 145, 150, 151, 152, 153, 154, 155, 156, 177, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 251, 252, 253, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315], "superior": 43, "supplementari": 91, "support": [1, 3, 4, 12, 14, 15, 21, 22, 23, 24, 26, 84, 102, 153, 154, 155, 156, 157, 169, 210, 211, 243, 287, 295, 297, 299, 306, 324, 325, 326, 327, 330, 331, 332, 333, 335, 336, 338, 341, 352, 357, 359, 363, 365, 367, 370, 371, 372, 375, 379, 383, 384, 393, 403], "suppos": 403, "sure": [297, 403], "svd": [19, 23], "swap": 12, "swish": [86, 87, 241, 257], "symbol": [12, 13], "symmetr": [16, 198, 199, 200, 227, 228, 240], "syntax": [1, 10, 12, 13, 330], "system": [15, 16, 23, 24, 25, 90, 144, 312, 379], "systemat": [144, 403], "szegedi": [64, 144], "t": [10, 23, 144, 289, 290, 291, 293, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 325, 330, 373, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "t0": 300, "t1": 373, "t2": 373, "t_": 290, "t_0": 290, "t_i": 290, "tabl": [49, 287], "tabular": 4, "tailor": [4, 82, 90, 94, 95, 96, 97, 98, 99, 297, 403], "take": [24, 280, 281, 282, 283, 284, 285, 295, 314, 392], "taken": 370, "tan": [144, 347], "tangent": [167, 240, 351, 368, 369], "tanh": [76, 154, 157, 160, 161, 183, 223, 224, 227, 228, 230, 241, 257, 347], "tanhnetwork": 240, "target": [5, 6, 7, 8, 41, 146, 147, 148, 157, 187, 188, 189, 191, 192, 198, 199, 200, 210, 262, 263, 264, 265, 266, 277, 278, 279, 289, 290, 291, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 374, 394, 396, 401], "target_tensor": [262, 263, 264, 265, 266], "target_transform": [5, 6, 7, 8], "task": [4, 14, 15, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 140, 144, 146, 147, 148, 165, 166, 171, 184, 187, 188, 191, 192, 218, 219, 237, 238, 245, 246, 247, 262, 263, 264, 265, 266, 272, 273, 274, 280, 282, 283, 285, 289, 303, 313, 324, 341, 342, 403], "techniqu": [16, 20, 29, 50, 67, 91, 142, 144, 177, 193, 249, 250, 252, 253, 254, 255, 272, 273, 274, 299, 401, 403], "templat": 146, "tempor": [245, 247, 282, 285], "temporarili": 314, "tensor": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 59, 60, 61, 62, 64, 65, 66, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 102, 114, 115, 116, 117, 118, 119, 120, 131, 132, 133, 135, 140, 142, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 312, 314, 316, 317, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "term": [12, 23, 42, 184, 212, 213, 214, 215, 216, 217, 242, 289, 291, 293, 300, 304, 306, 307, 308, 310], "test": [4, 5, 6, 7, 8, 342], "test_backward": 145, "test_siz": [5, 6, 7, 8], "text": [4, 17, 21, 22, 102, 113, 130, 131, 132, 133, 140, 153, 159, 162, 163, 164, 166, 169, 170, 171, 172, 177, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 320, 326, 327, 329, 331, 332, 333, 335, 336, 348, 352, 358, 359, 360, 362, 367, 372, 374, 375, 377, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400], "tgt": [144, 289, 290, 291], "tgt_is_caus": [290, 291], "tgt_key_padding_mask": [289, 290, 291], "tgt_mask": [289, 290, 291], "tgt_vocab_s": [146, 147, 148], "th": [184, 262, 263, 265, 266, 272, 273, 274, 331, 332, 335], "than": [0, 1, 7, 12, 155, 156, 159, 162, 189, 215, 216, 217, 229, 233, 239, 264, 298, 304, 342, 352, 370, 374, 380, 386, 394, 396, 401], "thei": [0, 14, 26, 144, 150, 154, 156, 157, 242, 316, 379, 383, 394, 396, 403], "them": [3, 10, 144, 151, 156, 174, 300, 313, 375, 386, 392, 395, 403], "therebi": [249, 281, 282, 284, 285], "theta": [300, 301, 399], "theta_": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "theta_t": [307, 308], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 64, 65, 66, 72, 73, 74, 76, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 144, 145, 146, 150, 152, 154, 155, 156, 157, 163, 165, 166, 167, 170, 171, 172, 174, 176, 177, 184, 186, 198, 208, 210, 211, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 277, 280, 281, 282, 283, 284, 285, 287, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 324, 325, 329, 330, 334, 337, 339, 343, 344, 345, 346, 352, 356, 357, 358, 359, 360, 363, 365, 367, 370, 371, 372, 373, 374, 380, 382, 383, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "thing": 314, "those": [14, 77, 78, 79, 156, 228], "three": [26, 79, 172, 200, 203, 207, 212, 213, 214, 247, 255, 270, 274, 279, 282, 285], "threshold": [23, 189, 264], "through": [0, 3, 4, 14, 18, 23, 24, 26, 27, 29, 63, 72, 76, 83, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 131, 132, 133, 141, 142, 144, 153, 154, 157, 176, 184, 186, 210, 218, 219, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 317, 321, 328, 329, 334, 379, 381, 383, 385, 388, 389, 390, 403], "throughout": [146, 164, 393], "tier": 38, "tile": 378, "time": [0, 3, 21, 77, 78, 79, 81, 170, 212, 233, 236, 242, 245, 280, 281, 282, 283, 284, 285, 290, 292, 300, 301, 302, 303, 304, 308, 310, 314, 382, 387], "tini": [33, 34, 42, 67, 71, 144], "to_tensor": [5, 6, 7, 8], "togeth": [157, 392, 403], "token": [67, 287], "token_mix": 67, "too": 309, "tool": [3, 14, 297, 313, 324, 392, 403], "top": [16, 17, 18, 24, 26, 38, 169, 184, 186, 210, 242, 243, 245, 246, 247, 258, 260, 394, 396], "torch": [135, 373], "toronto": [5, 6], "total": [0, 1, 2, 5, 6, 7, 8, 12, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 145, 147, 148, 152, 242, 325, 383], "totensor": [392, 403], "trace": [15, 347], "track": [14, 212, 213, 214, 268, 269, 270, 272, 273, 274, 297, 312, 314, 317, 319, 320, 321, 323, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 374, 393], "track_running_stat": [212, 213, 214, 268, 269, 270, 272, 273, 274], "trade": [33, 89], "tradit": [7, 10, 92, 144, 301, 302, 305, 306, 307], "trail": 197, "train": [1, 2, 3, 4, 5, 6, 7, 8, 14, 29, 50, 63, 64, 65, 126, 127, 128, 129, 134, 144, 145, 146, 150, 151, 154, 156, 157, 166, 175, 176, 177, 178, 179, 180, 181, 193, 196, 208, 211, 230, 233, 236, 237, 238, 240, 249, 250, 251, 252, 253, 254, 255, 268, 269, 270, 272, 273, 274, 287, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 392, 395, 396, 397, 398, 399, 400, 403], "trainabl": [145, 268, 269, 270, 272, 273, 274, 287, 297], "transact": 218, "transfer": [196, 272, 273], "transform": [2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 18, 29, 147, 148, 155, 169, 184, 186, 242, 243, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 290, 291, 292, 293, 313, 379], "transform_pipelin": [392, 403], "transformed_imag": [392, 403], "transformer_bas": 144, "transformer_big": 144, "transformer_decod": 290, "transformer_encod": 292, "transformerdecod": [257, 289, 294], "transformerdecoderlay": [257, 289, 290, 294], "transformerencod": [257, 289, 294], "transformerencoderlay": [257, 289, 292, 294], "transit": [44, 264], "translat": [146, 281, 284, 289], "transpos": [12, 14, 16, 347], "transposit": 12, "treat": [0, 150, 275, 297], "triangular": [16, 24, 290, 291, 292, 293, 388, 389], "tril": 378, "triu": 378, "true": [1, 2, 3, 4, 5, 6, 7, 8, 26, 63, 64, 65, 86, 87, 93, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 174, 175, 177, 178, 179, 180, 181, 184, 186, 193, 196, 208, 210, 212, 213, 214, 215, 216, 217, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 295, 297, 298, 303, 304, 308, 312, 317, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393], "truncat": 145, "truncate_from": 145, "try": 0, "tune": [89, 92, 403], "tupl": [2, 3, 5, 6, 7, 8, 18, 22, 24, 26, 44, 102, 145, 151, 152, 170, 171, 172, 174, 197, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 245, 246, 247, 259, 275, 278, 279, 280, 281, 282, 283, 284, 285, 295, 303, 304, 305, 306, 307, 309, 316, 319, 320, 321, 323, 325, 339, 343, 345, 358, 359, 360, 367, 372, 374, 375, 377, 379, 380, 383, 384, 385, 386, 390, 391, 394, 395, 396, 401], "twice": 380, "two": [14, 17, 18, 20, 21, 23, 24, 26, 77, 78, 79, 82, 100, 101, 131, 135, 170, 171, 172, 184, 202, 206, 218, 219, 246, 254, 258, 269, 273, 281, 284, 293, 303, 304, 305, 306, 307, 309, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 370, 379, 384], "type": [67, 76, 93, 102, 120, 130, 150, 151, 152, 184, 258, 289, 291, 293, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 379, 393], "typeerror": [0, 1, 2, 151, 298], "typic": [15, 83, 89, 102, 113, 130, 150, 166, 175, 176, 211, 218, 235, 236, 238, 250, 251, 266, 268, 269, 270, 272, 273, 274, 299, 300, 308, 310, 314, 316, 390, 393, 395, 399, 401, 403], "u": [23, 26, 224, 226, 228], "u_": 305, "ultra": [35, 108], "unchang": [150, 181, 229, 233, 234, 236, 249, 252, 253, 254, 255, 259, 381, 385], "undefin": 335, "under": [114, 115, 116, 117, 118, 119, 297], "underbrac": 21, "underdetermin": 23, "undergo": [177, 293, 403], "underli": [0, 14, 59, 60, 61, 62, 64, 65, 66, 73, 74, 373, 377, 381, 383, 391], "understand": [14, 142, 144, 145, 157, 403], "understood": 12, "unexpect": [10, 151, 154, 157, 324], "unfold": [173, 183], "unifi": 0, "uniform": [222, 224, 228, 245, 246, 247, 258, 260, 318, 319, 320, 324, 397, 398, 399, 400], "uniformli": [319, 323], "uniniti": [339, 340], "unintend": [10, 13, 314], "union": 135, "uniqu": [16, 23, 25, 153, 155, 287], "unit": [27, 76, 142, 159, 160, 162, 163, 164, 223, 224, 227, 228, 229, 230, 233, 234, 236, 249], "unless": [103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 325], "unlik": [150, 153, 154, 155, 156, 162, 229, 233, 249, 275, 301, 302, 304, 305, 306, 307, 309], "unnecessari": [10, 314], "unpad": 380, "unseen": 403, "unsqueez": 378, "unstabl": 20, "unsur": 10, "up": [298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 399, 401], "updat": [4, 30, 150, 156, 157, 249, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314], "upon": [30, 65, 82, 83, 144, 153, 154, 155, 156], "upper": [24, 226, 309, 323, 388, 389], "upper_triangular": 389, "upsampl": [257, 296], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 26, 29, 44, 49, 50, 63, 64, 65, 66, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 184, 186, 191, 193, 194, 196, 199, 200, 208, 210, 211, 212, 213, 214, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 295, 297, 298, 299, 312, 313, 314, 315, 317, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 356, 358, 359, 360, 367, 372, 379, 380, 382, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "usag": [3, 15, 31, 32, 33, 34, 42, 43, 44, 140, 154, 157, 177, 215, 216, 217, 243, 250, 298, 299, 342, 394, 395, 396, 397, 398, 399, 400, 401], "use_aux": [63, 64, 65], "use_h": [86, 87], "use_s": [86, 87], "user": [1, 2, 3, 4, 14, 92, 153, 154, 155, 156, 297, 302, 392, 393, 403], "usual": 263, "util": [3, 14, 15, 83, 131, 132, 133, 155, 156, 176, 297, 324], "v": [18, 23, 26, 144, 169, 242, 243, 291, 293, 303, 304, 306, 307, 338], "v1": [63, 64, 72, 73, 74, 80, 81, 144], "v2": [35, 36, 37, 38, 39, 40, 41, 42, 50, 59, 60, 61, 62, 72, 74, 75, 81, 82, 85, 144], "v3": [63, 65, 66, 75, 82, 86, 87, 144], "v4": [63, 66, 75, 83, 89, 90, 91, 92, 144], "v_": [300, 303, 304, 306, 307, 308, 310], "v_i": 242, "v_stack": 391, "v_t": [307, 308], "val": 221, "valid": [212, 213, 214, 215, 216, 217, 219, 245, 246, 247, 371], "valu": [10, 14, 17, 21, 22, 23, 26, 29, 67, 80, 83, 91, 111, 112, 145, 151, 153, 155, 157, 159, 162, 165, 166, 167, 169, 170, 171, 172, 174, 176, 177, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 210, 211, 212, 213, 214, 218, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 240, 242, 243, 249, 250, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 316, 317, 319, 320, 321, 322, 323, 324, 337, 338, 339, 340, 341, 342, 348, 349, 350, 352, 355, 356, 357, 358, 360, 362, 363, 365, 366, 375, 380, 381, 383, 390, 395, 397, 398, 400], "valuabl": 324, "valueerror": [1, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 298], "van": 144, "vanish": [144, 229, 236, 268, 269, 270], "var": 347, "vari": [29, 130, 154, 156, 198, 210, 277, 399], "variabl": [151, 157, 198, 199, 200, 259, 277, 278, 279, 297, 312, 314, 319, 339, 396, 399], "varianc": [164, 175, 193, 196, 212, 213, 214, 223, 224, 227, 228, 236, 249, 268, 269, 270, 272, 273, 274, 275, 303, 304, 305, 306, 307, 321, 372, 399, 403], "variant": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 68, 69, 70, 71, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 111, 112, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 148, 303, 304, 305], "variat": [215, 216, 217, 272, 273, 274, 396, 403], "varieti": [4, 72, 93, 324, 403], "variou": [7, 10, 12, 13, 44, 63, 73, 74, 76, 83, 84, 92, 144, 234, 299, 324, 342, 358, 360, 380, 393], "vasudevan": 144, "vaswani": [144, 289], "vdim": 242, "vdot": 334, "vector": [18, 23, 24, 25, 26, 184, 186, 208, 242, 258, 260, 287, 328, 329, 330, 334], "veloc": [300, 308, 310], "verbos": 12, "veri": [23, 37, 105, 107, 144, 301], "verifi": 10, "versa": 309, "versatil": [92, 324, 379], "version": [26, 29, 63, 67, 72, 76, 77, 78, 89, 308, 334, 397], "vertic": [386, 391, 400], "vgg": 135, "vggnet": [75, 136, 137, 138, 139, 144], "vggnet_11": 144, "vggnet_13": 144, "vggnet_16": 144, "vggnet_19": 144, "via": [3, 4, 92, 130], "vice": 309, "video": [172, 181, 214, 247, 274, 282, 285], "view": [72, 76, 154, 281, 282, 283, 284, 285, 374, 383], "vinod": [5, 6], "vision": [80, 81, 85, 93, 102, 144, 171, 246, 258, 403], "visual": [142, 144], "vocabulari": [146, 147, 148, 287], "vol": 144, "vollgraf": 7, "volumetr": [172, 181, 214, 247, 274, 282, 285], "vstack": 378, "w": [10, 12, 13, 102, 114, 115, 116, 117, 118, 119, 131, 132, 133, 144, 171, 172, 174, 176, 180, 181, 184, 186, 194, 199, 200, 202, 203, 206, 207, 210, 211, 213, 214, 218, 242, 245, 246, 247, 258, 260, 269, 270, 271, 273, 274, 278, 279, 282, 285, 394, 396], "w_": [171, 172, 199, 200, 202, 203, 206, 207, 210, 246, 247, 278, 279, 281, 282, 284, 285], "w_1": [291, 293], "w_2": [291, 293], "w_out": [171, 172, 202, 203, 206, 207], "wa": [64, 249, 252, 253, 254, 255, 314], "wai": [1, 10, 12, 28, 143, 312, 314, 383], "wang": 144, "want": [0, 14, 392, 394], "warn": [153, 155, 242], "we": [3, 14, 313, 379], "wei": 144, "weight": [100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 144, 169, 170, 171, 172, 184, 186, 187, 188, 192, 193, 196, 197, 208, 210, 218, 219, 223, 224, 227, 228, 242, 243, 245, 246, 247, 249, 250, 252, 253, 254, 255, 258, 260, 262, 263, 266, 268, 269, 270, 272, 273, 274, 275, 287, 289, 290, 291, 292, 293, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 319, 324], "weight1": 155, "weight2": 155, "weight_decai": [300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "weihao": 144, "weinberg": 144, "well": [41, 45, 46, 47, 48, 50, 65, 89, 130, 223, 224], "were": 157, "weyand": 144, "what": [12, 314], "when": [0, 1, 3, 10, 13, 14, 21, 49, 144, 151, 154, 156, 157, 159, 162, 170, 171, 172, 208, 229, 251, 259, 268, 269, 270, 272, 273, 274, 295, 298, 301, 309, 312, 314, 315, 316, 324, 335, 374, 392, 394], "where": [3, 4, 5, 6, 7, 8, 12, 13, 17, 18, 20, 21, 22, 23, 24, 26, 86, 87, 88, 89, 90, 91, 140, 144, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 177, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 316, 324, 326, 327, 331, 332, 333, 335, 336, 339, 340, 352, 356, 357, 358, 359, 360, 363, 365, 367, 370, 371, 372, 375, 380, 382, 384, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400], "whether": [1, 17, 49, 63, 64, 65, 86, 87, 93, 151, 152, 223, 224, 251, 308, 312, 317, 319, 320, 321, 323, 325, 339, 340, 358, 359, 360, 367, 372], "which": [0, 7, 13, 14, 17, 18, 20, 21, 22, 23, 24, 26, 50, 66, 74, 80, 81, 83, 84, 88, 94, 95, 96, 97, 98, 99, 100, 101, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 144, 146, 151, 153, 155, 157, 162, 166, 189, 211, 215, 216, 217, 219, 229, 230, 233, 235, 238, 240, 249, 264, 266, 268, 269, 270, 272, 273, 274, 275, 287, 291, 293, 303, 304, 306, 308, 312, 314, 316, 319, 320, 323, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 372, 374, 375, 382, 383, 384, 386, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403], "while": [14, 30, 35, 41, 42, 59, 60, 61, 62, 70, 74, 80, 90, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 134, 144, 154, 157, 175, 176, 230, 234, 235, 251, 290, 297, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 314, 383, 386, 397, 403], "who": [14, 153, 154, 155, 156], "whose": [26, 340, 344, 346, 348, 352, 356, 362], "wide": [4, 5, 6, 8, 15, 23, 42, 92, 102, 110, 111, 112, 144, 163, 234, 245, 246, 263], "wide_resnet_101": 144, "wide_resnet_50": 144, "wider": [33, 111, 112, 170, 171], "wideresnet": 144, "width": [49, 50, 80, 84, 93, 100, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 130, 140, 144, 171, 172, 174, 180, 181, 194, 199, 200, 202, 203, 206, 207, 210, 211, 219, 246, 247, 269, 270, 271, 273, 274, 278, 279, 281, 282, 284, 285, 295, 394, 396, 401], "width_coef": 49, "width_multipli": [80, 84], "window": [201, 202, 203, 205, 206, 207, 280, 281, 282, 283, 284, 285, 301, 358, 360], "wise": [124, 126, 127, 128, 129, 144, 159, 160, 162, 163, 164, 165, 166, 167, 177, 212, 213, 214, 218, 232, 238, 239, 249, 251, 252, 253, 254, 255, 297, 313, 326, 327, 330, 331, 332, 333, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 357, 361, 362, 363, 364, 365, 366, 368, 369, 370, 377, 391], "within": [2, 144, 145, 146, 150, 153, 154, 155, 156, 157, 167, 210, 211, 228, 230, 231, 232, 234, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 259, 262, 263, 264, 265, 266, 268, 269, 270, 272, 275, 280, 281, 282, 283, 284, 285, 299, 314, 337, 352, 399, 403], "without": [10, 14, 113, 153, 154, 155, 184, 186, 245, 246, 247, 258, 260, 312, 315, 358, 381, 383, 390], "won": 314, "word": [208, 287], "work": [1, 2, 3, 10, 12, 13, 14, 16, 313, 316], "workflow": [13, 324, 403], "workload": 14, "wrap": [3, 297, 314, 373], "wrapper": 297, "www": [5, 6], "x": [14, 15, 25, 72, 76, 120, 135, 140, 144, 145, 150, 151, 153, 154, 155, 156, 157, 166, 177, 184, 186, 211, 215, 216, 217, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 291, 292, 293, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 317, 319, 320, 321, 323, 339, 340, 356, 379, 384, 388, 389, 394, 395, 396, 397, 398, 399, 400, 401], "x1": 258, "x2": 258, "x_": [194, 263, 266, 271, 292, 379], "x_0": 292, "x_c": [263, 266], "x_i": [262, 292], "x_k": 263, "xavier": [223, 224, 227, 228], "xavier_norm": 222, "xavier_uniform": 222, "xception": [75, 144], "xiao": 7, "xie": 144, "xl": [62, 144], "xlarg": [43, 144], "xy": 379, "x\u2081": 258, "x\u2082": 258, "y": [140, 144, 153, 154, 155, 156, 157, 211, 215, 216, 217, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 317, 319, 320, 321, 323, 339, 340, 379, 397], "y_": [194, 263, 266, 271, 379], "y_c": [263, 266], "y_i": 262, "yann": [8, 144], "yet": [14, 40, 42, 90, 313], "yield": [0, 1, 151, 314], "you": [0, 12, 82, 144, 145, 154, 156, 157, 289, 297, 299, 312, 314, 324, 339, 340, 341, 346, 371, 373, 392, 394, 403], "your": [10, 82, 90, 297, 299, 312, 314, 324, 403], "yu": 144, "z": [144, 291, 293, 340, 345, 346], "zalandoresearch": 7, "ze": 144, "zeiler": [142, 144], "zero": [21, 23, 24, 65, 145, 159, 162, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 201, 202, 203, 205, 206, 207, 208, 221, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 236, 242, 245, 246, 247, 249, 251, 252, 253, 254, 255, 275, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 339, 340, 341, 346, 347, 352, 362, 380, 388, 389], "zero_grad": [152, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 325], "zeros_lik": [340, 347], "zfnet": [75, 144], "zhang": 144, "zhmoginov": 144, "zhu": 144, "zhuang": 144, "zisserman": 144, "\u03c3\u1d62": 23}, "titles": ["data.ConcatDataset", "data.DataLoader", "data.Dataset", "lucid.data", "lucid.datasets", "CIFAR10", "CIFAR100", "FashionMNIST", "MNIST", "Image Datasets", "lucid.einops", "Einops Functions", "lucid.einops.rearrange", "lucid.einops.reduce", "Lucid", "lucid.linalg", "lucid.linalg.cholesky", "lucid.linalg.det", "lucid.linalg.eig", "Linear Algebra Operations", "lucid.linalg.inv", "lucid.linalg.matrix_power", "lucid.linalg.norm", "lucid.linalg.pinv", "lucid.linalg.qr", "lucid.linalg.solve", "lucid.linalg.svd", "AlexNet", "alexnet", "ConvNeXt", "ConvNeXt_V2", "convnext_base", "convnext_large", "convnext_small", "convnext_tiny", "convnext_v2_atto", "convnext_v2_base", "convnext_v2_femto", "convnext_v2_huge", "convnext_v2_large", "convnext_v2_nano", "convnext_v2_pico", "convnext_v2_tiny", "convnext_xlarge", "DenseNet", "densenet_121", "densenet_169", "densenet_201", "densenet_264", "EfficientNet", "EfficientNet_V2", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3", "efficientnet_b4", "efficientnet_b5", "efficientnet_b6", "efficientnet_b7", "efficientnet_v2_l", "efficientnet_v2_m", "efficientnet_v2_s", "efficientnet_v2_xl", "Inception", "inception_v1", "inception_v3", "inception_v4", "InceptionNeXt", "inception_next_atto", "inception_next_base", "inception_next_small", "inception_next_tiny", "InceptionResNet", "inception_resnet_v1", "inception_resnet_v2", "ConvNets", "LeNet", "lenet_1", "lenet_4", "lenet_5", "MobileNet", "MobileNet_V2", "MobileNet_V3", "MobileNet_V4", "mobilenet", "mobilenet_v2", "mobilenet_v3_large", "mobilenet_v3_small", "mobilenet_v4_conv_large", "mobilenet_v4_conv_medium", "mobilenet_v4_conv_small", "mobilenet_v4_hybrid_large", "mobilenet_v4_hybrid_medium", "ResNeSt", "resnest_101", "resnest_14", "resnest_200", "resnest_26", "resnest_269", "resnest_50", "resnest_50_1s4x24d", "resnest_50_4s2x40d", "ResNet", "resnet_1001", "resnet_101", "resnet_152", "resnet_18", "resnet_200", "resnet_269", "resnet_34", "resnet_50", "wide_resnet_101", "wide_resnet_50", "ResNeXt", "resnext_101_32x16d", "resnext_101_32x32d", "resnext_101_32x4d", "resnext_101_32x8d", "resnext_101_64x4d", "resnext_50_32x4d", "SENet", "se_resnet_101", "se_resnet_152", "se_resnet_18", "se_resnet_34", "se_resnet_50", "se_resnext_101_32x4d", "se_resnext_101_32x8d", "se_resnext_101_64x4d", "se_resnext_50_32x4d", "SKNet", "sk_resnet_18", "sk_resnet_34", "sk_resnet_50", "sk_resnext_50_32x4d", "VGGNet", "vggnet_11", "vggnet_13", "vggnet_16", "vggnet_19", "Xception", "xception", "ZFNet", "zfnet", "lucid.models", "models.summarize", "Transformer", "transformer_base", "transformer_big", "Transformers", "nn.Buffer", "nn.Module", "nn.Parameter", "nn.ModuleDict", "nn.ModuleList", "nn.ParameterDict", "nn.ParameterList", "nn.Sequential", "Containers", "nn.functional.elu", "nn.functional.gelu", "Activation Functions", "nn.functional.leaky_relu", "nn.functional.relu", "nn.functional.selu", "nn.functional.sigmoid", "nn.functional.softmax", "nn.functional.tanh", "Attention Functions", "nn.functional.scaled_dot_product_attention", "nn.functional.conv1d", "nn.functional.conv2d", "nn.functional.conv3d", "Convolution Functions", "nn.functional.unfold", "nn.functional.alpha_dropout", "nn.functional.drop_block", "nn.functional.drop_path", "nn.functional.dropout", "nn.functional.dropout1d", "nn.functional.dropout2d", "nn.functional.dropout3d", "Dropout Functions", "lucid.nn.functional", "nn.functional.bilinear", "Linear Functions", "nn.functional.linear", "nn.functional.binary_cross_entropy", "nn.functional.cross_entropy", "nn.functional.huber_loss", "Loss Functions", "nn.functional.mse_loss", "nn.functional.nll_loss", "nn.functional.batch_norm", "nn.functional.global_response_norm", "Normalization Functions", "nn.functional.instance_norm", "nn.functional.layer_norm", "nn.functional.adaptive_avg_pool1d", "nn.functional.adaptive_avg_pool2d", "nn.functional.adaptive_avg_pool3d", "nn.functional.avg_pool1d", "nn.functional.avg_pool2d", "nn.functional.avg_pool3d", "Pooling Functions", "nn.functional.max_pool1d", "nn.functional.max_pool2d", "nn.functional.max_pool3d", "nn.functional.embedding", "Utility Functions", "nn.functional.interpolate", "nn.functional.rotate", "nn.ConvBNReLU1d", "nn.ConvBNReLU2d", "nn.ConvBNReLU3d", "nn.DepthSeparableConv1d", "nn.DepthSeparableConv2d", "nn.DepthSeparableConv3d", "nn.SEModule", "nn.SelectiveKernel", "Fused Layers", "nn.init.constant", "Weight Initializations", "nn.init.kaiming_normal", "nn.init.kaiming_uniform", "nn.init.normal", "nn.init.uniform", "nn.init.xavier_normal", "nn.init.xavier_uniform", "nn.ELU", "nn.GELU", "nn.HardSigmoid", "nn.HardSwish", "nn.LeakyReLU", "nn.ReLU", "nn.ReLU6", "nn.SELU", "nn.Sigmoid", "nn.Softmax", "nn.Swish", "nn.Tanh", "Activation Layers", "nn.MultiHeadAttention", "nn.ScaledDotProductAttention", "Attention Layers", "nn.Conv1d", "nn.Conv2d", "nn.Conv3d", "Convolution Layers", "nn.AlphaDropout", "nn.DropBlock", "nn.DropPath", "nn.Dropout", "nn.Dropout1d", "nn.Dropout2d", "nn.Dropout3d", "Dropout Layers", "Modules", "nn.Bilinear", "nn.Identity", "nn.Linear", "Linear Layers", "nn.BCELoss", "nn.CrossEntropyLoss", "nn.HuberLoss", "nn.MSELoss", "nn.NLLLoss", "Loss Layers", "nn.BatchNorm1d", "nn.BatchNorm2d", "nn.BatchNorm3d", "nn.GlobalResponseNorm", "nn.InstanceNorm1d", "nn.InstanceNorm2d", "nn.InstanceNorm3d", "nn.LayerNorm", "Normalization Layers", "nn.AdaptiveAvgPool1d", "nn.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool3d", "nn.AvgPool1d", "nn.AvgPool2d", "nn.AvgPool3d", "nn.MaxPool1d", "nn.MaxPool2d", "nn.MaxPool3d", "Pooling Layers", "nn.Embedding", "Sparse Layers", "nn.Transformer", "nn.TransformerDecoder", "nn.TransformerDecoderLayer", "nn.TransformerEncoder", "nn.TransformerEncoderLayer", "Transformer Layers", "nn.Upsample", "Vision Layers", "lucid.nn", "optim.Optimizer", "lucid.optim", "optim.ASGD", "optim.Adadelta", "optim.Adagrad", "optim.Adam", "optim.AdamW", "optim.Adamax", "optim.NAdam", "optim.RAdam", "optim.RMSprop", "optim.Rprop", "optim.SGD", "Optimizers", "lucid.grad_enabled", "lucid.newaxis", "lucid.no_grad", "lucid.register_model", "lucid.types", "lucid.random.bernoulli", "Random Number Generations", "lucid.random.rand", "lucid.random.randint", "lucid.random.randn", "lucid.random.seed", "lucid.random.uniform", "lucid.random", "lucid.Tensor", "lucid.add", "lucid.div", "lucid.dot", "lucid.inner", "lucid.matmul", "lucid.maximum", "lucid.minimum", "lucid.mul", "lucid.outer", "lucid.power", "lucid.sub", "lucid.arange", "lucid.diag", "lucid.empty", "lucid.empty_like", "lucid.eye", "lucid.linspace", "lucid.ones", "lucid.ones_like", "lucid.zeros", "lucid.zeros_like", "Tensor Operations", "lucid.abs", "lucid.arccos", "lucid.arcsin", "lucid.arctan", "lucid.clip", "lucid.cos", "lucid.cosh", "lucid.cube", "lucid.exp", "lucid.log", "lucid.max", "lucid.mean", "lucid.min", "lucid.reciprocal", "lucid.sign", "lucid.sin", "lucid.sinh", "lucid.sqrt", "lucid.square", "lucid.sum", "lucid.tan", "lucid.tanh", "lucid.trace", "lucid.transpose", "lucid.var", "lucid.tensor", "lucid.broadcast_to", "lucid.concatenate", "lucid.flatten", "lucid.hstack", "Tensor Utilites", "lucid.meshgrid", "lucid.pad", "lucid.ravel", "lucid.repeat", "lucid.reshape", "lucid.split", "lucid.squeeze", "lucid.stack", "lucid.tile", "lucid.tril", "lucid.triu", "lucid.unsqueeze", "lucid.vstack", "transforms.Compose", "transforms.ToTensor", "transforms.CenterCrop", "transforms.Normalize", "transforms.RandomCrop", "transforms.RandomGrayscale", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.RandomVerticalFlip", "transforms.Resize", "Image Transformations", "lucid.transforms"], "titleterms": {"1": 313, "1d": 313, "2": 313, "2d": 313, "3": 313, "It": [312, 314], "ab": 348, "activ": [161, 183, 241, 257], "ad": 313, "adadelta": 301, "adagrad": 302, "adam": 303, "adamax": 305, "adamw": 304, "adaptive_avg_pool1d": 198, "adaptive_avg_pool2d": 199, "adaptive_avg_pool3d": 200, "adaptiveavgpool1d": 277, "adaptiveavgpool2d": 278, "adaptiveavgpool3d": 279, "add": 326, "addit": [23, 242], "admonit": 316, "advanc": [174, 403], "advantag": [10, 12, 13], "alexnet": [27, 28], "algebra": 19, "algorithm": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "alias": 316, "align": 313, "alpha_dropout": 175, "alphadropout": 249, "also": 299, "anoth": 373, "arang": 337, "arcco": 349, "architectur": [27, 29, 77, 78, 79, 111, 112, 142], "arcsin": 350, "arctan": 351, "asgd": 300, "attent": [168, 169, 183, 219, 244, 257], "attribut": [5, 6, 7, 8, 27, 72, 76, 102, 113, 120, 130, 135, 140, 142, 150, 152, 153, 154, 155, 156, 157, 212, 213, 214, 215, 216, 217, 218, 229, 230, 233, 234, 236, 237, 238, 240, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 325, 394, 395, 396, 397, 398, 399, 400, 401], "avg_pool1d": 201, "avg_pool2d": 202, "avg_pool3d": 203, "avgpool1d": 280, "avgpool2d": 281, "avgpool3d": 282, "axi": 313, "backpropag": 325, "backward": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 176, 184, 186, 210, 218, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391], "batch_norm": 193, "batchnorm": 220, "batchnorm1d": 268, "batchnorm2d": 269, "batchnorm3d": 270, "bceloss": 262, "behavior": [198, 199, 200, 277, 278, 279], "benefit": 314, "bernoulli": 317, "bilinear": [184, 258], "binari": 347, "binary_cross_entropi": 187, "bottleneck": [86, 87], "broadcast": [313, 374], "broadcast_to": 374, "buffer": 150, "calcul": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 102, 113, 120, 130, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 174, 176, 177, 184, 186, 198, 199, 200, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401], "captur": 315, "case": 316, "centercrop": 394, "choleski": 16, "cifar10": 5, "cifar100": 6, "class": [0, 1, 2, 5, 6, 7, 8, 27, 29, 30, 44, 49, 50, 63, 67, 72, 76, 80, 81, 82, 83, 93, 102, 113, 120, 130, 135, 140, 142, 146, 150, 151, 152, 153, 154, 155, 156, 157, 212, 213, 214, 215, 216, 217, 218, 219, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 325, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "clip": 352, "co": 353, "combin": 0, "compon": [3, 14, 297], "compos": 392, "concatdataset": [0, 1], "concaten": 375, "conclus": [3, 10, 12, 13, 14, 297, 312, 313, 314, 324, 393, 403], "configur": [49, 86, 87, 94, 95, 96, 97, 98, 99, 100, 101], "constant": 221, "contain": 158, "conv": 220, "conv1d": [170, 245], "conv2d": [171, 246], "conv3d": [172, 247], "convbnrelu1d": 212, "convbnrelu2d": 213, "convbnrelu3d": 214, "convnet": [75, 144], "convnext": 29, "convnext_bas": 31, "convnext_larg": 32, "convnext_smal": 33, "convnext_tini": 34, "convnext_v2": 30, "convnext_v2_atto": 35, "convnext_v2_bas": 36, "convnext_v2_femto": 37, "convnext_v2_hug": 38, "convnext_v2_larg": 39, "convnext_v2_nano": 40, "convnext_v2_pico": 41, "convnext_v2_tini": 42, "convnext_xlarg": 43, "convolut": [173, 183, 220, 248, 257], "core": 14, "cosh": 354, "creat": [152, 325, 373], "cross_entropi": 188, "crossentropyloss": 263, "cube": 355, "custom": [1, 2, 3, 151, 298, 299, 403], "data": [0, 1, 2, 3], "dataload": 1, "dataset": [0, 1, 2, 4, 9], "defin": [2, 151, 298, 299], "definit": [12, 13, 316], "densenet": 44, "densenet_121": 45, "densenet_169": 46, "densenet_201": 47, "densenet_264": 48, "depthseparableconv1d": 215, "depthseparableconv2d": 216, "depthseparableconv3d": 217, "depthwis": 220, "descript": [114, 115, 116, 117, 118, 119, 131, 132, 133, 315], "det": 17, "detail": [23, 88, 89, 90, 91, 92, 111, 112, 242, 289, 290, 291, 292, 293], "diag": 338, "differ": 146, "dilat": 174, "div": 327, "dot": 328, "drop_block": 176, "drop_path": 177, "dropblock": 250, "dropout": [178, 182, 183, 252, 256, 257], "dropout1d": [179, 253], "dropout2d": [180, 254], "dropout3d": [181, 255], "droppath": 251, "efficientnet": 49, "efficientnet_b0": 51, "efficientnet_b1": 52, "efficientnet_b2": 53, "efficientnet_b3": 54, "efficientnet_b4": 55, "efficientnet_b5": 56, "efficientnet_b6": 57, "efficientnet_b7": 58, "efficientnet_v2": 50, "efficientnet_v2_": 61, "efficientnet_v2_l": 59, "efficientnet_v2_m": 60, "efficientnet_v2_xl": 62, "eig": 18, "einop": [10, 11, 12, 13], "elu": [159, 229], "embed": [208, 287], "empti": 339, "empty_lik": 340, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403], "excit": 220, "exp": 356, "express": [194, 384], "ey": 341, "fashionmnist": 7, "featur": [4, 14, 15, 126, 127, 128, 129, 134, 299, 324, 403], "flatten": 376, "forward": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 102, 113, 120, 130, 140, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 174, 177, 184, 186, 198, 199, 200, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401], "from": [146, 373], "function": [11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 145, 147, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 221, 223, 224, 225, 226, 227, 228, 312, 314, 315, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "fuse": 220, "futur": 4, "gelu": [160, 230], "gener": [318, 347], "get": 299, "global_response_norm": 194, "globalresponsenorm": 271, "grad_en": 312, "gradient": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 176, 184, 186, 210, 218, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391], "guidelin": 316, "hardsigmoid": 231, "hardswish": 232, "how": [312, 314], "hstack": 377, "huber_loss": 189, "huberloss": 264, "hyperparamet": [100, 101], "ident": 259, "imag": [9, 402], "incept": 63, "inception_next_atto": 68, "inception_next_bas": 69, "inception_next_smal": 70, "inception_next_tini": 71, "inception_resnet_v1": 73, "inception_resnet_v2": 74, "inception_v1": 64, "inception_v3": 65, "inception_v4": 66, "inceptionnext": 67, "inceptionresnet": 72, "index": 325, "init": [221, 223, 224, 225, 226, 227, 228], "initi": 222, "inner": 329, "input": 373, "inspect": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "instance_norm": 196, "instancenorm1d": 272, "instancenorm2d": 273, "instancenorm3d": 274, "integr": [3, 297, 324, 403], "interpol": 210, "inv": 20, "iter": 325, "kaiming_norm": 223, "kaiming_uniform": 224, "kei": [3, 4, 14, 126, 127, 128, 129, 134, 297, 299, 324, 403], "kernel": 220, "layer": [94, 95, 96, 97, 98, 99, 220, 241, 244, 248, 256, 257, 261, 267, 276, 286, 288, 294, 296], "layer_norm": 197, "layernorm": 275, "leaky_relu": 162, "leakyrelu": 233, "learn": 324, "lenet": 76, "lenet_1": 77, "lenet_4": 78, "lenet_5": 79, "limit": 14, "linalg": [15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26], "linear": [19, 183, 185, 186, 257, 260, 261], "linspac": 342, "list": 373, "load": 1, "log": 357, "loss": [183, 190, 257, 267], "lucid": [3, 4, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 144, 183, 297, 299, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 403], "mathemat": [12, 13, 194, 242, 289, 290, 291, 292, 293, 384], "matmul": 330, "matrix": 330, "matrix_pow": 21, "max": 358, "max_pool1d": 205, "max_pool2d": 206, "max_pool3d": 207, "maximum": 331, "maxpool1d": 283, "maxpool2d": 284, "maxpool3d": 285, "mean": 359, "mechan": [169, 219], "meshgrid": 379, "metadata": 315, "method": [0, 1, 2, 5, 6, 7, 8, 72, 76, 135, 151, 152, 289, 290, 291, 292, 293, 298, 325], "min": 360, "minimum": 332, "mnist": 8, "mobilenet": [80, 84], "mobilenet_v2": [81, 85], "mobilenet_v3": 82, "mobilenet_v3_larg": 86, "mobilenet_v3_smal": 87, "mobilenet_v4": 83, "mobilenet_v4_conv_larg": 88, "mobilenet_v4_conv_medium": 89, "mobilenet_v4_conv_smal": 90, "mobilenet_v4_hybrid_larg": 91, "mobilenet_v4_hybrid_medium": 92, "model": [144, 145, 297], "modul": [151, 257], "moduledict": 153, "modulelist": 154, "more": 324, "mse_loss": 191, "mseloss": 265, "mul": 333, "multiheadattent": 242, "multipl": [0, 330], "nadam": 306, "new": 313, "newaxi": 313, "nll_loss": 192, "nllloss": 266, "nn": [146, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 297], "no_grad": 314, "norm": 22, "normal": [183, 195, 225, 257, 276, 395], "note": 14, "number": 318, "ones": 343, "ones_lik": 344, "oper": [19, 330, 347], "optim": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "option": 242, "organ": 297, "outer": 334, "overview": [3, 4, 10, 14, 63, 64, 65, 66, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 242, 289, 290, 291, 292, 293, 297, 299, 324, 403], "pad": 380, "paramet": [1, 5, 6, 7, 8, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 236, 237, 238, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "parameterdict": 155, "parameterlist": 156, "pass": 140, "perform": 325, "pinv": 23, "pipelin": [3, 403], "pitfal": [312, 314], "pool": [183, 204, 257, 286], "potenti": [312, 314], "power": 335, "process": 208, "properti": [152, 325], "qr": 24, "radam": 307, "rais": [16, 17, 18, 20, 21, 22, 23, 24, 25, 26], "rand": 319, "randint": 320, "randn": 321, "random": [317, 318, 319, 320, 321, 322, 323, 324], "randomcrop": 396, "randomgrayscal": 397, "randomhorizontalflip": 398, "randomrot": 399, "randomverticalflip": 400, "ravel": 381, "rearrang": [10, 12], "reciproc": 361, "reduc": [10, 13], "refer": [5, 6, 7, 8, 218, 299], "register_model": 315, "regular": 176, "relu": [163, 220, 234], "relu6": 235, "repeat": 382, "reshap": 383, "resiz": 401, "resnest": 93, "resnest_101": 94, "resnest_14": 95, "resnest_200": 96, "resnest_26": 97, "resnest_269": 98, "resnest_50": 99, "resnest_50_1s4x24d": 100, "resnest_50_4s2x40d": 101, "resnet": 102, "resnet_1001": 103, "resnet_101": 104, "resnet_152": 105, "resnet_18": 106, "resnet_200": 107, "resnet_269": 108, "resnet_34": 109, "resnet_50": 110, "resnext": 113, "resnext_101_32x16d": 114, "resnext_101_32x32d": 115, "resnext_101_32x4d": 116, "resnext_101_32x8d": 117, "resnext_101_64x4d": 118, "resnext_50_32x4d": 119, "return": [12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 145, 147, 148, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 219, 221, 223, 224, 225, 226, 227, 228, 235, 287, 312, 314, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "rmsprop": 308, "rotat": 211, "rprop": 309, "rule": [330, 374], "scaled_dot_product_attent": 169, "scaleddotproductattent": 243, "se_resnet_101": 121, "se_resnet_152": 122, "se_resnet_18": 123, "se_resnet_34": 124, "se_resnet_50": 125, "se_resnext_101_32x4d": 126, "se_resnext_101_32x8d": 127, "se_resnext_101_64x4d": 128, "se_resnext_50_32x4d": 129, "see": 299, "seed": 322, "select": 220, "selectivekernel": 219, "selu": [164, 236], "semodul": 218, "senet": 120, "separ": 220, "sequenti": 157, "sgd": 310, "sigmoid": [165, 237], "sign": 362, "signatur": [0, 1, 2, 5, 6, 7, 8, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "sin": 363, "sinh": 364, "sk_resnet_18": 131, "sk_resnet_34": 132, "sk_resnet_50": 133, "sk_resnext_50_32x4d": 134, "sknet": 130, "slice": 325, "softmax": [166, 238], "solv": 25, "spars": [257, 288], "split": 384, "sqrt": 365, "squar": 366, "squeez": [220, 385], "stack": 386, "start": 299, "state": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "sub": 336, "sum": 367, "summar": 145, "summari": 145, "svd": 26, "swish": 239, "tabl": 145, "tan": 368, "tanh": [167, 240, 369], "tensor": [313, 325, 347, 373, 378], "through": 325, "tile": 387, "totensor": 393, "trace": 370, "track": 325, "transform": [144, 146, 149, 257, 289, 294, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], "transformer_bas": 147, "transformer_big": 148, "transformerdecod": 290, "transformerdecoderlay": 291, "transformerencod": 292, "transformerencoderlay": 293, "transpos": 371, "tril": 388, "triu": 389, "type": 316, "unari": 347, "unfold": 174, "uniform": [226, 323], "unsqueez": 390, "upsampl": 295, "us": [1, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 373], "usag": [4, 14, 59, 60, 61, 62, 64, 65, 66, 73, 74, 76, 77, 78, 79, 88, 89, 90, 91, 92, 126, 127, 128, 129, 134, 150, 211, 242, 289, 290, 291, 292, 293, 312, 313, 314, 316, 379, 392, 393, 403], "util": [183, 209], "utilit": 378, "valu": 384, "var": 372, "vggnet": 135, "vggnet_11": 136, "vggnet_13": 137, "vggnet_16": 138, "vggnet_19": 139, "vision": [257, 296], "vstack": 391, "weight": 222, "why": 316, "wide_resnet_101": 111, "wide_resnet_50": 112, "work": [4, 312, 314], "xavier_norm": 227, "xavier_uniform": 228, "xception": [140, 141], "zero": 345, "zeros_lik": 346, "zfnet": [142, 143]}})