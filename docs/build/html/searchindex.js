Search.setIndex({"alltitles": {"@ Operator": [[319, "operator"]], "Activation Functions": [[153, null], [175, null]], "Activation Layers": [[232, null], [248, null]], "Additional Details": [[19, "additional-details"]], "Additional Options": [[233, "additional-options"]], "Admonitions and Usage Guidelines": [[305, "admonitions-and-usage-guidelines"]], "Advanced Example with Dilation": [[166, "advanced-example-with-dilation"]], "Advanced Features": [[392, "advanced-features"]], "AlexNet": [[23, null]], "Algorithm": [[289, "algorithm"], [290, "algorithm"], [291, "algorithm"], [292, "algorithm"], [293, "algorithm"], [294, "algorithm"], [295, "algorithm"], [296, "algorithm"], [297, "algorithm"], [298, "algorithm"], [299, "algorithm"]], "Architecture": [[23, "architecture"], [25, "architecture"], [73, "architecture"], [74, "architecture"], [75, "architecture"], [138, "architecture"]], "Architecture Details": [[107, "architecture-details"], [108, "architecture-details"]], "Attention Functions": [[160, null], [175, null]], "Attention Layers": [[235, null], [248, null]], "Attention Mechanism": [[161, "attention-mechanism"], [210, "attention-mechanism"]], "Attributes": [[5, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [23, "attributes"], [68, "attributes"], [72, "attributes"], [98, "attributes"], [109, "attributes"], [116, "attributes"], [126, "attributes"], [131, "attributes"], [136, "attributes"], [138, "attributes"], [142, "attributes"], [144, "attributes"], [145, "attributes"], [146, "attributes"], [147, "attributes"], [148, "attributes"], [149, "attributes"], [203, "attributes"], [204, "attributes"], [205, "attributes"], [206, "attributes"], [207, "attributes"], [208, "attributes"], [209, "attributes"], [220, "attributes"], [221, "attributes"], [224, "attributes"], [225, "attributes"], [227, "attributes"], [228, "attributes"], [229, "attributes"], [231, "attributes"], [236, "attributes"], [237, "attributes"], [238, "attributes"], [240, "attributes"], [242, "attributes"], [243, "attributes"], [244, "attributes"], [245, "attributes"], [246, "attributes"], [249, "attributes"], [250, "attributes"], [251, "attributes"], [253, "attributes"], [254, "attributes"], [255, "attributes"], [256, "attributes"], [257, "attributes"], [259, "attributes"], [260, "attributes"], [261, "attributes"], [263, "attributes"], [264, "attributes"], [265, "attributes"], [266, "attributes"], [268, "attributes"], [269, "attributes"], [270, "attributes"], [271, "attributes"], [272, "attributes"], [273, "attributes"], [274, "attributes"], [275, "attributes"], [276, "attributes"], [314, "attributes"], [383, "attributes"], [384, "attributes"], [385, "attributes"], [386, "attributes"], [387, "attributes"], [388, "attributes"], [389, "attributes"], [390, "attributes"]], "Backward Gradient Calculation": [[12, "backward-gradient-calculation"], [13, "backward-gradient-calculation"], [14, "backward-gradient-calculation"], [16, "backward-gradient-calculation"], [17, "backward-gradient-calculation"], [18, "backward-gradient-calculation"], [19, "backward-gradient-calculation"], [20, "backward-gradient-calculation"], [21, "backward-gradient-calculation"], [22, "backward-gradient-calculation"], [145, "backward-gradient-calculation"], [146, "backward-gradient-calculation"], [147, "backward-gradient-calculation"], [148, "backward-gradient-calculation"], [149, "backward-gradient-calculation"], [151, "backward-gradient-calculation"], [152, "backward-gradient-calculation"], [154, "backward-gradient-calculation"], [155, "backward-gradient-calculation"], [156, "backward-gradient-calculation"], [157, "backward-gradient-calculation"], [158, "backward-gradient-calculation"], [159, "backward-gradient-calculation"], [168, "backward-gradient-calculation"], [176, "backward-gradient-calculation"], [178, "backward-gradient-calculation"], [201, "backward-gradient-calculation"], [209, "backward-gradient-calculation"], [219, "backward-gradient-calculation"], [220, "backward-gradient-calculation"], [221, "backward-gradient-calculation"], [222, "backward-gradient-calculation"], [223, "backward-gradient-calculation"], [224, "backward-gradient-calculation"], [225, "backward-gradient-calculation"], [227, "backward-gradient-calculation"], [228, "backward-gradient-calculation"], [229, "backward-gradient-calculation"], [230, "backward-gradient-calculation"], [231, "backward-gradient-calculation"], [236, "backward-gradient-calculation"], [237, "backward-gradient-calculation"], [238, "backward-gradient-calculation"], [240, "backward-gradient-calculation"], [243, "backward-gradient-calculation"], [244, "backward-gradient-calculation"], [245, "backward-gradient-calculation"], [246, "backward-gradient-calculation"], [249, "backward-gradient-calculation"], [250, "backward-gradient-calculation"], [251, "backward-gradient-calculation"], [253, "backward-gradient-calculation"], [254, "backward-gradient-calculation"], [255, "backward-gradient-calculation"], [256, "backward-gradient-calculation"], [257, "backward-gradient-calculation"], [259, "backward-gradient-calculation"], [260, "backward-gradient-calculation"], [261, "backward-gradient-calculation"], [263, "backward-gradient-calculation"], [264, "backward-gradient-calculation"], [265, "backward-gradient-calculation"], [266, "backward-gradient-calculation"], [271, "backward-gradient-calculation"], [272, "backward-gradient-calculation"], [273, "backward-gradient-calculation"], [274, "backward-gradient-calculation"], [275, "backward-gradient-calculation"], [276, "backward-gradient-calculation"], [315, "backward-gradient-calculation"], [316, "backward-gradient-calculation"], [317, "backward-gradient-calculation"], [318, "backward-gradient-calculation"], [319, "backward-gradient-calculation"], [320, "backward-gradient-calculation"], [321, "backward-gradient-calculation"], [322, "backward-gradient-calculation"], [323, "backward-gradient-calculation"], [324, "backward-gradient-calculation"], [325, "backward-gradient-calculation"], [337, "backward-gradient-calculation"], [338, "backward-gradient-calculation"], [339, "backward-gradient-calculation"], [340, "backward-gradient-calculation"], [341, "backward-gradient-calculation"], [342, "backward-gradient-calculation"], [343, "backward-gradient-calculation"], [344, "backward-gradient-calculation"], [345, "backward-gradient-calculation"], [346, "backward-gradient-calculation"], [347, "backward-gradient-calculation"], [348, "backward-gradient-calculation"], [349, "backward-gradient-calculation"], [350, "backward-gradient-calculation"], [351, "backward-gradient-calculation"], [352, "backward-gradient-calculation"], [353, "backward-gradient-calculation"], [354, "backward-gradient-calculation"], [355, "backward-gradient-calculation"], [356, "backward-gradient-calculation"], [357, "backward-gradient-calculation"], [358, "backward-gradient-calculation"], [359, "backward-gradient-calculation"], [360, "backward-gradient-calculation"], [361, "backward-gradient-calculation"], [363, "backward-gradient-calculation"], [364, "backward-gradient-calculation"], [366, "backward-gradient-calculation"], [368, "backward-gradient-calculation"], [369, "backward-gradient-calculation"], [370, "backward-gradient-calculation"], [371, "backward-gradient-calculation"], [372, "backward-gradient-calculation"], [374, "backward-gradient-calculation"], [375, "backward-gradient-calculation"], [376, "backward-gradient-calculation"], [377, "backward-gradient-calculation"], [378, "backward-gradient-calculation"], [379, "backward-gradient-calculation"], [380, "backward-gradient-calculation"]], "Behavior": [[190, "behavior"], [191, "behavior"], [192, "behavior"], [268, "behavior"], [269, "behavior"], [270, "behavior"]], "Benefits": [[303, "benefits"]], "Binary Functions": [[336, null]], "Bottleneck Configuration": [[82, "bottleneck-configuration"], [83, "bottleneck-configuration"]], "Broadcasting Rules": [[363, "broadcasting-rules"]], "CIFAR10": [[5, null]], "CIFAR100": [[6, null]], "Class Signature": [[0, "class-signature"], [1, "class-signature"], [2, "class-signature"], [5, "class-signature"], [6, "class-signature"], [7, "class-signature"], [8, "class-signature"], [23, "class-signature"], [25, "class-signature"], [26, "class-signature"], [40, "class-signature"], [45, "class-signature"], [46, "class-signature"], [59, "class-signature"], [63, "class-signature"], [68, "class-signature"], [72, "class-signature"], [76, "class-signature"], [77, "class-signature"], [78, "class-signature"], [79, "class-signature"], [89, "class-signature"], [98, "class-signature"], [109, "class-signature"], [116, "class-signature"], [126, "class-signature"], [131, "class-signature"], [136, "class-signature"], [138, "class-signature"], [142, "class-signature"], [143, "class-signature"], [144, "class-signature"], [145, "class-signature"], [146, "class-signature"], [147, "class-signature"], [148, "class-signature"], [149, "class-signature"], [203, "class-signature"], [204, "class-signature"], [205, "class-signature"], [206, "class-signature"], [207, "class-signature"], [208, "class-signature"], [209, "class-signature"], [210, "class-signature"], [220, "class-signature"], [221, "class-signature"], [222, "class-signature"], [223, "class-signature"], [224, "class-signature"], [225, "class-signature"], [226, "class-signature"], [227, "class-signature"], [228, "class-signature"], [229, "class-signature"], [230, "class-signature"], [231, "class-signature"], [233, "class-signature"], [234, "class-signature"], [236, "class-signature"], [237, "class-signature"], [238, "class-signature"], [240, "class-signature"], [241, "class-signature"], [242, "class-signature"], [243, "class-signature"], [244, "class-signature"], [245, "class-signature"], [246, "class-signature"], [249, "class-signature"], [250, "class-signature"], [251, "class-signature"], [253, "class-signature"], [254, "class-signature"], [255, "class-signature"], [256, "class-signature"], [257, "class-signature"], [259, "class-signature"], [260, "class-signature"], [261, "class-signature"], [262, "class-signature"], [263, "class-signature"], [264, "class-signature"], [265, "class-signature"], [266, "class-signature"], [268, "class-signature"], [269, "class-signature"], [270, "class-signature"], [271, "class-signature"], [272, "class-signature"], [273, "class-signature"], [274, "class-signature"], [275, "class-signature"], [276, "class-signature"], [278, "class-signature"], [279, "class-signature"], [280, "class-signature"], [281, "class-signature"], [282, "class-signature"], [284, "class-signature"], [287, "class-signature"], [289, "class-signature"], [290, "class-signature"], [291, "class-signature"], [292, "class-signature"], [293, "class-signature"], [294, "class-signature"], [295, "class-signature"], [296, "class-signature"], [297, "class-signature"], [298, "class-signature"], [299, "class-signature"], [314, "class-signature"], [381, "class-signature"], [382, "class-signature"], [383, "class-signature"], [384, "class-signature"], [385, "class-signature"], [386, "class-signature"], [387, "class-signature"], [388, "class-signature"], [389, "class-signature"], [390, "class-signature"]], "Combining multiple datasets": [[0, null]], "Conclusion": [[3, "conclusion"], [10, "conclusion"], [286, "conclusion"], [301, "conclusion"], [302, "conclusion"], [303, "conclusion"], [313, "conclusion"], [382, "conclusion"], [392, "conclusion"]], "Configurations": [[45, "configurations"]], "Containers": [[150, null]], "Conv-BatchNorm-ReLU": [[211, null]], "ConvNeXt": [[25, null]], "ConvNeXt_V2": [[26, null]], "ConvNets": [[71, null], [140, "convnets"]], "Convolution Functions": [[165, null], [175, null]], "Convolution Layers": [[239, null], [248, null]], "Core Components": [[10, "core-components"]], "Create a Tensor from a list": [[362, null]], "Creating a Parameter": [[144, null]], "Creating a tensor with gradient tracking": [[314, null]], "Custom Data Pipelines": [[3, "custom-data-pipelines"]], "Custom Pipelines": [[392, "custom-pipelines"]], "Defining a Custom Optimizer": [[288, null]], "Defining a custom dataset": [[2, null]], "Defining a custom module": [[143, null]], "Defining a custom optimizer": [[287, null]], "DenseNet": [[40, null]], "Depthwise Separable Convolution": [[211, null]], "Description": [[110, "description"], [111, "description"], [112, "description"], [113, "description"], [114, "description"], [115, "description"], [127, "description"], [128, "description"], [129, "description"], [304, "description"]], "Details": [[84, "details"], [85, "details"], [86, "details"], [87, "details"], [88, "details"]], "Dropout Functions": [[174, null], [175, null]], "Dropout Layers": [[247, null], [248, null]], "EfficientNet": [[45, null]], "EfficientNet Configurations": [[45, "id1"]], "EfficientNet_V2": [[46, null]], "Example": [[3, null], [3, null], [3, null], [12, "example"], [13, "example"], [14, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [80, "example"], [81, "example"], [166, "example"], [286, null], [286, null], [286, null], [301, "example"], [303, "example"], [306, "example"], [308, "example"], [309, "example"], [310, "example"], [311, "example"], [312, "example"], [313, null], [313, null], [313, null], [326, "example"], [327, "example"], [328, "example"], [329, "example"], [330, "example"], [332, "example"], [333, "example"], [334, "example"], [335, "example"], [337, "example"], [338, "example"], [339, "example"], [340, "example"], [341, "example"], [342, "example"], [343, "example"], [344, "example"], [346, "example"], [348, "example"], [350, "example"], [351, "example"], [352, "example"], [353, "example"], [354, "example"], [355, "example"], [356, "example"], [357, "example"], [358, "example"], [359, "example"], [360, "example"], [361, "example"], [364, "example"], [366, "example"], [370, "example"], [372, "example"], [374, "example"], [375, "example"], [377, "example"], [378, "example"], [379, "example"], [380, "example"]], "Example 1: Adding a new axis to a 1D tensor": [[302, null]], "Example 2: Adding a new axis to a 2D tensor": [[302, null]], "Example 3: Adding a new axis to align tensors for broadcasting": [[302, null]], "Example Usage": [[10, "example-usage"], [60, "example-usage"], [61, "example-usage"], [62, "example-usage"], [69, "example-usage"], [70, "example-usage"], [72, "example-usage"], [73, "example-usage"], [74, "example-usage"], [75, "example-usage"], [122, "example-usage"], [123, "example-usage"], [124, "example-usage"], [125, "example-usage"], [130, "example-usage"], [202, "example-usage"], [381, "example-usage"], [382, "example-usage"], [392, "example-usage"]], "Example Use Cases": [[305, "example-use-cases"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [11, "examples"], [23, "examples"], [24, "examples"], [25, "examples"], [26, "examples"], [27, "examples"], [28, "examples"], [29, "examples"], [30, "examples"], [31, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [36, "examples"], [37, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [44, "examples"], [45, "examples"], [47, "examples"], [48, "examples"], [49, "examples"], [50, "examples"], [51, "examples"], [52, "examples"], [53, "examples"], [54, "examples"], [55, "examples"], [56, "examples"], [57, "examples"], [58, "examples"], [63, "examples"], [78, "examples"], [82, "examples"], [83, "examples"], [89, "examples"], [90, "examples"], [91, "examples"], [92, "examples"], [93, "examples"], [94, "examples"], [95, "examples"], [96, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [105, "examples"], [106, "examples"], [107, "examples"], [108, "examples"], [110, "examples"], [111, "examples"], [112, "examples"], [113, "examples"], [114, "examples"], [115, "examples"], [117, "examples"], [118, "examples"], [119, "examples"], [120, "examples"], [121, "examples"], [127, "examples"], [128, "examples"], [129, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [145, "examples"], [146, "examples"], [147, "examples"], [148, "examples"], [149, "examples"], [151, "examples"], [152, "examples"], [154, "examples"], [155, "examples"], [156, "examples"], [157, "examples"], [158, "examples"], [159, "examples"], [161, "examples"], [162, "examples"], [163, "examples"], [164, "examples"], [167, "examples"], [168, "examples"], [169, "examples"], [170, "examples"], [171, "examples"], [172, "examples"], [173, "examples"], [176, "examples"], [178, "examples"], [179, "examples"], [180, "examples"], [181, "examples"], [183, "examples"], [184, "examples"], [185, "examples"], [186, "examples"], [188, "examples"], [189, "examples"], [190, "examples"], [191, "examples"], [192, "examples"], [193, "examples"], [194, "examples"], [195, "examples"], [197, "examples"], [198, "examples"], [199, "examples"], [201, "examples"], [203, "examples"], [204, "examples"], [205, "examples"], [206, "examples"], [207, "examples"], [208, "examples"], [209, "examples"], [210, "examples"], [212, "examples"], [214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [231, "examples"], [234, "examples"], [236, "examples"], [237, "examples"], [238, "examples"], [240, "examples"], [241, "examples"], [242, "examples"], [243, "examples"], [244, "examples"], [245, "examples"], [246, "examples"], [249, "examples"], [250, "examples"], [251, "examples"], [253, "examples"], [254, "examples"], [255, "examples"], [256, "examples"], [257, "examples"], [259, "examples"], [260, "examples"], [261, "examples"], [262, "examples"], [263, "examples"], [264, "examples"], [265, "examples"], [266, "examples"], [268, "examples"], [269, "examples"], [270, "examples"], [271, "examples"], [272, "examples"], [273, "examples"], [274, "examples"], [275, "examples"], [276, "examples"], [284, "examples"], [287, "examples"], [288, "examples"], [289, "examples"], [290, "examples"], [291, "examples"], [292, "examples"], [293, "examples"], [294, "examples"], [295, "examples"], [296, "examples"], [297, "examples"], [298, "examples"], [299, "examples"], [304, "examples"], [314, "examples"], [315, "examples"], [316, "examples"], [317, "examples"], [318, "examples"], [320, "examples"], [321, "examples"], [322, "examples"], [323, "examples"], [324, "examples"], [325, "examples"], [331, "examples"], [345, "examples"], [347, "examples"], [349, "examples"], [362, "examples"], [363, "examples"], [365, "examples"], [368, "examples"], [369, "examples"], [371, "examples"], [373, "examples"], [376, "examples"], [383, "examples"], [384, "examples"], [385, "examples"], [386, "examples"], [387, "examples"], [388, "examples"], [389, "examples"], [390, "examples"]], "FashionMNIST": [[7, null]], "Features": [[11, "features"]], "Forward Calculation": [[12, "forward-calculation"], [13, "forward-calculation"], [14, "forward-calculation"], [16, "forward-calculation"], [17, "forward-calculation"], [18, "forward-calculation"], [19, "forward-calculation"], [20, "forward-calculation"], [21, "forward-calculation"], [22, "forward-calculation"], [98, "forward-calculation"], [109, "forward-calculation"], [116, "forward-calculation"], [126, "forward-calculation"], [145, "forward-calculation"], [146, "forward-calculation"], [147, "forward-calculation"], [148, "forward-calculation"], [149, "forward-calculation"], [151, "forward-calculation"], [152, "forward-calculation"], [154, "forward-calculation"], [155, "forward-calculation"], [156, "forward-calculation"], [157, "forward-calculation"], [158, "forward-calculation"], [159, "forward-calculation"], [166, "forward-calculation"], [169, "forward-calculation"], [176, "forward-calculation"], [178, "forward-calculation"], [190, "forward-calculation"], [191, "forward-calculation"], [192, "forward-calculation"], [201, "forward-calculation"], [203, "forward-calculation"], [204, "forward-calculation"], [205, "forward-calculation"], [206, "forward-calculation"], [207, "forward-calculation"], [208, "forward-calculation"], [209, "forward-calculation"], [210, "forward-calculation"], [214, "forward-calculation"], [215, "forward-calculation"], [218, "forward-calculation"], [219, "forward-calculation"], [220, "forward-calculation"], [221, "forward-calculation"], [222, "forward-calculation"], [223, "forward-calculation"], [224, "forward-calculation"], [225, "forward-calculation"], [226, "forward-calculation"], [227, "forward-calculation"], [228, "forward-calculation"], [229, "forward-calculation"], [230, "forward-calculation"], [231, "forward-calculation"], [234, "forward-calculation"], [236, "forward-calculation"], [237, "forward-calculation"], [238, "forward-calculation"], [240, "forward-calculation"], [241, "forward-calculation"], [242, "forward-calculation"], [243, "forward-calculation"], [244, "forward-calculation"], [245, "forward-calculation"], [246, "forward-calculation"], [249, "forward-calculation"], [250, "forward-calculation"], [251, "forward-calculation"], [253, "forward-calculation"], [254, "forward-calculation"], [255, "forward-calculation"], [256, "forward-calculation"], [257, "forward-calculation"], [259, "forward-calculation"], [260, "forward-calculation"], [261, "forward-calculation"], [262, "forward-calculation"], [263, "forward-calculation"], [264, "forward-calculation"], [265, "forward-calculation"], [266, "forward-calculation"], [268, "forward-calculation"], [269, "forward-calculation"], [270, "forward-calculation"], [271, "forward-calculation"], [272, "forward-calculation"], [273, "forward-calculation"], [274, "forward-calculation"], [275, "forward-calculation"], [276, "forward-calculation"], [315, "forward-calculation"], [316, "forward-calculation"], [317, "forward-calculation"], [318, "forward-calculation"], [319, "forward-calculation"], [320, "forward-calculation"], [321, "forward-calculation"], [322, "forward-calculation"], [323, "forward-calculation"], [324, "forward-calculation"], [325, "forward-calculation"], [337, "forward-calculation"], [338, "forward-calculation"], [339, "forward-calculation"], [340, "forward-calculation"], [341, "forward-calculation"], [342, "forward-calculation"], [343, "forward-calculation"], [344, "forward-calculation"], [345, "forward-calculation"], [346, "forward-calculation"], [347, "forward-calculation"], [348, "forward-calculation"], [349, "forward-calculation"], [350, "forward-calculation"], [351, "forward-calculation"], [352, "forward-calculation"], [353, "forward-calculation"], [354, "forward-calculation"], [355, "forward-calculation"], [356, "forward-calculation"], [357, "forward-calculation"], [358, "forward-calculation"], [359, "forward-calculation"], [360, "forward-calculation"], [361, "forward-calculation"], [364, "forward-calculation"], [366, "forward-calculation"], [368, "forward-calculation"], [369, "forward-calculation"], [370, "forward-calculation"], [371, "forward-calculation"], [372, "forward-calculation"], [374, "forward-calculation"], [375, "forward-calculation"], [376, "forward-calculation"], [377, "forward-calculation"], [378, "forward-calculation"], [379, "forward-calculation"], [380, "forward-calculation"], [383, "forward-calculation"], [384, "forward-calculation"], [385, "forward-calculation"], [386, "forward-calculation"], [387, "forward-calculation"], [388, "forward-calculation"], [389, "forward-calculation"], [390, "forward-calculation"]], "Forward Method": [[278, "forward-method"], [279, "forward-method"], [280, "forward-method"], [281, "forward-method"], [282, "forward-method"]], "Forward Pass": [[136, "forward-pass"]], "Function Signature": [[12, "function-signature"], [13, "function-signature"], [14, "function-signature"], [16, "function-signature"], [17, "function-signature"], [18, "function-signature"], [19, "function-signature"], [20, "function-signature"], [21, "function-signature"], [22, "function-signature"], [24, "function-signature"], [27, "function-signature"], [28, "function-signature"], [29, "function-signature"], [30, "function-signature"], [31, "function-signature"], [32, "function-signature"], [33, "function-signature"], [34, "function-signature"], [35, "function-signature"], [36, "function-signature"], [37, "function-signature"], [38, "function-signature"], [39, "function-signature"], [41, "function-signature"], [42, "function-signature"], [43, "function-signature"], [44, "function-signature"], [47, "function-signature"], [48, "function-signature"], [49, "function-signature"], [50, "function-signature"], [51, "function-signature"], [52, "function-signature"], [53, "function-signature"], [54, "function-signature"], [55, "function-signature"], [56, "function-signature"], [57, "function-signature"], [58, "function-signature"], [60, "function-signature"], [61, "function-signature"], [62, "function-signature"], [64, "function-signature"], [65, "function-signature"], [66, "function-signature"], [67, "function-signature"], [69, "function-signature"], [70, "function-signature"], [73, "function-signature"], [74, "function-signature"], [75, "function-signature"], [80, "function-signature"], [81, "function-signature"], [82, "function-signature"], [83, "function-signature"], [84, "function-signature"], [85, "function-signature"], [86, "function-signature"], [87, "function-signature"], [88, "function-signature"], [90, "function-signature"], [91, "function-signature"], [92, "function-signature"], [93, "function-signature"], [94, "function-signature"], [95, "function-signature"], [96, "function-signature"], [97, "function-signature"], [99, "function-signature"], [100, "function-signature"], [101, "function-signature"], [102, "function-signature"], [103, "function-signature"], [104, "function-signature"], [105, "function-signature"], [106, "function-signature"], [107, "function-signature"], [108, "function-signature"], [110, "function-signature"], [111, "function-signature"], [112, "function-signature"], [113, "function-signature"], [114, "function-signature"], [115, "function-signature"], [117, "function-signature"], [118, "function-signature"], [119, "function-signature"], [120, "function-signature"], [121, "function-signature"], [122, "function-signature"], [123, "function-signature"], [124, "function-signature"], [125, "function-signature"], [127, "function-signature"], [128, "function-signature"], [129, "function-signature"], [130, "function-signature"], [132, "function-signature"], [133, "function-signature"], [134, "function-signature"], [135, "function-signature"], [137, "function-signature"], [139, "function-signature"], [141, "function-signature"], [151, "function-signature"], [152, "function-signature"], [154, "function-signature"], [155, "function-signature"], [156, "function-signature"], [157, "function-signature"], [158, "function-signature"], [159, "function-signature"], [161, "function-signature"], [162, "function-signature"], [163, "function-signature"], [164, "function-signature"], [166, "function-signature"], [167, "function-signature"], [168, "function-signature"], [169, "function-signature"], [170, "function-signature"], [171, "function-signature"], [172, "function-signature"], [173, "function-signature"], [176, "function-signature"], [178, "function-signature"], [179, "function-signature"], [180, "function-signature"], [181, "function-signature"], [183, "function-signature"], [184, "function-signature"], [185, "function-signature"], [186, "function-signature"], [188, "function-signature"], [189, "function-signature"], [190, "function-signature"], [191, "function-signature"], [192, "function-signature"], [193, "function-signature"], [194, "function-signature"], [195, "function-signature"], [197, "function-signature"], [198, "function-signature"], [199, "function-signature"], [201, "function-signature"], [202, "function-signature"], [212, "function-signature"], [214, "function-signature"], [215, "function-signature"], [216, "function-signature"], [217, "function-signature"], [218, "function-signature"], [219, "function-signature"], [301, "function-signature"], [303, "function-signature"], [304, "function-signature"], [306, "function-signature"], [308, "function-signature"], [309, "function-signature"], [310, "function-signature"], [311, "function-signature"], [312, "function-signature"], [315, "function-signature"], [316, "function-signature"], [317, "function-signature"], [318, "function-signature"], [319, "function-signature"], [320, "function-signature"], [321, "function-signature"], [322, "function-signature"], [323, "function-signature"], [324, "function-signature"], [325, "function-signature"], [326, "function-signature"], [327, "function-signature"], [328, "function-signature"], [329, "function-signature"], [330, "function-signature"], [331, "function-signature"], [332, "function-signature"], [333, "function-signature"], [334, "function-signature"], [335, "function-signature"], [337, "function-signature"], [338, "function-signature"], [339, "function-signature"], [340, "function-signature"], [341, "function-signature"], [342, "function-signature"], [343, "function-signature"], [344, "function-signature"], [345, "function-signature"], [346, "function-signature"], [347, "function-signature"], [348, "function-signature"], [349, "function-signature"], [350, "function-signature"], [351, "function-signature"], [352, "function-signature"], [353, "function-signature"], [354, "function-signature"], [355, "function-signature"], [356, "function-signature"], [357, "function-signature"], [358, "function-signature"], [359, "function-signature"], [360, "function-signature"], [361, "function-signature"], [362, "function-signature"], [363, "function-signature"], [364, "function-signature"], [365, "function-signature"], [366, "function-signature"], [368, "function-signature"], [369, "function-signature"], [370, "function-signature"], [371, "function-signature"], [372, "function-signature"], [373, "function-signature"], [374, "function-signature"], [375, "function-signature"], [376, "function-signature"], [377, "function-signature"], [378, "function-signature"], [379, "function-signature"], [380, "function-signature"]], "Fused Layers": [[211, null]], "Future Work": [[4, "future-work"]], "Getting Started": [[288, "getting-started"]], "How It Works": [[301, "how-it-works"], [303, "how-it-works"]], "Hyperparameter Configuration": [[96, "hyperparameter-configuration"], [97, "hyperparameter-configuration"]], "Image Datasets": [[9, null]], "Image Transformations": [[391, null]], "Inception": [[59, null]], "InceptionNeXt": [[63, null]], "InceptionResNet": [[68, null]], "Indexing and slicing": [[314, null]], "Inspecting Optimizer State": [[288, null], [289, null], [290, null], [291, null], [292, null], [293, null], [294, null], [295, null], [296, null], [297, null], [298, null], [299, null]], "Integration with lucid": [[3, "integration-with-lucid"], [286, "integration-with-lucid"], [313, "integration-with-lucid"], [392, "integration-with-lucid"]], "Iterating through a tensor": [[314, null]], "Key Components": [[3, "key-components"], [286, "key-components"]], "Key Features": [[4, "key-features"], [10, "key-features"], [122, "key-features"], [123, "key-features"], [124, "key-features"], [125, "key-features"], [130, "key-features"], [288, "key-features"], [313, "key-features"]], "Key Transformations": [[392, "key-transformations"]], "Layer Configuration": [[90, "layer-configuration"], [91, "layer-configuration"], [92, "layer-configuration"], [93, "layer-configuration"], [94, "layer-configuration"], [95, "layer-configuration"]], "LeNet": [[72, null]], "Learn More": [[313, null]], "Limitations": [[10, "limitations"]], "Linear Algebra Operations": [[15, null]], "Linear Functions": [[175, null], [177, null]], "Linear Layers": [[248, null], [252, null]], "Loading a custom dataset": [[1, null]], "Loss Functions": [[175, null], [182, null]], "Loss Layers": [[248, null], [258, null]], "Lucid": [[10, null]], "MNIST": [[8, null]], "Mathematical Details": [[233, "mathematical-details"], [278, "mathematical-details"], [279, "mathematical-details"], [280, "mathematical-details"], [281, "mathematical-details"], [282, "mathematical-details"]], "Mathematical Expression": [[186, "mathematical-expression"], [373, "mathematical-expression"]], "Matrix Multiplication Rules": [[319, "matrix-multiplication-rules"]], "Metadata Captured": [[304, "metadata-captured"]], "Methods": [[0, "methods"], [1, "methods"], [2, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [68, "methods"], [72, "methods"], [131, "methods"], [143, "methods"], [144, "methods"], [287, "methods"], [314, "methods"]], "MobileNet": [[76, null]], "MobileNet_V2": [[77, null]], "MobileNet_V3": [[78, null]], "MobileNet_V4": [[79, null]], "Modules": [[248, null]], "Normalization Functions": [[175, null], [187, null]], "Normalization Layers": [[248, null], [267, null]], "Notes": [[10, "notes"]], "Optimizers": [[300, null]], "Organizing Models": [[286, "organizing-models"]], "Overview": [[3, "overview"], [4, "overview"], [10, "overview"], [59, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [68, "overview"], [69, "overview"], [70, "overview"], [72, "overview"], [73, "overview"], [74, "overview"], [75, "overview"], [76, "overview"], [77, "overview"], [78, "overview"], [79, "overview"], [84, "overview"], [85, "overview"], [86, "overview"], [87, "overview"], [88, "overview"], [99, "overview"], [100, "overview"], [101, "overview"], [102, "overview"], [103, "overview"], [104, "overview"], [105, "overview"], [106, "overview"], [117, "overview"], [118, "overview"], [119, "overview"], [120, "overview"], [121, "overview"], [233, "overview"], [278, "overview"], [279, "overview"], [280, "overview"], [281, "overview"], [282, "overview"], [286, "overview"], [288, "overview"], [313, "overview"], [392, "overview"]], "Parameters": [[1, "parameters"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [12, "parameters"], [13, "parameters"], [14, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [56, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [72, "parameters"], [76, "parameters"], [77, "parameters"], [78, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [116, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [124, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [137, "parameters"], [138, "parameters"], [139, "parameters"], [141, "parameters"], [142, "parameters"], [144, "parameters"], [145, "parameters"], [146, "parameters"], [147, "parameters"], [148, "parameters"], [149, "parameters"], [151, "parameters"], [152, "parameters"], [154, "parameters"], [155, "parameters"], [156, "parameters"], [157, "parameters"], [158, "parameters"], [159, "parameters"], [161, "parameters"], [162, "parameters"], [163, "parameters"], [164, "parameters"], [166, "parameters"], [167, "parameters"], [168, "parameters"], [169, "parameters"], [170, "parameters"], [171, "parameters"], [172, "parameters"], [173, "parameters"], [176, "parameters"], [178, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [185, "parameters"], [186, "parameters"], [188, "parameters"], [189, "parameters"], [190, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [194, "parameters"], [195, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [201, "parameters"], [202, "parameters"], [203, "parameters"], [204, "parameters"], [205, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [209, "parameters"], [210, "parameters"], [212, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [218, "parameters"], [219, "parameters"], [220, "parameters"], [221, "parameters"], [224, "parameters"], [225, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [231, "parameters"], [233, "parameters"], [234, "parameters"], [236, "parameters"], [237, "parameters"], [238, "parameters"], [240, "parameters"], [241, "parameters"], [242, "parameters"], [243, "parameters"], [244, "parameters"], [245, "parameters"], [246, "parameters"], [249, "parameters"], [250, "parameters"], [251, "parameters"], [253, "parameters"], [254, "parameters"], [255, "parameters"], [256, "parameters"], [257, "parameters"], [259, "parameters"], [260, "parameters"], [261, "parameters"], [262, "parameters"], [263, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [268, "parameters"], [269, "parameters"], [270, "parameters"], [271, "parameters"], [272, "parameters"], [273, "parameters"], [274, "parameters"], [275, "parameters"], [276, "parameters"], [278, "parameters"], [279, "parameters"], [280, "parameters"], [281, "parameters"], [282, "parameters"], [284, "parameters"], [289, "parameters"], [290, "parameters"], [291, "parameters"], [292, "parameters"], [293, "parameters"], [294, "parameters"], [295, "parameters"], [296, "parameters"], [297, "parameters"], [298, "parameters"], [299, "parameters"], [303, "parameters"], [304, "parameters"], [306, "parameters"], [308, "parameters"], [309, "parameters"], [310, "parameters"], [311, "parameters"], [312, "parameters"], [314, "parameters"], [315, "parameters"], [316, "parameters"], [317, "parameters"], [318, "parameters"], [319, "parameters"], [320, "parameters"], [321, "parameters"], [322, "parameters"], [323, "parameters"], [324, "parameters"], [325, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [330, "parameters"], [331, "parameters"], [332, "parameters"], [333, "parameters"], [334, "parameters"], [335, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [342, "parameters"], [343, "parameters"], [344, "parameters"], [345, "parameters"], [346, "parameters"], [347, "parameters"], [348, "parameters"], [349, "parameters"], [350, "parameters"], [351, "parameters"], [352, "parameters"], [353, "parameters"], [354, "parameters"], [355, "parameters"], [356, "parameters"], [357, "parameters"], [358, "parameters"], [359, "parameters"], [360, "parameters"], [361, "parameters"], [362, "parameters"], [363, "parameters"], [364, "parameters"], [365, "parameters"], [366, "parameters"], [368, "parameters"], [369, "parameters"], [370, "parameters"], [371, "parameters"], [372, "parameters"], [373, "parameters"], [374, "parameters"], [375, "parameters"], [376, "parameters"], [377, "parameters"], [378, "parameters"], [379, "parameters"], [380, "parameters"], [381, "parameters"], [382, "parameters"], [383, "parameters"], [384, "parameters"], [385, "parameters"], [386, "parameters"], [387, "parameters"], [388, "parameters"], [389, "parameters"], [390, "parameters"]], "Performing backpropagation": [[314, null]], "Pooling Functions": [[175, null], [196, null]], "Pooling Layers": [[248, null], [277, null]], "Potential Pitfalls": [[301, "potential-pitfalls"], [303, "potential-pitfalls"]], "Properties": [[144, "properties"], [314, "properties"]], "Raises": [[12, "raises"], [13, "raises"], [14, "raises"], [16, "raises"], [17, "raises"], [18, "raises"], [19, "raises"], [20, "raises"], [21, "raises"], [22, "raises"]], "Random Number Generations": [[307, null]], "References": [[5, "references"], [6, "references"], [7, "references"], [8, "references"], [209, "references"], [288, "references"]], "Regularization": [[168, "regularization"]], "ResNeSt": [[89, null]], "ResNeXt": [[109, null]], "ResNet": [[98, null]], "Return Values": [[373, "return-values"]], "Returns": [[12, "returns"], [13, "returns"], [14, "returns"], [16, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [24, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [44, "returns"], [47, "returns"], [48, "returns"], [49, "returns"], [50, "returns"], [51, "returns"], [52, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [58, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [69, "returns"], [70, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [83, "returns"], [90, "returns"], [91, "returns"], [92, "returns"], [93, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [106, "returns"], [107, "returns"], [108, "returns"], [110, "returns"], [111, "returns"], [112, "returns"], [113, "returns"], [114, "returns"], [115, "returns"], [117, "returns"], [118, "returns"], [119, "returns"], [120, "returns"], [121, "returns"], [122, "returns"], [123, "returns"], [124, "returns"], [125, "returns"], [127, "returns"], [128, "returns"], [129, "returns"], [130, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [137, "returns"], [139, "returns"], [141, "returns"], [151, "returns"], [152, "returns"], [154, "returns"], [155, "returns"], [156, "returns"], [157, "returns"], [158, "returns"], [159, "returns"], [161, "returns"], [162, "returns"], [163, "returns"], [164, "returns"], [166, "returns"], [167, "returns"], [168, "returns"], [169, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [173, "returns"], [176, "returns"], [178, "returns"], [179, "returns"], [180, "returns"], [181, "returns"], [183, "returns"], [184, "returns"], [185, "returns"], [186, "returns"], [188, "returns"], [189, "returns"], [190, "returns"], [191, "returns"], [192, "returns"], [193, "returns"], [194, "returns"], [195, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [201, "returns"], [202, "returns"], [210, "returns"], [212, "returns"], [214, "returns"], [215, "returns"], [216, "returns"], [217, "returns"], [218, "returns"], [219, "returns"], [226, "returns"], [301, "returns"], [303, "returns"], [306, "returns"], [308, "returns"], [309, "returns"], [310, "returns"], [311, "returns"], [312, "returns"], [315, "returns"], [316, "returns"], [317, "returns"], [318, "returns"], [319, "returns"], [320, "returns"], [321, "returns"], [322, "returns"], [323, "returns"], [324, "returns"], [325, "returns"], [326, "returns"], [327, "returns"], [328, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, "returns"], [333, "returns"], [334, "returns"], [335, "returns"], [337, "returns"], [338, "returns"], [339, "returns"], [340, "returns"], [341, "returns"], [342, "returns"], [343, "returns"], [344, "returns"], [345, "returns"], [346, "returns"], [347, "returns"], [348, "returns"], [349, "returns"], [350, "returns"], [351, "returns"], [352, "returns"], [353, "returns"], [354, "returns"], [355, "returns"], [356, "returns"], [357, "returns"], [358, "returns"], [359, "returns"], [360, "returns"], [361, "returns"], [362, "returns"], [363, "returns"], [364, "returns"], [365, "returns"], [366, "returns"], [368, "returns"], [369, "returns"], [370, "returns"], [371, "returns"], [372, "returns"], [374, "returns"], [375, "returns"], [376, "returns"], [377, "returns"], [378, "returns"], [379, "returns"], [380, "returns"]], "SENet": [[116, null]], "SKNet": [[126, null]], "See Also": [[288, "see-also"]], "Selective Kernel": [[211, null]], "Squeeze-and-Excitation": [[211, null]], "Summary Table": [[141, "summary-table"]], "Tensor Generating Functions": [[336, null]], "Tensor Operations": [[336, null]], "Tensor Utilites": [[367, null]], "Transformer Layers": [[248, null], [283, null]], "Type Definitions": [[305, "type-definitions"]], "Unary Functions": [[336, null]], "Usage": [[4, "usage"], [55, "usage"], [56, "usage"], [57, "usage"], [58, "usage"], [142, "usage"], [202, "usage"], [301, "usage"], [302, "usage"], [303, "usage"], [368, "usage"], [381, "usage"], [382, "usage"], [392, "usage"]], "Usage Example": [[84, "usage-example"], [85, "usage-example"], [86, "usage-example"], [87, "usage-example"], [88, "usage-example"], [233, "usage-example"], [278, "usage-example"], [279, "usage-example"], [280, "usage-example"], [281, "usage-example"], [282, "usage-example"]], "Use another Tensor as input": [[362, null]], "Using DataLoader with ConcatDataset": [[1, null]], "Using the ASGD Optimizer": [[289, null]], "Using the Adadelta Optimizer": [[290, null]], "Using the Adagrad Optimizer": [[291, null]], "Using the Adam Optimizer": [[292, null]], "Using the AdamW Optimizer": [[293, null]], "Using the Adamax Optimizer": [[294, null]], "Using the NAdam Optimizer": [[295, null]], "Using the RAdam Optimizer": [[296, null]], "Using the RMSprop Optimizer": [[297, null]], "Using the Rprop Optimizer": [[298, null]], "Using the SGD Optimizer": [[299, null]], "Utility Functions": [[175, null], [200, null]], "VGGNet": [[131, null]], "Vision Layers": [[248, null], [285, null]], "Weight Initializations": [[213, null]], "Why Use Type Aliases?": [[305, null]], "Xception": [[136, null]], "ZFNet": [[138, null]], "alexnet": [[24, null]], "convnext_base": [[27, null]], "convnext_large": [[28, null]], "convnext_small": [[29, null]], "convnext_tiny": [[30, null]], "convnext_v2_atto": [[31, null]], "convnext_v2_base": [[32, null]], "convnext_v2_femto": [[33, null]], "convnext_v2_huge": [[34, null]], "convnext_v2_large": [[35, null]], "convnext_v2_nano": [[36, null]], "convnext_v2_pico": [[37, null]], "convnext_v2_tiny": [[38, null]], "convnext_xlarge": [[39, null]], "data.ConcatDataset": [[0, null]], "data.DataLoader": [[1, null]], "data.Dataset": [[2, null]], "densenet_121": [[41, null]], "densenet_169": [[42, null]], "densenet_201": [[43, null]], "densenet_264": [[44, null]], "efficientnet_b0": [[47, null]], "efficientnet_b1": [[48, null]], "efficientnet_b2": [[49, null]], "efficientnet_b3": [[50, null]], "efficientnet_b4": [[51, null]], "efficientnet_b5": [[52, null]], "efficientnet_b6": [[53, null]], "efficientnet_b7": [[54, null]], "efficientnet_v2_l": [[55, null]], "efficientnet_v2_m": [[56, null]], "efficientnet_v2_s": [[57, null]], "efficientnet_v2_xl": [[58, null]], "inception_next_atto": [[64, null]], "inception_next_base": [[65, null]], "inception_next_small": [[66, null]], "inception_next_tiny": [[67, null]], "inception_resnet_v1": [[69, null]], "inception_resnet_v2": [[70, null]], "inception_v1": [[60, null]], "inception_v3": [[61, null]], "inception_v4": [[62, null]], "lenet_1": [[73, null]], "lenet_4": [[74, null]], "lenet_5": [[75, null]], "lucid.Tensor": [[314, null]], "lucid.abs": [[337, null]], "lucid.add": [[315, null]], "lucid.arange": [[326, null]], "lucid.arccos": [[338, null]], "lucid.arcsin": [[339, null]], "lucid.arctan": [[340, null]], "lucid.broadcast_to": [[363, null]], "lucid.clip": [[341, null]], "lucid.concatenate": [[364, null]], "lucid.cos": [[342, null]], "lucid.cosh": [[343, null]], "lucid.cube": [[344, null]], "lucid.data": [[3, null]], "lucid.datasets": [[4, null]], "lucid.diag": [[327, null]], "lucid.div": [[316, null]], "lucid.dot": [[317, null]], "lucid.empty": [[328, null]], "lucid.empty_like": [[329, null]], "lucid.exp": [[345, null]], "lucid.eye": [[330, null]], "lucid.flatten": [[365, null]], "lucid.grad_enabled": [[301, null]], "lucid.hstack": [[366, null]], "lucid.inner": [[318, null]], "lucid.linalg": [[11, null]], "lucid.linalg.cholesky": [[12, null]], "lucid.linalg.det": [[13, null]], "lucid.linalg.eig": [[14, null]], "lucid.linalg.inv": [[16, null]], "lucid.linalg.matrix_power": [[17, null]], "lucid.linalg.norm": [[18, null]], "lucid.linalg.pinv": [[19, null]], "lucid.linalg.qr": [[20, null]], "lucid.linalg.solve": [[21, null]], "lucid.linalg.svd": [[22, null]], "lucid.linspace": [[331, null]], "lucid.log": [[346, null]], "lucid.matmul": [[319, null]], "lucid.max": [[347, null]], "lucid.maximum": [[320, null]], "lucid.mean": [[348, null]], "lucid.meshgrid": [[368, null]], "lucid.min": [[349, null]], "lucid.minimum": [[321, null]], "lucid.models": [[140, null]], "lucid.mul": [[322, null]], "lucid.newaxis": [[302, null]], "lucid.nn": [[286, null]], "lucid.nn.functional": [[175, null]], "lucid.no_grad": [[303, null]], "lucid.ones": [[332, null]], "lucid.ones_like": [[333, null]], "lucid.optim": [[288, null]], "lucid.outer": [[323, null]], "lucid.pad": [[369, null]], "lucid.power": [[324, null]], "lucid.random": [[313, null]], "lucid.random.bernoulli": [[306, null]], "lucid.random.rand": [[308, null]], "lucid.random.randint": [[309, null]], "lucid.random.randn": [[310, null]], "lucid.random.seed": [[311, null]], "lucid.random.uniform": [[312, null]], "lucid.ravel": [[370, null]], "lucid.reciprocal": [[350, null]], "lucid.register_model": [[304, null]], "lucid.repeat": [[371, null]], "lucid.reshape": [[372, null]], "lucid.sign": [[351, null]], "lucid.sin": [[352, null]], "lucid.sinh": [[353, null]], "lucid.split": [[373, null]], "lucid.sqrt": [[354, null]], "lucid.square": [[355, null]], "lucid.squeeze": [[374, null]], "lucid.stack": [[375, null]], "lucid.sub": [[325, null]], "lucid.sum": [[356, null]], "lucid.tan": [[357, null]], "lucid.tanh": [[358, null]], "lucid.tensor": [[362, null]], "lucid.tile": [[376, null]], "lucid.trace": [[359, null]], "lucid.transforms": [[392, null]], "lucid.transpose": [[360, null]], "lucid.tril": [[377, null]], "lucid.triu": [[378, null]], "lucid.types": [[305, null]], "lucid.unsqueeze": [[379, null]], "lucid.var": [[361, null]], "lucid.vstack": [[380, null]], "lucid.zeros": [[334, null]], "lucid.zeros_like": [[335, null]], "mobilenet": [[80, null]], "mobilenet_v2": [[81, null]], "mobilenet_v3_large": [[82, null]], "mobilenet_v3_small": [[83, null]], "mobilenet_v4_conv_large": [[84, null]], "mobilenet_v4_conv_medium": [[85, null]], "mobilenet_v4_conv_small": [[86, null]], "mobilenet_v4_hybrid_large": [[87, null]], "mobilenet_v4_hybrid_medium": [[88, null]], "models.summarize": [[141, null]], "nn.AdaptiveAvgPool1d": [[268, null]], "nn.AdaptiveAvgPool2d": [[269, null]], "nn.AdaptiveAvgPool3d": [[270, null]], "nn.AlphaDropout": [[240, null]], "nn.AvgPool1d": [[271, null]], "nn.AvgPool2d": [[272, null]], "nn.AvgPool3d": [[273, null]], "nn.BCELoss": [[253, null]], "nn.BatchNorm1d": [[259, null]], "nn.BatchNorm2d": [[260, null]], "nn.BatchNorm3d": [[261, null]], "nn.Bilinear": [[249, null]], "nn.Buffer": [[142, null]], "nn.Conv1d": [[236, null]], "nn.Conv2d": [[237, null]], "nn.Conv3d": [[238, null]], "nn.ConvBNReLU1d": [[203, null]], "nn.ConvBNReLU2d": [[204, null]], "nn.ConvBNReLU3d": [[205, null]], "nn.CrossEntropyLoss": [[254, null]], "nn.DepthSeparableConv1d": [[206, null]], "nn.DepthSeparableConv2d": [[207, null]], "nn.DepthSeparableConv3d": [[208, null]], "nn.DropBlock": [[241, null]], "nn.DropPath": [[242, null]], "nn.Dropout": [[243, null]], "nn.Dropout1d": [[244, null]], "nn.Dropout2d": [[245, null]], "nn.Dropout3d": [[246, null]], "nn.ELU": [[220, null]], "nn.GELU": [[221, null]], "nn.GlobalResponseNorm": [[262, null]], "nn.HardSigmoid": [[222, null]], "nn.HardSwish": [[223, null]], "nn.HuberLoss": [[255, null]], "nn.Identity": [[250, null]], "nn.InstanceNorm1d": [[263, null]], "nn.InstanceNorm2d": [[264, null]], "nn.InstanceNorm3d": [[265, null]], "nn.LayerNorm": [[266, null]], "nn.LeakyReLU": [[224, null]], "nn.Linear": [[251, null]], "nn.MSELoss": [[256, null]], "nn.MaxPool1d": [[274, null]], "nn.MaxPool2d": [[275, null]], "nn.MaxPool3d": [[276, null]], "nn.Module": [[143, null]], "nn.ModuleDict": [[145, null]], "nn.ModuleList": [[146, null]], "nn.MultiHeadAttention": [[233, null]], "nn.NLLLoss": [[257, null]], "nn.Parameter": [[144, null]], "nn.ParameterDict": [[147, null]], "nn.ParameterList": [[148, null]], "nn.ReLU": [[225, null]], "nn.ReLU6": [[226, null]], "nn.SELU": [[227, null]], "nn.SEModule": [[209, null]], "nn.ScaledDotProductAttention": [[234, null]], "nn.SelectiveKernel": [[210, null]], "nn.Sequential": [[149, null]], "nn.Sigmoid": [[228, null]], "nn.Softmax": [[229, null]], "nn.Swish": [[230, null]], "nn.Tanh": [[231, null]], "nn.Transformer": [[278, null]], "nn.TransformerDecoder": [[279, null]], "nn.TransformerDecoderLayer": [[280, null]], "nn.TransformerEncoder": [[281, null]], "nn.TransformerEncoderLayer": [[282, null]], "nn.Upsample": [[284, null]], "nn.functional.adaptive_avg_pool1d": [[190, null]], "nn.functional.adaptive_avg_pool2d": [[191, null]], "nn.functional.adaptive_avg_pool3d": [[192, null]], "nn.functional.alpha_dropout": [[167, null]], "nn.functional.avg_pool1d": [[193, null]], "nn.functional.avg_pool2d": [[194, null]], "nn.functional.avg_pool3d": [[195, null]], "nn.functional.batch_norm": [[185, null]], "nn.functional.bilinear": [[176, null]], "nn.functional.binary_cross_entropy": [[179, null]], "nn.functional.conv1d": [[162, null]], "nn.functional.conv2d": [[163, null]], "nn.functional.conv3d": [[164, null]], "nn.functional.cross_entropy": [[180, null]], "nn.functional.drop_block": [[168, null]], "nn.functional.drop_path": [[169, null]], "nn.functional.dropout": [[170, null]], "nn.functional.dropout1d": [[171, null]], "nn.functional.dropout2d": [[172, null]], "nn.functional.dropout3d": [[173, null]], "nn.functional.elu": [[151, null]], "nn.functional.gelu": [[152, null]], "nn.functional.global_response_norm": [[186, null]], "nn.functional.huber_loss": [[181, null]], "nn.functional.instance_norm": [[188, null]], "nn.functional.interpolate": [[201, null]], "nn.functional.layer_norm": [[189, null]], "nn.functional.leaky_relu": [[154, null]], "nn.functional.linear": [[178, null]], "nn.functional.max_pool1d": [[197, null]], "nn.functional.max_pool2d": [[198, null]], "nn.functional.max_pool3d": [[199, null]], "nn.functional.mse_loss": [[183, null]], "nn.functional.nll_loss": [[184, null]], "nn.functional.relu": [[155, null]], "nn.functional.rotate": [[202, null]], "nn.functional.scaled_dot_product_attention": [[161, null]], "nn.functional.selu": [[156, null]], "nn.functional.sigmoid": [[157, null]], "nn.functional.softmax": [[158, null]], "nn.functional.tanh": [[159, null]], "nn.functional.unfold": [[166, null]], "nn.init.constant": [[212, null]], "nn.init.kaiming_normal": [[214, null]], "nn.init.kaiming_uniform": [[215, null]], "nn.init.normal": [[216, null]], "nn.init.uniform": [[217, null]], "nn.init.xavier_normal": [[218, null]], "nn.init.xavier_uniform": [[219, null]], "optim.ASGD": [[289, null]], "optim.Adadelta": [[290, null]], "optim.Adagrad": [[291, null]], "optim.Adam": [[292, null]], "optim.AdamW": [[293, null]], "optim.Adamax": [[294, null]], "optim.NAdam": [[295, null]], "optim.Optimizer": [[287, null]], "optim.RAdam": [[296, null]], "optim.RMSprop": [[297, null]], "optim.Rprop": [[298, null]], "optim.SGD": [[299, null]], "resnest_101": [[90, null]], "resnest_14": [[91, null]], "resnest_200": [[92, null]], "resnest_26": [[93, null]], "resnest_269": [[94, null]], "resnest_50": [[95, null]], "resnest_50_1s4x24d": [[96, null]], "resnest_50_4s2x40d": [[97, null]], "resnet_1001": [[99, null]], "resnet_101": [[100, null]], "resnet_152": [[101, null]], "resnet_18": [[102, null]], "resnet_200": [[103, null]], "resnet_269": [[104, null]], "resnet_34": [[105, null]], "resnet_50": [[106, null]], "resnext_101_32x16d": [[110, null]], "resnext_101_32x32d": [[111, null]], "resnext_101_32x4d": [[112, null]], "resnext_101_32x8d": [[113, null]], "resnext_101_64x4d": [[114, null]], "resnext_50_32x4d": [[115, null]], "se_resnet_101": [[117, null]], "se_resnet_152": [[118, null]], "se_resnet_18": [[119, null]], "se_resnet_34": [[120, null]], "se_resnet_50": [[121, null]], "se_resnext_101_32x4d": [[122, null]], "se_resnext_101_32x8d": [[123, null]], "se_resnext_101_64x4d": [[124, null]], "se_resnext_50_32x4d": [[125, null]], "sk_resnet_18": [[127, null]], "sk_resnet_34": [[128, null]], "sk_resnet_50": [[129, null]], "sk_resnext_50_32x4d": [[130, null]], "transforms.CenterCrop": [[383, null]], "transforms.Compose": [[381, null]], "transforms.Normalize": [[384, null]], "transforms.RandomCrop": [[385, null]], "transforms.RandomGrayscale": [[386, null]], "transforms.RandomHorizontalFlip": [[387, null]], "transforms.RandomRotation": [[388, null]], "transforms.RandomVerticalFlip": [[389, null]], "transforms.Resize": [[390, null]], "transforms.ToTensor": [[382, null]], "vggnet_11": [[132, null]], "vggnet_13": [[133, null]], "vggnet_16": [[134, null]], "vggnet_19": [[135, null]], "wide_resnet_101": [[107, null]], "wide_resnet_50": [[108, null]], "xception": [[137, null]], "zfnet": [[139, null]]}, "docnames": ["data/ConcatDataset", "data/DataLoader", "data/Dataset", "data/data", "datasets/datasets", "datasets/image/CIFAR10", "datasets/image/CIFAR100", "datasets/image/FashionMNIST", "datasets/image/MNIST", "datasets/image/index", "index", "linalg/linalg", "linalg/operations/cholesky", "linalg/operations/det", "linalg/operations/eig", "linalg/operations/index", "linalg/operations/inv", "linalg/operations/matrix_power", "linalg/operations/norm", "linalg/operations/pinv", "linalg/operations/qr", "linalg/operations/solve", "linalg/operations/svd", "models/conv/alex/AlexNet_", "models/conv/alex/alexnet", "models/conv/convnext/ConvNeXt", "models/conv/convnext/ConvNeXt_V2", "models/conv/convnext/convnext_base", "models/conv/convnext/convnext_large", "models/conv/convnext/convnext_small", "models/conv/convnext/convnext_tiny", "models/conv/convnext/convnext_v2_atto", "models/conv/convnext/convnext_v2_base", "models/conv/convnext/convnext_v2_femto", "models/conv/convnext/convnext_v2_huge", "models/conv/convnext/convnext_v2_large", "models/conv/convnext/convnext_v2_nano", "models/conv/convnext/convnext_v2_pico", "models/conv/convnext/convnext_v2_tiny", "models/conv/convnext/convnext_xlarge", "models/conv/dense/DenseNet", "models/conv/dense/densenet_121", "models/conv/dense/densenet_169", "models/conv/dense/densenet_201", "models/conv/dense/densenet_264", "models/conv/efficient/EfficientNet", "models/conv/efficient/EfficientNet_V2", "models/conv/efficient/efficientnet_b0", "models/conv/efficient/efficientnet_b1", "models/conv/efficient/efficientnet_b2", "models/conv/efficient/efficientnet_b3", "models/conv/efficient/efficientnet_b4", "models/conv/efficient/efficientnet_b5", "models/conv/efficient/efficientnet_b6", "models/conv/efficient/efficientnet_b7", "models/conv/efficient/efficientnet_v2_l", "models/conv/efficient/efficientnet_v2_m", "models/conv/efficient/efficientnet_v2_s", "models/conv/efficient/efficientnet_v2_xl", "models/conv/inception/Inception", "models/conv/inception/inception_v1", "models/conv/inception/inception_v3", "models/conv/inception/inception_v4", "models/conv/inception_next/InceptionNeXt", "models/conv/inception_next/inception_next_atto", "models/conv/inception_next/inception_next_base", "models/conv/inception_next/inception_next_small", "models/conv/inception_next/inception_next_tiny", "models/conv/inception_res/InceptionResNet", "models/conv/inception_res/inception_resnet_v1", "models/conv/inception_res/inception_resnet_v2", "models/conv/index", "models/conv/lenet/LeNet", "models/conv/lenet/lenet_1", "models/conv/lenet/lenet_4", "models/conv/lenet/lenet_5", "models/conv/mobile/MobileNet_", "models/conv/mobile/MobileNet_V2_", "models/conv/mobile/MobileNet_V3", "models/conv/mobile/MobileNet_V4", "models/conv/mobile/mobilenet", "models/conv/mobile/mobilenet_v2", "models/conv/mobile/mobilenet_v3_large", "models/conv/mobile/mobilenet_v3_small", "models/conv/mobile/mobilenet_v4_conv_large", "models/conv/mobile/mobilenet_v4_conv_medium", "models/conv/mobile/mobilenet_v4_conv_small", "models/conv/mobile/mobilenet_v4_hybrid_large", "models/conv/mobile/mobilenet_v4_hybrid_medium", "models/conv/resnest/ResNeSt", "models/conv/resnest/resnest_101", "models/conv/resnest/resnest_14", "models/conv/resnest/resnest_200", "models/conv/resnest/resnest_26", "models/conv/resnest/resnest_269", "models/conv/resnest/resnest_50", "models/conv/resnest/resnest_50_1s4x24d", "models/conv/resnest/resnest_50_4s2x40d", "models/conv/resnet/ResNet", "models/conv/resnet/resnet_1001", "models/conv/resnet/resnet_101", "models/conv/resnet/resnet_152", "models/conv/resnet/resnet_18", "models/conv/resnet/resnet_200", "models/conv/resnet/resnet_269", "models/conv/resnet/resnet_34", "models/conv/resnet/resnet_50", "models/conv/resnet/wide_resnet_101", "models/conv/resnet/wide_resnet_50", "models/conv/resnext/ResNeXt", "models/conv/resnext/resnext_101_32x16d", "models/conv/resnext/resnext_101_32x32d", "models/conv/resnext/resnext_101_32x4d", "models/conv/resnext/resnext_101_32x8d", "models/conv/resnext/resnext_101_64x4d", "models/conv/resnext/resnext_50_32x4d", "models/conv/senet/SENet", "models/conv/senet/se_resnet_101", "models/conv/senet/se_resnet_152", "models/conv/senet/se_resnet_18", "models/conv/senet/se_resnet_34", "models/conv/senet/se_resnet_50", "models/conv/senet/se_resnext_101_32x4d", "models/conv/senet/se_resnext_101_32x8d", "models/conv/senet/se_resnext_101_64x4d", "models/conv/senet/se_resnext_50_32x4d", "models/conv/sknet/SKNet", "models/conv/sknet/sk_resnet_18", "models/conv/sknet/sk_resnet_34", "models/conv/sknet/sk_resnet_50", "models/conv/sknet/sk_resnext_50_32x4d", "models/conv/vgg/VGGNet", "models/conv/vgg/vggnet_11", "models/conv/vgg/vggnet_13", "models/conv/vgg/vggnet_16", "models/conv/vgg/vggnet_19", "models/conv/xception/Xception_", "models/conv/xception/xception", "models/conv/zfnet/ZFNet_", "models/conv/zfnet/zfnet", "models/models", "models/summarize", "nn/Buffer", "nn/Module", "nn/Parameter", "nn/containers/ModuleDict", "nn/containers/ModuleList", "nn/containers/ParameterDict", "nn/containers/ParameterList", "nn/containers/Sequential", "nn/containers/index", "nn/functions/activation/elu", "nn/functions/activation/gelu", "nn/functions/activation/index", "nn/functions/activation/leaky_relu", "nn/functions/activation/relu", "nn/functions/activation/selu", "nn/functions/activation/sigmoid", "nn/functions/activation/softmax", "nn/functions/activation/tanh", "nn/functions/attention/index", "nn/functions/attention/scaled_dot_product_attention", "nn/functions/conv/conv1d", "nn/functions/conv/conv2d", "nn/functions/conv/conv3d", "nn/functions/conv/index", "nn/functions/conv/unfold", "nn/functions/drop/alpha_dropout", "nn/functions/drop/drop_block", "nn/functions/drop/drop_path", "nn/functions/drop/dropout", "nn/functions/drop/dropout1d", "nn/functions/drop/dropout2d", "nn/functions/drop/dropout3d", "nn/functions/drop/index", "nn/functions/index", "nn/functions/linear/bilinear", "nn/functions/linear/index", "nn/functions/linear/linear", "nn/functions/loss/binary_cross_entropy", "nn/functions/loss/cross_entropy", "nn/functions/loss/huber_loss", "nn/functions/loss/index", "nn/functions/loss/mse_loss", "nn/functions/loss/nll_loss", "nn/functions/norm/batch_norm", "nn/functions/norm/global_response_norm", "nn/functions/norm/index", "nn/functions/norm/instance_norm", "nn/functions/norm/layer_norm", "nn/functions/pool/adaptive_avg_pool1d", "nn/functions/pool/adaptive_avg_pool2d", "nn/functions/pool/adaptive_avg_pool3d", "nn/functions/pool/avg_pool1d", "nn/functions/pool/avg_pool2d", "nn/functions/pool/avg_pool3d", "nn/functions/pool/index", "nn/functions/pool/max_pool1d", "nn/functions/pool/max_pool2d", "nn/functions/pool/max_pool3d", "nn/functions/util/index", "nn/functions/util/interpolate", "nn/functions/util/rotate", "nn/fused/ConvBNReLU1d", "nn/fused/ConvBNReLU2d", "nn/fused/ConvBNReLU3d", "nn/fused/DepthSeparableConv1d", "nn/fused/DepthSeparableConv2d", "nn/fused/DepthSeparableConv3d", "nn/fused/SEModule", "nn/fused/SelectiveKernel", "nn/fused/index", "nn/init/constant", "nn/init/index", "nn/init/kaiming_normal", "nn/init/kaiming_uniform", "nn/init/normal", "nn/init/uniform", "nn/init/xavier_normal", "nn/init/xavier_uniform", "nn/modules/activation/ELU", "nn/modules/activation/GELU", "nn/modules/activation/HardSigmoid", "nn/modules/activation/HardSwish", "nn/modules/activation/LeakyReLU", "nn/modules/activation/ReLU", "nn/modules/activation/ReLU6", "nn/modules/activation/SELU", "nn/modules/activation/Sigmoid", "nn/modules/activation/Softmax", "nn/modules/activation/Swish", "nn/modules/activation/Tanh", "nn/modules/activation/index", "nn/modules/attention/MultiHeadAttention", "nn/modules/attention/ScaledDotProductAttention", "nn/modules/attention/index", "nn/modules/conv/Conv1d", "nn/modules/conv/Conv2d", "nn/modules/conv/Conv3d", "nn/modules/conv/index", "nn/modules/drop/AlphaDropout", "nn/modules/drop/DropBlock", "nn/modules/drop/DropPath", "nn/modules/drop/Dropout", "nn/modules/drop/Dropout1d", "nn/modules/drop/Dropout2d", "nn/modules/drop/Dropout3d", "nn/modules/drop/index", "nn/modules/index", "nn/modules/linear/Bilinear", "nn/modules/linear/Identity", "nn/modules/linear/Linear", "nn/modules/linear/index", "nn/modules/loss/BCELoss", "nn/modules/loss/CrossEntropyLoss", "nn/modules/loss/HuberLoss", "nn/modules/loss/MSELoss", "nn/modules/loss/NLLLoss", "nn/modules/loss/index", "nn/modules/norm/BatchNorm1d", "nn/modules/norm/BatchNorm2d", "nn/modules/norm/BatchNorm3d", "nn/modules/norm/GlobalResponseNorm", "nn/modules/norm/InstanceNorm1d", "nn/modules/norm/InstanceNorm2d", "nn/modules/norm/InstanceNorm3d", "nn/modules/norm/LayerNorm", "nn/modules/norm/index", "nn/modules/pool/AdaptiveAvgPool1d", "nn/modules/pool/AdaptiveAvgPool2d", "nn/modules/pool/AdaptiveAvgPool3d", "nn/modules/pool/AvgPool1d", "nn/modules/pool/AvgPool2d", "nn/modules/pool/AvgPool3d", "nn/modules/pool/MaxPool1d", "nn/modules/pool/MaxPool2d", "nn/modules/pool/MaxPool3d", "nn/modules/pool/index", "nn/modules/transformer/Transformer", "nn/modules/transformer/TransformerDecoder", "nn/modules/transformer/TransformerDecoderLayer", "nn/modules/transformer/TransformerEncoder", "nn/modules/transformer/TransformerEncoderLayer", "nn/modules/transformer/index", "nn/modules/vision/Upsample", "nn/modules/vision/index", "nn/nn", "optim/Optimizer", "optim/optim", "optim/optimizers/ASGD", "optim/optimizers/Adadelta", "optim/optimizers/Adagrad", "optim/optimizers/Adam", "optim/optimizers/AdamW", "optim/optimizers/Adamax", "optim/optimizers/NAdam", "optim/optimizers/RAdam", "optim/optimizers/RMSprop", "optim/optimizers/Rprop", "optim/optimizers/SGD", "optim/optimizers/index", "others/grad_enabled", "others/newaxis", "others/no_grad", "others/register_model", "others/types", "random/functions/bernoulli", "random/functions/index", "random/functions/rand", "random/functions/randint", "random/functions/randn", "random/functions/seed", "random/functions/uniform", "random/random", "tensor/Tensor_", "tensor/operations/bfunc/add", "tensor/operations/bfunc/div", "tensor/operations/bfunc/dot", "tensor/operations/bfunc/inner", "tensor/operations/bfunc/matmul", "tensor/operations/bfunc/maximum", "tensor/operations/bfunc/minimum", "tensor/operations/bfunc/mul", "tensor/operations/bfunc/outer", "tensor/operations/bfunc/power", "tensor/operations/bfunc/sub", "tensor/operations/gfunc/arange", "tensor/operations/gfunc/diag", "tensor/operations/gfunc/empty", "tensor/operations/gfunc/empty_like", "tensor/operations/gfunc/eye", "tensor/operations/gfunc/linspace", "tensor/operations/gfunc/ones", "tensor/operations/gfunc/ones_like", "tensor/operations/gfunc/zeros", "tensor/operations/gfunc/zeros_like", "tensor/operations/index", "tensor/operations/ufunc/abs", "tensor/operations/ufunc/arccos", "tensor/operations/ufunc/arcsin", "tensor/operations/ufunc/arctan", "tensor/operations/ufunc/clip", "tensor/operations/ufunc/cos", "tensor/operations/ufunc/cosh", "tensor/operations/ufunc/cube", "tensor/operations/ufunc/exp", "tensor/operations/ufunc/log", "tensor/operations/ufunc/max", "tensor/operations/ufunc/mean", "tensor/operations/ufunc/min", "tensor/operations/ufunc/reciprocal", "tensor/operations/ufunc/sign", "tensor/operations/ufunc/sin", "tensor/operations/ufunc/sinh", "tensor/operations/ufunc/sqrt", "tensor/operations/ufunc/square", "tensor/operations/ufunc/sum", "tensor/operations/ufunc/tan", "tensor/operations/ufunc/tanh", "tensor/operations/ufunc/trace", "tensor/operations/ufunc/transpose", "tensor/operations/ufunc/var", "tensor/tensor", "tensor/utilities/broadcast_to", "tensor/utilities/concatenate", "tensor/utilities/flatten", "tensor/utilities/hstack", "tensor/utilities/index", "tensor/utilities/meshgrid", "tensor/utilities/pad", "tensor/utilities/ravel", "tensor/utilities/repeat", "tensor/utilities/reshape", "tensor/utilities/split", "tensor/utilities/squeeze", "tensor/utilities/stack", "tensor/utilities/tile", "tensor/utilities/tril", "tensor/utilities/triu", "tensor/utilities/unsqueeze", "tensor/utilities/vstack", "transforms/Compose", "transforms/ToTensor", "transforms/image/CenterCrop", "transforms/image/Normalize", "transforms/image/RandomCrop", "transforms/image/RandomGrayscale", "transforms/image/RandomHorizontalFlip", "transforms/image/RandomRotation", "transforms/image/RandomVerticalFlip", "transforms/image/Resize", "transforms/image/index", "transforms/transforms"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["data/ConcatDataset.rst", "data/DataLoader.rst", "data/Dataset.rst", "data/data.rst", "datasets/datasets.rst", "datasets/image/CIFAR10.rst", "datasets/image/CIFAR100.rst", "datasets/image/FashionMNIST.rst", "datasets/image/MNIST.rst", "datasets/image/index.rst", "index.rst", "linalg/linalg.rst", "linalg/operations/cholesky.rst", "linalg/operations/det.rst", "linalg/operations/eig.rst", "linalg/operations/index.rst", "linalg/operations/inv.rst", "linalg/operations/matrix_power.rst", "linalg/operations/norm.rst", "linalg/operations/pinv.rst", "linalg/operations/qr.rst", "linalg/operations/solve.rst", "linalg/operations/svd.rst", "models/conv/alex/AlexNet_.rst", "models/conv/alex/alexnet.rst", "models/conv/convnext/ConvNeXt.rst", "models/conv/convnext/ConvNeXt_V2.rst", "models/conv/convnext/convnext_base.rst", "models/conv/convnext/convnext_large.rst", "models/conv/convnext/convnext_small.rst", "models/conv/convnext/convnext_tiny.rst", "models/conv/convnext/convnext_v2_atto.rst", "models/conv/convnext/convnext_v2_base.rst", "models/conv/convnext/convnext_v2_femto.rst", "models/conv/convnext/convnext_v2_huge.rst", "models/conv/convnext/convnext_v2_large.rst", "models/conv/convnext/convnext_v2_nano.rst", "models/conv/convnext/convnext_v2_pico.rst", "models/conv/convnext/convnext_v2_tiny.rst", "models/conv/convnext/convnext_xlarge.rst", "models/conv/dense/DenseNet.rst", "models/conv/dense/densenet_121.rst", "models/conv/dense/densenet_169.rst", "models/conv/dense/densenet_201.rst", "models/conv/dense/densenet_264.rst", "models/conv/efficient/EfficientNet.rst", "models/conv/efficient/EfficientNet_V2.rst", "models/conv/efficient/efficientnet_b0.rst", "models/conv/efficient/efficientnet_b1.rst", "models/conv/efficient/efficientnet_b2.rst", "models/conv/efficient/efficientnet_b3.rst", "models/conv/efficient/efficientnet_b4.rst", "models/conv/efficient/efficientnet_b5.rst", "models/conv/efficient/efficientnet_b6.rst", "models/conv/efficient/efficientnet_b7.rst", "models/conv/efficient/efficientnet_v2_l.rst", "models/conv/efficient/efficientnet_v2_m.rst", "models/conv/efficient/efficientnet_v2_s.rst", "models/conv/efficient/efficientnet_v2_xl.rst", "models/conv/inception/Inception.rst", "models/conv/inception/inception_v1.rst", "models/conv/inception/inception_v3.rst", "models/conv/inception/inception_v4.rst", "models/conv/inception_next/InceptionNeXt.rst", "models/conv/inception_next/inception_next_atto.rst", "models/conv/inception_next/inception_next_base.rst", "models/conv/inception_next/inception_next_small.rst", "models/conv/inception_next/inception_next_tiny.rst", "models/conv/inception_res/InceptionResNet.rst", "models/conv/inception_res/inception_resnet_v1.rst", "models/conv/inception_res/inception_resnet_v2.rst", "models/conv/index.rst", "models/conv/lenet/LeNet.rst", "models/conv/lenet/lenet_1.rst", "models/conv/lenet/lenet_4.rst", "models/conv/lenet/lenet_5.rst", "models/conv/mobile/MobileNet_.rst", "models/conv/mobile/MobileNet_V2_.rst", "models/conv/mobile/MobileNet_V3.rst", "models/conv/mobile/MobileNet_V4.rst", "models/conv/mobile/mobilenet.rst", "models/conv/mobile/mobilenet_v2.rst", "models/conv/mobile/mobilenet_v3_large.rst", "models/conv/mobile/mobilenet_v3_small.rst", "models/conv/mobile/mobilenet_v4_conv_large.rst", "models/conv/mobile/mobilenet_v4_conv_medium.rst", "models/conv/mobile/mobilenet_v4_conv_small.rst", "models/conv/mobile/mobilenet_v4_hybrid_large.rst", "models/conv/mobile/mobilenet_v4_hybrid_medium.rst", "models/conv/resnest/ResNeSt.rst", "models/conv/resnest/resnest_101.rst", "models/conv/resnest/resnest_14.rst", "models/conv/resnest/resnest_200.rst", "models/conv/resnest/resnest_26.rst", "models/conv/resnest/resnest_269.rst", "models/conv/resnest/resnest_50.rst", "models/conv/resnest/resnest_50_1s4x24d.rst", "models/conv/resnest/resnest_50_4s2x40d.rst", "models/conv/resnet/ResNet.rst", "models/conv/resnet/resnet_1001.rst", "models/conv/resnet/resnet_101.rst", "models/conv/resnet/resnet_152.rst", "models/conv/resnet/resnet_18.rst", "models/conv/resnet/resnet_200.rst", "models/conv/resnet/resnet_269.rst", "models/conv/resnet/resnet_34.rst", "models/conv/resnet/resnet_50.rst", "models/conv/resnet/wide_resnet_101.rst", "models/conv/resnet/wide_resnet_50.rst", "models/conv/resnext/ResNeXt.rst", "models/conv/resnext/resnext_101_32x16d.rst", "models/conv/resnext/resnext_101_32x32d.rst", "models/conv/resnext/resnext_101_32x4d.rst", "models/conv/resnext/resnext_101_32x8d.rst", "models/conv/resnext/resnext_101_64x4d.rst", "models/conv/resnext/resnext_50_32x4d.rst", "models/conv/senet/SENet.rst", "models/conv/senet/se_resnet_101.rst", "models/conv/senet/se_resnet_152.rst", "models/conv/senet/se_resnet_18.rst", "models/conv/senet/se_resnet_34.rst", "models/conv/senet/se_resnet_50.rst", "models/conv/senet/se_resnext_101_32x4d.rst", "models/conv/senet/se_resnext_101_32x8d.rst", "models/conv/senet/se_resnext_101_64x4d.rst", "models/conv/senet/se_resnext_50_32x4d.rst", "models/conv/sknet/SKNet.rst", "models/conv/sknet/sk_resnet_18.rst", "models/conv/sknet/sk_resnet_34.rst", "models/conv/sknet/sk_resnet_50.rst", "models/conv/sknet/sk_resnext_50_32x4d.rst", "models/conv/vgg/VGGNet.rst", "models/conv/vgg/vggnet_11.rst", "models/conv/vgg/vggnet_13.rst", "models/conv/vgg/vggnet_16.rst", "models/conv/vgg/vggnet_19.rst", "models/conv/xception/Xception_.rst", "models/conv/xception/xception.rst", "models/conv/zfnet/ZFNet_.rst", "models/conv/zfnet/zfnet.rst", "models/models.rst", "models/summarize.rst", "nn/Buffer.rst", "nn/Module.rst", "nn/Parameter.rst", "nn/containers/ModuleDict.rst", "nn/containers/ModuleList.rst", "nn/containers/ParameterDict.rst", "nn/containers/ParameterList.rst", "nn/containers/Sequential.rst", "nn/containers/index.rst", "nn/functions/activation/elu.rst", "nn/functions/activation/gelu.rst", "nn/functions/activation/index.rst", "nn/functions/activation/leaky_relu.rst", "nn/functions/activation/relu.rst", "nn/functions/activation/selu.rst", "nn/functions/activation/sigmoid.rst", "nn/functions/activation/softmax.rst", "nn/functions/activation/tanh.rst", "nn/functions/attention/index.rst", "nn/functions/attention/scaled_dot_product_attention.rst", "nn/functions/conv/conv1d.rst", "nn/functions/conv/conv2d.rst", "nn/functions/conv/conv3d.rst", "nn/functions/conv/index.rst", "nn/functions/conv/unfold.rst", "nn/functions/drop/alpha_dropout.rst", "nn/functions/drop/drop_block.rst", "nn/functions/drop/drop_path.rst", "nn/functions/drop/dropout.rst", "nn/functions/drop/dropout1d.rst", "nn/functions/drop/dropout2d.rst", "nn/functions/drop/dropout3d.rst", "nn/functions/drop/index.rst", "nn/functions/index.rst", "nn/functions/linear/bilinear.rst", "nn/functions/linear/index.rst", "nn/functions/linear/linear.rst", "nn/functions/loss/binary_cross_entropy.rst", "nn/functions/loss/cross_entropy.rst", "nn/functions/loss/huber_loss.rst", "nn/functions/loss/index.rst", "nn/functions/loss/mse_loss.rst", "nn/functions/loss/nll_loss.rst", "nn/functions/norm/batch_norm.rst", "nn/functions/norm/global_response_norm.rst", "nn/functions/norm/index.rst", "nn/functions/norm/instance_norm.rst", "nn/functions/norm/layer_norm.rst", "nn/functions/pool/adaptive_avg_pool1d.rst", "nn/functions/pool/adaptive_avg_pool2d.rst", "nn/functions/pool/adaptive_avg_pool3d.rst", "nn/functions/pool/avg_pool1d.rst", "nn/functions/pool/avg_pool2d.rst", "nn/functions/pool/avg_pool3d.rst", "nn/functions/pool/index.rst", "nn/functions/pool/max_pool1d.rst", "nn/functions/pool/max_pool2d.rst", "nn/functions/pool/max_pool3d.rst", "nn/functions/util/index.rst", "nn/functions/util/interpolate.rst", "nn/functions/util/rotate.rst", "nn/fused/ConvBNReLU1d.rst", "nn/fused/ConvBNReLU2d.rst", "nn/fused/ConvBNReLU3d.rst", "nn/fused/DepthSeparableConv1d.rst", "nn/fused/DepthSeparableConv2d.rst", "nn/fused/DepthSeparableConv3d.rst", "nn/fused/SEModule.rst", "nn/fused/SelectiveKernel.rst", "nn/fused/index.rst", "nn/init/constant.rst", "nn/init/index.rst", "nn/init/kaiming_normal.rst", "nn/init/kaiming_uniform.rst", "nn/init/normal.rst", "nn/init/uniform.rst", "nn/init/xavier_normal.rst", "nn/init/xavier_uniform.rst", "nn/modules/activation/ELU.rst", "nn/modules/activation/GELU.rst", "nn/modules/activation/HardSigmoid.rst", "nn/modules/activation/HardSwish.rst", "nn/modules/activation/LeakyReLU.rst", "nn/modules/activation/ReLU.rst", "nn/modules/activation/ReLU6.rst", "nn/modules/activation/SELU.rst", "nn/modules/activation/Sigmoid.rst", "nn/modules/activation/Softmax.rst", "nn/modules/activation/Swish.rst", "nn/modules/activation/Tanh.rst", "nn/modules/activation/index.rst", "nn/modules/attention/MultiHeadAttention.rst", "nn/modules/attention/ScaledDotProductAttention.rst", "nn/modules/attention/index.rst", "nn/modules/conv/Conv1d.rst", "nn/modules/conv/Conv2d.rst", "nn/modules/conv/Conv3d.rst", "nn/modules/conv/index.rst", "nn/modules/drop/AlphaDropout.rst", "nn/modules/drop/DropBlock.rst", "nn/modules/drop/DropPath.rst", "nn/modules/drop/Dropout.rst", "nn/modules/drop/Dropout1d.rst", "nn/modules/drop/Dropout2d.rst", "nn/modules/drop/Dropout3d.rst", "nn/modules/drop/index.rst", "nn/modules/index.rst", "nn/modules/linear/Bilinear.rst", "nn/modules/linear/Identity.rst", "nn/modules/linear/Linear.rst", "nn/modules/linear/index.rst", "nn/modules/loss/BCELoss.rst", "nn/modules/loss/CrossEntropyLoss.rst", "nn/modules/loss/HuberLoss.rst", "nn/modules/loss/MSELoss.rst", "nn/modules/loss/NLLLoss.rst", "nn/modules/loss/index.rst", "nn/modules/norm/BatchNorm1d.rst", "nn/modules/norm/BatchNorm2d.rst", "nn/modules/norm/BatchNorm3d.rst", "nn/modules/norm/GlobalResponseNorm.rst", "nn/modules/norm/InstanceNorm1d.rst", "nn/modules/norm/InstanceNorm2d.rst", "nn/modules/norm/InstanceNorm3d.rst", "nn/modules/norm/LayerNorm.rst", "nn/modules/norm/index.rst", "nn/modules/pool/AdaptiveAvgPool1d.rst", "nn/modules/pool/AdaptiveAvgPool2d.rst", "nn/modules/pool/AdaptiveAvgPool3d.rst", "nn/modules/pool/AvgPool1d.rst", "nn/modules/pool/AvgPool2d.rst", "nn/modules/pool/AvgPool3d.rst", "nn/modules/pool/MaxPool1d.rst", "nn/modules/pool/MaxPool2d.rst", "nn/modules/pool/MaxPool3d.rst", "nn/modules/pool/index.rst", "nn/modules/transformer/Transformer.rst", "nn/modules/transformer/TransformerDecoder.rst", "nn/modules/transformer/TransformerDecoderLayer.rst", "nn/modules/transformer/TransformerEncoder.rst", "nn/modules/transformer/TransformerEncoderLayer.rst", "nn/modules/transformer/index.rst", "nn/modules/vision/Upsample.rst", "nn/modules/vision/index.rst", "nn/nn.rst", "optim/Optimizer.rst", "optim/optim.rst", "optim/optimizers/ASGD.rst", "optim/optimizers/Adadelta.rst", "optim/optimizers/Adagrad.rst", "optim/optimizers/Adam.rst", "optim/optimizers/AdamW.rst", "optim/optimizers/Adamax.rst", "optim/optimizers/NAdam.rst", "optim/optimizers/RAdam.rst", "optim/optimizers/RMSprop.rst", "optim/optimizers/Rprop.rst", "optim/optimizers/SGD.rst", "optim/optimizers/index.rst", "others/grad_enabled.rst", "others/newaxis.rst", "others/no_grad.rst", "others/register_model.rst", "others/types.rst", "random/functions/bernoulli.rst", "random/functions/index.rst", "random/functions/rand.rst", "random/functions/randint.rst", "random/functions/randn.rst", "random/functions/seed.rst", "random/functions/uniform.rst", "random/random.rst", "tensor/Tensor_.rst", "tensor/operations/bfunc/add.rst", "tensor/operations/bfunc/div.rst", "tensor/operations/bfunc/dot.rst", "tensor/operations/bfunc/inner.rst", "tensor/operations/bfunc/matmul.rst", "tensor/operations/bfunc/maximum.rst", "tensor/operations/bfunc/minimum.rst", "tensor/operations/bfunc/mul.rst", "tensor/operations/bfunc/outer.rst", "tensor/operations/bfunc/power.rst", "tensor/operations/bfunc/sub.rst", "tensor/operations/gfunc/arange.rst", "tensor/operations/gfunc/diag.rst", "tensor/operations/gfunc/empty.rst", "tensor/operations/gfunc/empty_like.rst", "tensor/operations/gfunc/eye.rst", "tensor/operations/gfunc/linspace.rst", "tensor/operations/gfunc/ones.rst", "tensor/operations/gfunc/ones_like.rst", "tensor/operations/gfunc/zeros.rst", "tensor/operations/gfunc/zeros_like.rst", "tensor/operations/index.rst", "tensor/operations/ufunc/abs.rst", "tensor/operations/ufunc/arccos.rst", "tensor/operations/ufunc/arcsin.rst", "tensor/operations/ufunc/arctan.rst", "tensor/operations/ufunc/clip.rst", "tensor/operations/ufunc/cos.rst", "tensor/operations/ufunc/cosh.rst", "tensor/operations/ufunc/cube.rst", "tensor/operations/ufunc/exp.rst", "tensor/operations/ufunc/log.rst", "tensor/operations/ufunc/max.rst", "tensor/operations/ufunc/mean.rst", "tensor/operations/ufunc/min.rst", "tensor/operations/ufunc/reciprocal.rst", "tensor/operations/ufunc/sign.rst", "tensor/operations/ufunc/sin.rst", "tensor/operations/ufunc/sinh.rst", "tensor/operations/ufunc/sqrt.rst", "tensor/operations/ufunc/square.rst", "tensor/operations/ufunc/sum.rst", "tensor/operations/ufunc/tan.rst", "tensor/operations/ufunc/tanh.rst", "tensor/operations/ufunc/trace.rst", "tensor/operations/ufunc/transpose.rst", "tensor/operations/ufunc/var.rst", "tensor/tensor.rst", "tensor/utilities/broadcast_to.rst", "tensor/utilities/concatenate.rst", "tensor/utilities/flatten.rst", "tensor/utilities/hstack.rst", "tensor/utilities/index.rst", "tensor/utilities/meshgrid.rst", "tensor/utilities/pad.rst", "tensor/utilities/ravel.rst", "tensor/utilities/repeat.rst", "tensor/utilities/reshape.rst", "tensor/utilities/split.rst", "tensor/utilities/squeeze.rst", "tensor/utilities/stack.rst", "tensor/utilities/tile.rst", "tensor/utilities/tril.rst", "tensor/utilities/triu.rst", "tensor/utilities/unsqueeze.rst", "tensor/utilities/vstack.rst", "transforms/Compose.rst", "transforms/ToTensor.rst", "transforms/image/CenterCrop.rst", "transforms/image/Normalize.rst", "transforms/image/RandomCrop.rst", "transforms/image/RandomGrayscale.rst", "transforms/image/RandomHorizontalFlip.rst", "transforms/image/RandomRotation.rst", "transforms/image/RandomVerticalFlip.rst", "transforms/image/Resize.rst", "transforms/image/index.rst", "transforms/transforms.rst"], "indexentries": {"abs() (in module lucid)": [[337, "lucid.abs", false]], "adadelta (class in lucid.optim)": [[290, "lucid.optim.Adadelta", false]], "adagrad (class in lucid.optim)": [[291, "lucid.optim.Adagrad", false]], "adam (class in lucid.optim)": [[292, "lucid.optim.Adam", false]], "adamax (class in lucid.optim)": [[294, "lucid.optim.Adamax", false]], "adamw (class in lucid.optim)": [[293, "lucid.optim.AdamW", false]], "adaptive_avg_pool1d() (in module lucid.nn.functional)": [[190, "lucid.nn.functional.adaptive_avg_pool1d", false]], "adaptive_avg_pool2d() (in module lucid.nn.functional)": [[191, "lucid.nn.functional.adaptive_avg_pool2d", false]], "adaptive_avg_pool3d() (in module lucid.nn.functional)": [[192, "lucid.nn.functional.adaptive_avg_pool3d", false]], "adaptiveavgpool1d (class in lucid.nn)": [[268, "lucid.nn.AdaptiveAvgPool1d", false]], "adaptiveavgpool2d (class in lucid.nn)": [[269, "lucid.nn.AdaptiveAvgPool2d", false]], "adaptiveavgpool3d (class in lucid.nn)": [[270, "lucid.nn.AdaptiveAvgPool3d", false]], "add() (in module lucid)": [[315, "lucid.add", false]], "alexnet (class in lucid.models)": [[23, "lucid.models.AlexNet", false]], "alexnet() (in module lucid.models)": [[24, "lucid.models.alexnet", false]], "alpha_dropout() (in module lucid.nn.functional)": [[167, "lucid.nn.functional.alpha_dropout", false]], "alphadropout (class in lucid.nn)": [[240, "lucid.nn.AlphaDropout", false]], "arange() (in module lucid)": [[326, "lucid.arange", false]], "arccos() (in module lucid)": [[338, "lucid.arccos", false]], "arcsin() (in module lucid)": [[339, "lucid.arcsin", false]], "arctan() (in module lucid)": [[340, "lucid.arctan", false]], "asgd (class in lucid.optim)": [[289, "lucid.optim.ASGD", false]], "avg_pool1d() (in module lucid.nn.functional)": [[193, "lucid.nn.functional.avg_pool1d", false]], "avg_pool2d() (in module lucid.nn.functional)": [[194, "lucid.nn.functional.avg_pool2d", false]], "avg_pool3d() (in module lucid.nn.functional)": [[195, "lucid.nn.functional.avg_pool3d", false]], "avgpool1d (class in lucid.nn)": [[271, "lucid.nn.AvgPool1d", false]], "avgpool2d (class in lucid.nn)": [[272, "lucid.nn.AvgPool2d", false]], "avgpool3d (class in lucid.nn)": [[273, "lucid.nn.AvgPool3d", false]], "batch_norm() (in module lucid.nn.functional)": [[185, "lucid.nn.functional.batch_norm", false]], "batchnorm1d (class in lucid.nn)": [[259, "lucid.nn.BatchNorm1d", false]], "batchnorm2d (class in lucid.nn)": [[260, "lucid.nn.BatchNorm2d", false]], "batchnorm3d (class in lucid.nn)": [[261, "lucid.nn.BatchNorm3d", false]], "bceloss (class in lucid.nn)": [[253, "lucid.nn.BCELoss", false]], "bernoulli() (in module lucid.random)": [[306, "lucid.random.bernoulli", false]], "bilinear (class in lucid.nn)": [[249, "lucid.nn.Bilinear", false]], "bilinear() (in module lucid.nn.functional)": [[176, "lucid.nn.functional.bilinear", false]], "binary_cross_entropy() (in module lucid.nn.functional)": [[179, "lucid.nn.functional.binary_cross_entropy", false]], "broadcast_to() (in module lucid)": [[363, "lucid.broadcast_to", false]], "buffer (class in lucid.nn)": [[142, "lucid.nn.Buffer", false]], "centercrop (class in lucid.transforms)": [[383, "lucid.transforms.CenterCrop", false]], "cholesky() (in module lucid.linalg)": [[12, "lucid.linalg.cholesky", false]], "cifar10 (class in lucid.datasets)": [[5, "lucid.datasets.CIFAR10", false]], "cifar100 (class in lucid.datasets)": [[6, "lucid.datasets.CIFAR100", false]], "clip() (in module lucid)": [[341, "lucid.clip", false]], "compose (class in lucid.transforms)": [[381, "lucid.transforms.Compose", false]], "concatdataset (class in lucid.data)": [[0, "lucid.data.ConcatDataset", false]], "concatenate() (in module lucid)": [[364, "lucid.concatenate", false]], "constant() (in module lucid.nn.init)": [[212, "lucid.nn.init.constant", false]], "conv1d (class in lucid.nn)": [[236, "lucid.nn.Conv1d", false]], "conv1d() (in module lucid.nn.functional)": [[162, "lucid.nn.functional.conv1d", false]], "conv2d (class in lucid.nn)": [[237, "lucid.nn.Conv2d", false]], "conv2d() (in module lucid.nn.functional)": [[163, "lucid.nn.functional.conv2d", false]], "conv3d (class in lucid.nn)": [[238, "lucid.nn.Conv3d", false]], "conv3d() (in module lucid.nn.functional)": [[164, "lucid.nn.functional.conv3d", false]], "convbnrelu1d (class in lucid.nn)": [[203, "lucid.nn.ConvBNReLU1d", false]], "convbnrelu2d (class in lucid.nn)": [[204, "lucid.nn.ConvBNReLU2d", false]], "convbnrelu3d (class in lucid.nn)": [[205, "lucid.nn.ConvBNReLU3d", false]], "convnext (class in lucid.models)": [[25, "lucid.models.ConvNeXt", false]], "convnext_base() (in module lucid.models)": [[27, "lucid.models.convnext_base", false]], "convnext_large() (in module lucid.models)": [[28, "lucid.models.convnext_large", false]], "convnext_small() (in module lucid.models)": [[29, "lucid.models.convnext_small", false]], "convnext_tiny() (in module lucid.models)": [[30, "lucid.models.convnext_tiny", false]], "convnext_v2 (class in lucid.models)": [[26, "lucid.models.ConvNeXt_V2", false]], "convnext_v2_atto() (in module lucid.models)": [[31, "lucid.models.convnext_v2_atto", false]], "convnext_v2_base() (in module lucid.models)": [[32, "lucid.models.convnext_v2_base", false]], "convnext_v2_femto() (in module lucid.models)": [[33, "lucid.models.convnext_v2_femto", false]], "convnext_v2_huge() (in module lucid.models)": [[34, "lucid.models.convnext_v2_huge", false]], "convnext_v2_large() (in module lucid.models)": [[35, "lucid.models.convnext_v2_large", false]], "convnext_v2_nano() (in module lucid.models)": [[36, "lucid.models.convnext_v2_nano", false]], "convnext_v2_pico() (in module lucid.models)": [[37, "lucid.models.convnext_v2_pico", false]], "convnext_v2_tiny() (in module lucid.models)": [[38, "lucid.models.convnext_v2_tiny", false]], "convnext_xlarge() (in module lucid.models)": [[39, "lucid.models.convnext_xlarge", false]], "cos() (in module lucid)": [[342, "lucid.cos", false]], "cosh() (in module lucid)": [[343, "lucid.cosh", false]], "cross_entropy() (in module lucid.nn.functional)": [[180, "lucid.nn.functional.cross_entropy", false]], "crossentropyloss (class in lucid.nn)": [[254, "lucid.nn.CrossEntropyLoss", false]], "cube() (in module lucid)": [[344, "lucid.cube", false]], "dataloader (class in lucid.data)": [[1, "lucid.data.DataLoader", false]], "dataset (class in lucid.data)": [[2, "lucid.data.Dataset", false]], "densenet (class in lucid.models)": [[40, "lucid.models.DenseNet", false]], "densenet_121() (in module lucid.models)": [[41, "lucid.models.densenet_121", false]], "densenet_169() (in module lucid.models)": [[42, "lucid.models.densenet_169", false]], "densenet_201() (in module lucid.models)": [[43, "lucid.models.densenet_201", false]], "densenet_264() (in module lucid.models)": [[44, "lucid.models.densenet_264", false]], "depthseparableconv1d (class in lucid.nn)": [[206, "lucid.nn.DepthSeparableConv1d", false]], "depthseparableconv2d (class in lucid.nn)": [[207, "lucid.nn.DepthSeparableConv2d", false]], "depthseparableconv3d (class in lucid.nn)": [[208, "lucid.nn.DepthSeparableConv3d", false]], "det() (in module lucid.linalg)": [[13, "lucid.linalg.det", false]], "diag() (in module lucid)": [[327, "lucid.diag", false]], "div() (in module lucid)": [[316, "lucid.div", false]], "dot() (in module lucid)": [[317, "lucid.dot", false]], "drop_block() (in module lucid.nn.functional)": [[168, "lucid.nn.functional.drop_block", false]], "drop_path() (in module lucid.nn.functional)": [[169, "lucid.nn.functional.drop_path", false]], "dropblock (class in lucid.nn)": [[241, "lucid.nn.DropBlock", false]], "dropout (class in lucid.nn)": [[243, "lucid.nn.Dropout", false]], "dropout() (in module lucid.nn.functional)": [[170, "lucid.nn.functional.dropout", false]], "dropout1d (class in lucid.nn)": [[244, "lucid.nn.Dropout1d", false]], "dropout1d() (in module lucid.nn.functional)": [[171, "lucid.nn.functional.dropout1d", false]], "dropout2d (class in lucid.nn)": [[245, "lucid.nn.Dropout2d", false]], "dropout2d() (in module lucid.nn.functional)": [[172, "lucid.nn.functional.dropout2d", false]], "dropout3d (class in lucid.nn)": [[246, "lucid.nn.Dropout3d", false]], "dropout3d() (in module lucid.nn.functional)": [[173, "lucid.nn.functional.dropout3d", false]], "droppath (class in lucid.nn)": [[242, "lucid.nn.DropPath", false]], "efficientnet (class in lucid.models)": [[45, "lucid.models.EfficientNet", false]], "efficientnet_b0() (in module lucid.models)": [[47, "lucid.models.efficientnet_b0", false]], "efficientnet_b1() (in module lucid.models)": [[48, "lucid.models.efficientnet_b1", false]], "efficientnet_b2() (in module lucid.models)": [[49, "lucid.models.efficientnet_b2", false]], "efficientnet_b3() (in module lucid.models)": [[50, "lucid.models.efficientnet_b3", false]], "efficientnet_b4() (in module lucid.models)": [[51, "lucid.models.efficientnet_b4", false]], "efficientnet_b5() (in module lucid.models)": [[52, "lucid.models.efficientnet_b5", false]], "efficientnet_b6() (in module lucid.models)": [[53, "lucid.models.efficientnet_b6", false]], "efficientnet_b7() (in module lucid.models)": [[54, "lucid.models.efficientnet_b7", false]], "efficientnet_v2 (class in lucid.models)": [[46, "lucid.models.EfficientNet_V2", false]], "efficientnet_v2_l() (in module lucid.models)": [[55, "lucid.models.efficientnet_v2_l", false]], "efficientnet_v2_m() (in module lucid.models)": [[56, "lucid.models.efficientnet_v2_m", false]], "efficientnet_v2_s() (in module lucid.models)": [[57, "lucid.models.efficientnet_v2_s", false]], "efficientnet_v2_xl() (in module lucid.models)": [[58, "lucid.models.efficientnet_v2_xl", false]], "eig() (in module lucid.linalg)": [[14, "lucid.linalg.eig", false]], "elu (class in lucid.nn)": [[220, "lucid.nn.ELU", false]], "elu() (in module lucid.nn.functional)": [[151, "lucid.nn.functional.elu", false]], "empty() (in module lucid)": [[328, "lucid.empty", false]], "empty_like() (in module lucid)": [[329, "lucid.empty_like", false]], "exp() (in module lucid)": [[345, "lucid.exp", false]], "eye() (in module lucid)": [[330, "lucid.eye", false]], "fashionmnist (class in lucid.datasets)": [[7, "lucid.datasets.FashionMNIST", false]], "flatten() (in module lucid)": [[365, "lucid.flatten", false]], "gelu (class in lucid.nn)": [[221, "lucid.nn.GELU", false]], "gelu() (in module lucid.nn.functional)": [[152, "lucid.nn.functional.gelu", false]], "global_response_norm() (in module lucid.nn.functional)": [[186, "lucid.nn.functional.global_response_norm", false]], "globalresponsenorm (class in lucid.nn)": [[262, "lucid.nn.GlobalResponseNorm", false]], "grad_enabled() (in module lucid)": [[301, "lucid.grad_enabled", false]], "hardsigmoid (class in lucid.nn)": [[222, "lucid.nn.HardSigmoid", false]], "hardswish (class in lucid.nn)": [[223, "lucid.nn.HardSwish", false]], "hstack() (in module lucid)": [[366, "lucid.hstack", false]], "huber_loss() (in module lucid.nn.functional)": [[181, "lucid.nn.functional.huber_loss", false]], "huberloss (class in lucid.nn)": [[255, "lucid.nn.HuberLoss", false]], "identity (class in lucid.nn)": [[250, "lucid.nn.Identity", false]], "inception (class in lucid.models)": [[59, "lucid.models.Inception", false]], "inception_next_atto() (in module lucid.models)": [[64, "lucid.models.inception_next_atto", false]], "inception_next_base() (in module lucid.models)": [[65, "lucid.models.inception_next_base", false]], "inception_next_small() (in module lucid.models)": [[66, "lucid.models.inception_next_small", false]], "inception_next_tiny() (in module lucid.models)": [[67, "lucid.models.inception_next_tiny", false]], "inception_resnet_v1() (in module lucid.models)": [[69, "lucid.models.inception_resnet_v1", false]], "inception_resnet_v2() (in module lucid.models)": [[70, "lucid.models.inception_resnet_v2", false]], "inception_v1() (in module lucid.models)": [[60, "lucid.models.inception_v1", false]], "inception_v3() (in module lucid.models)": [[61, "lucid.models.inception_v3", false]], "inception_v4() (in module lucid.models)": [[62, "lucid.models.inception_v4", false]], "inceptionnext (class in lucid.models)": [[63, "lucid.models.InceptionNeXt", false]], "inceptionresnet (class in lucid.models)": [[68, "lucid.models.InceptionResNet", false]], "inner() (in module lucid)": [[318, "lucid.inner", false]], "instance_norm() (in module lucid.nn.functional)": [[188, "lucid.nn.functional.instance_norm", false]], "instancenorm1d (class in lucid.nn)": [[263, "lucid.nn.InstanceNorm1d", false]], "instancenorm2d (class in lucid.nn)": [[264, "lucid.nn.InstanceNorm2d", false]], "instancenorm3d (class in lucid.nn)": [[265, "lucid.nn.InstanceNorm3d", false]], "interpolate() (in module lucid.nn.functional)": [[201, "lucid.nn.functional.interpolate", false]], "inv() (in module lucid.linalg)": [[16, "lucid.linalg.inv", false]], "kaiming_normal() (in module lucid.nn.init)": [[214, "lucid.nn.init.kaiming_normal", false]], "kaiming_uniform() (in module lucid.nn.init)": [[215, "lucid.nn.init.kaiming_uniform", false]], "layer_norm() (in module lucid.nn.functional)": [[189, "lucid.nn.functional.layer_norm", false]], "layernorm (class in lucid.nn)": [[266, "lucid.nn.LayerNorm", false]], "leaky_relu() (in module lucid.nn.functional)": [[154, "lucid.nn.functional.leaky_relu", false]], "leakyrelu (class in lucid.nn)": [[224, "lucid.nn.LeakyReLU", false]], "lenet (class in lucid.models)": [[72, "lucid.models.LeNet", false]], "lenet_1() (in module lucid.models)": [[73, "lucid.models.lenet_1", false]], "lenet_4() (in module lucid.models)": [[74, "lucid.models.lenet_4", false]], "lenet_5() (in module lucid.models)": [[75, "lucid.models.lenet_5", false]], "linear (class in lucid.nn)": [[251, "lucid.nn.Linear", false]], "linear() (in module lucid.nn.functional)": [[178, "lucid.nn.functional.linear", false]], "linspace() (in module lucid)": [[331, "lucid.linspace", false]], "log() (in module lucid)": [[346, "lucid.log", false]], "lucid": [[10, "module-lucid", false]], "matmul() (in module lucid)": [[319, "lucid.matmul", false]], "matrix_power() (in module lucid.linalg)": [[17, "lucid.linalg.matrix_power", false]], "max() (in module lucid)": [[347, "lucid.max", false]], "max_pool1d() (in module lucid.nn.functional)": [[197, "lucid.nn.functional.max_pool1d", false]], "max_pool2d() (in module lucid.nn.functional)": [[198, "lucid.nn.functional.max_pool2d", false]], "max_pool3d() (in module lucid.nn.functional)": [[199, "lucid.nn.functional.max_pool3d", false]], "maximum() (in module lucid)": [[320, "lucid.maximum", false]], "maxpool1d (class in lucid.nn)": [[274, "lucid.nn.MaxPool1d", false]], "maxpool2d (class in lucid.nn)": [[275, "lucid.nn.MaxPool2d", false]], "maxpool3d (class in lucid.nn)": [[276, "lucid.nn.MaxPool3d", false]], "mean() (in module lucid)": [[348, "lucid.mean", false]], "meshgrid() (in module lucid)": [[368, "lucid.meshgrid", false]], "min() (in module lucid)": [[349, "lucid.min", false]], "minimum() (in module lucid)": [[321, "lucid.minimum", false]], "mnist (class in lucid.datasets)": [[8, "lucid.datasets.MNIST", false]], "mobilenet (class in lucid.models)": [[76, "lucid.models.MobileNet", false]], "mobilenet() (in module lucid.models)": [[80, "lucid.models.mobilenet", false]], "mobilenet_v2 (class in lucid.models)": [[77, "lucid.models.MobileNet_V2", false]], "mobilenet_v2() (in module lucid.models)": [[81, "lucid.models.mobilenet_v2", false]], "mobilenet_v3 (class in lucid.models)": [[78, "lucid.models.MobileNet_V3", false]], "mobilenet_v3_large() (in module lucid.models)": [[82, "lucid.models.mobilenet_v3_large", false]], "mobilenet_v3_small() (in module lucid.models)": [[83, "lucid.models.mobilenet_v3_small", false]], "mobilenet_v4 (class in lucid.models)": [[79, "lucid.models.MobileNet_V4", false]], "mobilenet_v4_conv_large() (in module lucid.models)": [[84, "lucid.models.mobilenet_v4_conv_large", false]], "mobilenet_v4_conv_medium() (in module lucid.models)": [[85, "lucid.models.mobilenet_v4_conv_medium", false]], "mobilenet_v4_conv_small() (in module lucid.models)": [[86, "lucid.models.mobilenet_v4_conv_small", false]], "mobilenet_v4_hybrid_large() (in module lucid.models)": [[87, "lucid.models.mobilenet_v4_hybrid_large", false]], "mobilenet_v4_hybrid_medium() (in module lucid.models)": [[88, "lucid.models.mobilenet_v4_hybrid_medium", false]], "module": [[10, "module-lucid", false]], "module (class in lucid.nn)": [[143, "lucid.nn.Module", false]], "moduledict (class in lucid.nn)": [[145, "lucid.nn.ModuleDict", false]], "modulelist (class in lucid.nn)": [[146, "lucid.nn.ModuleList", false]], "mse_loss() (in module lucid.nn.functional)": [[183, "lucid.nn.functional.mse_loss", false]], "mseloss (class in lucid.nn)": [[256, "lucid.nn.MSELoss", false]], "mul() (in module lucid)": [[322, "lucid.mul", false]], "multiheadattention (class in lucid.nn)": [[233, "lucid.nn.MultiHeadAttention", false]], "nadam (class in lucid.optim)": [[295, "lucid.optim.NAdam", false]], "nll_loss() (in module lucid.nn.functional)": [[184, "lucid.nn.functional.nll_loss", false]], "nllloss (class in lucid.nn)": [[257, "lucid.nn.NLLLoss", false]], "no_grad() (in module lucid)": [[303, "lucid.no_grad", false]], "norm() (in module lucid.linalg)": [[18, "lucid.linalg.norm", false]], "normal() (in module lucid.nn.init)": [[216, "lucid.nn.init.normal", false]], "normalize (class in lucid.transforms)": [[384, "lucid.transforms.Normalize", false]], "ones() (in module lucid)": [[332, "lucid.ones", false]], "ones_like() (in module lucid)": [[333, "lucid.ones_like", false]], "optimizer (class in lucid.optim)": [[287, "lucid.optim.Optimizer", false]], "outer() (in module lucid)": [[323, "lucid.outer", false]], "pad() (in module lucid)": [[369, "lucid.pad", false]], "parameter (class in lucid.nn)": [[144, "lucid.nn.Parameter", false]], "parameterdict (class in lucid.nn)": [[147, "lucid.nn.ParameterDict", false]], "parameterlist (class in lucid.nn)": [[148, "lucid.nn.ParameterList", false]], "pinv() (in module lucid.linalg)": [[19, "lucid.linalg.pinv", false]], "power() (in module lucid)": [[324, "lucid.power", false]], "qr() (in module lucid.linalg)": [[20, "lucid.linalg.qr", false]], "radam (class in lucid.optim)": [[296, "lucid.optim.RAdam", false]], "rand() (in module lucid.random)": [[308, "lucid.random.rand", false]], "randint() (in module lucid.random)": [[309, "lucid.random.randint", false]], "randn() (in module lucid.random)": [[310, "lucid.random.randn", false]], "randomcrop (class in lucid.transforms)": [[385, "lucid.transforms.RandomCrop", false]], "randomgrayscale (class in lucid.transforms)": [[386, "lucid.transforms.RandomGrayscale", false]], "randomhorizontalflip (class in lucid.transforms)": [[387, "lucid.transforms.RandomHorizontalFlip", false]], "randomrotation (class in lucid.transforms)": [[388, "lucid.transforms.RandomRotation", false]], "randomverticalflip (class in lucid.transforms)": [[389, "lucid.transforms.RandomVerticalFlip", false]], "ravel() (in module lucid)": [[370, "lucid.ravel", false]], "reciprocal() (in module lucid)": [[350, "lucid.reciprocal", false]], "register_model() (in module lucid)": [[304, "lucid.register_model", false]], "relu (class in lucid.nn)": [[225, "lucid.nn.ReLU", false]], "relu() (in module lucid.nn.functional)": [[155, "lucid.nn.functional.relu", false]], "relu6 (class in lucid.nn)": [[226, "lucid.nn.ReLU6", false]], "repeat() (in module lucid)": [[371, "lucid.repeat", false]], "reshape() (in module lucid)": [[372, "lucid.reshape", false]], "resize (class in lucid.transforms)": [[390, "lucid.transforms.Resize", false]], "resnest (class in lucid.models)": [[89, "lucid.models.ResNeSt", false]], "resnest_101() (in module lucid.models)": [[90, "lucid.models.resnest_101", false]], "resnest_14() (in module lucid.models)": [[91, "lucid.models.resnest_14", false]], "resnest_200() (in module lucid.models)": [[92, "lucid.models.resnest_200", false]], "resnest_26() (in module lucid.models)": [[93, "lucid.models.resnest_26", false]], "resnest_269() (in module lucid.models)": [[94, "lucid.models.resnest_269", false]], "resnest_50() (in module lucid.models)": [[95, "lucid.models.resnest_50", false]], "resnest_50_1s4x24d() (in module lucid.models)": [[96, "lucid.models.resnest_50_1s4x24d", false]], "resnest_50_4s2x40d() (in module lucid.models)": [[97, "lucid.models.resnest_50_4s2x40d", false]], "resnet (class in lucid.models)": [[98, "lucid.models.ResNet", false]], "resnet_1001() (in module lucid.models)": [[99, "lucid.models.resnet_1001", false]], "resnet_101() (in module lucid.models)": [[100, "lucid.models.resnet_101", false]], "resnet_152() (in module lucid.models)": [[101, "lucid.models.resnet_152", false]], "resnet_18() (in module lucid.models)": [[102, "lucid.models.resnet_18", false]], "resnet_200() (in module lucid.models)": [[103, "lucid.models.resnet_200", false]], "resnet_269() (in module lucid.models)": [[104, "lucid.models.resnet_269", false]], "resnet_34() (in module lucid.models)": [[105, "lucid.models.resnet_34", false]], "resnet_50() (in module lucid.models)": [[106, "lucid.models.resnet_50", false]], "resnext (class in lucid.models)": [[109, "lucid.models.ResNeXt", false]], "resnext_101_32x16d() (in module lucid.models)": [[110, "lucid.models.resnext_101_32x16d", false]], "resnext_101_32x32d() (in module lucid.models)": [[111, "lucid.models.resnext_101_32x32d", false]], "resnext_101_32x4d() (in module lucid.models)": [[112, "lucid.models.resnext_101_32x4d", false]], "resnext_101_32x8d() (in module lucid.models)": [[113, "lucid.models.resnext_101_32x8d", false]], "resnext_101_64x4d() (in module lucid.models)": [[114, "lucid.models.resnext_101_64x4d", false]], "resnext_50_32x4d() (in module lucid.models)": [[115, "lucid.models.resnext_50_32x4d", false]], "rmsprop (class in lucid.optim)": [[297, "lucid.optim.RMSprop", false]], "rotate() (in module lucid.nn.functional)": [[202, "lucid.nn.functional.rotate", false]], "rprop (class in lucid.optim)": [[298, "lucid.optim.Rprop", false]], "scaled_dot_product_attention() (in module lucid.nn.functional)": [[161, "lucid.nn.functional.scaled_dot_product_attention", false]], "scaleddotproductattention (class in lucid.nn)": [[234, "lucid.nn.ScaledDotProductAttention", false]], "se_resnet_101() (in module lucid.models)": [[117, "lucid.models.se_resnet_101", false]], "se_resnet_152() (in module lucid.models)": [[118, "lucid.models.se_resnet_152", false]], "se_resnet_18() (in module lucid.models)": [[119, "lucid.models.se_resnet_18", false]], "se_resnet_34() (in module lucid.models)": [[120, "lucid.models.se_resnet_34", false]], "se_resnet_50() (in module lucid.models)": [[121, "lucid.models.se_resnet_50", false]], "se_resnext_101_32x4d() (in module lucid.models)": [[122, "lucid.models.se_resnext_101_32x4d", false]], "se_resnext_101_32x8d() (in module lucid.models)": [[123, "lucid.models.se_resnext_101_32x8d", false]], "se_resnext_101_64x4d() (in module lucid.models)": [[124, "lucid.models.se_resnext_101_64x4d", false]], "se_resnext_50_32x4d() (in module lucid.models)": [[125, "lucid.models.se_resnext_50_32x4d", false]], "seed() (in module lucid.random)": [[311, "lucid.random.seed", false]], "selectivekernel (class in lucid.nn)": [[210, "lucid.nn.SelectiveKernel", false]], "selu (class in lucid.nn)": [[227, "lucid.nn.SELU", false]], "selu() (in module lucid.nn.functional)": [[156, "lucid.nn.functional.selu", false]], "semodule (class in lucid.nn)": [[209, "lucid.nn.SEModule", false]], "senet (class in lucid.models)": [[116, "lucid.models.SENet", false]], "sequential (class in lucid.nn)": [[149, "lucid.nn.Sequential", false]], "sgd (class in lucid.optim)": [[299, "lucid.optim.SGD", false]], "sigmoid (class in lucid.nn)": [[228, "lucid.nn.Sigmoid", false]], "sigmoid() (in module lucid.nn.functional)": [[157, "lucid.nn.functional.sigmoid", false]], "sign() (in module lucid)": [[351, "lucid.sign", false]], "sin() (in module lucid)": [[352, "lucid.sin", false]], "sinh() (in module lucid)": [[353, "lucid.sinh", false]], "sk_resnet_18() (in module lucid.models)": [[127, "lucid.models.sk_resnet_18", false]], "sk_resnet_34() (in module lucid.models)": [[128, "lucid.models.sk_resnet_34", false]], "sk_resnet_50() (in module lucid.models)": [[129, "lucid.models.sk_resnet_50", false]], "sk_resnext_50_32x4d() (in module lucid.models)": [[130, "lucid.models.sk_resnext_50_32x4d", false]], "sknet (class in lucid.models)": [[126, "lucid.models.SKNet", false]], "softmax (class in lucid.nn)": [[229, "lucid.nn.Softmax", false]], "softmax() (in module lucid.nn.functional)": [[158, "lucid.nn.functional.softmax", false]], "solve() (in module lucid.linalg)": [[21, "lucid.linalg.solve", false]], "split() (in module lucid)": [[373, "lucid.split", false]], "sqrt() (in module lucid)": [[354, "lucid.sqrt", false]], "square() (in module lucid)": [[355, "lucid.square", false]], "squeeze() (in module lucid)": [[374, "lucid.squeeze", false]], "stack() (in module lucid)": [[375, "lucid.stack", false]], "sub() (in module lucid)": [[325, "lucid.sub", false]], "sum() (in module lucid)": [[356, "lucid.sum", false]], "summarize() (in module lucid.models)": [[141, "lucid.models.summarize", false]], "svd() (in module lucid.linalg)": [[22, "lucid.linalg.svd", false]], "swish (class in lucid.nn)": [[230, "lucid.nn.Swish", false]], "tan() (in module lucid)": [[357, "lucid.tan", false]], "tanh (class in lucid.nn)": [[231, "lucid.nn.Tanh", false]], "tanh() (in module lucid)": [[358, "lucid.tanh", false]], "tanh() (in module lucid.nn.functional)": [[159, "lucid.nn.functional.tanh", false]], "tensor (class in lucid)": [[314, "lucid.Tensor", false]], "tensor() (in module lucid)": [[362, "lucid.tensor", false]], "tile() (in module lucid)": [[376, "lucid.tile", false]], "totensor (class in lucid.transforms)": [[382, "lucid.transforms.ToTensor", false]], "trace() (in module lucid)": [[359, "lucid.trace", false]], "transformer (class in lucid.nn)": [[278, "lucid.nn.Transformer", false]], "transformerdecoder (class in lucid.nn)": [[279, "lucid.nn.TransformerDecoder", false]], "transformerdecoderlayer (class in lucid.nn)": [[280, "lucid.nn.TransformerDecoderLayer", false]], "transformerencoder (class in lucid.nn)": [[281, "lucid.nn.TransformerEncoder", false]], "transformerencoderlayer (class in lucid.nn)": [[282, "lucid.nn.TransformerEncoderLayer", false]], "transpose() (in module lucid)": [[360, "lucid.transpose", false]], "tril() (in module lucid)": [[377, "lucid.tril", false]], "triu() (in module lucid)": [[378, "lucid.triu", false]], "unfold() (in module lucid.nn.functional)": [[166, "lucid.nn.functional.unfold", false]], "uniform() (in module lucid.nn.init)": [[217, "lucid.nn.init.uniform", false]], "uniform() (in module lucid.random)": [[312, "lucid.random.uniform", false]], "unsqueeze() (in module lucid)": [[379, "lucid.unsqueeze", false]], "upsample (class in lucid.nn)": [[284, "lucid.nn.Upsample", false]], "var() (in module lucid)": [[361, "lucid.var", false]], "vggnet (class in lucid.models)": [[131, "lucid.models.VGGNet", false]], "vggnet_11() (in module lucid.models)": [[132, "lucid.models.vggnet_11", false]], "vggnet_13() (in module lucid.models)": [[133, "lucid.models.vggnet_13", false]], "vggnet_16() (in module lucid.models)": [[134, "lucid.models.vggnet_16", false]], "vggnet_19() (in module lucid.models)": [[135, "lucid.models.vggnet_19", false]], "vstack() (in module lucid)": [[380, "lucid.vstack", false]], "wide_resnet_101() (in module lucid.models)": [[107, "lucid.models.wide_resnet_101", false]], "wide_resnet_50() (in module lucid.models)": [[108, "lucid.models.wide_resnet_50", false]], "xavier_normal() (in module lucid.nn.init)": [[218, "lucid.nn.init.xavier_normal", false]], "xavier_uniform() (in module lucid.nn.init)": [[219, "lucid.nn.init.xavier_uniform", false]], "xception (class in lucid.models)": [[136, "lucid.models.Xception", false]], "xception() (in module lucid.models)": [[137, "lucid.models.xception", false]], "zeros() (in module lucid)": [[334, "lucid.zeros", false]], "zeros_like() (in module lucid)": [[335, "lucid.zeros_like", false]], "zfnet (class in lucid.models)": [[138, "lucid.models.ZFNet", false]], "zfnet() (in module lucid.models)": [[139, "lucid.models.zfnet", false]]}, "objects": {"": [[10, 0, 0, "-", "lucid"]], "lucid": [[314, 1, 1, "", "Tensor"], [337, 2, 1, "", "abs"], [315, 2, 1, "", "add"], [326, 2, 1, "", "arange"], [338, 2, 1, "", "arccos"], [339, 2, 1, "", "arcsin"], [340, 2, 1, "", "arctan"], [363, 2, 1, "", "broadcast_to"], [341, 2, 1, "", "clip"], [364, 2, 1, "", "concatenate"], [342, 2, 1, "", "cos"], [343, 2, 1, "", "cosh"], [344, 2, 1, "", "cube"], [327, 2, 1, "", "diag"], [316, 2, 1, "", "div"], [317, 2, 1, "", "dot"], [328, 2, 1, "", "empty"], [329, 2, 1, "", "empty_like"], [345, 2, 1, "", "exp"], [330, 2, 1, "", "eye"], [365, 2, 1, "", "flatten"], [301, 2, 1, "", "grad_enabled"], [366, 2, 1, "", "hstack"], [318, 2, 1, "", "inner"], [331, 2, 1, "", "linspace"], [346, 2, 1, "", "log"], [319, 2, 1, "", "matmul"], [347, 2, 1, "", "max"], [320, 2, 1, "", "maximum"], [348, 2, 1, "", "mean"], [368, 2, 1, "", "meshgrid"], [349, 2, 1, "", "min"], [321, 2, 1, "", "minimum"], [322, 2, 1, "", "mul"], [303, 2, 1, "", "no_grad"], [332, 2, 1, "", "ones"], [333, 2, 1, "", "ones_like"], [323, 2, 1, "", "outer"], [369, 2, 1, "", "pad"], [324, 2, 1, "", "power"], [370, 2, 1, "", "ravel"], [350, 2, 1, "", "reciprocal"], [304, 2, 1, "", "register_model"], [371, 2, 1, "", "repeat"], [372, 2, 1, "", "reshape"], [351, 2, 1, "", "sign"], [352, 2, 1, "", "sin"], [353, 2, 1, "", "sinh"], [373, 2, 1, "", "split"], [354, 2, 1, "", "sqrt"], [355, 2, 1, "", "square"], [374, 2, 1, "", "squeeze"], [375, 2, 1, "", "stack"], [325, 2, 1, "", "sub"], [356, 2, 1, "", "sum"], [357, 2, 1, "", "tan"], [358, 2, 1, "", "tanh"], [362, 2, 1, "", "tensor"], [376, 2, 1, "", "tile"], [359, 2, 1, "", "trace"], [360, 2, 1, "", "transpose"], [377, 2, 1, "", "tril"], [378, 2, 1, "", "triu"], [379, 2, 1, "", "unsqueeze"], [361, 2, 1, "", "var"], [380, 2, 1, "", "vstack"], [334, 2, 1, "", "zeros"], [335, 2, 1, "", "zeros_like"]], "lucid.data": [[0, 1, 1, "", "ConcatDataset"], [1, 1, 1, "", "DataLoader"], [2, 1, 1, "", "Dataset"]], "lucid.datasets": [[5, 1, 1, "", "CIFAR10"], [6, 1, 1, "", "CIFAR100"], [7, 1, 1, "", "FashionMNIST"], [8, 1, 1, "", "MNIST"]], "lucid.linalg": [[12, 2, 1, "", "cholesky"], [13, 2, 1, "", "det"], [14, 2, 1, "", "eig"], [16, 2, 1, "", "inv"], [17, 2, 1, "", "matrix_power"], [18, 2, 1, "", "norm"], [19, 2, 1, "", "pinv"], [20, 2, 1, "", "qr"], [21, 2, 1, "", "solve"], [22, 2, 1, "", "svd"]], "lucid.models": [[23, 1, 1, "", "AlexNet"], [25, 1, 1, "", "ConvNeXt"], [26, 1, 1, "", "ConvNeXt_V2"], [40, 1, 1, "", "DenseNet"], [45, 1, 1, "", "EfficientNet"], [46, 1, 1, "", "EfficientNet_V2"], [59, 1, 1, "", "Inception"], [63, 1, 1, "", "InceptionNeXt"], [68, 1, 1, "", "InceptionResNet"], [72, 1, 1, "", "LeNet"], [76, 1, 1, "", "MobileNet"], [77, 1, 1, "", "MobileNet_V2"], [78, 1, 1, "", "MobileNet_V3"], [79, 1, 1, "", "MobileNet_V4"], [89, 1, 1, "", "ResNeSt"], [109, 1, 1, "", "ResNeXt"], [98, 1, 1, "", "ResNet"], [116, 1, 1, "", "SENet"], [126, 1, 1, "", "SKNet"], [131, 1, 1, "", "VGGNet"], [136, 1, 1, "", "Xception"], [138, 1, 1, "", "ZFNet"], [24, 2, 1, "", "alexnet"], [27, 2, 1, "", "convnext_base"], [28, 2, 1, "", "convnext_large"], [29, 2, 1, "", "convnext_small"], [30, 2, 1, "", "convnext_tiny"], [31, 2, 1, "", "convnext_v2_atto"], [32, 2, 1, "", "convnext_v2_base"], [33, 2, 1, "", "convnext_v2_femto"], [34, 2, 1, "", "convnext_v2_huge"], [35, 2, 1, "", "convnext_v2_large"], [36, 2, 1, "", "convnext_v2_nano"], [37, 2, 1, "", "convnext_v2_pico"], [38, 2, 1, "", "convnext_v2_tiny"], [39, 2, 1, "", "convnext_xlarge"], [41, 2, 1, "", "densenet_121"], [42, 2, 1, "", "densenet_169"], [43, 2, 1, "", "densenet_201"], [44, 2, 1, "", "densenet_264"], [47, 2, 1, "", "efficientnet_b0"], [48, 2, 1, "", "efficientnet_b1"], [49, 2, 1, "", "efficientnet_b2"], [50, 2, 1, "", "efficientnet_b3"], [51, 2, 1, "", "efficientnet_b4"], [52, 2, 1, "", "efficientnet_b5"], [53, 2, 1, "", "efficientnet_b6"], [54, 2, 1, "", "efficientnet_b7"], [55, 2, 1, "", "efficientnet_v2_l"], [56, 2, 1, "", "efficientnet_v2_m"], [57, 2, 1, "", "efficientnet_v2_s"], [58, 2, 1, "", "efficientnet_v2_xl"], [64, 2, 1, "", "inception_next_atto"], [65, 2, 1, "", "inception_next_base"], [66, 2, 1, "", "inception_next_small"], [67, 2, 1, "", "inception_next_tiny"], [69, 2, 1, "", "inception_resnet_v1"], [70, 2, 1, "", "inception_resnet_v2"], [60, 2, 1, "", "inception_v1"], [61, 2, 1, "", "inception_v3"], [62, 2, 1, "", "inception_v4"], [73, 2, 1, "", "lenet_1"], [74, 2, 1, "", "lenet_4"], [75, 2, 1, "", "lenet_5"], [80, 2, 1, "", "mobilenet"], [81, 2, 1, "", "mobilenet_v2"], [82, 2, 1, "", "mobilenet_v3_large"], [83, 2, 1, "", "mobilenet_v3_small"], [84, 2, 1, "", "mobilenet_v4_conv_large"], [85, 2, 1, "", "mobilenet_v4_conv_medium"], [86, 2, 1, "", "mobilenet_v4_conv_small"], [87, 2, 1, "", "mobilenet_v4_hybrid_large"], [88, 2, 1, "", "mobilenet_v4_hybrid_medium"], [90, 2, 1, "", "resnest_101"], [91, 2, 1, "", "resnest_14"], [92, 2, 1, "", "resnest_200"], [93, 2, 1, "", "resnest_26"], [94, 2, 1, "", "resnest_269"], [95, 2, 1, "", "resnest_50"], [96, 2, 1, "", "resnest_50_1s4x24d"], [97, 2, 1, "", "resnest_50_4s2x40d"], [99, 2, 1, "", "resnet_1001"], [100, 2, 1, "", "resnet_101"], [101, 2, 1, "", "resnet_152"], [102, 2, 1, "", "resnet_18"], [103, 2, 1, "", "resnet_200"], [104, 2, 1, "", "resnet_269"], [105, 2, 1, "", "resnet_34"], [106, 2, 1, "", "resnet_50"], [110, 2, 1, "", "resnext_101_32x16d"], [111, 2, 1, "", "resnext_101_32x32d"], [112, 2, 1, "", "resnext_101_32x4d"], [113, 2, 1, "", "resnext_101_32x8d"], [114, 2, 1, "", "resnext_101_64x4d"], [115, 2, 1, "", "resnext_50_32x4d"], [117, 2, 1, "", "se_resnet_101"], [118, 2, 1, "", "se_resnet_152"], [119, 2, 1, "", "se_resnet_18"], [120, 2, 1, "", "se_resnet_34"], [121, 2, 1, "", "se_resnet_50"], [122, 2, 1, "", "se_resnext_101_32x4d"], [123, 2, 1, "", "se_resnext_101_32x8d"], [124, 2, 1, "", "se_resnext_101_64x4d"], [125, 2, 1, "", "se_resnext_50_32x4d"], [127, 2, 1, "", "sk_resnet_18"], [128, 2, 1, "", "sk_resnet_34"], [129, 2, 1, "", "sk_resnet_50"], [130, 2, 1, "", "sk_resnext_50_32x4d"], [141, 2, 1, "", "summarize"], [132, 2, 1, "", "vggnet_11"], [133, 2, 1, "", "vggnet_13"], [134, 2, 1, "", "vggnet_16"], [135, 2, 1, "", "vggnet_19"], [107, 2, 1, "", "wide_resnet_101"], [108, 2, 1, "", "wide_resnet_50"], [137, 2, 1, "", "xception"], [139, 2, 1, "", "zfnet"]], "lucid.nn": [[268, 1, 1, "", "AdaptiveAvgPool1d"], [269, 1, 1, "", "AdaptiveAvgPool2d"], [270, 1, 1, "", "AdaptiveAvgPool3d"], [240, 1, 1, "", "AlphaDropout"], [271, 1, 1, "", "AvgPool1d"], [272, 1, 1, "", "AvgPool2d"], [273, 1, 1, "", "AvgPool3d"], [253, 1, 1, "", "BCELoss"], [259, 1, 1, "", "BatchNorm1d"], [260, 1, 1, "", "BatchNorm2d"], [261, 1, 1, "", "BatchNorm3d"], [249, 1, 1, "", "Bilinear"], [142, 1, 1, "", "Buffer"], [236, 1, 1, "", "Conv1d"], [237, 1, 1, "", "Conv2d"], [238, 1, 1, "", "Conv3d"], [203, 1, 1, "", "ConvBNReLU1d"], [204, 1, 1, "", "ConvBNReLU2d"], [205, 1, 1, "", "ConvBNReLU3d"], [254, 1, 1, "", "CrossEntropyLoss"], [206, 1, 1, "", "DepthSeparableConv1d"], [207, 1, 1, "", "DepthSeparableConv2d"], [208, 1, 1, "", "DepthSeparableConv3d"], [241, 1, 1, "", "DropBlock"], [242, 1, 1, "", "DropPath"], [243, 1, 1, "", "Dropout"], [244, 1, 1, "", "Dropout1d"], [245, 1, 1, "", "Dropout2d"], [246, 1, 1, "", "Dropout3d"], [220, 1, 1, "", "ELU"], [221, 1, 1, "", "GELU"], [262, 1, 1, "", "GlobalResponseNorm"], [222, 1, 1, "", "HardSigmoid"], [223, 1, 1, "", "HardSwish"], [255, 1, 1, "", "HuberLoss"], [250, 1, 1, "", "Identity"], [263, 1, 1, "", "InstanceNorm1d"], [264, 1, 1, "", "InstanceNorm2d"], [265, 1, 1, "", "InstanceNorm3d"], [266, 1, 1, "", "LayerNorm"], [224, 1, 1, "", "LeakyReLU"], [251, 1, 1, "", "Linear"], [256, 1, 1, "", "MSELoss"], [274, 1, 1, "", "MaxPool1d"], [275, 1, 1, "", "MaxPool2d"], [276, 1, 1, "", "MaxPool3d"], [143, 1, 1, "", "Module"], [145, 1, 1, "", "ModuleDict"], [146, 1, 1, "", "ModuleList"], [233, 1, 1, "", "MultiHeadAttention"], [257, 1, 1, "", "NLLLoss"], [144, 1, 1, "", "Parameter"], [147, 1, 1, "", "ParameterDict"], [148, 1, 1, "", "ParameterList"], [225, 1, 1, "", "ReLU"], [226, 1, 1, "", "ReLU6"], [227, 1, 1, "", "SELU"], [209, 1, 1, "", "SEModule"], [234, 1, 1, "", "ScaledDotProductAttention"], [210, 1, 1, "", "SelectiveKernel"], [149, 1, 1, "", "Sequential"], [228, 1, 1, "", "Sigmoid"], [229, 1, 1, "", "Softmax"], [230, 1, 1, "", "Swish"], [231, 1, 1, "", "Tanh"], [278, 1, 1, "", "Transformer"], [279, 1, 1, "", "TransformerDecoder"], [280, 1, 1, "", "TransformerDecoderLayer"], [281, 1, 1, "", "TransformerEncoder"], [282, 1, 1, "", "TransformerEncoderLayer"], [284, 1, 1, "", "Upsample"]], "lucid.nn.functional": [[190, 2, 1, "", "adaptive_avg_pool1d"], [191, 2, 1, "", "adaptive_avg_pool2d"], [192, 2, 1, "", "adaptive_avg_pool3d"], [167, 2, 1, "", "alpha_dropout"], [193, 2, 1, "", "avg_pool1d"], [194, 2, 1, "", "avg_pool2d"], [195, 2, 1, "", "avg_pool3d"], [185, 2, 1, "", "batch_norm"], [176, 2, 1, "", "bilinear"], [179, 2, 1, "", "binary_cross_entropy"], [162, 2, 1, "", "conv1d"], [163, 2, 1, "", "conv2d"], [164, 2, 1, "", "conv3d"], [180, 2, 1, "", "cross_entropy"], [168, 2, 1, "", "drop_block"], [169, 2, 1, "", "drop_path"], [170, 2, 1, "", "dropout"], [171, 2, 1, "", "dropout1d"], [172, 2, 1, "", "dropout2d"], [173, 2, 1, "", "dropout3d"], [151, 2, 1, "", "elu"], [152, 2, 1, "", "gelu"], [186, 2, 1, "", "global_response_norm"], [181, 2, 1, "", "huber_loss"], [188, 2, 1, "", "instance_norm"], [201, 2, 1, "", "interpolate"], [189, 2, 1, "", "layer_norm"], [154, 2, 1, "", "leaky_relu"], [178, 2, 1, "", "linear"], [197, 2, 1, "", "max_pool1d"], [198, 2, 1, "", "max_pool2d"], [199, 2, 1, "", "max_pool3d"], [183, 2, 1, "", "mse_loss"], [184, 2, 1, "", "nll_loss"], [155, 2, 1, "", "relu"], [202, 2, 1, "", "rotate"], [161, 2, 1, "", "scaled_dot_product_attention"], [156, 2, 1, "", "selu"], [157, 2, 1, "", "sigmoid"], [158, 2, 1, "", "softmax"], [159, 2, 1, "", "tanh"], [166, 2, 1, "", "unfold"]], "lucid.nn.init": [[212, 2, 1, "", "constant"], [214, 2, 1, "", "kaiming_normal"], [215, 2, 1, "", "kaiming_uniform"], [216, 2, 1, "", "normal"], [217, 2, 1, "", "uniform"], [218, 2, 1, "", "xavier_normal"], [219, 2, 1, "", "xavier_uniform"]], "lucid.optim": [[289, 1, 1, "", "ASGD"], [290, 1, 1, "", "Adadelta"], [291, 1, 1, "", "Adagrad"], [292, 1, 1, "", "Adam"], [293, 1, 1, "", "AdamW"], [294, 1, 1, "", "Adamax"], [295, 1, 1, "", "NAdam"], [287, 1, 1, "", "Optimizer"], [296, 1, 1, "", "RAdam"], [297, 1, 1, "", "RMSprop"], [298, 1, 1, "", "Rprop"], [299, 1, 1, "", "SGD"]], "lucid.random": [[306, 2, 1, "", "bernoulli"], [308, 2, 1, "", "rand"], [309, 2, 1, "", "randint"], [310, 2, 1, "", "randn"], [311, 2, 1, "", "seed"], [312, 2, 1, "", "uniform"]], "lucid.transforms": [[383, 1, 1, "", "CenterCrop"], [381, 1, 1, "", "Compose"], [384, 1, 1, "", "Normalize"], [385, 1, 1, "", "RandomCrop"], [386, 1, 1, "", "RandomGrayscale"], [387, 1, 1, "", "RandomHorizontalFlip"], [388, 1, 1, "", "RandomRotation"], [389, 1, 1, "", "RandomVerticalFlip"], [390, 1, 1, "", "Resize"], [382, 1, 1, "", "ToTensor"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function"}, "terms": {"": [3, 10, 11, 17, 19, 22, 57, 82, 83, 88, 90, 91, 92, 93, 94, 95, 140, 141, 142, 143, 144, 145, 147, 148, 149, 161, 190, 191, 192, 210, 234, 254, 257, 268, 269, 270, 271, 274, 275, 278, 286, 287, 288, 302, 304, 319, 327, 346, 348, 356, 359, 361, 362, 374, 382, 384, 392], "0": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 45, 46, 55, 56, 57, 58, 61, 63, 68, 72, 80, 116, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 366, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392], "000": [5, 6, 7, 8, 328, 329], "0000": [254, 255, 257], "0001": 289, "000e": [328, 329], "001": [289, 292, 293, 295, 296, 299], "002": [294, 295], "004": 295, "005": 224, "008": [80, 140], "00808": 140, "01": [154, 224, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299], "01051757": 310, "013": [43, 140], "016": [99, 140], "0205": 254, "0217": 254, "0227": 254, "024": [86, 121, 140], "026": [110, 140], "028": [115, 140], "0299": 254, "032": [55, 106, 140], "03545": 140, "044715": [152, 221], "0450": 254, "0451": 254, "046": [53, 140], "047": [133, 140], "04719755": 338, "0474259": 157, "048": [123, 140], "0480": 254, "04861": 140, "05": [185, 188, 189, 203, 204, 205, 224, 259, 260, 261, 263, 264, 265, 266, 278, 280, 282], "0507": [156, 227], "06": [25, 63, 186, 262, 290, 298], "066": [37, 140], "069": [93, 104, 140], "07": [168, 179, 180, 241, 253, 254], "070": [88, 140], "0700": 254, "0706508": 231, "071": [99, 140], "0721": 254, "073": [129, 140], "07722396": 230, "0794": 257, "08": [292, 293, 294, 295, 296, 297], "0802": 257, "083": [67, 140], "08333333": 19, "085537": 345, "088": [121, 140], "08955": 140, "0900": [229, 254], "096": [137, 140], "0986": [158, 229], "09861229": 346, "0992": 254, "1": [0, 1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 116, 122, 123, 124, 125, 126, 130, 131, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "10": [0, 1, 2, 3, 5, 6, 7, 23, 24, 25, 40, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 131, 138, 139, 140, 141, 145, 146, 149, 163, 164, 176, 178, 190, 233, 236, 237, 238, 245, 246, 249, 251, 260, 261, 264, 268, 272, 273, 275, 278, 279, 280, 281, 282, 291, 304, 309, 312, 313, 316, 319, 322, 323, 331, 340, 356, 383, 385, 386, 388], "100": [6, 24, 55, 56, 57, 58, 132, 133, 134, 135, 140, 304, 392], "1000": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], "1000000": 289, "1001": [99, 140, 254], "1003": 254, "1007": 140, "10096": 140, "101": [89, 90, 100, 107, 110, 111, 112, 113, 114, 117, 122, 123, 124, 140], "10106": 140, "1014": 156, "102": [104, 140], "1025": [146, 149], "1026": [146, 149], "1027": [146, 149], "10499": 157, "1050": 228, "1054": 257, "1056": [146, 149], "10590": 140, "108": [56, 140], "1097": 140, "11": [88, 102, 119, 131, 132, 140, 176, 236, 237, 238, 245, 249, 260, 261, 264, 272, 273, 275, 319, 383, 384, 385, 386, 388], "110": [94, 140], "1105": 140, "1109": 140, "111": [49, 140], "1111": 253, "112": [82, 95, 140], "1134": 176, "114b": 386, "119": 176, "1192": [157, 158, 229], "12": [40, 41, 42, 43, 44, 50, 73, 74, 140, 147, 176, 192, 236, 237, 238, 245, 246, 249, 260, 261, 264, 270, 272, 273, 275, 319, 323, 324, 383, 385, 386, 388], "120": [55, 72, 75, 82, 83, 140], "121": [40, 41, 140], "123": [214, 215, 216, 217, 218, 219, 311, 312], "124": [214, 215, 218, 219], "125": 273, "1250": 255, "1251": 140, "1258": 140, "126": [107, 140], "128": [25, 30, 53, 69, 98, 107, 108, 131, 140, 149, 210, 381, 392], "1280": 78, "128x128": [381, 392], "13": [60, 131, 133, 140, 176, 236, 237, 238, 249, 261, 272, 273, 275, 319, 383, 385, 386, 388], "1314": 140, "132": [132, 140], "1324": 140, "133": [133, 140], "136": [57, 88, 140], "138": [134, 140], "14": [42, 91, 140, 236, 237, 238, 245, 246, 249, 261, 272, 273, 275, 305, 319, 323, 383, 385, 386, 388], "1409": 140, "143": [135, 140], "144": 83, "145": 176, "148": [29, 140], "149": [42, 99, 140], "15": [0, 36, 140, 176, 236, 237, 238, 249, 261, 272, 273, 275, 319, 323, 359, 383, 385, 386, 388, 392], "1513": 257, "152": [87, 101, 118, 140], "155": 319, "1556": 140, "156": [64, 140], "1588": [152, 221], "16": [40, 41, 72, 75, 78, 82, 83, 110, 116, 131, 134, 140, 146, 147, 149, 161, 191, 192, 203, 204, 205, 209, 210, 233, 234, 236, 237, 238, 245, 246, 249, 260, 261, 269, 270, 272, 273, 275, 278, 279, 280, 281, 282, 286, 319, 323, 354, 383, 385, 386, 388], "160": [82, 100, 140], "16227766": 20, "16425": 257, "1643": 253, "166": 319, "167": 223, "169": [40, 42, 140], "17": [93, 140, 236, 237, 238, 249, 261, 273, 318, 383, 385, 386, 388], "170": 176, "1704": 140, "17520119": 353, "177": [112, 140], "18": [74, 102, 119, 127, 140, 236, 237, 238, 245, 249, 261, 273, 322, 323, 383, 385, 386, 388], "1800": 254, "184": 82, "18877099": 230, "19": [51, 131, 135, 140, 163, 164, 176, 237, 238, 261, 317, 319], "192": [25, 26, 63, 73, 74, 101, 140], "194": [110, 140], "196": [39, 140], "1966": [158, 228, 229], "197": [28, 35, 140], "198": [82, 140], "1998": [140, 254], "1_53": 140, "1d": [162, 190, 193, 197, 203, 206, 259, 263, 268, 312, 319, 327, 359, 368, 369, 370, 371, 376], "1e": [25, 63, 168, 179, 180, 185, 186, 188, 189, 203, 204, 205, 241, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "1e6": 289, "1s4x24d": 96, "1st": [23, 138], "2": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 45, 46, 55, 56, 57, 58, 73, 74, 75, 78, 82, 83, 89, 90, 91, 92, 93, 94, 95, 97, 102, 119, 127, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "20": [0, 5, 6, 7, 8, 43, 140, 145, 146, 149, 237, 238, 245, 261, 279, 280, 323, 345], "200": [82, 92, 103, 140], "2004": 140, "201": [43, 92, 140], "2011": 209, "2012": 140, "2014": 140, "2015": 140, "2016": 140, "2017": [140, 278], "2018": [140, 209], "2019": 140, "2020": 140, "2021": 140, "2022": 140, "2023": [140, 209], "2024": 140, "2039": 257, "204": 238, "2048": [278, 280, 282], "21": [57, 105, 120, 140, 147, 176, 237, 238, 261, 323], "210": [58, 140], "211": 319, "21841": [34, 39], "22": [69, 137, 140, 176, 237, 238, 245, 261, 317, 319], "2201": 140, "221": [58, 140], "2231": [254, 257], "224": [23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 80, 81, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 131, 138, 140], "2247": [259, 260, 261, 263, 264, 265, 266], "224x224": [45, 60, 122, 123, 124, 125, 130], "226": 319, "22752314": 310, "2278": 140, "23": [90, 100, 107, 110, 111, 112, 113, 114, 117, 237, 238, 261], "2301": 140, "232": [80, 124, 140], "2324": [140, 227], "233": [33, 140], "234": [214, 215, 216, 217, 218, 219, 312], "235": [50, 140], "238": [83, 140], "23840584": 230, "24": [40, 41, 78, 82, 83, 92, 96, 103, 176, 191, 237, 238, 245, 261, 269, 323], "240": [33, 82, 83, 135, 140], "240x240": 45, "2424": [158, 229], "2447": 229, "246": [73, 140], "24d": 96, "25": [0, 96, 106, 115, 127, 140, 157, 169, 228, 238, 256, 261, 272, 273, 316, 331, 350, 361], "2500": [253, 255, 257], "2512": 220, "2547": 227, "256": [25, 98, 131], "26": [93, 140, 147, 178, 238, 251, 261, 323], "260": 140, "260x260": 45, "26325684": 310, "264": [44, 140], "2689": [158, 228, 229], "26894142": 230, "269": [94, 104, 140], "27": [95, 125, 140, 176, 236, 238, 261, 344], "272": [114, 140], "274": [90, 130, 140], "276": [214, 215, 218, 219], "28": [30, 38, 67, 73, 74, 121, 140, 176, 238, 323], "280": [37, 140], "288": [83, 92, 140], "289": [34, 47, 140], "28x28": [7, 8, 73, 74], "29": [130, 140, 238], "299": [136, 140], "299r": 386, "299x299": [61, 62, 69, 70], "2_i": [263, 264, 265], "2d": [163, 172, 191, 194, 198, 204, 207, 260, 264, 269, 319, 327, 330, 359, 365, 368, 369, 371, 376, 388], "2e": 294, "2nd": [23, 138], "2x": 97, "2x2": [166, 383, 385], "3": [1, 2, 3, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 73, 78, 80, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 140, 142, 143, 144, 146, 147, 148, 149, 152, 157, 158, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390], "30": [52, 61, 94, 97, 104, 140, 146, 202, 238, 388], "300": 140, "300x300": 45, "302": [56, 140], "3026": 257, "30823025": 230, "31": [176, 238, 319], "310": [328, 329], "31622777": 20, "319": 140, "32": [40, 42, 43, 75, 84, 89, 90, 91, 92, 93, 94, 95, 110, 111, 112, 113, 115, 140, 146, 149, 176, 178, 191, 203, 204, 205, 209, 210, 237, 238, 251, 269, 286, 317, 318, 323], "320": [93, 140], "321": [214, 215, 218, 219], "326": [117, 140], "32x16d": 140, "32x32": [5, 6, 72, 75], "32x32d": 140, "32x4d": [122, 125, 130, 140], "32x8d": [123, 140], "33": [44, 140, 146, 149, 178, 238, 251], "33333333": 19, "336": [28, 113, 132, 140], "337": [44, 140], "34": [105, 120, 128, 140, 146, 149, 176, 238, 319, 323], "342": [214, 215, 218, 219], "344": [51, 140], "345": [214, 215, 216, 217, 218, 219, 312], "35": [70, 140, 146, 149, 238], "350": [39, 140], "352": [60, 140], "355": [54, 140], "3567": [253, 257], "357": [134, 139, 140], "36": [92, 101, 103, 118, 238], "3679": [151, 156, 220], "368": [127, 129, 140], "36th": 140, "37": [87, 140, 236], "370": [49, 140], "372": 176, "375": 256, "3750": 255, "37754067": 230, "378": [74, 140], "380": 140, "380x380": 45, "38344152": 308, "384": [25, 26, 63], "38629436": 346, "389056": 345, "38th": 140, "392": [61, 140], "393": [52, 60, 140], "3935": 220, "3d": [164, 173, 192, 195, 199, 205, 208, 238, 261, 265, 270], "3x3": [140, 313], "4": [0, 1, 2, 3, 11, 12, 13, 14, 16, 18, 19, 20, 25, 40, 45, 63, 64, 72, 73, 74, 80, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 128, 129, 140, 141, 147, 149, 161, 162, 163, 164, 166, 168, 169, 171, 172, 173, 176, 178, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 289, 292, 296, 297, 299, 302, 305, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 333, 335, 341, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390], "40": [62, 78, 82, 83, 97, 140], "400": [31, 75, 140], "4044": 253, "4076": 254, "4096": [23, 138], "40d": 97, "41421356": 12, "416": [104, 122, 140], "41666667": 19, "417": [97, 140], "41808962": 310, "419974": 159, "4199743": 231, "42": [176, 209, 305, 313], "421": [214, 215, 218, 219], "423": [214, 215, 216, 217], "42718872": 20, "4278": 140, "4284": 140, "4286": 253, "43": [53, 140, 317, 319], "431": [66, 140], "432": [52, 140], "4323": 220, "4375": 255, "43758721": 308, "44": [100, 112, 140], "440": [57, 140], "4472136": 14, "448": [54, 140], "4495": [261, 265], "45": [128, 140, 176, 202, 388], "4510": 140, "4520": 140, "4545": 240, "455": [114, 140], "456": 140, "456x456": 45, "46": [29, 140], "464": [27, 97, 140], "468": [111, 140], "4700": 140, "4708": 140, "47112767": 340, "472": [111, 140], "48": [40, 43, 44, 83, 90, 94, 104, 122, 140, 178, 251], "480": [42, 82, 140], "481": [82, 140], "483": [95, 140], "49": [66, 117, 140], "496": [38, 140], "4979": 220, "4s2x40d": [97, 140], "4x": 96, "4x4": 390, "5": [1, 2, 10, 11, 16, 17, 18, 19, 23, 25, 33, 45, 47, 61, 72, 73, 74, 75, 78, 82, 83, 126, 127, 128, 129, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 157, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 181, 183, 185, 188, 189, 190, 193, 194, 201, 203, 204, 205, 210, 212, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 271, 272, 273, 275, 276, 278, 280, 282, 298, 302, 305, 306, 309, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 335, 337, 338, 339, 347, 348, 349, 350, 351, 356, 359, 360, 361, 362, 366, 368, 372, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "50": [5, 6, 89, 95, 96, 97, 98, 106, 108, 115, 121, 125, 129, 130, 140, 178, 251, 298, 317, 319, 331, 386, 387, 389, 392], "5000": [253, 255, 257], "504": [81, 140], "50_1s4x24d": 140, "510": 140, "5108": 257, "512": [25, 70, 85, 98, 102, 128, 140, 233, 278, 279, 280, 281, 282], "519": 140, "520": [64, 140], "52359878": 339, "528": 140, "528x528": 45, "53": [176, 318], "530": [111, 140], "536": [50, 140], "537": [83, 140], "543": [214, 215, 216, 217, 218, 219, 312], "54308063": 343, "544": [66, 134, 140], "545": 324, "5455": 240, "549": [100, 140], "55": [56, 140], "557": [106, 140], "559": [125, 140], "560": [48, 91, 140], "563": [214, 215, 218, 219], "5672": 140, "568": [58, 140], "5683": 140, "569": [123, 140], "57": [129, 140, 176], "57079633": [338, 339], "5720": 140, "5730": 140, "57366333": 311, "576": 83, "586": [62, 140], "587g": 386, "589": [30, 140], "590": [84, 140], "591": [27, 140], "592": [119, 140], "5987": 140, "5995": 140, "5th": [23, 138], "6": [11, 19, 23, 25, 40, 41, 42, 43, 44, 45, 63, 72, 75, 89, 95, 98, 105, 106, 108, 115, 120, 121, 128, 129, 138, 147, 148, 162, 163, 164, 166, 168, 173, 176, 178, 186, 190, 215, 219, 222, 226, 236, 237, 238, 241, 243, 244, 245, 246, 249, 251, 253, 259, 260, 261, 262, 263, 264, 265, 266, 268, 272, 273, 275, 276, 278, 279, 281, 290, 298, 302, 305, 312, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 333, 335, 347, 348, 349, 356, 359, 360, 361, 362, 366, 371, 372, 373, 377, 378, 380, 382, 383, 384, 385, 386, 388, 390], "60": [5, 6, 101, 140], "600": [45, 140], "600x600": 45, "6052": 257, "6065": 220, "608": [139, 140], "61": [24, 75, 140], "6105": 140, "611": [91, 140], "6114": 140, "6124": [259, 260, 261, 263, 264, 265, 266], "617": [55, 140], "62": [139, 140, 176], "623": [36, 140], "62686041": 353, "630": 140, "6321": [151, 220], "63245553": 20, "635": [38, 140], "636": [47, 140], "64": [25, 40, 44, 78, 82, 89, 90, 91, 92, 93, 94, 95, 98, 103, 114, 126, 131, 140, 146, 149, 176, 209, 210], "640": [34, 51, 140], "645": 140, "64589411": 308, "647": [127, 140], "64x4d": [124, 140], "654": [214, 215, 216, 217, 218, 219, 312], "657": [214, 215, 218, 219], "6590": [158, 229], "66": [54, 118, 140], "660": [34, 140], "6652": 229, "66666667": 19, "6667": 253, "667": [135, 140], "6682": 253, "669": [103, 140], "67": 319, "672": [82, 105, 140], "67326": 227, "6733": 156, "676": [96, 140], "678": [214, 215, 216, 217, 218, 219], "68811989": 310, "689": [102, 140], "69314718": 346, "696": [107, 140], "7": [18, 41, 48, 131, 140, 147, 162, 163, 164, 166, 168, 173, 176, 178, 179, 180, 190, 210, 221, 226, 227, 228, 231, 236, 237, 238, 241, 245, 246, 249, 251, 253, 254, 256, 260, 261, 264, 265, 268, 272, 273, 275, 276, 305, 306, 309, 312, 315, 317, 318, 319, 323, 325, 327, 331, 345, 348, 356, 359, 360, 361, 373, 376, 377, 378, 382, 383, 384, 385, 386, 388, 390], "70": [7, 8, 92, 140], "7001": 254, "704": [44, 112, 140], "706": [75, 140], "70710678": [14, 352], "708": [31, 140], "7132": 140, "7141": 140, "7147": 257, "715": [85, 140], "717": [32, 140], "7182818": 345, "72": [78, 82, 83], "726791": 140, "7311": [158, 228, 229], "739": [69, 140], "74": 319, "748": [65, 140], "75": [178, 251, 256, 289, 331], "755": [87, 140], "7581": 156, "760": [90, 130, 140], "76159416": [230, 358], "7616": [159, 231], "76219569": 343, "7635": 227, "767": [28, 140], "768": [25, 26, 63], "770": 140, "772": 324, "774": [86, 140], "778": [119, 140], "78": [108, 140], "78357324": 310, "78539816": 340, "791": [113, 140], "79172504": 308, "792": [110, 140], "795": [48, 140], "797": [105, 140], "7x7": 138, "8": [17, 21, 40, 45, 94, 98, 101, 104, 110, 111, 112, 113, 114, 115, 118, 127, 128, 129, 141, 146, 147, 149, 161, 162, 163, 164, 166, 168, 173, 176, 178, 179, 190, 191, 192, 203, 204, 205, 209, 221, 222, 227, 228, 231, 233, 234, 236, 237, 238, 241, 243, 244, 245, 246, 249, 251, 253, 256, 260, 261, 264, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 280, 281, 282, 292, 293, 294, 295, 296, 297, 305, 306, 309, 316, 317, 318, 319, 323, 324, 326, 327, 344, 348, 356, 359, 360, 361, 373, 377, 378, 382, 383, 384, 385, 386, 388, 390], "80": [5, 6, 7, 8, 82], "800": [32, 36, 140], "8005": 254, "808": [101, 140], "817": [61, 140], "818": 140, "8182": 240, "82": 176, "821": [118, 140], "83": [114, 140], "832": [67, 140], "833": 140, "84": [72, 74, 75], "840": [24, 35, 65, 140], "8413": [152, 221], "847": [70, 140], "848": [118, 133, 140], "856": [41, 140], "85772238": 230, "8584": 227, "86": [65, 140], "862": [137, 140], "863": [132, 140], "864": [84, 103, 140], "868": [120, 140], "872": [81, 96, 117, 140], "876": [214, 215, 218, 219, 312], "88": [27, 32, 83, 113, 124, 140], "8808": [158, 228, 229], "884": [29, 140], "886": [107, 140], "887": 324, "891773": 308, "89442719": 14, "895": [128, 140], "896": [125, 140], "9": [0, 1, 3, 8, 21, 25, 26, 37, 49, 63, 85, 140, 163, 166, 168, 176, 178, 190, 236, 237, 238, 241, 245, 249, 251, 253, 260, 261, 264, 268, 272, 273, 275, 289, 290, 292, 293, 294, 295, 296, 297, 299, 305, 306, 309, 312, 315, 319, 323, 324, 325, 327, 354, 355, 377, 378, 382, 383, 384, 385, 386, 388], "904": [115, 140], "90709145": 311, "9091": 240, "9120": 257, "9163": 257, "928": [43, 140], "929": [94, 140], "93": [123, 140], "94": 99, "9486833": 20, "949e": [328, 329], "9526": 157, "9545": 221, "955": [122, 140], "956": [35, 140], "958": [120, 140], "96": [25, 26, 63, 83], "960": 82, "96366276": 308, "9640": 231, "96402758": 358, "968": [39, 140], "973": [108, 140], "978": [41, 140], "984": [62, 124, 140], "99": 297, "9957": 257, "99734545": 311, "999": [0, 292, 293, 294, 295, 296], "A": [1, 3, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 46, 68, 72, 76, 79, 89, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 131, 132, 133, 134, 135, 140, 143, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 176, 178, 179, 180, 184, 185, 186, 188, 189, 201, 210, 234, 240, 241, 243, 244, 245, 246, 253, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 305, 306, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 388], "As": 311, "At": 284, "Be": 0, "By": [0, 2, 3, 10, 79, 86, 99, 100, 101, 102, 103, 104, 105, 106, 144, 202, 286, 296, 302, 306, 308, 309, 310, 312, 382, 392], "For": [2, 3, 4, 10, 12, 13, 14, 16, 17, 18, 19, 21, 84, 85, 86, 88, 149, 151, 152, 154, 155, 156, 157, 159, 176, 178, 201, 214, 215, 218, 219, 227, 236, 237, 238, 249, 251, 259, 260, 261, 263, 264, 265, 286, 288, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 345, 346, 347, 348, 349, 352, 354, 356, 359, 360, 361, 369, 371, 374, 376, 379, 392], "If": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 98, 141, 143, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 159, 161, 162, 163, 164, 169, 173, 176, 178, 185, 188, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 210, 214, 215, 233, 234, 236, 237, 238, 242, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 292, 293, 297, 298, 304, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 382, 386, 387, 389, 390], "In": [3, 10, 19, 162, 163, 164, 254, 257, 301, 302, 303, 381, 392], "It": [1, 2, 3, 7, 10, 19, 20, 21, 23, 25, 26, 38, 41, 42, 43, 44, 59, 60, 61, 72, 73, 74, 75, 77, 78, 80, 88, 98, 99, 100, 101, 102, 103, 104, 105, 106, 119, 131, 137, 140, 143, 145, 146, 147, 148, 149, 169, 173, 176, 201, 202, 203, 204, 205, 209, 221, 222, 225, 226, 231, 233, 234, 242, 249, 250, 253, 254, 255, 256, 257, 268, 269, 270, 278, 279, 281, 284, 286, 287, 288, 289, 295, 297, 298, 299, 302, 311, 315, 316, 317, 320, 321, 322, 324, 325, 331, 347, 349, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382], "Its": [21, 313], "Near": 19, "No": [166, 169], "Not": 250, "One": [73, 392], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "There": 372, "These": [4, 10, 11, 14, 17, 20, 22, 55, 56, 57, 58, 84, 85, 86, 87, 88, 107, 108, 127, 128, 129, 137, 140, 240, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 298, 305, 313, 392], "To": [3, 140, 288, 306, 310, 313, 328, 329, 368, 392], "With": [3, 166, 169, 382, 392], "_": [17, 145, 146, 148, 149, 151, 152, 154, 155, 156, 157, 159, 178, 201, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 289, 290, 292, 293, 294, 295, 297, 299, 317, 318, 319, 323, 359, 360, 377, 378, 383, 384, 385, 387, 388, 389], "_1": [14, 145, 146, 147, 148, 149, 176, 249, 323, 364, 366, 380], "_2": [14, 145, 146, 147, 148, 149, 176, 249, 323, 364, 366, 380], "__call__": [1, 143], "__getitem__": [0, 2, 3, 5, 6, 7, 8], "__init__": [0, 1, 2, 3, 10, 23, 25, 26, 45, 46, 59, 63, 68, 72, 76, 77, 78, 79, 89, 131, 138, 141, 142, 143, 144, 145, 146, 147, 148, 169, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 314, 381, 382], "__iter__": [0, 1], "__len__": [0, 1, 2, 3, 5, 6, 7, 8], "__repr__": 287, "__setattr__": 143, "_activ": 158, "_arraylik": [305, 327, 329, 333, 335], "_arraylikeint": 369, "_arrayorscalar": [142, 144, 305, 306, 314, 362], "_base_activ": 72, "_base_dtyp": [326, 328, 331, 332, 334], "_block": 241, "_c": 384, "_decai": 295, "_fanmod": [214, 215], "_grad_en": [301, 303], "_i": [14, 18, 158, 169, 176, 229, 242, 256, 259, 266, 271, 274, 317, 318, 320, 321, 323, 324, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 371, 374, 379, 380], "_in": [214, 215, 218, 219], "_interpolatetyp": 284, "_j": [158, 229, 271, 274, 323, 348, 356, 360, 361], "_k": 375, "_layer": [279, 281], "_left": 201, "_make_lay": 131, "_mlphead": 63, "_modul": 143, "_n": [14, 145, 146, 147, 148, 149, 364, 366, 380], "_numpyarrai": 305, "_out": [214, 215, 218, 219, 371, 376], "_p": 18, "_pad": 369, "_paddingstr": [203, 204, 205, 206, 207, 208, 236, 237, 238], "_paramet": 143, "_reductiontyp": [179, 180, 181, 183, 184, 253, 254, 255, 256, 257], "_resnestbottleneck": 89, "_right": 201, "_scalar": [161, 212, 216, 217, 218, 219, 234, 305, 326, 331, 341], "_seresnetbottleneck": [117, 118, 121], "_seresnetmodul": [119, 120], "_shapelik": [141, 189, 266, 305, 309, 332, 334, 363, 372, 374, 379], "_size": [190, 191, 192, 241], "_skresnetmodul": [127, 128, 129], "_slope": 224, "_statedict": 287, "_t": [296, 297], "_tensor": [142, 144, 233, 278, 280, 282, 327, 362], "_tensorop": 314, "_u": 19, "_v": 19, "_valu": [341, 369], "_width": 369, "a_": 280, "a_1": [233, 373], "a_2": 373, "a_h": 233, "a_i": [233, 320, 321, 324, 373], "a_k": 373, "aaai": 140, "ab": 336, "abc": [2, 287], "abil": [10, 140, 392], "about": [10, 141], "abov": [10, 301, 303, 311, 327, 330, 377], "absolut": [17, 18, 181, 294, 337], "abstract": [2, 3, 286, 287, 288, 289, 297, 299], "abstractmethod": 287, "abund": [34, 87], "acceler": [140, 227, 259, 260, 261, 289, 295, 297, 299], "accept": [250, 308, 314], "access": [0, 2, 3, 4, 5, 6, 7, 8, 110, 111, 112, 113, 114, 115, 142, 144, 145, 146, 147, 148, 149, 372], "accord": [169, 201, 236, 237, 238, 249, 251, 254, 257, 290, 291, 292, 293, 294, 295, 296, 360, 363], "accordingli": 13, "account": [17, 19, 20, 230], "accumul": [289, 290, 291, 315, 316, 320, 321, 322, 325, 363], "accur": 118, "accuraci": [32, 34, 35, 36, 37, 55, 56, 57, 58, 65, 67, 76, 77, 78, 84, 85, 86, 87, 88, 121, 140], "achiev": [109, 110, 111, 112, 113, 114, 115, 140, 162, 163, 164, 190, 268, 269, 270, 295, 387, 389], "across": [0, 5, 6, 25, 38, 80, 140, 142, 146, 149, 186, 189, 190, 191, 192, 218, 219, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 305, 306, 308, 309, 310, 311, 312, 313, 328, 329, 348, 361], "act": 293, "activ": [10, 23, 25, 72, 82, 83, 99, 103, 104, 116, 131, 138, 140, 145, 149, 151, 152, 154, 155, 156, 157, 158, 159, 167, 203, 204, 205, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 240, 241, 243, 244, 245, 246, 253, 254, 257, 259, 260, 261, 266, 278, 280, 282, 347, 349], "actual": [144, 253, 254, 256, 257, 314, 385], "ad": [40, 78, 98, 143, 145, 146, 147, 148, 149, 162, 163, 164, 168, 176, 178, 179, 180, 185, 186, 188, 189, 193, 194, 195, 197, 198, 199, 203, 204, 205, 233, 236, 237, 238, 241, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 304, 379, 392], "adadelta": 300, "adagrad": [290, 300], "adam": [140, 293, 294, 295, 296, 300], "adamax": 300, "adamw": 300, "adapt": [23, 59, 72, 84, 87, 89, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 140, 190, 191, 192, 209, 210, 268, 269, 270, 290, 291, 292, 295, 296, 297, 298], "adaptive_avg_pool1d": [175, 196, 268], "adaptive_avg_pool2d": [175, 196, 269], "adaptive_avg_pool3d": [175, 196, 270], "adaptiveavgpool1d": [248, 277], "adaptiveavgpool2d": [23, 116, 131, 138, 248, 277], "adaptiveavgpool3d": [248, 277], "add": [4, 143, 145, 146, 149, 176, 178, 233, 236, 237, 238, 249, 251, 266, 287, 289, 292, 297, 299, 302, 336, 369, 379], "add_bias_kv": 233, "add_modul": [143, 149], "add_param_group": 287, "add_zero_attn": 233, "addit": [4, 10, 17, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 143, 146, 149, 176, 178, 185, 188, 249, 251, 259, 260, 261, 263, 264, 265, 289, 295, 302, 313, 315, 375], "addition": 295, "address": [254, 257, 292, 293, 296], "adjust": [69, 76, 78, 80, 88, 122, 123, 124, 125, 126, 130, 190, 191, 192, 210, 240, 241, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 288, 292, 296, 297, 298, 366, 380], "advanc": [3, 19, 46, 63, 77, 87, 103, 140, 146, 149, 162, 163, 164, 190, 191, 192, 268, 269, 270, 286, 289], "advantag": [70, 303], "affect": [301, 370, 374, 381], "affin": [203, 204, 205, 259, 260, 261, 263, 264, 265, 266, 388], "after": [17, 23, 82, 83, 138, 144, 145, 146, 147, 148, 149, 173, 209, 210, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 237, 238, 240, 243, 244, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 278, 280, 282, 293, 303, 314, 315, 316, 320, 321, 322, 324, 325, 331, 369, 373, 382], "afterward": 303, "aggreg": [140, 210, 323, 371, 376], "aim": [4, 10], "al": [60, 140, 278], "alex": [5, 6, 140], "alexnet": [71, 138, 140], "algebra": [10, 11, 330], "algorithm": [7, 10, 17, 19, 20, 287, 288, 313], "align": [21, 87, 201, 284, 318, 319], "align_corn": [201, 284], "all": [0, 3, 4, 10, 20, 45, 140, 143, 145, 146, 147, 148, 149, 163, 164, 190, 191, 192, 194, 195, 198, 199, 201, 204, 205, 210, 224, 225, 233, 238, 268, 269, 270, 272, 273, 276, 278, 286, 287, 288, 289, 292, 297, 298, 299, 324, 347, 348, 349, 356, 359, 361, 364, 365, 366, 371, 374, 375, 376, 377, 378, 380, 383, 384, 392], "allevi": [140, 151], "alloc": [328, 329], "allow": [0, 1, 3, 4, 10, 19, 20, 70, 72, 79, 82, 83, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 109, 122, 123, 124, 125, 126, 130, 140, 144, 145, 146, 147, 148, 149, 151, 154, 155, 158, 164, 166, 202, 210, 220, 221, 224, 227, 228, 229, 231, 234, 236, 237, 238, 284, 286, 290, 291, 302, 326, 332, 334, 335, 360, 362, 368, 381, 382, 392], "along": [158, 201, 210, 229, 318, 319, 323, 347, 348, 349, 356, 359, 361, 363, 364, 366, 368, 371, 373, 375, 376, 379, 380, 387, 389], "alongsid": 142, "alpha": [151, 154, 156, 167, 220, 227, 240, 289, 297], "alpha_dropout": [174, 175, 240], "alphadropout": [247, 248], "alphadropoutmodel": 240, "alreadi": 304, "also": [141, 151, 152, 154, 155, 156, 157, 159, 176, 178, 201, 295, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 364, 366, 369, 370, 371, 372, 374, 375, 376, 379, 380], "alter": [149, 372], "altern": [1, 221, 290, 319], "alwai": [144, 370, 386, 387, 389], "among": [61, 210], "amount": [162, 163, 164, 193, 194, 195, 197, 198, 199, 206, 207, 208, 295], "ampl": 84, "amsgrad": [292, 293], "an": [0, 1, 3, 10, 14, 16, 17, 19, 20, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 152, 162, 163, 164, 166, 167, 170, 171, 172, 173, 176, 191, 192, 201, 202, 206, 207, 208, 210, 218, 219, 220, 226, 228, 233, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 251, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 287, 288, 289, 292, 295, 297, 303, 304, 305, 314, 319, 327, 330, 341, 348, 356, 361, 363, 364, 371, 373, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "analog": [371, 376], "analysi": [4, 209, 236, 237, 238, 265, 271, 273, 274, 276], "andreetto": 140, "andrew": 140, "angl": [202, 388], "ani": [0, 1, 2, 3, 17, 19, 24, 98, 126, 137, 139, 142, 143, 144, 145, 147, 148, 151, 152, 154, 155, 156, 157, 159, 167, 170, 176, 178, 185, 188, 228, 266, 286, 287, 301, 303, 304, 311, 314, 326, 327, 328, 330, 332, 333, 334, 335, 347, 349, 360, 362, 364, 365, 366, 369, 371, 375, 376, 379, 380, 381, 392], "anoth": [79, 148, 325, 333, 335, 382, 392], "api": [4, 268, 269, 270, 392], "appear": 287, "append": [146, 148, 149, 233], "appli": [2, 4, 5, 6, 7, 8, 10, 17, 23, 25, 45, 46, 63, 109, 126, 136, 138, 140, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 186, 203, 204, 205, 209, 210, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 289, 290, 291, 293, 294, 295, 296, 319, 369, 371, 377, 378, 381, 384, 386, 387, 388, 389, 390, 392], "applic": [4, 19, 27, 28, 29, 32, 34, 39, 40, 66, 69, 70, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 140, 162, 188, 236, 237, 238, 249, 251, 313, 326, 334, 369, 373, 377, 378, 390], "approach": [3, 68, 149, 293], "appropri": [19, 78, 82, 83, 140, 143, 147, 149, 169, 236, 237, 238, 240, 243, 244, 254, 272, 273, 301, 303], "approx": 156, "approxim": [19, 152, 221, 222, 223, 272, 275], "ar": [1, 2, 3, 4, 10, 13, 14, 16, 17, 19, 20, 21, 22, 55, 56, 57, 58, 59, 60, 61, 84, 86, 87, 140, 142, 143, 144, 145, 146, 147, 148, 149, 158, 162, 163, 164, 166, 169, 176, 178, 186, 191, 192, 201, 206, 207, 208, 209, 210, 214, 215, 217, 218, 219, 222, 229, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 251, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 284, 286, 289, 292, 293, 295, 296, 297, 298, 299, 301, 303, 304, 305, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 337, 341, 345, 347, 348, 349, 350, 351, 356, 359, 360, 363, 364, 368, 371, 372, 373, 376, 377, 378, 381, 382, 383, 385, 386, 390, 392], "arang": 336, "arbitrari": [146, 250, 328, 329, 341, 346, 348, 352, 354, 356, 360, 361], "arcco": 336, "arch": 304, "architectur": [24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 145, 146, 147, 148, 149, 152, 209, 222, 223, 225, 230, 233, 234, 249, 250, 278, 286, 304], "arcsin": 336, "arctan": 336, "area": [201, 284], "arg": [143, 250, 304, 328], "argument": [3, 4, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 143, 149, 250, 308, 328, 360], "around": [14, 202, 231], "arr": [305, 364, 366, 375, 380], "arrai": [10, 142, 144, 302, 305, 314, 319, 327, 333, 335, 362, 370, 371, 382, 392], "art": [34, 140], "artifici": 140, "arxiv": 140, "asarrai": 305, "asgd": 300, "aspect": 390, "assign": [143, 145, 147, 149, 201, 254, 257], "assist": [59, 60, 61], "associ": [147, 148], "assum": [0, 1, 287, 288, 301], "attempt": [145, 149], "attend": [161, 234, 279, 281, 282], "attent": [89, 96, 97, 126, 140, 148, 176, 209, 233, 234, 278, 279, 280, 281, 282], "attn": [161, 234], "attn_mask": [161, 234], "atto": [31, 64, 140], "attribut": 143, "audio": 236, "augment": [3, 4, 119, 202, 313, 371, 376, 381, 385, 386, 387, 388, 389, 392], "autodiff": 10, "autoencod": 140, "autograd": 286, "automat": [4, 10, 144, 145, 146, 147, 148, 286, 306, 308, 309, 310, 312, 314, 328, 329, 335, 368, 382], "autoregress": [161, 234], "auxiliari": [59, 60, 61, 142], "avail": [4, 5, 6, 7, 8, 10], "avd": 89, "averag": [23, 73, 74, 75, 89, 98, 109, 116, 126, 131, 138, 142, 190, 191, 192, 193, 194, 195, 201, 209, 210, 256, 268, 269, 270, 271, 272, 273, 289, 290, 292, 297, 348], "avg_down": 98, "avg_pool": [271, 272, 273], "avg_pool1d": [175, 196], "avg_pool2d": [175, 196], "avg_pool3d": [175, 196], "avgpool": [23, 116, 131, 138, 210], "avgpool1d": [248, 277], "avgpool1dmodel": 271, "avgpool2d": [248, 277], "avgpool2dmodel": 272, "avgpool3d": [248, 277], "avgpool3dmodel": 273, "avoid": [2, 3, 19, 46, 147, 303, 331], "ax": [11, 302, 347, 348, 349, 356, 360, 361, 363, 371, 374, 376], "axi": [18, 158, 229, 318, 319, 347, 348, 349, 356, 361, 364, 366, 368, 369, 371, 373, 374, 375, 376, 379, 380, 387, 389], "b": [11, 21, 140, 176, 178, 217, 236, 237, 238, 249, 251, 302, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 363, 364, 366, 368, 375, 380, 386], "b0": [45, 47, 140], "b1": [45, 48, 140], "b2": [45, 49, 140], "b3": [45, 50, 140], "b4": [45, 51, 140], "b5": [45, 52, 140], "b6": [45, 53, 140], "b7": [45, 54, 140], "b_1": [280, 282], "b_2": [280, 282], "b_i": [320, 321, 324], "b_k": 233, "b_v": 233, "back": [201, 233, 272, 273, 304, 318, 323, 371, 376], "backbon": [127, 128, 129], "backpropag": [10, 13, 14, 16, 17, 19, 20, 22, 140, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 176, 178, 201, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 286, 303, 310, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 345, 347, 349, 362, 363, 369, 371, 376, 377, 378, 382], "backward": [10, 142, 144, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 314, 331, 382], "balanc": [29, 32, 33, 36, 46, 55, 56, 57, 58, 67, 78, 79, 85, 86, 88, 110, 111, 112, 113, 114, 115, 140, 255], "bar": 289, "base": [3, 11, 16, 17, 20, 21, 27, 30, 32, 40, 59, 60, 61, 62, 65, 68, 69, 70, 72, 79, 85, 86, 88, 89, 96, 97, 109, 110, 111, 112, 113, 114, 115, 126, 131, 136, 140, 143, 145, 146, 147, 148, 161, 166, 176, 190, 191, 192, 210, 234, 240, 254, 255, 268, 269, 270, 286, 287, 288, 289, 293, 297, 298, 299, 306, 315, 316, 320, 321, 322, 324, 325, 335, 345, 346, 347, 349, 360, 368, 369, 373, 385, 386, 387, 388, 389], "base_width": [89, 90, 91, 92, 93, 94, 95, 107, 108, 109, 126], "basic": [10, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 136, 138, 141, 161, 162, 163, 164, 168, 169, 190, 191, 192, 203, 204, 205, 206, 207, 208, 209, 214, 215, 218, 219, 234, 241, 268, 269, 270, 331, 363, 383, 384, 385, 386, 387, 388, 389, 390], "basicblock": [98, 102, 105], "batch": [1, 2, 3, 11, 17, 20, 22, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 69, 70, 116, 122, 123, 124, 125, 130, 161, 162, 163, 164, 166, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 233, 234, 236, 237, 238, 249, 251, 253, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 296, 319, 383, 384, 385, 386, 388, 390], "batch_norm": [175, 187, 259, 260, 261], "batch_norm1": 149, "batch_norm2": 149, "batch_siz": [1, 2, 3, 136, 210], "batchnorm": [203, 204, 205], "batchnorm1d": [203, 248, 267], "batchnorm1dmodel": 259, "batchnorm2d": [149, 204, 248, 267], "batchnorm2dmodel": 260, "batchnorm3d": [205, 248, 267], "batchnorm3dmodel": 261, "bceloss": [248, 258], "becaus": [2, 309], "becom": [18, 143, 290, 298], "been": 230, "befor": [17, 116, 141, 144, 161, 234, 278, 280, 282, 289, 295, 303, 311, 369, 384, 392], "begin": [1, 18, 151, 154, 155, 156, 169, 220, 222, 223, 224, 225, 227, 242, 255, 256, 257, 271, 272, 273, 274, 275, 276, 296, 298, 302, 313, 320, 321, 323, 337, 341, 347, 349, 351, 369, 377, 378], "behav": [242, 255, 359], "behavior": [140, 146, 149, 161, 234, 301, 313, 319, 329, 392], "being": [148, 202, 240, 243, 244, 245, 246, 296, 301, 303, 364, 366, 380], "belong": 0, "below": [20, 60, 61, 62, 69, 70, 72, 73, 74, 75, 319, 327, 330, 378], "benchmark": [5, 6, 7, 8, 87], "benefici": 149, "benefit": [88, 151, 286, 295, 305], "bernoulli": [240, 243, 244, 245, 246, 307], "best": [87, 214, 215, 218, 219], "beta": [186, 259, 260, 261, 262, 263, 264, 265, 266, 292, 293, 294, 295, 296], "beta1": [292, 293, 294, 295, 296], "beta2": [292, 293, 294, 295, 296], "beta_1": [292, 293, 294, 295, 296], "beta_2": [292, 293, 294, 295, 296], "beta_c": [186, 262], "better": [16, 86, 138, 140, 152, 214, 215, 218, 219, 230, 241, 263, 264, 265, 286, 293, 295, 297, 384], "between": [29, 32, 36, 55, 56, 57, 58, 67, 79, 85, 86, 88, 110, 111, 112, 113, 114, 115, 140, 143, 162, 163, 164, 166, 176, 181, 203, 204, 205, 206, 207, 208, 210, 226, 236, 237, 238, 240, 243, 244, 245, 246, 249, 253, 254, 255, 256, 257, 289, 297, 298, 299, 313, 315, 316, 319, 322, 325, 326, 331, 361, 386, 387, 389, 390], "beyond": [10, 146], "bia": [162, 163, 164, 176, 178, 185, 188, 189, 203, 204, 205, 206, 207, 208, 233, 236, 237, 238, 249, 251, 259, 260, 261, 263, 264, 265, 266, 278, 280, 282, 292, 293, 294, 295, 296], "bias": [236, 237, 238, 251, 266, 286], "bias1": 147, "bias2": 147, "big": [206, 207, 208], "bilinear": [175, 177, 201, 248, 252, 284], "bilinearmodel": 249, "binari": [157, 179, 228, 240, 243, 244, 245, 246, 253], "binary_cross_entropi": [175, 182], "blend": 88, "block": [40, 41, 42, 43, 44, 45, 46, 63, 68, 77, 78, 79, 81, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 143, 166, 168, 169, 203, 204, 205, 210, 236, 237, 238, 241, 303], "block1": [141, 286], "block2": [141, 286], "block_arg": [98, 116], "block_cfg": 46, "block_config": 40, "block_siz": [168, 241], "blue": 386, "bmatrix": 323, "bn": [203, 204, 205], "bn_affin": [203, 204, 205], "bool": [1, 5, 6, 7, 8, 18, 22, 45, 59, 60, 61, 89, 98, 141, 143, 144, 161, 167, 169, 170, 171, 172, 173, 185, 188, 201, 203, 204, 205, 206, 207, 208, 233, 234, 236, 237, 238, 242, 249, 251, 259, 260, 261, 263, 264, 265, 266, 278, 279, 280, 281, 282, 284, 292, 293, 297, 301, 306, 308, 309, 310, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 348, 349, 356, 361, 362, 382], "boost": 84, "both": [79, 162, 178, 191, 193, 197, 203, 221, 230, 236, 237, 269, 271, 272, 274, 275, 282, 284, 317, 318, 319, 323, 327, 368, 373, 390], "bottleneck": [40, 77, 78, 81, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 140, 209], "bottleneck_cfg": 78, "bottom": 201, "bound": [215, 217, 219, 298, 312], "box": 4, "branch": [59, 60, 61, 140, 210], "break": 286, "brief": 392, "bright": 392, "broadcast": [245, 246, 348, 356, 361, 372, 379], "broadcast_to": 367, "budget": 36, "buffer": [289, 295, 297, 299], "build": [10, 26, 46, 70, 78, 79, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 126, 127, 128, 129, 140, 143, 146, 149, 286, 392], "built": [3, 10, 99, 103, 104, 149, 286], "burg": 8, "c": [5, 6, 8, 98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 140, 166, 168, 171, 172, 173, 180, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 209, 245, 246, 254, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 302, 366, 380, 384], "c_": [236, 237, 238], "c_in": [162, 163, 164, 203, 204, 205], "c_out": [162, 163, 164], "calcul": [0, 1, 10, 11, 144, 284, 290, 291, 294, 295, 296, 303, 309, 314], "calculu": [12, 19], "call": [1, 143, 301, 304, 315, 316, 319, 320, 321, 322, 324, 325], "callabl": [278, 280, 282, 287, 304, 381], "can": [0, 2, 3, 4, 10, 12, 14, 16, 17, 19, 20, 22, 45, 78, 84, 85, 87, 88, 98, 107, 108, 122, 123, 124, 125, 136, 137, 140, 141, 142, 144, 145, 146, 147, 148, 149, 154, 162, 163, 164, 169, 202, 210, 221, 224, 226, 231, 236, 237, 238, 263, 264, 265, 272, 273, 274, 275, 276, 279, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 303, 305, 312, 313, 314, 319, 328, 329, 330, 332, 334, 335, 348, 356, 361, 363, 366, 368, 369, 371, 372, 376, 379, 380, 381, 382, 385, 387, 388, 389, 392], "cannot": [13, 14, 16, 17, 20, 21, 22, 306], "cap": 226, "capabl": [10, 38, 96, 97, 326, 327, 330, 332, 333, 334, 335], "capac": [27, 28, 29, 35, 39, 76, 84, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 130, 140], "captur": [126, 140, 166, 236, 237, 238, 249], "cardin": [89, 90, 91, 92, 93, 94, 95, 96, 97, 109, 110, 111, 112, 113, 114, 115, 126, 140], "care": 303, "cartesian": 368, "case": [3, 18, 72, 78, 80, 151, 154, 155, 156, 169, 220, 222, 223, 224, 225, 227, 242, 255, 256, 257, 271, 272, 273, 274, 275, 276, 286, 291, 296, 298, 302, 320, 321, 337, 341, 347, 349, 351, 369, 377, 378, 392], "categori": [7, 99, 100, 101, 102, 103, 104, 105, 106], "caus": [3, 19, 289, 297, 299], "causal": [161, 234], "cautiou": 0, "cdot": [12, 13, 16, 17, 18, 21, 151, 152, 154, 156, 157, 161, 162, 163, 164, 176, 178, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 209, 218, 219, 221, 222, 223, 228, 230, 234, 240, 249, 251, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 290, 291, 292, 293, 294, 295, 296, 298, 317, 318, 319, 322, 324], "center": [202, 231, 297, 383, 392], "centercrop": [391, 392], "central": 305, "certain": [13, 152, 161, 176, 230, 234, 249, 282, 292, 293, 301, 347, 349], "cfg": [79, 82, 83], "chain": [16, 17, 149, 381, 392], "challeng": [7, 140], "cham": 140, "chanc": [386, 387, 389], "chang": [181, 255, 298, 302, 303, 304, 370, 372, 379, 386, 392], "channel": [25, 26, 40, 45, 72, 73, 74, 75, 76, 78, 80, 82, 83, 89, 96, 97, 98, 109, 110, 111, 112, 113, 114, 115, 120, 122, 123, 124, 125, 130, 131, 136, 140, 162, 163, 164, 166, 171, 172, 173, 185, 186, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 236, 237, 238, 245, 246, 259, 260, 261, 262, 263, 264, 265, 268, 271, 272, 273, 274, 275, 276, 384, 386, 390], "character": [107, 108], "check": [301, 383, 385], "checkpoint": 288, "chen": 140, "choic": [86, 88, 368], "choleski": 15, "chollet": 140, "choos": 140, "chosen": [240, 241], "christian": 140, "christoph": 8, "chu": 140, "cifar": [5, 6], "cifar10": 9, "cifar100": 9, "cifar100_train": 6, "cifar10_train": 5, "clariti": 305, "class": [3, 4, 10, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 141, 158, 169, 180, 184, 286, 288, 304, 327, 330, 331, 362, 392], "classic": 75, "classif": [4, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 157, 158, 179, 180, 184, 228, 229, 253, 254, 257], "classifi": [23, 59, 60, 61, 72, 73, 74, 75, 98, 109, 126, 131, 136, 138], "cleaner": [1, 303, 319], "clear": [144, 314, 328, 329, 331], "clearli": 305, "clf_in_featur": 72, "clf_layer": 72, "clip": [202, 222, 226, 298, 336], "clockwis": 202, "close": [16, 19, 227, 253, 297], "closer": 220, "closur": [287, 288], "cloth": 7, "cnn": 140, "co": [140, 336, 352], "code": [17, 145, 147, 149, 301, 303, 305, 313], "coeffici": [21, 45, 201, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "col": 166, "collect": [4, 11, 140, 145, 146, 148, 149, 288], "color": [386, 392], "colorjitt": 392, "column": [13, 14, 16, 20, 21, 22, 141, 166, 330, 366, 368], "com": [7, 8], "combin": [1, 3, 62, 68, 69, 88, 130, 140, 146, 149, 151, 152, 203, 204, 205, 209, 210, 221, 241, 254, 286, 295, 296, 348, 356, 361, 364, 392], "combined_dataset": [0, 1], "common": [166, 202, 288, 392], "commonli": [10, 76, 77, 78, 80, 81, 82, 83, 86, 88, 152, 157, 158, 159, 162, 164, 169, 176, 183, 185, 188, 202, 209, 218, 219, 222, 223, 226, 229, 234, 238, 253, 256, 257, 271, 272, 273, 274, 275, 276, 278, 302, 305, 332, 374, 382, 383, 384, 385, 387, 388, 389, 392], "compact": [30, 31, 33, 38, 67, 86], "compar": [29, 30, 107, 108, 138, 140, 313, 375], "compat": [4, 11, 126, 250, 266, 286, 302, 313, 331, 363, 382, 392], "competit": [31, 37, 38], "complet": [278, 279, 281], "complex": [2, 3, 10, 14, 28, 34, 39, 70, 87, 98, 101, 104, 105, 118, 120, 141, 145, 146, 149, 155, 225, 274, 276, 286, 288, 392], "compon": [19, 59, 60, 61, 62, 68, 69, 70, 143, 146, 288, 314, 392], "compos": [5, 6, 7, 8, 136, 236, 237, 238, 271, 272, 273, 274, 275, 276, 286, 392], "compound": 46, "comprehens": 3, "compris": [107, 108], "compromis": [85, 88], "comput": [10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 29, 30, 31, 33, 34, 36, 37, 64, 67, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 130, 140, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 201, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 287, 288, 289, 297, 301, 302, 303, 305, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 368, 369, 371, 376, 382, 392], "computation": [3, 19, 99, 222, 223], "compute_loss": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "concat": 233, "concaten": [0, 162, 163, 164, 233, 366, 367, 375, 380], "concept": [10, 19, 77, 140], "condit": [12, 13, 16], "confer": 140, "config": 131, "configur": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 137, 139, 148, 203, 204, 205, 234], "conjunct": [166, 257], "connect": [23, 25, 40, 41, 42, 43, 44, 45, 46, 62, 68, 69, 70, 72, 73, 74, 75, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 131, 136, 138, 140, 178, 209, 210, 236, 237, 238, 251, 280, 282], "consecut": 131, "consid": [3, 16, 19, 40, 84, 85, 86, 88, 149, 214, 215, 218, 219, 286, 298, 301, 328, 329, 377, 378, 392], "consider": 19, "consist": [2, 4, 7, 23, 73, 74, 75, 98, 142, 190, 191, 192, 210, 233, 268, 269, 270, 278, 280, 282, 305, 311, 313, 369, 383, 390, 392], "consistent_tensor": 313, "consol": 141, "constant": [179, 180, 185, 186, 188, 189, 213, 227, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 305, 369], "constant_pad": 369, "constrain": [31, 33, 36, 86], "constraint": [1, 76, 78, 85, 210], "construct": [10, 41, 42, 43, 44, 63, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 127, 128, 129, 132, 133, 134, 135, 146, 286, 327, 371, 376, 377, 378], "constructor": [41, 42, 43, 44, 55, 56, 57, 58, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 107, 108, 122, 123, 124, 125, 130, 132, 133, 134, 135], "consumpt": 88, "contain": [1, 5, 6, 7, 8, 13, 14, 19, 20, 21, 22, 68, 72, 98, 109, 110, 111, 112, 113, 114, 115, 116, 126, 131, 141, 143, 145, 146, 147, 148, 149, 158, 161, 166, 176, 178, 179, 180, 184, 201, 253, 254, 257, 287, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 329, 331, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 365, 368, 373], "content": 202, "context": [301, 303], "contextmanag": 303, "contigu": [168, 241, 370], "continu": [224, 310], "contrast": [263, 264, 265, 392], "contribut": [168, 201, 240, 243, 244, 245, 246, 271, 274, 275, 276, 289, 295, 359], "control": [25, 109, 210, 220, 255, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 313, 382, 392], "conv": [63, 68, 116, 140, 203, 204, 205, 260, 261], "conv1": [73, 74, 75, 149, 236, 237, 238, 271, 272, 273, 274, 275, 276], "conv1d": [165, 175, 203, 206, 239, 248, 271, 274], "conv1dmodel": 236, "conv2": [73, 74, 75, 149, 236, 237, 238], "conv2d": [146, 149, 165, 175, 204, 207, 239, 248, 260, 272, 275, 286], "conv2dmodel": 237, "conv3d": [165, 175, 205, 208, 239, 248, 261, 273, 276], "conv3dmodel": 238, "conv_bia": [203, 204, 205], "conv_config": 131, "conv_lay": [72, 146], "convblock": 286, "convbnrelu1d": 211, "convbnrelu2d": 211, "convbnrelu3d": 211, "conveni": [4, 24, 139], "convent": 319, "converg": [19, 231, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 384], "convers": [254, 257, 386, 392], "convert": [5, 6, 7, 8, 131, 142, 144, 158, 229, 314, 368, 381, 382, 386, 392], "convnetwork": 146, "convnext": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 71, 140], "convnext_bas": 140, "convnext_larg": 140, "convnext_smal": 140, "convnext_tini": 140, "convnext_v2": [31, 32, 33, 34, 35, 36, 37, 38], "convnext_v2_atto": 140, "convnext_v2_bas": 140, "convnext_v2_femto": 140, "convnext_v2_hug": 140, "convnext_v2_larg": 140, "convnext_v2_nano": 140, "convnext_v2_pico": 140, "convnext_v2_tini": 140, "convnext_xlarg": 140, "convolut": [23, 24, 25, 40, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 63, 68, 72, 73, 74, 75, 76, 78, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 130, 131, 136, 138, 139, 140, 146, 162, 163, 164, 166, 203, 204, 205, 206, 207, 208, 209, 210, 236, 237, 238, 272, 273, 275, 276, 369], "convolv": [162, 163, 164, 236, 237, 238], "coordin": 368, "copi": 363, "core": [0, 1, 2, 3, 143, 286, 287, 314, 392], "corinna": 8, "corner": [201, 284, 383, 385], "correct": [145, 254, 257, 292, 293, 294, 295, 296, 377, 378, 382], "correctli": [19, 143, 145, 146, 147, 148, 149, 254, 257, 313, 363], "correspond": [0, 1, 2, 5, 6, 7, 8, 14, 79, 80, 82, 83, 107, 108, 127, 128, 129, 145, 147, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 176, 178, 201, 222, 225, 229, 249, 251, 259, 260, 261, 263, 264, 265, 272, 273, 289, 297, 299, 306, 317, 318, 320, 321, 324, 345, 346, 352, 354, 363, 366, 369, 371, 376, 380], "cort": 8, "cosh": [336, 353, 358], "cosin": [338, 342, 343, 352], "cost": [76, 78, 79, 85, 86, 88, 109, 140, 206, 207, 208], "could": 143, "count": [79, 140, 141, 364], "counterclockwis": [202, 388], "cover": [11, 162, 163, 164], "coverag": [190, 191, 192], "creat": [2, 3, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 69, 70, 73, 74, 75, 78, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 146, 149, 210, 226, 233, 278, 279, 280, 281, 282, 286, 302, 304, 313, 326, 330, 331, 332, 333, 334, 335, 363, 368, 375, 381, 392], "creation": [55, 56, 57, 58, 146, 149, 392], "criterion": [253, 254, 255, 256, 257], "critic": [19, 86, 288, 313], "crop": [383, 385, 392], "cross": [179, 180, 253, 254, 278, 279, 280], "cross_entropi": [175, 182], "crossentropyloss": [248, 258], "cube": 336, "cumul": [152, 221], "current": [143, 289, 292, 298, 301], "custom": [4, 10, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 64, 65, 66, 67, 69, 70, 72, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 137, 138, 139, 142, 145, 146, 147, 148, 149, 202, 203, 204, 205, 220, 224, 278, 286, 313, 330, 331, 373], "custom_config": 131, "custom_decod": 278, "custom_encod": 278, "custom_lenet": 72, "customiz": 392, "custommodul": 142, "customnetwork": 145, "customparametermodel": [147, 148], "cut": 87, "cvf": 140, "cvpr": 140, "d": [140, 161, 164, 173, 192, 195, 199, 205, 234, 261, 265, 266, 270, 273, 276, 302, 327, 388], "d_": [164, 192, 195, 199, 233, 238, 270, 273, 276, 278, 279, 280, 281, 282], "d_1": 266, "d_2": 266, "d_h": [233, 280, 282], "d_model": [278, 279, 280, 281, 282], "d_n": 266, "d_out": [164, 195, 199], "dampen": [289, 297, 299], "data": [4, 5, 6, 7, 8, 10, 17, 142, 144, 148, 159, 162, 164, 166, 172, 173, 178, 202, 203, 204, 205, 210, 225, 231, 236, 237, 238, 251, 265, 271, 273, 276, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 305, 313, 314, 315, 316, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 363, 369, 370, 371, 372, 373, 374, 376, 381, 382, 385, 386, 387, 388, 389, 392], "databas": 8, "dataload": [2, 3], "dataset": [3, 5, 6, 7, 8, 28, 55, 56, 57, 58, 73, 74, 75, 76, 79, 84, 98, 99, 100, 101, 102, 103, 104, 105, 106, 202, 291, 303, 381, 383, 392], "dataset1": [0, 1], "dataset2": [0, 1], "ddot": 323, "debug": [141, 149, 301, 311, 392], "decai": [241, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "decod": [278, 279, 280], "decoder_lay": [279, 280], "decoderlay": 279, "decompos": [12, 20, 22], "decomposit": [11, 12, 16, 19, 20, 22], "decor": [110, 111, 112, 113, 114, 115, 304], "decoupl": [140, 290, 291, 293, 294, 295, 296], "decreas": [292, 293, 298], "deep": [1, 3, 4, 10, 65, 66, 68, 98, 99, 100, 101, 103, 104, 110, 111, 112, 113, 114, 115, 117, 118, 121, 140, 185, 221, 227, 286, 313, 331, 373, 377, 378, 381, 382, 392], "deeper": [10, 60, 62, 70, 98, 105, 140, 227], "def": [0, 1, 2, 3, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "default": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 179, 180, 181, 183, 184, 185, 186, 188, 189, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 224, 229, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 288, 295, 301, 306, 308, 309, 310, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 348, 349, 356, 360, 361, 362, 364, 366, 368, 369, 371, 373, 375, 377, 378, 380, 382, 386, 387, 389], "defin": [1, 3, 4, 10, 25, 40, 46, 59, 60, 61, 62, 68, 69, 70, 72, 78, 88, 89, 98, 116, 127, 128, 129, 131, 145, 146, 147, 148, 149, 169, 221, 223, 226, 230, 253, 254, 255, 256, 257, 271, 284, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 309, 310, 324, 329, 341, 360, 381, 392], "definit": [10, 12, 203, 204, 205, 392], "degre": [202, 388, 392], "delai": 289, "deliv": [86, 87], "delta": [158, 181, 229, 255, 290], "delta_": [158, 229], "demand": 87, "demonstr": [10, 11, 122, 123, 124, 125, 130, 140, 286, 305], "denomin": [185, 186, 188, 189, 203, 204, 205, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 316], "denot": [17, 96, 97, 228, 233, 236, 237, 238, 240, 243, 244, 245, 246, 360], "dens": [10, 40, 41, 42, 43, 44, 140, 169, 291], "dense1": 10, "dense2": 10, "densenet": [41, 42, 43, 44, 71, 140, 209], "densenet_121": 140, "densenet_169": 140, "densenet_201": 140, "densenet_264": 140, "densiti": [152, 221], "depend": [10, 17, 18, 78, 148, 179, 180, 181, 183, 184, 201, 236, 317, 327, 347, 349, 371, 376, 385, 386, 390], "deploy": 88, "depth": [25, 26, 27, 28, 29, 30, 39, 45, 46, 63, 84, 140, 146, 164, 169, 173, 192, 195, 199, 238, 242, 261, 265, 270, 273, 276], "depth_coef": 45, "depthseparableconv1d": 211, "depthseparableconv2d": 211, "depthseparableconv3d": 211, "depthwis": [25, 63, 76, 136, 140, 162, 163, 164, 206, 207, 208], "depthwise_separ": [206, 207, 208], "der": 140, "deriv": [19, 20, 158, 190, 191, 192, 221, 229, 231, 236, 237, 238, 249, 251, 304], "descend": 22, "descent": [10, 289, 299], "describ": [13, 14], "descript": 392, "deseri": 142, "design": [3, 4, 10, 11, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 38, 55, 56, 57, 58, 60, 61, 62, 64, 67, 73, 74, 75, 78, 79, 84, 85, 86, 87, 88, 99, 100, 101, 102, 103, 104, 105, 106, 117, 120, 136, 139, 140, 144, 146, 147, 148, 149, 151, 156, 227, 240, 286, 305, 392], "desir": [137, 142, 190, 191, 192, 241, 268, 269, 270, 284, 360, 362], "destin": 143, "det": [11, 15], "det_a": 13, "detail": [10, 141, 288, 313, 319], "detect": 140, "determin": [0, 10, 11, 12, 13, 72, 107, 108, 190, 191, 192, 214, 215, 218, 219, 236, 237, 238, 268, 269, 270, 272, 273, 275, 276, 297, 301, 306, 308, 309, 310, 312, 328, 329, 373, 383, 385], "determinist": 202, "develop": [10, 79, 286, 313, 392], "deviat": [214, 216, 218, 381, 384, 392], "devic": [77, 78, 84, 85], "diag": [19, 336], "diagon": [19, 20, 22, 327, 330, 359, 377, 378], "diagonaliz": 14, "dict": [24, 27, 28, 29, 30, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 107, 108, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 127, 128, 129, 130, 137, 139, 143, 145, 147, 250, 287], "dictionari": [72, 79, 86, 143, 144, 145, 147, 149, 287], "differ": [0, 17, 59, 63, 72, 78, 79, 85, 86, 122, 123, 124, 125, 130, 146, 149, 158, 176, 201, 210, 229, 249, 256, 288, 302, 311, 313, 325, 335, 361, 374, 392], "differenti": [10, 12, 21, 221, 286, 306, 308, 309, 310, 312, 314, 326, 328, 329, 332, 334], "digit": [7, 8, 75, 140], "dilat": [162, 163, 164, 203, 204, 205, 206, 207, 208, 236, 237, 238], "dilation_height": 166, "dilation_width": 166, "dim": [25, 26, 63, 161, 234, 254, 257], "dim_feedforward": [278, 280, 282], "dimens": [13, 14, 16, 17, 20, 21, 22, 23, 25, 27, 28, 29, 30, 39, 98, 109, 126, 131, 138, 140, 144, 158, 161, 176, 178, 185, 186, 188, 189, 191, 192, 201, 209, 210, 229, 233, 234, 236, 237, 238, 241, 259, 260, 261, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 278, 280, 281, 282, 284, 302, 305, 308, 312, 314, 318, 328, 347, 348, 349, 356, 359, 360, 361, 363, 364, 366, 369, 371, 374, 375, 376, 379, 380, 383, 385, 390], "dimension": [17, 19, 20, 22, 63, 162, 163, 164, 193, 194, 195, 197, 198, 199, 210, 233, 236, 237, 238, 244, 245, 246, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 278, 280, 282, 302, 318, 319, 323, 327, 345, 348, 356, 359, 361, 365, 370, 371, 374, 376, 377, 378], "diminish": 291, "direct": [14, 253, 254, 255, 256, 257, 289, 297, 298, 299], "directli": [55, 56, 57, 58, 140, 145, 146, 147, 148, 201, 284, 290, 291, 293, 294, 295, 296, 311, 313, 362, 392], "directori": [3, 4, 5, 6, 7, 8], "disabl": [169, 241, 242, 301, 303], "discontinu": 351, "discrep": [253, 254, 257], "discret": [306, 309, 313], "disk": 3, "displai": [24, 139, 141], "distinct": 79, "distribut": [152, 158, 168, 201, 214, 215, 216, 217, 218, 219, 221, 229, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 251, 254, 257, 271, 272, 273, 306, 308, 309, 310, 312, 313, 348, 356, 359, 361, 375, 384, 386, 387, 388, 389], "div": 336, "divers": [32, 140, 202, 387, 389, 392], "diversifi": 392, "divid": [1, 19, 140, 146, 149, 158, 162, 163, 164, 229, 253, 254, 255, 256, 257, 316, 373, 384], "divis": [10, 19, 162, 163, 164, 233, 240, 243, 244, 245, 246, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 316, 373], "do": [19, 21, 142, 145, 146, 147, 148, 167, 170, 171, 172, 286, 296, 301, 335, 359, 369], "document": [4, 10, 140, 288, 305, 313], "doe": [10, 17, 18, 19, 20, 22, 141, 142, 145, 146, 147, 148, 149, 219, 292, 293, 298, 301, 303, 306, 308, 309, 310, 311, 312, 326, 327, 328, 329, 330, 332, 333, 334, 335, 363, 372], "doesn": 303, "doi": 140, "domain": 4, "don": 303, "dot": [14, 17, 145, 146, 147, 148, 149, 161, 233, 234, 266, 274, 275, 276, 318, 323, 336, 364, 366, 375, 380], "down": [3, 286, 390], "download": [4, 5, 6, 7, 8], "downsampl": 89, "drawback": 151, "drawn": [308, 309, 310, 312, 313, 388], "drop": [25, 26, 63, 168, 169, 240, 241, 242, 243, 244, 245, 246], "drop_block": [174, 175], "drop_path": [25, 26, 174, 175, 242], "drop_path_r": [46, 63], "drop_prob": 242, "drop_rat": 63, "dropblock": [168, 247, 248], "dropout": [23, 45, 46, 55, 56, 57, 58, 61, 63, 131, 138, 140, 152, 161, 167, 171, 172, 173, 233, 234, 240, 241, 244, 245, 246, 278, 280, 282], "dropout1d": [174, 175, 247, 248], "dropout1dmodel": 244, "dropout2d": [174, 175, 247, 248], "dropout3d": [174, 175, 247, 248], "dropout_p": [161, 234], "dropout_prob": 61, "dropoutmodel": 243, "droppath": [247, 248], "dtype": [142, 144, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 382], "due": [17, 19, 40, 87, 162, 163, 225, 388], "dummi": 141, "duplic": [145, 147], "dure": [3, 10, 13, 14, 16, 19, 20, 22, 46, 59, 60, 61, 98, 140, 142, 143, 144, 145, 146, 147, 148, 149, 158, 167, 168, 169, 170, 171, 172, 173, 185, 188, 202, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 284, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 303, 314, 315, 347, 348, 349, 356, 361, 382, 385, 388, 392], "dy": [154, 224], "dynam": [0, 2, 3, 126, 130, 140, 143, 146, 147, 148, 149, 190, 191, 192, 210, 241, 266, 268, 269, 270, 291, 296, 301], "dynamicnetwork": 146, "e": [0, 13, 14, 16, 17, 20, 22, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 69, 70, 72, 73, 74, 75, 89, 131, 142, 158, 210, 228, 229, 230, 233, 240, 254, 287, 290, 297, 298, 330, 343, 345, 346, 353, 358, 359, 364, 386], "each": [1, 2, 3, 4, 14, 17, 19, 20, 22, 23, 25, 26, 40, 46, 63, 72, 76, 78, 79, 80, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 131, 138, 140, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 176, 178, 185, 188, 190, 191, 192, 209, 210, 222, 225, 229, 233, 236, 237, 238, 240, 243, 244, 245, 246, 249, 251, 253, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 306, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 331, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 366, 368, 369, 371, 373, 375, 376, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392], "earli": 296, "earlier": 79, "eas": [4, 10], "easi": [2, 3, 4, 10, 110, 111, 112, 113, 114, 115, 144, 145, 147], "easier": [3, 145, 146, 149], "easili": [4, 79, 144, 148, 392], "eccv": 140, "economi": 22, "edg": [78, 87, 369], "edu": [5, 6], "educ": [10, 140], "effect": [140, 145, 146, 147, 148, 149, 158, 162, 163, 164, 166, 220, 221, 225, 228, 229, 231, 259, 260, 261, 263, 264, 265, 266, 284, 301, 302, 303, 366, 380], "effici": [1, 2, 3, 5, 6, 7, 8, 10, 11, 16, 21, 26, 29, 30, 31, 33, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 66, 67, 69, 70, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 130, 136, 140, 166, 206, 207, 208, 222, 223, 226, 254, 286, 303], "efficientnet": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 140], "efficientnet_b0": 140, "efficientnet_b1": 140, "efficientnet_b2": 140, "efficientnet_b3": 140, "efficientnet_b4": 140, "efficientnet_b5": 140, "efficientnet_b6": 140, "efficientnet_b7": 140, "efficientnet_v2": [55, 56, 57, 58], "efficientnet_v2_": 140, "efficientnet_v2_l": 140, "efficientnet_v2_m": 140, "efficientnet_v2_xl": 140, "efficientnetv2": 140, "eig": 15, "eigenvalu": [14, 20], "eigenvector": 14, "eigval": 14, "eigvec": 14, "either": [178, 284, 305, 306, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 362, 368], "element": [0, 19, 20, 61, 140, 144, 148, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 203, 204, 205, 206, 207, 208, 209, 222, 223, 225, 229, 230, 236, 237, 238, 240, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257, 266, 271, 272, 273, 274, 275, 276, 302, 306, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 365, 368, 369, 371, 372, 373, 374, 376, 377, 378], "elementwise_affin": 266, "elsewher": [274, 275, 276, 330], "elu": [153, 175, 232, 248], "elumodel": 220, "embed": [76, 77, 78, 79, 81, 82, 83, 86, 161, 233, 234, 278, 280, 281, 282], "embed_dim": [233, 278, 279, 280, 281, 282], "emphas": [79, 86], "emploi": [46, 87], "empti": [143, 149, 336], "empty_lik": 336, "enabl": [0, 1, 2, 3, 10, 17, 22, 45, 69, 89, 126, 127, 128, 129, 140, 143, 144, 145, 146, 147, 148, 161, 169, 225, 233, 234, 236, 237, 238, 249, 251, 278, 280, 282, 286, 288, 301, 303, 306, 308, 309, 310, 312, 314, 381], "encapsul": [234, 286, 314], "encod": [254, 257, 278, 279, 280, 281, 282], "encoder_lay": [281, 282], "encoderlay": 281, "encompass": 45, "encourag": [168, 241, 243, 244, 245, 246, 253, 254, 257, 292], "end": [18, 151, 154, 155, 156, 169, 220, 222, 223, 224, 225, 227, 242, 255, 256, 257, 271, 272, 273, 274, 275, 276, 296, 298, 320, 321, 323, 326, 331, 337, 341, 347, 349, 351, 364, 369, 377, 378, 392], "enforc": [143, 145, 147, 279, 280, 281, 282], "engin": 19, "enhanc": [26, 27, 61, 62, 63, 69, 70, 74, 77, 87, 88, 96, 97, 107, 108, 122, 123, 124, 125, 130, 138, 139, 140, 145, 147, 210, 226, 392], "ensur": [3, 5, 6, 7, 8, 19, 20, 21, 46, 55, 56, 57, 58, 142, 143, 144, 145, 146, 147, 148, 149, 158, 161, 190, 191, 192, 203, 204, 205, 224, 229, 234, 240, 241, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 286, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 308, 309, 310, 311, 312, 313, 324, 331, 348, 356, 361, 363, 369, 377, 378, 382, 383, 384, 385, 386, 390, 392], "enter": 303, "entir": [3, 169, 171, 172, 173, 242, 245, 246, 313], "entri": [46, 72, 82, 83, 374], "entropi": [179, 180, 253, 254], "environ": [10, 31, 33, 82, 83, 86], "ep": [168, 179, 180, 185, 186, 188, 189, 203, 204, 205, 241, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 290, 291, 292, 293, 294, 295, 296, 297], "epoch": [1, 3], "epsilon": [186, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 290, 291, 292, 293, 294, 295, 296, 297], "equal": [17, 201, 271, 272, 273, 331, 373, 383, 385], "equat": [14, 19, 21], "equival": [319, 359, 370], "error": [0, 3, 14, 16, 46, 143, 146, 147, 148, 149, 152, 181, 183, 221, 242, 253, 254, 255, 256, 286, 287, 303, 305, 331, 363], "especi": [3, 145, 147, 148, 228, 302, 303, 305, 311, 381, 382, 386, 392], "essenti": [1, 3, 10, 11, 17, 19, 68, 163, 166, 286, 311, 313, 347, 381, 382, 386, 392], "estim": [256, 292, 293, 294, 295, 296, 297], "et": [60, 140, 278], "eta": 298, "eta_": 298, "etc": [40, 46, 79, 89, 253, 284, 382], "euclidean": 18, "european": 140, "eval": 242, "evalu": [143, 185, 188, 240, 241, 242, 243, 244, 245, 246, 259, 260, 261, 263, 264, 265, 392], "even": [290, 303, 326, 327, 330, 332, 333, 334, 335], "evenli": [190, 191, 192, 268, 269, 270, 326, 331, 373], "everi": [1, 392], "everywher": 351, "exact": [143, 146, 360, 386, 388], "exactli": 149, "exampl": [4, 319], "excel": [62, 86], "except": [0, 351, 364, 366, 380], "excit": [45, 78, 82, 83, 116, 119, 122, 123, 124, 125, 140, 209], "exclud": [377, 378], "exclus": [309, 312, 326], "exdb": 8, "execut": [146, 303], "exist": [21, 145, 147, 149, 304, 364], "exit": 303, "exp": [151, 156, 157, 159, 220, 227, 336], "expand": [4, 35, 140, 166, 363, 371, 376], "expans": [39, 63, 79, 82, 83], "expansion_factor": 78, "expect": [12, 146, 149, 169, 233, 240, 242, 243, 244, 245, 246, 266, 278, 279, 280, 281, 282, 286, 305], "expens": 3, "experi": [10, 79, 311, 313, 392], "experiment": 313, "explan": [17, 19, 23, 25, 131, 138, 190, 191, 192, 268, 269, 270, 289], "explicit": 149, "explicitli": [140, 145, 147], "explod": [227, 259, 260, 261], "explor": [85, 286, 313], "expon": [17, 324], "exponenti": [151, 156, 158, 220, 227, 229, 240, 292, 293, 294, 295, 296, 345], "express": 28, "extend": [4, 89, 109, 126, 140], "extens": [140, 288], "extern": [4, 10], "extra": [39, 58, 87, 363], "extract": [59, 65, 68, 98, 109, 126, 136, 140, 166, 238, 271, 273, 304, 327, 347, 349, 377, 378, 383, 385], "extractor": [72, 73, 74, 75, 136], "extrem": [19, 99, 140], "ey": 336, "f": [1, 4, 5, 6, 7, 8, 10, 140, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 226, 229, 278, 280, 282], "f_1": 209, "f_2": 209, "facilit": [59, 145, 149, 158, 229, 236, 237, 238, 286, 288, 384, 392], "factor": [45, 61, 79, 151, 161, 162, 163, 164, 166, 209, 218, 219, 233, 234, 284, 289, 296, 297, 298, 299, 305], "factori": 137, "failur": [145, 146, 147, 148, 286], "fals": [1, 5, 6, 7, 8, 18, 22, 45, 82, 83, 98, 141, 142, 143, 144, 161, 167, 169, 170, 171, 172, 173, 185, 188, 201, 212, 214, 215, 216, 217, 218, 219, 233, 234, 236, 237, 238, 242, 249, 251, 278, 279, 280, 281, 282, 284, 292, 293, 297, 301, 306, 308, 309, 310, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 348, 349, 356, 361, 362, 382], "famili": [39, 79, 140, 304], "fan": [214, 215, 218, 219], "fan_in": [214, 215], "fan_out": [214, 215], "fashion": 7, "fashion_train": 7, "fashionmnist": 9, "fast": 296, "faster": [140, 291, 295, 303], "fc": [68, 98, 109, 116, 126, 146, 209, 237, 238, 271, 272, 273, 274, 275, 276], "fc1": [74, 75, 141, 145, 149, 221, 222, 223, 225, 226, 227, 228, 230, 231, 251], "fc2": [74, 75, 141, 145, 149, 221, 222, 223, 225, 227, 228, 230, 231, 251], "fc3": 75, "featur": [3, 23, 25, 28, 29, 39, 40, 59, 62, 63, 65, 68, 72, 73, 74, 75, 88, 96, 97, 98, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 126, 127, 128, 129, 131, 136, 138, 139, 140, 168, 176, 178, 185, 186, 203, 204, 205, 209, 210, 238, 241, 243, 244, 245, 246, 249, 251, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 286, 291], "feature_extractor": 72, "fed": [3, 392], "feed": [3, 314, 392], "feedforward": [141, 278, 280, 282], "femto": [33, 140], "fergu": [138, 140], "fetch": 0, "few": 141, "fewer": [1, 90, 91, 92, 93, 94, 95, 140, 363], "field": [5, 6, 8, 126, 130, 140, 210], "file": [3, 304], "fill": [212, 216, 217, 308, 309, 310, 312, 332, 333, 334, 335], "filter": [46, 79, 138, 140, 162, 163, 164, 166, 203, 204, 205, 237, 238], "filter_height": 166, "filter_s": 166, "filter_width": 166, "final": [25, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 145, 146, 147, 148, 149, 161, 210, 233, 278, 279, 281, 381, 392], "find": [21, 347, 349], "fine": [85, 88, 209, 392], "finish": 303, "first": [5, 6, 7, 8, 14, 72, 138, 141, 146, 147, 176, 209, 249, 292, 293, 294, 295, 296, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 368, 380, 381, 382, 392], "fit": 286, "fix": [146, 369], "flatten": [68, 72, 149, 166, 323, 367, 370, 371], "flexibl": [1, 3, 4, 10, 26, 59, 68, 69, 70, 72, 79, 80, 89, 98, 122, 123, 124, 125, 130, 131, 136, 140, 145, 146, 147, 148, 149, 284, 286, 288, 305, 332, 333, 382, 392], "flip": [387, 389, 392], "float": [2, 5, 6, 7, 8, 25, 26, 45, 46, 61, 63, 76, 80, 142, 144, 151, 154, 161, 167, 168, 169, 170, 171, 172, 173, 179, 180, 181, 185, 186, 188, 189, 202, 203, 204, 205, 212, 216, 217, 218, 219, 220, 224, 233, 234, 240, 241, 242, 243, 244, 245, 246, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 284, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 306, 312, 314, 326, 329, 331, 341, 362, 384, 386, 387, 388, 389], "float32": [142, 144, 314, 326, 327, 330, 331, 332, 334, 362, 382], "float64": [335, 362, 382], "flow": [62, 68, 116, 140, 149, 168, 219, 221, 228, 231, 236, 237, 238, 249, 251, 301], "fly": [2, 3], "fname": 3, "focu": 10, "focus": 10, "follow": [0, 10, 11, 14, 20, 21, 22, 23, 25, 41, 42, 43, 44, 45, 82, 83, 122, 123, 124, 125, 130, 131, 136, 138, 141, 151, 152, 154, 155, 156, 157, 158, 159, 161, 176, 178, 201, 203, 204, 205, 206, 207, 208, 209, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 347, 349, 363, 368, 372, 383, 384, 385, 386, 387, 388, 389, 392], "foral": [279, 281], "forc": 168, "form": [20, 210, 279, 281, 323, 368, 371, 376, 392], "format": [2, 3, 5, 6, 7, 8, 141, 254, 257, 382], "formul": 152, "formula": [14, 22, 158, 190, 191, 192, 229, 230, 255, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 319, 361, 386], "forward": [10, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 131, 138, 141, 142, 143, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "found": 10, "foundat": [68, 79, 116, 143, 286, 288, 314], "four": [41, 42, 43, 44, 90, 91, 92, 93, 94, 95, 369], "frac": [12, 13, 14, 16, 17, 18, 19, 21, 22, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 169, 176, 178, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384], "frame": 173, "framework": [4, 10, 140, 254, 257, 259, 260, 261, 263, 264, 265, 287, 288, 392], "frequent": [254, 257], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 17, 19, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 68, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 166, 168, 176, 185, 188, 201, 203, 204, 205, 209, 210, 212, 214, 215, 216, 217, 218, 219, 226, 233, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 279, 281, 282, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 319, 320, 321, 325, 327, 347, 348, 349, 356, 361, 364, 366, 368, 371, 373, 374, 375, 376, 380, 383, 384, 385, 386, 387, 388, 389, 392], "full": [22, 80, 82, 83], "full_matric": 22, "fulli": [4, 11, 23, 25, 40, 41, 42, 43, 44, 45, 46, 68, 72, 73, 74, 75, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 131, 136, 138, 140, 178, 209, 210, 251, 313], "func": 304, "function": [3, 4, 5, 6, 7, 8, 10, 11, 63, 143, 145, 146, 147, 148, 149, 203, 204, 205, 209, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 240, 241, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 278, 280, 282, 286, 288, 305, 313, 381, 392], "fundament": [10, 161, 178, 251, 382], "further": [10, 27, 28, 29, 30, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 78, 80, 81, 82, 83, 85, 87, 96, 97, 313, 348, 356, 361], "fuse": 126, "fusion": [127, 128, 129], "futur": [161, 234, 250, 281, 282], "g": [0, 13, 14, 17, 20, 22, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 69, 70, 72, 73, 74, 75, 89, 131, 140, 209, 210, 240, 287, 290, 297, 364, 386], "g_": 291, "g_t": 297, "gain": [218, 219], "gamma": [186, 259, 260, 261, 262, 263, 264, 265, 266], "gamma_c": [186, 262], "gap": [98, 109, 126, 209], "gaussian": [152, 221], "gelu": [153, 175, 232, 248], "gelunetwork": 221, "gener": [19, 27, 32, 36, 141, 169, 202, 240, 241, 243, 244, 245, 246, 264, 278, 293, 295, 296, 303, 306, 308, 309, 310, 311, 312, 313, 318, 326, 328, 329, 331, 368, 385, 386, 387, 389, 392], "geoffrei": [5, 6], "geq": 377, "get": [5, 6, 7, 8], "github": 7, "give": [10, 289, 297], "given": [13, 14, 17, 19, 20, 22, 166, 233, 234, 253, 254, 257, 287, 301, 306, 333, 335, 373, 381, 386, 387, 389, 392], "global": [0, 45, 98, 109, 116, 126, 186, 209, 262, 301, 303, 311, 313], "global_response_norm": [175, 187], "globalresponsenorm": [248, 267], "go": [60, 140], "goal": [253, 254, 257], "googlenet": [60, 140], "gpu": 140, "grad": [142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 166, 169, 176, 178, 201, 206, 207, 208, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 287, 288, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 389, 390], "grad_output": 17, "gradient": [10, 11, 62, 68, 140, 142, 144, 241, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 308, 309, 310, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 382], "grain": 209, "graph": [10, 219, 314, 326, 327, 330, 332, 333, 334, 335, 382], "grayscal": [7, 8, 72, 73, 74, 75, 386, 392], "greater": [35, 341], "green": 386, "grid": 368, "grn": 262, "groundbreak": 140, "group": [79, 89, 96, 97, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 130, 140, 146, 162, 163, 164, 203, 204, 205, 210, 236, 237, 238, 287, 288], "group1": 146, "group2": 146, "groupedconvblock": 109, "growth_rat": [40, 41, 42, 43, 44], "guarante": 311, "h": [98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 140, 161, 163, 164, 166, 168, 172, 173, 186, 191, 192, 194, 195, 198, 199, 201, 202, 204, 205, 209, 233, 234, 260, 261, 262, 264, 265, 269, 270, 273, 276, 278, 280, 282, 383, 385], "h_": [163, 164, 191, 192, 194, 195, 198, 199, 201, 237, 238, 269, 270, 272, 273, 275, 276], "h_out": [163, 164, 194, 195, 198, 199], "h_stack": 366, "ha": [0, 14, 27, 141, 149, 162, 163, 164, 203, 204, 205, 226, 230, 253, 254, 259, 260, 261, 263, 264, 265, 266, 284, 287, 288, 319, 359, 363, 364, 366, 375, 380, 386], "half": 354, "han": 7, "hand": 21, "handl": [0, 3, 10, 19, 143, 145, 146, 147, 148, 149, 254, 257, 286, 288, 303], "handwritten": [7, 8, 75], "hang": 140, "hard": [82, 83, 223], "hard_sigmoid": 222, "hardsigmoid": [223, 232, 248], "hardswish": [232, 248], "hardwar": 10, "hat": [292, 293, 294, 295, 296], "have": [0, 1, 13, 14, 16, 19, 20, 22, 144, 146, 148, 149, 163, 164, 168, 219, 286, 330, 332, 333, 334, 335, 347, 349, 364, 366, 368, 374, 375, 380, 384, 390], "he": 140, "head": [25, 63, 78, 136, 161, 233, 234, 278, 280, 282], "head_fn": 63, "height": [136, 163, 164, 166, 172, 173, 186, 191, 192, 194, 195, 198, 199, 201, 202, 210, 237, 238, 260, 261, 262, 264, 265, 269, 270, 272, 273, 275, 276, 284, 383, 385, 390], "help": [10, 61, 154, 156, 173, 220, 224, 226, 227, 231, 259, 260, 261, 271, 272, 274, 275, 289, 292, 293, 295, 301, 302, 303, 305], "henc": 372, "here": [3, 12, 143, 176, 286, 288, 302, 303, 305, 313, 381, 382, 392], "hidden": [23, 138, 146], "hidden_s": 146, "hierarch": [25, 26, 146, 149, 286], "hierarchi": 237, "hierarchicalnetwork": 146, "high": [10, 28, 34, 35, 55, 56, 57, 58, 65, 78, 86, 87, 106, 121, 130, 309, 312], "higher": [35, 46, 76, 84, 109, 254, 257, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 318, 319, 323, 345], "highest": [39, 87, 309], "highli": [31, 39, 81, 140], "highlight": [209, 274, 275, 276], "hint": 305, "hinton": [5, 6], "histor": 291, "histori": [306, 308, 309, 310, 312, 326, 327, 328, 329, 330, 332, 333, 334, 335], "hold": [79, 145, 146, 147, 148], "horizont": [366, 375, 387, 392], "hot": [254, 257], "how": [2, 3, 10, 122, 123, 124, 125, 130, 146, 149, 286, 305, 392], "howard": 140, "howev": [142, 219], "hstack": 367, "html": [5, 6], "http": [5, 6, 7, 8], "hu": [140, 209], "huang": 140, "huber": [181, 255], "huber_loss": [175, 182], "huberloss": [248, 258], "huberregressionmodel": 255, "hue": 392, "huge": [34, 140], "hybrid": [87, 88, 140], "hyperbol": [159, 231, 343, 353, 358], "hyperparamet": [90, 91, 92, 93, 94, 95, 98, 109, 137, 287, 289], "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 55, 56, 57, 58, 59, 60, 61, 62, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "iccv": 140, "idea": 140, "ideal": [10, 28, 32, 36, 76, 79, 88, 149], "ident": [16, 17, 63, 140, 202, 242, 248, 252, 311, 313, 330, 372], "identifi": 147, "idx": [2, 3], "ieee": [140, 209], "ignor": [278, 279, 280, 281, 282], "ii": 359, "ij": [158, 201, 229, 317, 318, 319, 323, 368, 377, 378], "ik": [317, 318, 319], "ill": [13, 19], "ilsvrc": 140, "imag": [3, 4, 5, 6, 7, 8, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 46, 55, 56, 57, 58, 60, 61, 62, 68, 69, 70, 72, 73, 74, 75, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 139, 140, 163, 188, 202, 204, 209, 237, 264, 368, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "image_dir": 3, "image_path": 3, "imagedataset": 3, "imageio": 3, "imagenet": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 63, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 107, 108, 122, 123, 124, 125, 130, 140], "imbal": [254, 257], "impact": [140, 295], "implement": [2, 3, 10, 19, 23, 25, 40, 45, 59, 60, 61, 62, 63, 69, 70, 72, 76, 77, 78, 98, 107, 108, 110, 111, 112, 113, 114, 115, 116, 136, 138, 140, 143, 166, 169, 206, 207, 208, 210, 233, 234, 242, 262, 280, 282, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 366, 380, 386], "impli": [236, 237], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 107, 108, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 168, 169, 170, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "improp": [146, 149, 313], "improv": [25, 46, 60, 61, 62, 66, 68, 70, 88, 89, 98, 109, 122, 123, 124, 125, 126, 138, 140, 168, 169, 185, 202, 209, 221, 227, 231, 289, 290, 291, 292, 293, 294, 295, 296, 297, 305, 385, 388, 392], "imread": 3, "in1_featur": [176, 249], "in2_featur": [176, 249], "in_channel": [98, 146, 149, 203, 204, 205, 206, 207, 208, 209, 210, 236, 237, 238, 260, 261, 271, 272, 273, 274, 275, 276, 286], "in_featur": [145, 146, 149, 178, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 237, 238, 240, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 263, 266, 271, 272, 273, 274, 275, 276], "incept": [60, 61, 62, 63, 68, 69, 70, 71, 140], "inception_next": 63, "inception_next_atto": 140, "inception_next_bas": 140, "inception_next_smal": 140, "inception_next_tini": 140, "inception_resnet_v1": 140, "inception_resnet_v2": 140, "inception_v1": 140, "inception_v3": 140, "inception_v4": 140, "inceptionnext": [64, 65, 66, 67, 71, 140], "inceptionresnet": [69, 70], "includ": [3, 4, 7, 10, 11, 17, 18, 23, 25, 59, 60, 61, 69, 72, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 131, 137, 138, 141, 143, 144, 146, 148, 149, 201, 203, 204, 205, 206, 207, 208, 280, 282, 284, 286, 287, 288, 295, 305, 313, 319, 369, 377, 378], "inclus": [144, 147, 309, 312, 331], "incom": [178, 251], "incompat": 363, "incomplet": 2, "incompletedataset": 2, "incorpor": [22, 81, 109, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 140, 221], "increas": [28, 29, 76, 84, 87, 109, 110, 111, 112, 113, 114, 115, 126, 162, 163, 164, 166, 202, 291, 298, 302, 366, 380, 386, 387, 389, 392], "independ": [146, 162, 163, 164, 233, 240, 243, 244, 245, 246, 266, 319, 329, 384, 386, 388, 390], "index": [0, 2, 5, 6, 7, 8, 186, 262, 302, 326, 327, 330, 368, 372], "indexerror": 0, "indic": [0, 1, 96, 97, 131, 141, 144, 146, 148, 149, 180, 184, 254, 257, 271, 278, 279, 280, 281, 282, 301, 314, 383, 385], "individu": [3, 146, 149, 255, 266, 288, 291, 298], "induc": [156, 227], "inf": 357, "infer": [122, 123, 124, 125, 130, 146, 149, 303], "infin": [20, 22, 294], "inform": [10, 140, 141, 142, 209, 288, 290, 303], "infti": [18, 296], "inherit": [1, 289, 297, 299], "init": 213, "initi": [1, 25, 40, 63, 68, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 132, 133, 134, 135, 137, 142, 144, 145, 146, 147, 148, 149, 210, 212, 214, 215, 216, 217, 218, 219, 233, 236, 237, 238, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 266, 280, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 308, 311, 312, 313, 326, 330, 331, 332, 333, 334, 335, 362], "initial_accumulator_valu": 291, "inner": [10, 317, 336], "innov": [78, 88], "input": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 109, 122, 123, 124, 125, 126, 130, 136, 138, 140, 141, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 305, 313, 314, 315, 317, 318, 319, 323, 327, 329, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "input1": 249, "input2": 249, "input_": [23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 138, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 262, 268, 269, 270, 377, 378], "input_1": 176, "input_2": 176, "input_data": [220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276], "input_s": [146, 148, 229, 254, 257], "input_shap": 141, "input_tensor": [10, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 142, 145, 146, 147, 148, 149, 158, 168, 169, 206, 207, 208, 209, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 284, 286, 383, 384, 385, 386, 387, 388, 389, 390], "insid": [3, 301, 303], "insight": [10, 140], "inspect": [143, 144, 149, 287], "inspir": [25, 140], "instabl": [19, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "instal": 10, "instanc": [0, 1, 10, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 137, 139, 141, 143, 144, 145, 147, 148, 149, 188, 226, 263, 264, 265, 266, 278, 279, 281, 287, 304, 362, 371, 376, 392], "instance_norm": [175, 187, 263, 264, 265], "instancenorm1d": [248, 267], "instancenorm1dmodel": 263, "instancenorm2d": [248, 267], "instancenorm3d": [248, 267], "instanti": [2, 45, 55, 56, 57, 58, 63, 64, 65, 66, 67, 84, 85, 86, 87, 122, 123, 124, 125, 130, 304], "instead": [10, 141, 145, 146, 147, 148, 149, 214, 215, 218, 219, 278, 280, 282, 292, 293, 294, 303, 305, 328, 329], "int": [0, 1, 2, 5, 6, 7, 8, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 158, 161, 162, 163, 164, 166, 168, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 216, 217, 218, 219, 229, 233, 234, 236, 237, 238, 241, 249, 251, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 292, 293, 294, 295, 296, 298, 304, 306, 308, 309, 310, 311, 312, 314, 326, 327, 328, 330, 331, 332, 334, 341, 347, 348, 349, 356, 360, 361, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 385, 390], "integ": [1, 3, 17, 116, 131, 162, 163, 164, 191, 192, 233, 236, 237, 238, 266, 269, 270, 272, 273, 274, 275, 276, 305, 309, 310, 312, 313, 328, 332, 334, 348, 356, 360, 361, 369, 371, 372, 373, 376], "integr": [1, 2, 4, 5, 6, 7, 8, 11, 87, 89, 140, 144, 146, 148, 149, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 249, 251, 271, 272, 273, 274, 275, 276], "intellig": [140, 209], "intend": [142, 147, 148], "intens": [19, 40, 99, 384, 386], "intent": 305, "interact": [176, 249, 286, 313], "interdepend": 140, "interfac": [2, 143, 146, 288], "interfer": [301, 303], "intermedi": [19, 96, 97, 209, 278, 280, 282], "intern": [99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 140, 145, 146, 147, 148, 149, 254, 257, 286, 383, 384, 385, 386, 387, 388, 389, 390], "interpol": [175, 200, 284, 331, 390], "interpret": [140, 158, 229, 305, 364], "interv": [308, 312, 326], "introduc": [26, 46, 60, 61, 76, 77, 78, 109, 140, 155, 209, 221, 225, 226, 228, 231, 240, 243, 244, 245, 246, 278, 385, 388, 392], "introspect": 149, "intuit": [10, 145, 147, 286, 392], "inv": 15, "inv_a": 16, "invari": [272, 275], "invers": [10, 13, 16, 17, 19, 291, 338, 339, 340], "invert": [13, 16, 17, 21, 77, 78, 81, 140], "invok": 304, "involv": [12, 13, 14, 16, 19, 20, 22, 126, 151, 152, 154, 155, 156, 157, 159, 176, 178, 201, 236, 237, 238, 249, 251, 305, 306, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 335, 345, 346, 347, 349, 352, 354, 368, 369, 371, 376], "is_caus": [161, 234, 281, 282], "is_leaf": 314, "issu": [3, 227, 259, 260, 261, 292, 293], "item": [7, 256], "iter": [0, 1, 2, 3, 142, 143, 146, 148, 279, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 326], "ith": [158, 229], "its": [4, 17, 19, 23, 26, 79, 87, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 127, 128, 129, 138, 140, 141, 142, 145, 146, 147, 148, 162, 163, 164, 166, 202, 210, 219, 221, 225, 230, 241, 274, 275, 276, 286, 287, 290, 298, 301, 302, 303, 304, 326, 328, 329, 334, 347, 349, 362, 363, 372, 373, 384, 387, 389, 392], "itself": [12, 17, 145, 146, 147, 148], "j": [8, 158, 209, 229, 259, 260, 261, 263, 264, 265, 271, 272, 274, 275, 368, 375, 377, 378, 383, 385], "jie": 140, "jk": 318, "join": [3, 364], "json": 304, "k": [17, 140, 161, 162, 233, 234, 236, 254, 260, 261, 264, 265, 271, 274, 275, 282, 317, 318, 327, 330, 364, 373], "k_d": [164, 238, 273, 276], "k_h": [163, 164, 237, 238, 272, 273, 276], "k_i": 233, "k_w": [163, 164, 237, 238, 272, 273, 276], "kaim": [140, 214, 215, 218, 219], "kaiming_norm": 213, "kaiming_uniform": 213, "kalenichenko": 140, "karen": 140, "kashif": 7, "kdim": 233, "keep": [143, 169, 225, 290, 303, 372, 377, 378], "keep_grad": [144, 306, 308, 309, 310, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 382], "keep_var": 143, "keepdim": [18, 347, 348, 349, 356, 361], "kei": [79, 140, 143, 145, 147, 149, 161, 233, 234, 282, 287], "kept": [348, 356, 361], "kernel": [72, 73, 74, 75, 79, 82, 83, 126, 127, 128, 129, 130, 138, 140, 162, 163, 164, 166, 190, 191, 192, 193, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 268, 269, 270, 272, 273, 276], "kernel_s": [78, 82, 83, 126, 127, 128, 129, 146, 149, 193, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 260, 261, 271, 272, 273, 274, 275, 276], "keyerror": 143, "keyword": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 139, 143, 250], "kj": [317, 319], "known": 140, "kriz": [5, 6], "krizhevski": [5, 6, 140], "kroneck": [158, 229], "kwarg": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 143, 250, 304], "l": [12, 19, 55, 140, 161, 162, 171, 190, 193, 197, 203, 209, 234, 240, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 281, 282, 363], "l2": [289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "l_": [162, 190, 193, 197, 236, 268, 271, 274, 278], "l_k": 233, "l_m": [279, 280], "l_out": [162, 193, 197], "l_q": 233, "l_t": [278, 279, 280], "l_v": 233, "label": [4, 5, 6, 7, 8, 61, 253, 254, 257], "lambd": 289, "lambda": [14, 156, 227, 289, 293], "lambda_1": 14, "lambda_2": 14, "lambda_i": 14, "lambda_n": 14, "languag": [4, 236, 249, 271, 274, 278], "larg": [0, 3, 19, 28, 34, 35, 39, 40, 55, 58, 78, 82, 84, 87, 88, 99, 100, 101, 104, 117, 118, 140, 206, 207, 208, 226, 255, 286, 289, 292, 293, 294, 297, 298, 299, 303], "larger": [27, 45, 46, 98, 126, 145, 147, 162, 163, 164, 166, 168, 241, 289, 320, 369, 383, 385, 390], "largest": [39, 347], "last": [1, 158, 189, 229, 318, 319, 364, 387, 389], "last_channel": 78, "latest": 4, "layer": [10, 23, 25, 26, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 140, 141, 143, 145, 146, 149, 158, 169, 178, 185, 188, 189, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 229, 234, 236, 237, 238, 242, 249, 250, 251, 257, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 313, 369, 382], "layer1": 304, "layer2": 304, "layer_group": 146, "layer_norm": [175, 187, 266], "layer_norm_ep": [278, 280, 282], "layer_scale_init": 25, "layer_sequ": [146, 149], "layernorm": [248, 267, 278, 279, 280, 281, 282], "layernormmodel": 266, "le": 140, "lead": [146, 149, 221, 263, 264, 265, 266, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 313, 363], "leaf": 314, "leaki": [154, 224], "leaky_relu": [153, 175, 224], "leakyrelu": [232, 248], "learn": [1, 3, 4, 7, 8, 10, 17, 19, 46, 65, 66, 109, 110, 111, 112, 113, 114, 115, 138, 139, 140, 145, 146, 147, 148, 155, 158, 209, 220, 224, 225, 229, 236, 237, 238, 243, 244, 245, 246, 249, 251, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 311, 331, 373, 377, 378, 381, 382, 392], "learnabl": [142, 143, 144, 185, 186, 188, 189, 203, 204, 205, 233, 236, 237, 238, 249, 251, 259, 260, 261, 262, 263, 264, 265, 266, 282, 286], "least": [19, 20, 22, 284, 359, 377, 378], "lecun": [8, 140], "left": [17, 18, 19, 22, 152, 158, 221, 229, 233, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 274, 275, 276, 280, 282, 383, 385], "leftarrow": 295, "len": [0, 1, 2, 3, 368], "lenet": [71, 73, 74, 75, 140], "lenet_1": 140, "lenet_4": 140, "lenet_5": 140, "length": [146, 161, 162, 171, 190, 193, 197, 236, 250, 259, 263, 268, 271, 274, 281, 282, 369, 384], "leq": [222, 223, 255, 296, 324, 341, 378], "lerp": 201, "less": [0, 151, 154, 181, 220, 224, 254, 255, 257, 331, 341], "let": 14, "level": [10, 68], "leverag": [21, 62, 63, 70, 84, 87, 110, 111, 112, 113, 114, 115, 136, 140, 210, 286], "li": 140, "librari": [3, 10, 11, 143, 286, 287, 288, 304, 305, 313, 314, 392], "lie": 306, "lightweight": [10, 37, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 77, 82, 83, 90, 91, 92, 93, 94, 95, 102, 119, 210, 223, 226], "like": [10, 46, 68, 79, 87, 110, 111, 112, 113, 114, 115, 127, 128, 129, 140, 142, 143, 146, 149, 162, 168, 218, 219, 227, 240, 241, 259, 260, 261, 263, 264, 265, 301, 302, 305, 362, 382, 392], "likelihood": [184, 254, 257], "limit": [30, 37, 82, 83, 84, 86, 141, 226, 290, 341], "linalg": [10, 15], "linalgerror": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [10, 11, 12, 19, 20, 21, 63, 77, 81, 116, 140, 141, 145, 146, 147, 149, 151, 152, 154, 155, 156, 169, 214, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 237, 238, 240, 242, 243, 244, 249, 250, 253, 254, 255, 256, 257, 259, 263, 266, 271, 272, 273, 274, 275, 276, 278, 280, 282, 304, 330], "linearli": 255, "linspac": 336, "linspace_tensor": 331, "list": [0, 1, 25, 26, 46, 63, 72, 78, 89, 98, 109, 116, 126, 131, 141, 142, 144, 145, 146, 147, 148, 189, 210, 250, 266, 287, 305, 306, 308, 309, 310, 312, 314, 327, 328, 329, 332, 333, 334, 335, 360, 363, 372, 373, 374, 379, 381], "listdir": 3, "liter": [98, 179, 180, 181, 183, 184, 201, 203, 204, 205, 206, 207, 208, 210, 214, 215, 236, 237, 238, 253, 254, 255, 256, 257, 284, 368], "liu": 140, "ln": 324, "load": [3, 4, 5, 6, 7, 8, 142, 143, 144, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304], "load_state_dict": [143, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "loader": [1, 2, 3], "local": [140, 166, 236], "locat": [140, 201], "log": [184, 253, 254, 257, 336], "log_softmax": 257, "logarithm": [324, 345, 346], "logic": [3, 268, 269, 270, 286, 287], "logit": [23, 25, 138, 158, 229, 254], "logsoftmax": [254, 257], "long": [295, 360], "loop": [1, 146, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "loss": [10, 19, 145, 146, 147, 148, 149, 158, 179, 180, 181, 183, 184, 220, 221, 224, 225, 227, 228, 229, 231, 240, 243, 244, 245, 246, 250, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "low": [10, 68, 77, 82, 83, 86, 309, 312], "lower": [12, 76, 217, 279, 280, 281, 282, 289, 297, 298, 299, 312, 377, 378], "lower_triangular": 377, "lowest": 309, "lr": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "ls_init_valu": 63, "lu": 16, "lucid": [0, 1, 2, 5, 6, 7, 8, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 307, 336, 367, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "m": [56, 131, 140, 145, 146, 149, 233, 272, 273, 275, 276, 278, 279, 282, 292, 293, 294, 295, 296, 330, 377, 378], "m_": [292, 293, 294, 295, 296, 377, 378], "m_m": 280, "m_t": [280, 295, 296], "maaten": 140, "machin": [3, 7, 8, 10, 19, 140, 209, 278, 292, 302, 311], "magnitud": [169, 297, 298, 392], "mai": [3, 10, 14, 16, 19, 86, 146, 148, 202, 242, 255, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 313, 386, 392], "main": [10, 20, 68, 146, 327, 330, 377, 378], "maintain": [19, 26, 31, 55, 56, 57, 58, 66, 76, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 130, 140, 142, 143, 145, 146, 147, 149, 156, 169, 214, 215, 218, 219, 220, 221, 227, 240, 242, 243, 244, 245, 246, 259, 260, 261, 263, 264, 265, 292, 297, 383, 386, 390], "make": [1, 3, 10, 28, 29, 32, 33, 59, 68, 72, 77, 79, 81, 82, 83, 85, 86, 88, 98, 140, 146, 149, 228, 254, 255, 266, 272, 275, 286, 291, 292, 293, 294, 302, 304, 313, 314, 319, 368, 373, 381, 392], "manag": [10, 143, 145, 146, 147, 148, 149, 286, 288, 301, 303, 304, 313], "manhattan": 18, "mani": 141, "manipul": [10, 145, 147, 392], "manner": [146, 149], "manual": [179, 180, 184, 253, 254, 257, 303], "map": [63, 96, 97, 98, 109, 119, 126, 140, 143, 157, 159, 168, 186, 209, 228, 231, 242, 262], "mask": [140, 142, 161, 233, 234, 240, 243, 244, 245, 246, 278, 279, 280, 281, 282, 377, 378], "match": [21, 143, 146, 149, 161, 179, 181, 183, 189, 203, 204, 205, 241, 287, 345, 363, 371, 372, 373, 376, 379, 384, 392], "math": [233, 342, 352, 357], "mathbb": [233, 373], "mathbf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 136, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 176, 178, 201, 206, 207, 208, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 317, 318, 319, 323, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390], "mathcal": [214, 216, 218, 240, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266], "mathemat": [16, 203, 204, 205, 385, 387, 388, 389], "mathrm": 19, "matmul": 336, "matric": [11, 13, 14, 16, 19, 21, 22, 233, 282, 317, 318, 319, 330, 368, 377, 378], "matrix": [10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 166, 176, 250, 251, 286, 317, 368], "matrix_pow": 15, "matthew": 140, "max": [18, 116, 131, 155, 197, 198, 199, 222, 223, 225, 226, 274, 275, 276, 294, 320, 336, 341], "max_pool": [274, 275, 276], "max_pool1d": [175, 196], "max_pool2d": [175, 196], "max_pool3d": [175, 196], "max_valu": 341, "maxim": [3, 34, 87], "maximum": [18, 225, 226, 274, 275, 276, 292, 294, 336, 341, 347, 388], "maxpool": [23, 138], "maxpool1d": [248, 277], "maxpool1dmodel": 274, "maxpool2d": [146, 149, 237, 248, 277], "maxpool2dmodel": 275, "maxpool3d": [238, 248, 277], "maxpool3dmodel": 276, "mean": [5, 6, 7, 8, 20, 96, 97, 141, 142, 156, 162, 163, 164, 167, 179, 180, 181, 183, 184, 185, 188, 203, 204, 205, 216, 220, 221, 222, 224, 225, 227, 228, 231, 238, 240, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 292, 293, 294, 295, 296, 297, 301, 310, 336, 341, 345, 346, 347, 349, 352, 354, 356, 359, 360, 361, 381, 384, 392], "meaning": [149, 305], "measur": [253, 254, 256, 257], "mechan": [10, 96, 97, 116, 126, 130, 148, 176, 233], "medium": [33, 37, 56, 84, 85, 88, 140], "meet": 140, "mem_is_caus": [279, 280], "mem_key_padding_mask": [278, 279, 280], "mem_mask": [278, 279, 280], "membership": 253, "memori": [2, 3, 40, 278, 279, 280, 303, 328, 329], "meshgrid": 367, "method": [3, 10, 11, 16, 46, 116, 136, 137, 145, 146, 147, 148, 149, 179, 180, 181, 183, 184, 214, 215, 218, 219, 253, 254, 255, 256, 257, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 313], "mha": 233, "mid": 66, "mid_channel": [82, 83], "middl": 302, "might": 286, "min": [222, 223, 226, 321, 336, 341], "min_valu": 341, "mind": [0, 3, 10, 146, 149, 303], "mingx": 140, "mini": 1, "minim": [4, 10, 64, 78, 140, 149, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 288], "minimalist": 10, "minimum": [336, 341, 349], "minu": 228, "mirror": [333, 335], "mismatch": [46, 143, 286, 287], "miss": [143, 286], "mitig": [154, 220, 224, 227, 259, 260, 261], "mix": 63, "mixer": 63, "mlp": [63, 210], "mlp_ratio": 63, "mnist": [4, 7, 9, 73, 74], "mnist_train": [4, 8], "mobil": [76, 77, 78, 79, 81, 82, 83, 86, 140], "mobilenet": [71, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 140, 226], "mobilenet_v2": 140, "mobilenet_v3": [82, 83], "mobilenet_v3_larg": 140, "mobilenet_v3_smal": 140, "mobilenet_v4": [84, 85, 86, 87, 88], "mobilenet_v4_conv_larg": 140, "mobilenet_v4_conv_medium": 140, "mobilenet_v4_conv_smal": 140, "mobilenet_v4_hybrid_larg": 140, "mobilenet_v4_hybrid_medium": 140, "mobilenetv2": [77, 140], "mobilenetv3": [78, 82, 83, 140], "mode": [10, 173, 185, 188, 201, 214, 215, 240, 242, 243, 244, 245, 246, 284, 369], "model": [1, 3, 4, 10, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 158, 161, 168, 202, 203, 204, 205, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 242, 243, 244, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 313, 381, 382, 392], "model_b0": 45, "model_b7": 45, "model_tini": 63, "moder": [29, 33, 67, 85, 120], "modern": [25, 26, 63, 140], "modif": [137, 149, 303], "modifi": [24, 84, 98, 136, 139, 145, 146, 147, 148, 212, 214, 215, 216, 217, 218, 219, 240, 301, 303, 311, 366, 380], "modul": [5, 6, 7, 8, 10, 23, 24, 25, 26, 45, 46, 59, 62, 63, 68, 69, 70, 72, 76, 77, 78, 79, 88, 98, 109, 116, 126, 131, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 169, 203, 204, 205, 206, 207, 208, 209, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 305, 313, 382, 392], "modular": [3, 10, 140, 143, 146, 149, 286, 392], "moduledict": [146, 147, 149, 150], "modulelist": [148, 149, 150], "moment": [292, 293, 294, 295, 296], "momentum": [185, 188, 203, 204, 205, 259, 260, 261, 263, 264, 265, 289, 295, 297, 299], "momentum_decai": 295, "monoton": 230, "moor": 19, "more": [3, 4, 7, 10, 14, 28, 98, 105, 145, 146, 149, 168, 206, 207, 208, 220, 243, 244, 245, 246, 278, 286, 287, 288, 289, 290, 293, 294, 297, 298, 299, 310, 319, 359, 375, 377, 378, 392], "most": [11, 32, 140, 275, 382, 383, 392], "move": [289, 297], "mse": [181, 183, 255, 256], "mse_loss": [175, 182], "mseloss": [248, 258], "mu": [216, 259, 260, 261, 263, 264, 265, 266, 361], "mu_c": 384, "mu_i": [263, 264, 265], "much": 392, "mul": 336, "multi": [3, 4, 63, 69, 126, 127, 128, 129, 140, 158, 161, 180, 184, 210, 229, 233, 254, 257, 278, 280, 282, 348, 356, 361], "multidimension": [308, 312, 328], "multiheadattent": [235, 248], "multipl": [1, 3, 10, 11, 17, 21, 23, 98, 116, 130, 147, 148, 149, 166, 201, 202, 209, 210, 233, 240, 243, 244, 245, 246, 254, 257, 279, 281, 286, 302, 306, 308, 309, 310, 312, 317, 322, 328, 329, 373, 381, 386, 392], "multipli": [17, 80, 148, 178, 251, 284, 298, 322, 323], "must": [0, 1, 3, 12, 13, 14, 16, 17, 20, 21, 22, 141, 143, 145, 146, 147, 148, 149, 169, 189, 233, 240, 242, 243, 244, 245, 246, 257, 278, 280, 282, 284, 287, 303, 306, 359, 363, 364, 366, 369, 371, 372, 373, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 389], "my_simple_model": 304, "mymodel": [143, 144, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "myoptim": [287, 288], "n": [17, 18, 98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 140, 145, 146, 149, 161, 162, 163, 164, 166, 168, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 209, 214, 216, 218, 233, 234, 236, 237, 238, 245, 246, 249, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 330, 348, 359, 361], "n1": 18, "nabla_": [290, 291, 292, 293, 294, 295, 296, 298], "nabla_t": 296, "nadam": 300, "nair": [5, 6], "name": [140, 141, 143, 145, 147, 149, 304, 305], "nan": [20, 22], "nano": [36, 140], "natur": [19, 140, 236, 249, 271, 274, 278, 324, 345, 346], "ndarrai": [142, 144, 305, 306, 314, 327, 329, 333, 335, 362], "ndim": [20, 22, 144, 314], "ne": 17, "nearest": [201, 284], "necessari": [4, 5, 6, 7, 8, 19, 303, 366, 380], "need": [2, 4, 88, 146, 147, 148, 158, 249, 278, 286, 303, 328, 329, 381, 382, 392], "neg": [17, 19, 22, 151, 184, 202, 220, 224, 225, 227, 254, 257, 298, 364], "negative_slop": [154, 224], "neglect": 148, "neighbor": 201, "neq": 18, "nest": [141, 146, 149, 286], "nestedmodel": 141, "nesterov": 295, "net": [138, 140], "network": [3, 4, 10, 23, 24, 25, 26, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 68, 75, 76, 79, 80, 84, 87, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 120, 121, 126, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 162, 163, 164, 168, 169, 176, 178, 185, 202, 209, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 271, 272, 273, 274, 275, 276, 278, 280, 282, 286, 287, 288, 289, 297, 299, 312, 313, 314, 326, 332, 334, 347, 349, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "neural": [3, 4, 10, 23, 24, 25, 45, 47, 48, 49, 50, 51, 52, 53, 54, 68, 75, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 162, 163, 164, 169, 176, 178, 185, 202, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 271, 272, 273, 274, 275, 276, 286, 287, 288, 289, 297, 299, 312, 313, 314, 326, 332, 334, 347, 349, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "neuralnetwork": [222, 223, 225, 230], "neuron": 224, "never": 386, "new": [143, 144, 151, 152, 154, 155, 156, 157, 159, 176, 178, 201, 210, 214, 215, 216, 217, 218, 219, 287, 304, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 366, 369, 371, 372, 375, 376, 377, 378, 379, 380], "next": [149, 381], "nll": 184, "nll_loss": [175, 182], "nllloss": [248, 258], "nn": [5, 6, 7, 8, 10, 23, 25, 26, 40, 45, 46, 59, 63, 68, 72, 76, 77, 78, 79, 98, 109, 116, 122, 123, 124, 125, 126, 130, 131, 138, 141, 150, 153, 160, 165, 174, 177, 182, 187, 196, 200, 211, 213, 232, 235, 239, 247, 248, 252, 258, 267, 277, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 382, 392], "no_grad": 301, "node": 314, "nois": [22, 313], "non": [14, 17, 19, 22, 148, 152, 154, 155, 214, 215, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 240, 243, 244, 245, 246, 278, 279, 280, 281, 282, 292, 293, 303, 324, 341], "none": [0, 1, 2, 5, 6, 7, 8, 18, 45, 46, 59, 63, 68, 72, 76, 77, 78, 79, 89, 98, 136, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 169, 176, 178, 179, 180, 181, 183, 184, 185, 188, 189, 202, 203, 204, 205, 206, 207, 208, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390], "norm": [11, 15, 279, 281, 294], "norm_first": [278, 280, 282], "normal": [5, 6, 7, 8, 25, 116, 140, 152, 156, 158, 159, 168, 185, 186, 188, 189, 203, 204, 205, 213, 214, 218, 221, 227, 229, 240, 259, 260, 261, 262, 263, 264, 265, 266, 278, 279, 280, 281, 282, 297, 310, 313, 381, 391, 392], "normalized_shap": [189, 266], "note": [162, 240], "noth": [167, 170, 171, 172], "notimplementederror": [2, 143, 287], "notin": 341, "nov": 140, "novel": [7, 140], "np": [98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 142, 144, 209, 254, 257, 305, 314, 319, 326, 327, 330, 332, 334, 335, 346, 362, 382], "npy": [5, 6, 7, 8], "num": [279, 281, 331], "num_class": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 229, 254, 257], "num_decoder_lay": 278, "num_encoder_lay": 278, "num_featur": [149, 203, 204, 205, 259, 260, 261, 263, 264, 265], "num_head": [233, 278, 279, 280, 281, 282], "num_init_featur": [40, 41, 42, 43, 44], "num_lay": [279, 281], "num_paramet": 148, "number": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 146, 148, 149, 161, 162, 163, 164, 166, 171, 172, 173, 176, 178, 180, 184, 185, 186, 188, 190, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 228, 233, 236, 237, 238, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 289, 308, 311, 312, 314, 324, 326, 328, 330, 331, 347, 348, 349, 360, 361, 364, 366, 369, 371, 372, 374, 376, 380, 384, 386, 387, 389, 392], "numer": [16, 19, 168, 179, 180, 185, 186, 188, 189, 203, 204, 205, 226, 241, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 305, 316, 326, 332, 334], "numpi": [10, 142, 144, 254, 257, 305, 314, 319, 327, 330, 331, 346, 359, 362, 363, 369, 371, 376, 382, 392], "o": [3, 233, 273, 276, 332, 333], "object": [1, 3, 11, 126, 140, 143, 147, 148, 256, 286, 303, 315, 316, 320, 321, 322, 325, 362], "observ": 292, "obtain": 1, "occur": [202, 303, 304, 364], "occurr": 17, "odot": [240, 243, 244, 245, 246], "off": [29, 85, 301], "offer": [4, 10, 26, 27, 29, 39, 66, 85, 286, 288, 313, 392], "offset": 330, "often": [17, 107, 108, 162, 163, 164, 166, 241, 254, 257, 326, 334, 382, 386, 390, 392], "older": 295, "onc": 303, "one": [0, 122, 123, 124, 125, 130, 148, 149, 158, 162, 178, 193, 197, 203, 204, 205, 227, 228, 229, 236, 244, 254, 257, 259, 263, 271, 274, 284, 287, 302, 305, 310, 325, 333, 347, 349, 365, 370, 375, 382], "ones": [176, 178, 236, 237, 238, 251, 259, 260, 261, 263, 264, 265, 266, 286, 330, 333, 336], "ones_lik": 336, "onli": [10, 141, 201, 222, 225, 240, 241, 243, 244, 245, 246, 253, 254, 257, 259, 260, 261, 263, 264, 265, 266, 274, 275, 276, 298, 301, 326, 341, 347, 349, 359, 369, 370, 372, 374, 377, 378], "onto": [20, 22], "openml": [5, 6, 7, 8], "oper": [3, 10, 11, 16, 19, 96, 97, 116, 117, 118, 119, 120, 121, 142, 143, 146, 151, 152, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 169, 173, 176, 178, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 268, 269, 270, 271, 272, 273, 274, 275, 276, 286, 301, 302, 303, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 332, 334, 345, 346, 347, 348, 349, 352, 354, 356, 359, 361, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 390], "operatornam": [17, 19, 233, 278, 279, 280, 281, 282], "opposit": 289, "optim": [3, 10, 11, 17, 19, 20, 22, 25, 30, 31, 34, 37, 39, 40, 46, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 77, 78, 82, 83, 85, 86, 87, 88, 140, 142, 144, 147, 148, 166, 236, 237, 238, 286, 303], "optimizer_st": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "option": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 158, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 224, 229, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 289, 297, 299, 306, 308, 309, 310, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 348, 349, 356, 360, 361, 362, 364, 368, 371, 373, 374, 375, 377, 378, 382, 386, 387, 389], "ord": 18, "order": [1, 3, 18, 22, 145, 146, 147, 148, 149, 360, 381], "ordered_dict": 149, "ordereddict": [143, 145, 146, 149], "organ": [145, 146, 147, 149, 304], "orient": 392, "origin": [26, 61, 75, 167, 202, 209, 231, 369, 370, 371, 372, 376, 379, 390], "orthogon": [19, 20, 22], "orthonorm": 20, "oscil": [289, 297, 299], "other": [2, 3, 10, 16, 61, 70, 72, 75, 85, 142, 143, 146, 149, 214, 215, 240, 241, 286, 287, 301, 303, 313, 314, 326, 328, 332, 334, 359, 368, 392], "otherwis": [99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 151, 154, 155, 156, 158, 169, 220, 222, 223, 224, 225, 227, 229, 242, 243, 244, 245, 246, 255, 271, 272, 273, 274, 275, 276, 279, 281, 287, 298, 304, 320, 321, 347, 349, 377, 378], "otim": [19, 176, 249], "out": [0, 3, 4, 151, 152, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 214, 215, 218, 219, 234, 236, 237, 238, 240, 242, 243, 244, 245, 246, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 289, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380], "out_channel": [72, 78, 82, 83, 146, 149, 203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 260, 261, 271, 272, 273, 274, 275, 276, 286], "out_featur": [145, 146, 149, 176, 178, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 237, 238, 240, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 263, 266, 271, 272, 273, 274, 275, 276], "outcom": [386, 387, 389], "outer": 336, "outlier": [181, 255], "output": [0, 1, 2, 10, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 178, 190, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 305, 306, 309, 310, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 332, 334, 335, 345, 346, 347, 348, 349, 352, 354, 356, 359, 360, 361, 368, 369, 371, 373, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "output_height": 166, "output_lay": [146, 149], "output_s": [146, 190, 191, 192, 268, 269, 270], "output_width": 166, "outsid": [0, 242], "over": [0, 1, 2, 3, 11, 77, 87, 96, 97, 126, 138, 143, 146, 148, 158, 190, 191, 192, 209, 229, 236, 237, 238, 254, 257, 259, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 289, 290, 291, 292, 293, 308, 312, 347, 348, 349, 356, 359, 361, 386, 387, 389], "overal": [136, 169], "overdetermin": 19, "overfit": [1, 23, 138, 170, 173, 241, 243, 244, 245, 246, 289, 292, 297, 299], "overhead": [78, 140, 209], "overli": 226, "overrid": [2, 3, 85, 86, 87], "overridden": [143, 287], "overwrit": [145, 147], "own": [4, 145, 146, 147, 148, 162, 163, 164, 219, 286, 384], "p": [18, 19, 45, 144, 147, 148, 167, 168, 169, 170, 171, 172, 173, 240, 241, 243, 244, 245, 246, 271, 274, 275, 386, 387, 389, 392], "p_d": [273, 276], "p_h": [272, 273, 276], "p_w": [272, 273, 276], "packag": [2, 3, 4, 11, 140, 286, 288, 304, 311, 313, 382, 392], "pad": [72, 146, 149, 162, 163, 164, 166, 190, 191, 192, 193, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 260, 261, 268, 269, 270, 271, 272, 273, 274, 275, 276, 367], "pad_after_dim1": 369, "pad_after_dim2": 369, "pad_before_dim1": 369, "pad_before_dim2": 369, "pad_width": 369, "padding_height": 166, "padding_width": 166, "pair": 176, "pang": 140, "paper": 60, "parallel": [1, 3, 126, 140, 233], "param": [143, 144, 147, 148, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "param1": 143, "param_dict": 147, "param_group": [287, 288], "param_groups_setup": 287, "param_list": 148, "param_s": 304, "paramet": [0, 2, 10, 73, 74, 75, 140, 143, 286, 287, 288, 305, 313, 392], "parameter": 79, "parameterdict": 150, "parameterlist": 150, "parent": 286, "part": [142, 143, 219, 286, 301, 303, 313, 326, 327, 330, 332, 333, 334, 335, 373, 377, 378, 382, 392], "partial": [12, 13, 14, 16, 17, 18, 19, 21, 22, 151, 152, 154, 155, 156, 157, 158, 159, 176, 178, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380], "particip": [144, 382], "particular": [145, 147], "particularli": [10, 19, 77, 85, 110, 111, 112, 113, 114, 115, 146, 147, 148, 149, 158, 168, 178, 203, 204, 205, 206, 207, 208, 229, 251, 254, 257, 263, 264, 265, 266, 293, 301, 304, 331, 381], "partit": 373, "pass": [2, 10, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 145, 146, 147, 148, 149, 201, 203, 204, 205, 209, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 305, 314, 331, 348, 356, 359, 360, 361, 364, 366, 370, 372, 374, 377, 378, 380, 382, 392], "past": [289, 290, 292, 297], "patch": [166, 272], "path": [3, 5, 6, 7, 8, 25, 26, 63, 169, 242], "pathwai": 140, "pattern": [140, 155, 209, 225, 236, 237, 238], "penal": [289, 297, 299], "penalti": [290, 291, 292, 293, 294, 295, 296], "penros": 19, "per": [1, 78, 110, 111, 112, 113, 114, 115, 127, 128, 129, 161, 190, 233, 263, 264, 265, 266, 268, 282, 363], "perceptron": 63, "perform": [3, 10, 11, 12, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 55, 56, 57, 58, 63, 64, 66, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 85, 86, 87, 88, 106, 122, 123, 124, 125, 126, 131, 138, 140, 143, 144, 148, 152, 161, 162, 163, 164, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 287, 301, 303, 311, 313, 315, 316, 319, 322, 325, 345, 347, 349, 356, 360, 363, 373, 381, 383, 385, 390, 392], "permut": 360, "persist": [142, 306, 308, 309, 310, 312, 328, 329], "perturb": [14, 21, 22, 392], "phi": [152, 221], "pi": [152, 221, 342, 352, 357], "pico": [37, 140], "piecewis": [222, 223], "pil": [382, 392], "pinv": 15, "pioneer": 140, "pipelin": [5, 6, 7, 8, 313, 381, 382, 384], "pixel": [5, 6, 7, 8, 201, 284, 384, 386], "place": [212, 214, 215, 216, 217, 218, 219], "placehold": [143, 250], "plai": [305, 313], "plot": 368, "point": [4, 202, 301], "pointwis": [206, 207, 208], "pool": [23, 72, 73, 74, 75, 89, 98, 109, 116, 126, 131, 138, 140, 190, 191, 192, 193, 194, 195, 197, 198, 199, 209, 210, 237, 238, 268, 269, 270, 271, 272, 273, 274, 275, 276, 347, 349], "pool1": 149, "pool2": 149, "poorli": 16, "popul": 143, "popular": [4, 140], "portion": [377, 378, 392], "pose": 19, "posit": [1, 12, 17, 143, 149, 161, 202, 220, 224, 225, 227, 234, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 298, 302, 324, 371, 376, 385], "possibl": [10, 392], "potenti": [19, 250, 297, 374], "power": [10, 17, 36, 77, 82, 83, 89, 140, 209, 302, 303, 336, 381, 382, 392], "pp": 140, "practic": [19, 66, 254, 257], "practition": 392, "pre": [55, 56, 57, 58, 99, 103, 104], "preactbottleneck": [99, 103, 104], "preced": [140, 144, 284, 314], "preconfigur": [47, 48, 49, 50, 51, 52, 53, 54, 69, 70], "predecessor": 26, "predefin": [4, 140, 146, 227], "predict": [136, 253, 254, 256, 257], "prefix": [143, 304], "prepar": [3, 302, 369, 371, 376, 382, 392], "prepend": [143, 363], "preprint": 140, "preprocess": [3, 4, 166, 202, 313, 381, 382, 392], "present": [253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 272], "preserv": [140, 167, 169, 202, 240, 242, 326, 327, 330, 332, 333, 334, 335, 348, 356, 361], "preset": 4, "prevent": [1, 145, 146, 147, 148, 149, 161, 170, 173, 226, 234, 241, 243, 244, 245, 246, 253, 254, 281, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303], "previou": [140, 289, 298, 303], "previous": 292, "primari": [10, 305], "primarili": 149, "principl": 140, "print": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 301, 302, 303, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390], "priorit": [82, 83, 87, 210, 222], "prob": 306, "probabilist": 313, "probabl": [45, 61, 152, 158, 161, 167, 168, 169, 170, 171, 172, 173, 179, 221, 229, 233, 234, 240, 241, 242, 243, 244, 245, 246, 253, 254, 257, 278, 280, 282, 306, 386, 387, 389, 392], "problem": [19, 20, 22, 140, 154, 220, 224, 296], "proceed": 140, "process": [2, 3, 4, 17, 20, 22, 23, 25, 69, 96, 97, 98, 126, 137, 138, 140, 148, 162, 163, 164, 188, 202, 203, 204, 205, 209, 210, 227, 231, 236, 238, 249, 259, 260, 261, 263, 264, 265, 266, 271, 273, 274, 276, 278, 279, 281, 289, 305, 368, 382, 383, 384, 385, 390, 392], "produc": [23, 138, 141, 190, 191, 192, 209, 236, 237, 238, 268, 269, 270, 311, 313], "product": [10, 20, 22, 161, 223, 228, 230, 233, 234, 249, 266, 286, 317, 318, 322, 323], "program": [301, 313], "progress": [46, 291], "project": [20, 22, 233], "projector": 19, "promin": [271, 273, 274, 275, 276], "promot": [149, 254, 257, 286], "propag": [13, 14, 16, 19, 20, 21, 22, 140, 143, 149, 176, 178, 201, 209, 272, 273, 297, 298, 306, 317, 318, 319, 323, 347, 349, 368, 369, 372, 379], "properli": [0, 148, 158, 229, 286], "properti": [11, 13, 16, 17, 152, 156, 167, 221, 227, 240, 291, 296], "proport": [5, 6, 7, 8, 361], "proportion": 390, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 24, 27, 36, 38, 59, 60, 61, 68, 72, 79, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 131, 136, 137, 139, 140, 143, 145, 146, 147, 148, 152, 161, 178, 191, 192, 202, 234, 253, 254, 255, 257, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 284, 286, 287, 288, 289, 290, 297, 299, 301, 303, 305, 311, 313, 314, 319, 326, 333, 347, 349, 360, 362, 371, 374, 376, 392], "pseudo": [16, 19], "purpos": [27, 32, 36, 308, 312, 326, 332, 334], "python": 305, "pytorch": 362, "q": [20, 140, 161, 233, 234, 282], "q_i": 233, "qk": [280, 282], "qr": 15, "quad": [19, 233, 253, 254, 255, 256, 257, 274, 275, 276, 279, 281, 315, 316, 320, 321, 322, 325, 377, 378, 383], "quadrat": 255, "queri": [161, 233, 234, 282], "quoc": 140, "quotient": 316, "r": [20, 140, 233, 373, 386, 387, 388, 389], "r_t": 296, "radam": 300, "radix": [89, 90, 91, 92, 93, 94, 95, 96, 97], "rais": [0, 1, 2, 143, 286, 287, 324, 363], "rand": [307, 313], "randint": [307, 313], "randn": [23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 80, 81, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 138, 161, 206, 207, 208, 209, 210, 233, 234, 278, 279, 280, 281, 282, 286, 307, 311, 313], "random": [1, 2, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 80, 81, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 130, 136, 161, 206, 207, 208, 209, 210, 233, 242, 278, 279, 280, 281, 282, 385, 386, 387, 388, 389, 392], "random_integ": 313, "random_tensor": 313, "randomcrop": [391, 392], "randomgrayscal": [391, 392], "randomhorizontalflip": [391, 392], "randomli": [1, 167, 169, 170, 171, 172, 173, 202, 240, 243, 244, 245, 246, 385, 386, 387, 388, 389, 392], "randomnoisedataset": [0, 1, 2], "randomrot": [391, 392], "randomverticalflip": 391, "rang": [0, 1, 11, 29, 38, 88, 98, 106, 140, 148, 157, 159, 162, 163, 169, 180, 184, 219, 226, 228, 231, 242, 289, 297, 299, 306, 309, 331, 338, 339, 341, 384, 388, 392], "rank": 19, "rasul": 7, "rate": [25, 26, 45, 46, 63, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "rather": [7, 147, 148, 293, 372], "ratio": [45, 63, 116, 209, 210, 390], "ravel": 367, "raw": [158, 229, 254, 305], "re": [144, 303], "readabl": [145, 146, 147, 149, 286, 305], "readi": [3, 10, 122, 123, 124, 125, 130, 140], "real": [19, 22, 77, 228], "rearrang": 166, "reassembl": 140, "recalibr": [117, 119, 120, 122, 123, 124, 125, 140, 209], "receiv": [274, 275, 276, 369, 377, 378], "recent": 297, "recept": [126, 130, 140, 210], "reciproc": [19, 336, 346, 354], "recognit": [75, 96, 97, 140, 237], "rectangular": 330, "rectif": 296, "rectifi": [154, 155, 224, 225, 296], "recurr": [146, 266], "recurs": [141, 143], "red": 386, "reduc": [23, 76, 98, 109, 126, 131, 138, 140, 206, 207, 208, 209, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 295, 298, 303, 305, 347, 348, 349, 356, 361, 386], "reduct": [22, 45, 116, 179, 180, 181, 183, 184, 209, 210, 253, 254, 255, 256, 257, 347, 349], "reevalu": 287, "refer": [4, 10, 143, 313, 327, 330, 364], "refin": 140, "reflect": 301, "regardless": [19, 370], "region": [164, 168, 190, 191, 192, 201, 222, 241, 269, 270, 369, 383, 392], "regist": [85, 107, 108, 110, 111, 112, 113, 114, 115, 137, 142, 143, 144, 148, 286, 304], "register_buff": 142, "register_model": [24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 127, 128, 129, 132, 133, 134, 135, 137, 139], "register_paramet": 143, "registr": [143, 286], "registri": [110, 111, 112, 113, 114, 115, 304], "registry_path": 304, "regress": [4, 183, 255, 256], "regular": [19, 23, 25, 45, 46, 61, 138, 169, 173, 234, 241, 243, 244, 245, 246, 289, 290, 291, 294, 295, 296, 297, 299], "reimagin": 140, "relat": [303, 330, 332], "relationship": 390, "relev": [201, 289, 297, 299], "reli": [168, 303], "reliabl": [5, 6, 7, 8], "reliant": [243, 244, 245, 246], "relu": [10, 23, 116, 131, 138, 140, 141, 145, 146, 147, 149, 151, 153, 154, 175, 203, 204, 205, 209, 210, 214, 215, 218, 219, 220, 224, 226, 230, 232, 236, 237, 238, 248, 249, 250, 251, 278, 280, 282], "relu1": 149, "relu2": 149, "relu3": 149, "relu6": [232, 248], "remain": [5, 6, 7, 8, 38, 142, 169, 189, 240, 242, 243, 244, 245, 246, 298], "rememb": 313, "remov": [304, 374], "rep": 376, "repeat": [367, 368, 376], "repetit": [371, 376], "replac": [7, 278, 313, 386], "replic": [279, 281, 363], "repres": [7, 16, 18, 22, 72, 79, 90, 91, 92, 93, 94, 95, 143, 144, 149, 176, 178, 185, 188, 189, 236, 237, 238, 249, 251, 254, 257, 266, 279, 287, 288, 289, 295, 296, 297, 298, 299, 305, 306, 315, 316, 322, 325, 327, 348, 359, 360, 361, 368, 383, 385, 387, 388, 389, 390], "represent": [89, 96, 97, 107, 108, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 130, 140, 209, 272, 275, 287], "reproduc": [306, 308, 309, 310, 311, 312, 313, 392], "requir": [2, 3, 4, 10, 28, 34, 35, 67, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 126, 142, 145, 149, 151, 152, 154, 155, 156, 157, 159, 176, 178, 201, 209, 210, 219, 250, 254, 257, 286, 301, 303, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 379, 380, 382, 383, 390], "requires_grad": [142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 166, 176, 178, 201, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 284, 286, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382], "rescal": [179, 180, 184, 253, 254, 257], "research": 286, "reset": [144, 311, 314], "reshap": [10, 116, 178, 237, 238, 284, 302, 305, 367, 370], "residu": [62, 68, 69, 70, 77, 78, 81, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 140, 280, 282], "residualblock": 98, "resili": 298, "resiz": [201, 381, 391, 392], "resnest": [71, 90, 91, 92, 93, 94, 95, 96, 97, 140], "resnest_101": 140, "resnest_14": 140, "resnest_200": 140, "resnest_26": 140, "resnest_269": 140, "resnest_50": 140, "resnest_50_1s4x24d": 140, "resnest_50_4s2x40d": 140, "resnet": [68, 69, 70, 71, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 119, 120, 121, 126, 127, 128, 129, 140, 209], "resnet_1001": 140, "resnet_101": 140, "resnet_152": 140, "resnet_18": 140, "resnet_200": 140, "resnet_269": 140, "resnet_34": 140, "resnet_50": 140, "resnet_arg": 126, "resnext": [71, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 130, 140], "resnext_101_32x16d": 140, "resnext_101_32x32d": 140, "resnext_101_32x4d": 140, "resnext_101_32x8d": 140, "resnext_101_64x4d": 140, "resnext_50_32x4d": 140, "resolut": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 122, 123, 124, 125, 130, 140], "resourc": [30, 31, 33, 34, 37, 38, 64, 78, 82, 83, 84, 85, 86, 87, 88, 140, 303], "respect": [12, 13, 14, 16, 17, 18, 19, 20, 22, 72, 131, 142, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 176, 178, 201, 210, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 341, 345, 346, 347, 348, 349, 352, 354, 356, 359, 360, 361, 368, 369, 371, 376, 386], "respons": [122, 123, 124, 125, 140, 145, 186, 262, 288], "rest": [377, 378], "restor": [209, 303], "restructur": 372, "result": [12, 16, 17, 19, 140, 143, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 176, 178, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 210, 222, 226, 229, 233, 242, 286, 287, 301, 303, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 382, 385, 386, 392], "resum": 288, "retain": [144, 168, 241, 314, 326, 334, 347, 348, 349, 356, 361, 377, 378, 382], "retent": 382, "rethink": 140, "retriev": [0, 2, 145, 147, 148], "return": [0, 1, 2, 3, 5, 6, 7, 8, 10, 68, 72, 86, 88, 116, 142, 143, 145, 146, 147, 148, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 242, 243, 244, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 279, 281, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 305, 381, 392], "reus": [140, 382], "reusabl": [149, 242, 286, 381], "revers": [10, 149, 360, 387, 389], "revert": 303, "revolution": 140, "rgb": [5, 6, 60, 61, 62, 69, 70], "rho": 290, "rho_": 296, "rho_t": 296, "right": [17, 18, 19, 21, 22, 152, 158, 221, 229, 233, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 274, 275, 276, 280, 282, 383], "rightarrow": [233, 373], "risk": 305, "rmsprop": 300, "rob": 140, "robust": [27, 32, 65, 86, 168, 202, 240, 243, 244, 245, 246, 255, 286, 290, 385, 386, 388, 392], "roland": 7, "role": [305, 313, 392], "root": [4, 5, 6, 7, 8, 291, 297, 354], "rotat": [175, 200, 388, 392], "rotated_imag": 202, "rout": [274, 275, 276], "routin": 10, "row": [13, 14, 16, 21, 178, 330, 368, 377, 378, 380], "rprop": 300, "rule": [16, 17, 302, 315, 316, 320, 321, 322, 324, 325], "run": [10, 142, 185, 188, 203, 204, 205, 259, 260, 261, 263, 264, 265, 290, 303, 311, 313], "running_mean": [142, 185, 188, 259, 260, 261, 263, 264, 265], "running_var": [185, 188, 259, 260, 261, 263, 264, 265], "runtim": [46, 146, 149, 242, 286, 331], "s_": 298, "s_1": 373, "s_2": 373, "s_d": [273, 276], "s_h": [272, 273, 276], "s_i": 373, "s_n": 373, "s_w": [272, 273, 276], "sain": 140, "same": [13, 14, 16, 17, 21, 158, 167, 168, 169, 170, 171, 172, 173, 185, 186, 188, 189, 191, 192, 202, 203, 204, 205, 206, 207, 208, 210, 226, 236, 237, 238, 240, 243, 244, 245, 246, 250, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 298, 306, 311, 313, 319, 329, 333, 335, 345, 347, 348, 349, 364, 366, 370, 372, 374, 375, 377, 378, 380, 384], "sampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 55, 56, 57, 58, 60, 61, 62, 69, 70, 72, 73, 74, 75, 80, 81, 89, 90, 91, 92, 93, 94, 95, 96, 97, 122, 123, 124, 125, 130, 190, 191, 192, 214, 215, 216, 217, 218, 219, 240, 243, 244, 245, 246, 249, 251, 254, 257, 266, 268, 269, 270, 306, 310, 313, 331, 383, 385, 387, 388, 389, 390], "sandler": 140, "satisfi": [12, 14, 21, 373], "satur": [220, 392], "save": [2, 142, 144, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304], "scalabl": [3, 32, 45, 110, 111, 112, 113, 114, 115, 136, 140, 286], "scalar": [13, 18, 179, 180, 181, 183, 184, 305, 306], "scale": [14, 19, 25, 31, 33, 34, 35, 37, 39, 40, 45, 46, 63, 69, 73, 74, 75, 76, 80, 84, 85, 87, 88, 89, 96, 97, 99, 100, 101, 104, 117, 118, 126, 127, 128, 129, 140, 151, 156, 158, 161, 169, 185, 186, 188, 189, 209, 210, 218, 219, 220, 222, 224, 227, 228, 229, 231, 233, 234, 240, 242, 243, 244, 245, 246, 254, 259, 260, 261, 262, 263, 264, 265, 266, 284, 289, 291, 292, 293, 305, 313, 361, 390], "scale_by_keep": [169, 242], "scale_factor": 284, "scaled_dot_product_attent": [160, 175], "scaleddotproductattent": [235, 248], "scenario": [30, 35, 37, 85, 86, 87, 88, 147, 148, 266, 293, 294, 382, 386], "schedul": [241, 289], "scientif": 302, "score": [98, 109, 126, 158, 161, 234, 254], "scratch": 10, "script": 313, "se": [45, 117, 118, 119, 120, 121, 122, 123, 124, 125, 140], "se_resnet_101": 140, "se_resnet_152": 140, "se_resnet_18": 140, "se_resnet_34": 140, "se_resnet_50": 140, "se_resnext_101_32x4d": 140, "se_resnext_101_32x8d": 140, "se_resnext_101_64x4d": 140, "se_resnext_50_32x4d": 140, "se_scal": 45, "seamless": [0, 1, 3, 4, 286, 313], "seamlessli": [3, 4, 11, 144, 146, 149, 286, 305, 392], "search": 140, "second": [14, 146, 147, 176, 209, 249, 292, 293, 294, 295, 296, 302, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 366, 368, 389], "section": 319, "see": [10, 319], "seed": [306, 307, 308, 309, 310, 312, 313, 392], "seek": 88, "seen": 290, "select": [126, 127, 128, 129, 130, 140, 201, 209, 210, 274, 276, 356], "selectivekernel": 211, "self": [0, 1, 2, 3, 10, 23, 45, 46, 59, 63, 68, 72, 76, 77, 78, 79, 89, 116, 131, 138, 141, 142, 143, 144, 145, 146, 147, 148, 156, 169, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 241, 242, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 381, 382], "selfattent": 282, "selu": [153, 167, 175, 232, 240, 248], "selunetwork": 227, "semodul": 211, "senet": [71, 117, 118, 119, 120, 121, 122, 123, 124, 125, 140], "sensit": [181, 255, 259, 260, 261], "sentiment": 4, "separ": [0, 76, 96, 97, 136, 140, 162, 163, 164, 206, 207, 208, 263, 264, 265], "seq_len": [161, 233, 234, 278, 279, 280, 281, 282], "sequenc": [17, 98, 109, 126, 145, 147, 161, 162, 233, 278, 279, 281, 282, 326, 331, 364, 366, 369, 371, 375, 376, 380, 381], "sequenti": [23, 68, 72, 116, 131, 136, 138, 141, 145, 146, 150, 162, 203, 204, 205, 250, 279, 281, 381, 392], "seri": [59, 73, 74, 126, 162, 203, 236, 271, 274], "serial": [142, 143, 288], "serv": [3, 7, 40, 68, 116, 131, 143, 145, 146, 147, 148, 149, 286, 298, 382], "set": [3, 4, 5, 6, 7, 8, 84, 85, 86, 96, 97, 107, 108, 122, 123, 124, 125, 130, 141, 144, 148, 161, 162, 163, 164, 224, 225, 227, 234, 236, 237, 238, 240, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 287, 292, 293, 297, 306, 308, 309, 310, 311, 312, 313, 314, 326, 328, 329, 334, 335, 341, 347, 349, 362, 377, 378, 382, 386, 392], "setup": [4, 10, 110, 111, 112, 113, 114, 115], "sever": [19, 236, 237, 238, 271, 272, 273, 274, 275, 276, 303, 381, 392], "sgd": [10, 289, 296, 300], "sgn": 18, "shape": [3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 68, 72, 78, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 302, 305, 306, 308, 309, 310, 312, 313, 314, 317, 328, 329, 330, 332, 333, 334, 335, 341, 346, 347, 348, 349, 352, 354, 356, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 390, 392], "shapelik": 309, "share": 140, "shen": 209, "shift": [185, 186, 188, 189, 222, 259, 260, 261, 262, 263, 264, 265, 266], "shorthand": 319, "should": [72, 142, 278, 279, 280, 281, 282, 303, 306, 308, 309, 310, 312, 328, 329, 338, 339, 359, 363, 369, 381], "show": [301, 304], "showcas": 10, "shown": [230, 311], "shrink": 290, "shuffl": [1, 2, 3], "side": [21, 146, 149, 162, 163, 164, 193, 194, 195, 197, 198, 199, 203, 204, 205, 236, 237, 238, 271, 272, 273, 274, 275, 276, 303], "sigma": [19, 209, 214, 216, 218, 228, 230, 259, 260, 261, 263, 264, 265, 266, 360], "sigma_c": 384, "sigma_i": 19, "sigmoid": [153, 175, 209, 214, 215, 218, 219, 222, 223, 230, 232, 248, 253], "sigmoidnetwork": 228, "sign": [17, 255, 298, 336], "signal": [203, 236, 237, 238, 259, 263, 271, 272, 273, 274, 275, 276], "signific": [28, 303], "significantli": [77, 109, 140, 209, 381], "sim": [240, 243, 244, 245, 246], "similar": [10, 214, 215, 319, 346, 362, 363, 369], "similarli": [22, 359], "simonyan": 140, "simpl": [3, 4, 10, 141, 149, 162, 163, 164, 176, 178, 193, 194, 195, 197, 198, 199, 221, 222, 223, 225, 226, 227, 228, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 317, 318, 323, 381], "simplebinaryclassificationmodel": 253, "simpleblock": 169, "simpleclassificationmodel": [254, 257], "simplegelumodel": 221, "simplehardsigmoidmodel": 222, "simplehardswishmodel": 223, "simpleleakyrelumodel": 224, "simplemodel": [10, 141, 226, 242, 251, 304], "simpleregressionmodel": 256, "simplerelumodel": 225, "simpleselumodel": 227, "simplesigmoidmodel": 228, "simpleswishmodel": 230, "simpletanhmodel": 231, "simpli": [301, 359, 360, 372], "simplic": [140, 222, 225], "simplifi": [4, 55, 56, 57, 58, 73, 137, 140, 149, 203, 204, 205], "simul": [141, 392], "simultan": 202, "sin": [336, 342], "sinc": [17, 20, 145, 146, 147, 148, 162, 163, 164, 219, 301, 303, 306, 310, 368, 392], "sine": [339, 352, 353], "singl": [0, 4, 17, 20, 22, 98, 158, 203, 204, 205, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 254, 266, 272, 273, 274, 275, 276, 279, 280, 281, 282, 287, 305, 312, 328, 331, 364, 374, 384, 386, 392], "singleton": 266, "singular": [13, 16, 17, 19, 21, 22], "sinh": [336, 343, 358], "size": [0, 1, 2, 3, 22, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 66, 72, 73, 74, 75, 79, 80, 82, 83, 98, 126, 138, 140, 141, 144, 146, 161, 162, 163, 164, 166, 168, 171, 172, 173, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 233, 236, 237, 238, 241, 249, 251, 253, 254, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 284, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 309, 312, 313, 314, 347, 348, 349, 356, 361, 363, 364, 366, 373, 374, 379, 380, 383, 385, 390, 392], "size_or_sect": 373, "sk": [126, 127, 128, 129, 130, 140, 210], "sk_resnet_18": 140, "sk_resnet_34": 140, "sk_resnet_50": 140, "sk_resnext_50_32x4d": 140, "skblock": 126, "skip": [140, 303], "sknet": [71, 127, 128, 129, 130, 140], "slice": [176, 359], "slide": [166, 271, 273, 274, 276], "slight": 209, "slightli": 392, "slope": [154, 220, 224], "slow": [3, 296], "small": [19, 29, 31, 33, 36, 55, 56, 57, 58, 65, 66, 73, 74, 75, 78, 82, 83, 86, 140, 154, 168, 179, 180, 185, 186, 188, 189, 224, 227, 241, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 272, 275, 278, 280, 282, 290, 291, 292, 293, 294, 295, 296, 297, 298], "smaller": [30, 55, 56, 57, 58, 84, 138, 140, 146, 149, 286, 291, 292, 321, 383, 385, 390], "smallest": 349, "smooth": [61, 152, 220, 221, 230, 289, 297, 392], "smoother": 289, "so": [145, 146, 147, 148, 202, 286, 296, 328, 329, 381], "softmax": [153, 161, 175, 210, 232, 233, 234, 248, 254, 280, 282], "softmaxmodel": 229, "solut": [19, 21], "solv": [11, 12, 15, 19, 20, 22], "solver": 11, "some": [151, 169, 170, 202, 240, 242, 243, 244, 259, 260, 261, 263, 264, 265, 291, 292, 293, 303, 305], "sometim": 302, "sophist": [146, 149], "sourc": [161, 278, 313], "space": [14, 20, 22, 162, 163, 164, 166, 190, 191, 192, 203, 204, 205, 206, 207, 208, 236, 237, 238, 268, 269, 270, 326, 331, 392], "span": 4, "spars": [291, 292], "spatial": [23, 98, 109, 126, 131, 138, 140, 168, 186, 204, 209, 237, 238, 259, 260, 261, 263, 264, 265, 266, 272, 273, 274, 275, 276, 284, 368], "spatial_dim": 209, "spatio": 238, "special": [0, 1, 10, 19, 142, 143, 144, 240, 313], "specif": [4, 10, 41, 42, 43, 44, 55, 56, 57, 58, 68, 76, 84, 85, 86, 87, 88, 96, 97, 107, 108, 145, 146, 147, 148, 149, 210, 219, 240, 243, 244, 245, 246, 263, 264, 265, 286, 287, 301, 313, 328, 347, 349, 371, 376], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 18, 24, 40, 46, 72, 79, 80, 81, 84, 85, 86, 87, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 128, 129, 131, 132, 133, 134, 135, 137, 139, 141, 146, 158, 166, 173, 179, 180, 181, 183, 184, 189, 190, 191, 192, 201, 202, 209, 229, 233, 236, 237, 238, 253, 254, 255, 256, 257, 266, 268, 269, 270, 272, 273, 274, 275, 276, 284, 287, 305, 308, 309, 310, 311, 312, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 341, 347, 348, 349, 356, 360, 361, 362, 363, 364, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 390, 392], "speech": 263, "speed": [82, 83, 222, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "split": [4, 89, 96, 97, 140, 233, 364, 366, 367, 380], "split_tensor": 373, "springer": 140, "sqrt": [152, 161, 186, 214, 215, 218, 219, 221, 233, 234, 259, 260, 261, 262, 263, 264, 265, 266, 280, 282, 290, 291, 292, 293, 295, 296, 297, 336, 338, 339], "squar": [1, 3, 12, 13, 14, 16, 17, 19, 20, 21, 22, 168, 181, 183, 241, 255, 256, 290, 291, 292, 297, 336, 354], "squaredataset": [0, 1, 2, 3], "squeez": [45, 78, 82, 83, 116, 119, 122, 123, 124, 125, 140, 209, 367], "src": [278, 281, 282], "src_key_pad": 281, "src_key_padding_mask": [278, 282], "src_mask": [278, 281, 282], "stabil": [16, 19, 140, 168, 179, 180, 185, 186, 188, 189, 203, 204, 205, 226, 241, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 278, 280, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 384], "stabl": [214, 215, 218, 219, 240, 254, 289, 293, 294, 297, 298, 299], "stack": [149, 210, 278, 279, 281, 366, 367, 380, 392], "stage": [25, 26, 63, 89, 90, 91, 92, 93, 94, 95, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 129, 140], "stage1": 116, "stage2": 116, "stage3": 116, "stage4": 116, "standalon": 226, "standard": [27, 32, 65, 84, 87, 98, 107, 108, 152, 154, 206, 207, 208, 214, 216, 218, 220, 221, 224, 240, 278, 298, 310, 313, 319, 381, 384, 392], "start": [1, 3, 289, 291, 298, 326, 331, 383, 385], "state": [34, 140, 142, 143, 144, 146, 149, 287, 301, 303, 311], "state_dict": [143, 144, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "static": 149, "statist": [19, 167, 185, 188], "std": [5, 6, 7, 8, 216, 381, 384, 392], "stem": [68, 89, 98, 109, 126, 140], "stem_typ": 98, "stem_width": [89, 90, 91, 92, 93, 94, 95, 98], "step": [144, 166, 210, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 326, 381, 382], "step_siz": 298, "still": [37, 290], "stochast": [10, 25, 26, 45, 46, 63, 169, 242, 289, 299], "stochastic_depth": 45, "stop": [326, 331], "storag": [145, 147, 314], "store": [2, 4, 5, 6, 7, 8, 98, 109, 126, 142, 143, 144, 145, 146, 147, 148, 209, 268, 269, 270, 303, 314, 383, 384, 385, 386, 387, 388, 389, 390], "str": [5, 6, 7, 8, 79, 98, 131, 143, 145, 147, 149, 179, 180, 181, 183, 184, 201, 284, 287, 304, 368], "straightforward": [299, 301, 315], "strategi": [87, 288], "streamlin": [2, 3, 140], "strength": 241, "strict": [143, 287], "stride": [46, 72, 73, 74, 75, 78, 79, 82, 83, 146, 149, 162, 163, 164, 166, 190, 191, 192, 193, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 268, 269, 270, 271, 272, 273, 274, 275, 276], "stride_height": 166, "stride_width": 166, "strike": [32, 79, 86], "string": [143, 145, 147, 149, 236, 237, 238, 287], "structur": [0, 10, 20, 46, 78, 136, 142, 143, 146, 168, 241, 286, 287, 304, 305, 330, 382], "style": [68, 188, 263, 264, 368], "sub": [145, 146, 147, 148, 149, 286, 336, 373, 383, 385], "sub_tensor": 314, "subclass": [1, 2, 3, 10, 143, 144, 145, 286, 287], "sublay": [141, 278, 280, 282], "submodul": [141, 143, 286], "subsequ": [146, 149, 219, 313], "subset": [96, 97, 243, 244], "subspac": 233, "subtract": [10, 325, 384], "suffer": 291, "suit": [37, 41, 42, 43, 44, 61, 76, 84, 85, 87, 126, 214, 215, 218, 219], "suitabl": [27, 29, 30, 33, 35, 47, 48, 49, 50, 51, 52, 53, 54, 68, 73, 74, 75, 77, 82, 83, 85, 88, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 118, 119, 121, 140, 255, 291, 292, 308], "sum": [18, 145, 146, 147, 148, 149, 158, 161, 179, 180, 181, 183, 184, 210, 229, 253, 254, 255, 256, 257, 291, 315, 318, 323, 336, 359, 361, 363, 364, 366, 368, 371, 373, 376, 380], "sum_": [17, 158, 186, 229, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 317, 318, 348, 356, 359, 361, 363, 368, 371], "sum_i": [18, 323], "sum_j": 323, "sum_k": 319, "summar": [45, 107, 108, 136, 271, 272, 273], "summari": [107, 108, 122, 123, 124, 125, 130], "summat": 17, "sun": 209, "super": [10, 141, 142, 143, 144, 145, 146, 147, 148, 169, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 242, 243, 244, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304], "superior": 39, "supplementari": 87, "support": [1, 3, 4, 10, 11, 17, 18, 19, 20, 22, 80, 98, 145, 146, 147, 148, 149, 161, 201, 202, 234, 284, 286, 288, 295, 313, 314, 315, 316, 319, 320, 321, 322, 324, 325, 327, 330, 341, 346, 348, 352, 354, 356, 359, 360, 361, 364, 368, 372, 373, 382, 392], "suppos": 392, "sure": [286, 392], "svd": [15, 19], "swish": [82, 83, 232, 248], "symmetr": [12, 190, 191, 192, 218, 219, 231], "syntax": [1, 319], "system": [11, 12, 19, 20, 21, 86, 140, 301, 368], "systemat": [140, 392], "szegedi": [60, 140], "t": [19, 140, 278, 279, 280, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 314, 319, 362, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "t0": 289, "t1": 362, "t2": 362, "t_": 279, "t_0": 279, "t_i": 279, "tabl": 45, "tabular": 4, "tailor": [4, 78, 86, 90, 91, 92, 93, 94, 95, 286, 392], "take": [20, 271, 272, 273, 274, 275, 276, 284, 303, 381], "taken": 359, "tan": [140, 336], "tangent": [159, 231, 340, 357, 358], "tanh": [72, 146, 149, 152, 153, 175, 214, 215, 218, 219, 221, 232, 248, 336], "tanhnetwork": 231, "target": [5, 6, 7, 8, 37, 149, 179, 180, 181, 183, 184, 190, 191, 192, 201, 253, 254, 255, 256, 257, 268, 269, 270, 278, 279, 280, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 363, 383, 385, 390], "target_tensor": [253, 254, 255, 256, 257], "target_transform": [5, 6, 7, 8], "task": [4, 10, 11, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 136, 140, 157, 158, 163, 176, 179, 180, 183, 184, 209, 210, 228, 229, 236, 237, 238, 253, 254, 255, 256, 257, 263, 264, 265, 271, 273, 274, 276, 278, 292, 302, 313, 330, 331, 392], "techniqu": [12, 16, 25, 46, 63, 87, 138, 140, 169, 185, 240, 241, 243, 244, 245, 246, 263, 264, 265, 288, 390, 392], "tempor": [236, 238, 273, 276], "temporarili": 303, "tensor": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 55, 56, 57, 58, 60, 61, 62, 68, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 98, 110, 111, 112, 113, 114, 115, 116, 127, 128, 129, 131, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 301, 303, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "term": [19, 38, 176, 203, 204, 205, 206, 207, 208, 233, 278, 280, 282, 289, 293, 295, 296, 297, 299], "test": [4, 5, 6, 7, 8, 331], "test_backward": 141, "test_siz": [5, 6, 7, 8], "text": [4, 13, 17, 18, 98, 109, 126, 127, 128, 129, 136, 145, 151, 154, 155, 156, 158, 161, 162, 163, 164, 169, 190, 191, 192, 193, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257, 271, 272, 273, 274, 275, 276, 278, 279, 281, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 309, 315, 316, 318, 320, 321, 322, 324, 325, 337, 341, 347, 348, 349, 351, 356, 361, 363, 364, 366, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389], "tgt": [278, 279, 280], "tgt_is_caus": [279, 280], "tgt_key_padding_mask": [278, 279, 280], "tgt_mask": [278, 279, 280], "th": [176, 253, 254, 256, 257, 263, 264, 265, 320, 321, 324], "than": [0, 1, 7, 147, 148, 151, 154, 181, 206, 207, 208, 220, 224, 230, 255, 287, 293, 331, 341, 359, 363, 369, 375, 383, 385, 390], "thei": [0, 10, 22, 140, 142, 146, 148, 149, 233, 305, 368, 372, 383, 385, 392], "them": [3, 140, 143, 148, 166, 289, 302, 364, 375, 381, 384, 392], "therebi": [240, 272, 273, 275, 276], "theta": [289, 290, 388], "theta_": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "theta_t": [296, 297], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 60, 61, 62, 68, 69, 70, 72, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 98, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 140, 141, 142, 144, 146, 147, 148, 149, 155, 157, 158, 159, 162, 163, 164, 166, 168, 169, 176, 178, 190, 201, 202, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 268, 271, 272, 273, 274, 275, 276, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 309, 310, 311, 313, 314, 318, 319, 323, 326, 328, 332, 333, 334, 335, 341, 345, 346, 347, 348, 349, 352, 354, 356, 359, 360, 361, 362, 363, 369, 371, 372, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "thing": 303, "those": [10, 73, 74, 75, 148, 219], "three": [22, 75, 164, 192, 195, 199, 203, 204, 205, 238, 246, 261, 265, 270, 273, 276], "threshold": [19, 181, 255], "through": [0, 3, 4, 10, 14, 19, 20, 22, 23, 25, 59, 68, 72, 79, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 127, 128, 129, 137, 138, 140, 145, 146, 149, 168, 176, 178, 201, 209, 210, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 306, 310, 317, 318, 323, 368, 370, 372, 374, 377, 378, 379, 392], "throughout": [156, 382], "tier": 34, "tile": 367, "time": [0, 3, 17, 73, 74, 75, 77, 162, 203, 224, 227, 233, 236, 271, 272, 273, 274, 275, 276, 279, 281, 289, 290, 291, 292, 293, 297, 299, 303, 371, 376], "tini": [29, 30, 38, 63, 67, 140], "to_tensor": [5, 6, 7, 8], "togeth": [149, 381, 392], "token": 63, "token_mix": 63, "too": 298, "tool": [3, 10, 286, 302, 313, 381, 392], "top": [12, 13, 14, 20, 22, 34, 161, 176, 178, 201, 233, 234, 236, 237, 238, 249, 251, 383, 385], "torch": [131, 362], "toronto": [5, 6], "total": [0, 1, 2, 5, 6, 7, 8, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 141, 144, 233, 314, 372], "totensor": [381, 392], "trace": [11, 336], "track": [10, 203, 204, 205, 259, 260, 261, 263, 264, 265, 286, 301, 303, 306, 308, 309, 310, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 363, 382], "track_running_stat": [203, 204, 205, 259, 260, 261, 263, 264, 265], "trade": [29, 85], "tradit": [7, 88, 140, 290, 291, 294, 295, 296], "trail": 189, "train": [1, 2, 3, 4, 5, 6, 7, 8, 10, 25, 46, 59, 60, 61, 122, 123, 124, 125, 130, 140, 141, 142, 143, 146, 148, 149, 158, 167, 168, 169, 170, 171, 172, 173, 185, 188, 202, 221, 224, 227, 228, 229, 231, 240, 241, 242, 243, 244, 245, 246, 259, 260, 261, 263, 264, 265, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 381, 384, 385, 386, 387, 388, 389, 392], "trainabl": [141, 259, 260, 261, 263, 264, 265, 286], "transact": 209, "transfer": [188, 263, 264], "transform": [2, 4, 5, 6, 7, 8, 10, 14, 25, 140, 147, 161, 176, 178, 233, 234, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 279, 280, 281, 282, 302, 368], "transform_pipelin": [381, 392], "transformed_imag": [381, 392], "transformer_decod": 279, "transformer_encod": 281, "transformerdecod": [248, 278, 283], "transformerdecoderlay": [248, 278, 279, 283], "transformerencod": [248, 278, 283], "transformerencoderlay": [248, 278, 281, 283], "transit": [40, 255], "translat": [272, 275, 278], "transpos": [10, 12, 336], "treat": [0, 142, 266, 286], "triangular": [12, 20, 279, 280, 281, 282, 377, 378], "tril": 367, "triu": 367, "true": [1, 2, 3, 4, 5, 6, 7, 8, 22, 59, 60, 61, 82, 83, 89, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 166, 167, 169, 170, 171, 172, 173, 176, 178, 185, 188, 201, 203, 204, 205, 206, 207, 208, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 292, 293, 297, 301, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382], "truncat": 141, "truncate_from": 141, "try": 0, "tune": [85, 88, 392], "tupl": [2, 3, 5, 6, 7, 8, 14, 18, 20, 22, 40, 98, 141, 143, 144, 162, 163, 164, 166, 189, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 236, 237, 238, 250, 266, 269, 270, 271, 272, 273, 274, 275, 276, 284, 292, 293, 294, 295, 296, 298, 305, 308, 309, 310, 312, 314, 328, 332, 334, 347, 348, 349, 356, 361, 363, 364, 366, 368, 369, 372, 373, 374, 375, 379, 380, 383, 384, 385, 390], "twice": 369, "two": [10, 13, 14, 16, 17, 19, 20, 22, 73, 74, 75, 78, 96, 97, 127, 131, 162, 163, 164, 176, 194, 198, 209, 210, 237, 245, 249, 260, 264, 272, 275, 282, 292, 293, 294, 295, 296, 298, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 359, 368, 373], "type": [63, 72, 89, 98, 116, 126, 142, 143, 144, 176, 249, 278, 280, 282, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 362, 368, 382], "typeerror": [0, 1, 2, 143, 287], "typic": [11, 79, 85, 98, 109, 126, 142, 158, 167, 168, 202, 209, 226, 227, 229, 241, 242, 257, 259, 260, 261, 263, 264, 265, 288, 289, 297, 299, 303, 305, 379, 382, 384, 388, 390, 392], "u": [19, 22, 215, 217, 219], "u_": 294, "ultra": [31, 104], "unchang": [142, 173, 220, 224, 225, 227, 240, 243, 244, 245, 246, 250, 370, 374], "undefin": 324, "under": [110, 111, 112, 113, 114, 115, 286], "underbrac": 17, "underdetermin": 19, "undergo": [169, 282, 392], "underli": [0, 10, 55, 56, 57, 58, 60, 61, 62, 69, 70, 362, 366, 370, 372, 380], "understand": [10, 138, 140, 141, 149, 392], "unexpect": [143, 146, 149, 313], "unfold": [165, 175], "unifi": 0, "uniform": [213, 215, 219, 236, 237, 238, 249, 251, 307, 308, 309, 313, 386, 387, 388, 389], "uniformli": [308, 312], "uniniti": [328, 329], "unintend": 303, "union": 131, "uniqu": [12, 19, 21, 145, 147], "unit": [23, 72, 138, 151, 152, 154, 155, 156, 214, 215, 218, 219, 220, 221, 224, 225, 227, 240], "unless": [99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 314], "unlik": [142, 145, 146, 147, 148, 154, 220, 224, 240, 266, 290, 291, 293, 294, 295, 296, 298], "unnecessari": 303, "unpad": 369, "unseen": 392, "unsqueez": 367, "unstabl": 16, "up": [287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 388, 390], "updat": [4, 26, 142, 148, 149, 240, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303], "upon": [26, 61, 78, 79, 140, 145, 146, 147, 148], "upper": [20, 217, 298, 312, 377, 378], "upper_triangular": 378, "upsampl": [248, 285], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 22, 25, 40, 45, 46, 59, 60, 61, 62, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 176, 178, 183, 185, 186, 188, 191, 192, 201, 202, 203, 204, 205, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 278, 284, 286, 287, 288, 301, 302, 303, 304, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 345, 347, 348, 349, 356, 361, 368, 369, 371, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "usag": [3, 11, 27, 28, 29, 30, 38, 39, 40, 136, 146, 149, 169, 206, 207, 208, 234, 241, 287, 288, 331, 383, 384, 385, 386, 387, 388, 389, 390], "use_aux": [59, 60, 61], "use_h": [82, 83], "use_s": [82, 83], "user": [1, 2, 3, 4, 10, 88, 145, 146, 147, 148, 286, 291, 381, 382, 392], "usual": 254, "util": [3, 10, 11, 79, 127, 128, 129, 147, 148, 168, 286, 313], "v": [14, 19, 22, 140, 161, 233, 234, 280, 282, 292, 293, 295, 296, 327], "v1": [59, 60, 68, 69, 70, 76, 77, 140], "v2": [31, 32, 33, 34, 35, 36, 37, 38, 46, 55, 56, 57, 58, 68, 70, 71, 77, 78, 81, 140], "v3": [59, 61, 62, 71, 78, 82, 83, 140], "v4": [59, 62, 71, 79, 85, 86, 87, 88, 140], "v_": [289, 292, 293, 295, 296, 297, 299], "v_i": 233, "v_stack": 380, "v_t": [296, 297], "val": 212, "valid": [203, 204, 205, 206, 207, 208, 210, 236, 237, 238, 360], "valu": [10, 13, 17, 18, 19, 22, 25, 63, 76, 79, 87, 107, 108, 141, 143, 145, 147, 149, 151, 154, 157, 158, 159, 161, 162, 163, 164, 166, 168, 169, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 201, 202, 203, 204, 205, 209, 212, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 231, 233, 234, 240, 241, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 305, 306, 308, 309, 310, 311, 312, 313, 326, 327, 328, 329, 330, 331, 337, 338, 339, 341, 344, 345, 346, 347, 349, 351, 352, 354, 355, 364, 369, 370, 372, 379, 384, 386, 387, 389], "valuabl": 313, "valueerror": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 287], "van": 140, "vanish": [140, 220, 227, 259, 260, 261], "var": 336, "vari": [25, 126, 146, 148, 190, 201, 268, 388], "variabl": [143, 149, 190, 191, 192, 250, 268, 269, 270, 286, 301, 303, 308, 328, 385, 388], "varianc": [156, 167, 185, 188, 203, 204, 205, 214, 215, 218, 219, 227, 240, 259, 260, 261, 263, 264, 265, 266, 292, 293, 294, 295, 296, 310, 361, 388, 392], "variant": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 64, 65, 66, 67, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 107, 108, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 292, 293, 294], "variat": [206, 207, 208, 263, 264, 265, 385, 392], "varieti": [4, 68, 89, 313, 392], "variou": [7, 40, 59, 69, 70, 72, 79, 80, 88, 140, 225, 288, 313, 331, 347, 349, 369, 382], "vasudevan": 140, "vaswani": 278, "vdim": 233, "vdot": 323, "vector": [14, 19, 20, 21, 22, 176, 178, 233, 249, 251, 317, 318, 319, 323], "veloc": [289, 297, 299], "veri": [19, 33, 101, 103, 140, 290], "versa": 298, "versatil": [88, 313, 368], "version": [22, 25, 59, 63, 68, 72, 73, 74, 85, 297, 323, 386], "vertic": [375, 380, 389], "vgg": 131, "vggnet": [71, 132, 133, 134, 135, 140], "vggnet_11": 140, "vggnet_13": 140, "vggnet_16": 140, "vggnet_19": 140, "via": [3, 4, 88, 126], "vice": 298, "video": [164, 173, 205, 238, 265, 273, 276], "view": [68, 72, 146, 272, 273, 274, 275, 276, 363, 372], "vinod": [5, 6], "vision": [76, 77, 81, 89, 98, 140, 163, 237, 249, 392], "visual": [138, 140], "vol": 140, "vollgraf": 7, "volumetr": [164, 173, 205, 238, 265, 273, 276], "vstack": 367, "w": [98, 110, 111, 112, 113, 114, 115, 127, 128, 129, 140, 163, 164, 166, 168, 172, 173, 176, 178, 186, 191, 192, 194, 195, 198, 199, 201, 202, 204, 205, 209, 233, 236, 237, 238, 249, 251, 260, 261, 262, 264, 265, 269, 270, 273, 276, 383, 385], "w_": [163, 164, 191, 192, 194, 195, 198, 199, 201, 237, 238, 269, 270, 272, 273, 275, 276], "w_1": [280, 282], "w_2": [280, 282], "w_out": [163, 164, 194, 195, 198, 199], "wa": [60, 240, 243, 244, 245, 246, 303], "wai": [1, 24, 139, 301, 303, 372], "wang": 140, "want": [0, 10, 381, 383], "warn": [145, 147, 233], "we": [3, 10, 302, 368], "wei": 140, "weight": [96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 140, 161, 162, 163, 164, 176, 178, 179, 180, 184, 185, 188, 189, 201, 209, 210, 214, 215, 218, 219, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 251, 253, 254, 257, 259, 260, 261, 263, 264, 265, 266, 278, 279, 280, 281, 282, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 308, 313], "weight1": 147, "weight2": 147, "weight_decai": [289, 290, 291, 292, 293, 294, 295, 296, 297, 299], "weihao": 140, "weinberg": 140, "well": [37, 41, 42, 43, 44, 46, 61, 85, 126, 214, 215], "were": 149, "weyand": 140, "what": 303, "when": [0, 1, 3, 10, 17, 45, 140, 143, 146, 148, 149, 151, 154, 162, 163, 164, 220, 242, 250, 259, 260, 261, 263, 264, 265, 284, 287, 290, 298, 301, 303, 304, 305, 313, 324, 363, 381, 383], "where": [3, 4, 5, 6, 7, 8, 13, 14, 16, 17, 18, 19, 20, 22, 82, 83, 84, 85, 86, 87, 136, 140, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 169, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 305, 313, 315, 316, 320, 321, 322, 324, 325, 328, 329, 341, 345, 346, 347, 348, 349, 352, 354, 356, 359, 360, 361, 364, 369, 371, 373, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389], "whether": [1, 13, 45, 59, 60, 61, 82, 83, 89, 143, 144, 214, 215, 242, 297, 301, 306, 308, 309, 310, 312, 314, 328, 329, 347, 348, 349, 356, 361], "which": [0, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 46, 62, 70, 76, 77, 79, 80, 84, 90, 91, 92, 93, 94, 95, 96, 97, 122, 123, 124, 125, 126, 130, 132, 133, 134, 135, 140, 143, 145, 147, 149, 154, 158, 181, 202, 206, 207, 208, 210, 220, 221, 224, 226, 229, 231, 240, 255, 257, 259, 260, 261, 263, 264, 265, 266, 280, 282, 292, 293, 295, 297, 301, 303, 305, 308, 309, 312, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 361, 363, 364, 371, 372, 373, 375, 377, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 392], "while": [10, 26, 31, 37, 38, 55, 56, 57, 58, 66, 70, 76, 86, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 130, 140, 146, 149, 167, 168, 221, 225, 226, 242, 279, 286, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 303, 372, 375, 386, 392], "who": [10, 145, 146, 147, 148], "whose": [22, 329, 333, 335, 337, 341, 345, 351], "wide": [4, 5, 6, 8, 11, 19, 38, 88, 98, 106, 107, 108, 140, 155, 225, 236, 237, 254], "wide_resnet_101": 140, "wide_resnet_50": 140, "wider": [29, 107, 108, 162, 163], "wideresnet": 140, "width": [45, 46, 76, 80, 89, 96, 97, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 136, 140, 163, 164, 166, 172, 173, 186, 191, 192, 194, 195, 198, 199, 201, 202, 210, 237, 238, 260, 261, 262, 264, 265, 269, 270, 272, 273, 275, 276, 284, 383, 385, 390], "width_coef": 45, "width_multipli": [76, 80], "window": [193, 194, 195, 197, 198, 199, 271, 272, 273, 274, 275, 276, 290, 347, 349], "wise": [120, 122, 123, 124, 125, 140, 151, 152, 154, 155, 156, 157, 158, 159, 169, 203, 204, 205, 209, 223, 229, 230, 240, 242, 243, 244, 245, 246, 286, 302, 315, 316, 319, 320, 321, 322, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 346, 350, 351, 352, 353, 354, 355, 357, 358, 359, 366, 380], "within": [2, 140, 141, 142, 145, 146, 147, 148, 149, 159, 201, 202, 219, 221, 222, 223, 225, 227, 228, 230, 231, 236, 237, 238, 240, 243, 244, 250, 253, 254, 255, 256, 257, 259, 260, 261, 263, 266, 271, 272, 273, 274, 275, 276, 288, 303, 326, 341, 388, 392], "without": [10, 109, 145, 146, 147, 176, 178, 236, 237, 238, 249, 251, 301, 304, 347, 370, 372, 379], "won": 303, "work": [1, 2, 3, 10, 12, 302, 305], "workflow": [313, 392], "workload": 10, "wrap": [3, 286, 303, 362], "wrapper": 286, "www": [5, 6], "x": [10, 11, 21, 68, 72, 116, 131, 136, 140, 141, 142, 143, 145, 146, 147, 148, 149, 158, 169, 176, 178, 202, 206, 207, 208, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 280, 281, 282, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 308, 309, 310, 312, 328, 329, 345, 368, 373, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390], "x1": 249, "x2": 249, "x_": [186, 254, 257, 262, 281, 368], "x_0": 281, "x_c": [254, 257], "x_i": [253, 281], "x_k": 254, "xavier": [214, 215, 218, 219], "xavier_norm": 213, "xavier_uniform": 213, "xception": [71, 140], "xiao": 7, "xie": 140, "xl": [58, 140], "xlarg": [39, 140], "xy": 368, "x\u2081": 249, "x\u2082": 249, "y": [136, 140, 145, 146, 147, 148, 149, 202, 206, 207, 208, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 306, 308, 309, 310, 312, 328, 329, 368, 386], "y_": [186, 254, 257, 262, 368], "y_c": [254, 257], "y_i": 253, "yann": [8, 140], "yet": [10, 36, 38, 86, 302], "yield": [0, 1, 143, 303], "you": [0, 78, 141, 146, 148, 149, 278, 286, 288, 301, 303, 313, 328, 329, 330, 335, 360, 362, 381, 383, 392], "your": [78, 86, 286, 288, 301, 303, 313, 392], "yu": 140, "z": [140, 280, 282, 329, 334, 335], "zalandoresearch": 7, "ze": 140, "zeiler": [138, 140], "zero": [17, 19, 20, 61, 141, 151, 154, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 193, 194, 195, 197, 198, 199, 212, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 227, 233, 236, 237, 238, 240, 242, 243, 244, 245, 246, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 328, 329, 330, 335, 336, 341, 351, 369, 377, 378], "zero_grad": [144, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 314], "zeros_lik": [329, 336], "zfnet": [71, 140], "zhang": 140, "zhmoginov": 140, "zhu": 140, "zhuang": 140, "zisserman": 140, "\u03c3\u1d62": 19}, "titles": ["data.ConcatDataset", "data.DataLoader", "data.Dataset", "lucid.data", "lucid.datasets", "CIFAR10", "CIFAR100", "FashionMNIST", "MNIST", "Image Datasets", "Lucid", "lucid.linalg", "lucid.linalg.cholesky", "lucid.linalg.det", "lucid.linalg.eig", "Linear Algebra Operations", "lucid.linalg.inv", "lucid.linalg.matrix_power", "lucid.linalg.norm", "lucid.linalg.pinv", "lucid.linalg.qr", "lucid.linalg.solve", "lucid.linalg.svd", "AlexNet", "alexnet", "ConvNeXt", "ConvNeXt_V2", "convnext_base", "convnext_large", "convnext_small", "convnext_tiny", "convnext_v2_atto", "convnext_v2_base", "convnext_v2_femto", "convnext_v2_huge", "convnext_v2_large", "convnext_v2_nano", "convnext_v2_pico", "convnext_v2_tiny", "convnext_xlarge", "DenseNet", "densenet_121", "densenet_169", "densenet_201", "densenet_264", "EfficientNet", "EfficientNet_V2", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3", "efficientnet_b4", "efficientnet_b5", "efficientnet_b6", "efficientnet_b7", "efficientnet_v2_l", "efficientnet_v2_m", "efficientnet_v2_s", "efficientnet_v2_xl", "Inception", "inception_v1", "inception_v3", "inception_v4", "InceptionNeXt", "inception_next_atto", "inception_next_base", "inception_next_small", "inception_next_tiny", "InceptionResNet", "inception_resnet_v1", "inception_resnet_v2", "ConvNets", "LeNet", "lenet_1", "lenet_4", "lenet_5", "MobileNet", "MobileNet_V2", "MobileNet_V3", "MobileNet_V4", "mobilenet", "mobilenet_v2", "mobilenet_v3_large", "mobilenet_v3_small", "mobilenet_v4_conv_large", "mobilenet_v4_conv_medium", "mobilenet_v4_conv_small", "mobilenet_v4_hybrid_large", "mobilenet_v4_hybrid_medium", "ResNeSt", "resnest_101", "resnest_14", "resnest_200", "resnest_26", "resnest_269", "resnest_50", "resnest_50_1s4x24d", "resnest_50_4s2x40d", "ResNet", "resnet_1001", "resnet_101", "resnet_152", "resnet_18", "resnet_200", "resnet_269", "resnet_34", "resnet_50", "wide_resnet_101", "wide_resnet_50", "ResNeXt", "resnext_101_32x16d", "resnext_101_32x32d", "resnext_101_32x4d", "resnext_101_32x8d", "resnext_101_64x4d", "resnext_50_32x4d", "SENet", "se_resnet_101", "se_resnet_152", "se_resnet_18", "se_resnet_34", "se_resnet_50", "se_resnext_101_32x4d", "se_resnext_101_32x8d", "se_resnext_101_64x4d", "se_resnext_50_32x4d", "SKNet", "sk_resnet_18", "sk_resnet_34", "sk_resnet_50", "sk_resnext_50_32x4d", "VGGNet", "vggnet_11", "vggnet_13", "vggnet_16", "vggnet_19", "Xception", "xception", "ZFNet", "zfnet", "lucid.models", "models.summarize", "nn.Buffer", "nn.Module", "nn.Parameter", "nn.ModuleDict", "nn.ModuleList", "nn.ParameterDict", "nn.ParameterList", "nn.Sequential", "Containers", "nn.functional.elu", "nn.functional.gelu", "Activation Functions", "nn.functional.leaky_relu", "nn.functional.relu", "nn.functional.selu", "nn.functional.sigmoid", "nn.functional.softmax", "nn.functional.tanh", "Attention Functions", "nn.functional.scaled_dot_product_attention", "nn.functional.conv1d", "nn.functional.conv2d", "nn.functional.conv3d", "Convolution Functions", "nn.functional.unfold", "nn.functional.alpha_dropout", "nn.functional.drop_block", "nn.functional.drop_path", "nn.functional.dropout", "nn.functional.dropout1d", "nn.functional.dropout2d", "nn.functional.dropout3d", "Dropout Functions", "lucid.nn.functional", "nn.functional.bilinear", "Linear Functions", "nn.functional.linear", "nn.functional.binary_cross_entropy", "nn.functional.cross_entropy", "nn.functional.huber_loss", "Loss Functions", "nn.functional.mse_loss", "nn.functional.nll_loss", "nn.functional.batch_norm", "nn.functional.global_response_norm", "Normalization Functions", "nn.functional.instance_norm", "nn.functional.layer_norm", "nn.functional.adaptive_avg_pool1d", "nn.functional.adaptive_avg_pool2d", "nn.functional.adaptive_avg_pool3d", "nn.functional.avg_pool1d", "nn.functional.avg_pool2d", "nn.functional.avg_pool3d", "Pooling Functions", "nn.functional.max_pool1d", "nn.functional.max_pool2d", "nn.functional.max_pool3d", "Utility Functions", "nn.functional.interpolate", "nn.functional.rotate", "nn.ConvBNReLU1d", "nn.ConvBNReLU2d", "nn.ConvBNReLU3d", "nn.DepthSeparableConv1d", "nn.DepthSeparableConv2d", "nn.DepthSeparableConv3d", "nn.SEModule", "nn.SelectiveKernel", "Fused Layers", "nn.init.constant", "Weight Initializations", "nn.init.kaiming_normal", "nn.init.kaiming_uniform", "nn.init.normal", "nn.init.uniform", "nn.init.xavier_normal", "nn.init.xavier_uniform", "nn.ELU", "nn.GELU", "nn.HardSigmoid", "nn.HardSwish", "nn.LeakyReLU", "nn.ReLU", "nn.ReLU6", "nn.SELU", "nn.Sigmoid", "nn.Softmax", "nn.Swish", "nn.Tanh", "Activation Layers", "nn.MultiHeadAttention", "nn.ScaledDotProductAttention", "Attention Layers", "nn.Conv1d", "nn.Conv2d", "nn.Conv3d", "Convolution Layers", "nn.AlphaDropout", "nn.DropBlock", "nn.DropPath", "nn.Dropout", "nn.Dropout1d", "nn.Dropout2d", "nn.Dropout3d", "Dropout Layers", "Modules", "nn.Bilinear", "nn.Identity", "nn.Linear", "Linear Layers", "nn.BCELoss", "nn.CrossEntropyLoss", "nn.HuberLoss", "nn.MSELoss", "nn.NLLLoss", "Loss Layers", "nn.BatchNorm1d", "nn.BatchNorm2d", "nn.BatchNorm3d", "nn.GlobalResponseNorm", "nn.InstanceNorm1d", "nn.InstanceNorm2d", "nn.InstanceNorm3d", "nn.LayerNorm", "Normalization Layers", "nn.AdaptiveAvgPool1d", "nn.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool3d", "nn.AvgPool1d", "nn.AvgPool2d", "nn.AvgPool3d", "nn.MaxPool1d", "nn.MaxPool2d", "nn.MaxPool3d", "Pooling Layers", "nn.Transformer", "nn.TransformerDecoder", "nn.TransformerDecoderLayer", "nn.TransformerEncoder", "nn.TransformerEncoderLayer", "Transformer Layers", "nn.Upsample", "Vision Layers", "lucid.nn", "optim.Optimizer", "lucid.optim", "optim.ASGD", "optim.Adadelta", "optim.Adagrad", "optim.Adam", "optim.AdamW", "optim.Adamax", "optim.NAdam", "optim.RAdam", "optim.RMSprop", "optim.Rprop", "optim.SGD", "Optimizers", "lucid.grad_enabled", "lucid.newaxis", "lucid.no_grad", "lucid.register_model", "lucid.types", "lucid.random.bernoulli", "Random Number Generations", "lucid.random.rand", "lucid.random.randint", "lucid.random.randn", "lucid.random.seed", "lucid.random.uniform", "lucid.random", "lucid.Tensor", "lucid.add", "lucid.div", "lucid.dot", "lucid.inner", "lucid.matmul", "lucid.maximum", "lucid.minimum", "lucid.mul", "lucid.outer", "lucid.power", "lucid.sub", "lucid.arange", "lucid.diag", "lucid.empty", "lucid.empty_like", "lucid.eye", "lucid.linspace", "lucid.ones", "lucid.ones_like", "lucid.zeros", "lucid.zeros_like", "Tensor Operations", "lucid.abs", "lucid.arccos", "lucid.arcsin", "lucid.arctan", "lucid.clip", "lucid.cos", "lucid.cosh", "lucid.cube", "lucid.exp", "lucid.log", "lucid.max", "lucid.mean", "lucid.min", "lucid.reciprocal", "lucid.sign", "lucid.sin", "lucid.sinh", "lucid.sqrt", "lucid.square", "lucid.sum", "lucid.tan", "lucid.tanh", "lucid.trace", "lucid.transpose", "lucid.var", "lucid.tensor", "lucid.broadcast_to", "lucid.concatenate", "lucid.flatten", "lucid.hstack", "Tensor Utilites", "lucid.meshgrid", "lucid.pad", "lucid.ravel", "lucid.repeat", "lucid.reshape", "lucid.split", "lucid.squeeze", "lucid.stack", "lucid.tile", "lucid.tril", "lucid.triu", "lucid.unsqueeze", "lucid.vstack", "transforms.Compose", "transforms.ToTensor", "transforms.CenterCrop", "transforms.Normalize", "transforms.RandomCrop", "transforms.RandomGrayscale", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.RandomVerticalFlip", "transforms.Resize", "Image Transformations", "lucid.transforms"], "titleterms": {"1": 302, "1d": 302, "2": 302, "2d": 302, "3": 302, "It": [301, 303], "ab": 337, "activ": [153, 175, 232, 248], "ad": 302, "adadelta": 290, "adagrad": 291, "adam": 292, "adamax": 294, "adamw": 293, "adaptive_avg_pool1d": 190, "adaptive_avg_pool2d": 191, "adaptive_avg_pool3d": 192, "adaptiveavgpool1d": 268, "adaptiveavgpool2d": 269, "adaptiveavgpool3d": 270, "add": 315, "addit": [19, 233], "admonit": 305, "advanc": [166, 392], "alexnet": [23, 24], "algebra": 15, "algorithm": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "alias": 305, "align": 302, "alpha_dropout": 167, "alphadropout": 240, "also": 288, "anoth": 362, "arang": 326, "arcco": 338, "architectur": [23, 25, 73, 74, 75, 107, 108, 138], "arcsin": 339, "arctan": 340, "asgd": 289, "attent": [160, 161, 175, 210, 235, 248], "attribut": [5, 6, 7, 8, 23, 68, 72, 98, 109, 116, 126, 131, 136, 138, 142, 144, 145, 146, 147, 148, 149, 203, 204, 205, 206, 207, 208, 209, 220, 221, 224, 225, 227, 228, 229, 231, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 314, 383, 384, 385, 386, 387, 388, 389, 390], "avg_pool1d": 193, "avg_pool2d": 194, "avg_pool3d": 195, "avgpool1d": 271, "avgpool2d": 272, "avgpool3d": 273, "axi": 302, "backpropag": 314, "backward": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 168, 176, 178, 201, 209, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380], "batch_norm": 185, "batchnorm": 211, "batchnorm1d": 259, "batchnorm2d": 260, "batchnorm3d": 261, "bceloss": 253, "behavior": [190, 191, 192, 268, 269, 270], "benefit": 303, "bernoulli": 306, "bilinear": [176, 249], "binari": 336, "binary_cross_entropi": 179, "bottleneck": [82, 83], "broadcast": [302, 363], "broadcast_to": 363, "buffer": 142, "calcul": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 98, 109, 116, 126, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 166, 168, 169, 176, 178, 190, 191, 192, 201, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390], "captur": 304, "case": 305, "centercrop": 383, "choleski": 12, "cifar10": 5, "cifar100": 6, "class": [0, 1, 2, 5, 6, 7, 8, 23, 25, 26, 40, 45, 46, 59, 63, 68, 72, 76, 77, 78, 79, 89, 98, 109, 116, 126, 131, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 203, 204, 205, 206, 207, 208, 209, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 314, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "clip": 341, "co": 342, "combin": 0, "compon": [3, 10, 286], "compos": 381, "concatdataset": [0, 1], "concaten": 364, "conclus": [3, 10, 286, 301, 302, 303, 313, 382, 392], "configur": [45, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97], "constant": 212, "contain": 150, "conv": 211, "conv1d": [162, 236], "conv2d": [163, 237], "conv3d": [164, 238], "convbnrelu1d": 203, "convbnrelu2d": 204, "convbnrelu3d": 205, "convnet": [71, 140], "convnext": 25, "convnext_bas": 27, "convnext_larg": 28, "convnext_smal": 29, "convnext_tini": 30, "convnext_v2": 26, "convnext_v2_atto": 31, "convnext_v2_bas": 32, "convnext_v2_femto": 33, "convnext_v2_hug": 34, "convnext_v2_larg": 35, "convnext_v2_nano": 36, "convnext_v2_pico": 37, "convnext_v2_tini": 38, "convnext_xlarg": 39, "convolut": [165, 175, 211, 239, 248], "core": 10, "cosh": 343, "creat": [144, 314, 362], "cross_entropi": 180, "crossentropyloss": 254, "cube": 344, "custom": [1, 2, 3, 143, 287, 288, 392], "data": [0, 1, 2, 3], "dataload": 1, "dataset": [0, 1, 2, 4, 9], "defin": [2, 143, 287, 288], "definit": 305, "densenet": 40, "densenet_121": 41, "densenet_169": 42, "densenet_201": 43, "densenet_264": 44, "depthseparableconv1d": 206, "depthseparableconv2d": 207, "depthseparableconv3d": 208, "depthwis": 211, "descript": [110, 111, 112, 113, 114, 115, 127, 128, 129, 304], "det": 13, "detail": [19, 84, 85, 86, 87, 88, 107, 108, 233, 278, 279, 280, 281, 282], "diag": 327, "dilat": 166, "div": 316, "dot": 317, "drop_block": 168, "drop_path": 169, "dropblock": 241, "dropout": [170, 174, 175, 243, 247, 248], "dropout1d": [171, 244], "dropout2d": [172, 245], "dropout3d": [173, 246], "droppath": 242, "efficientnet": 45, "efficientnet_b0": 47, "efficientnet_b1": 48, "efficientnet_b2": 49, "efficientnet_b3": 50, "efficientnet_b4": 51, "efficientnet_b5": 52, "efficientnet_b6": 53, "efficientnet_b7": 54, "efficientnet_v2": 46, "efficientnet_v2_": 57, "efficientnet_v2_l": 55, "efficientnet_v2_m": 56, "efficientnet_v2_xl": 58, "eig": 14, "elu": [151, 220], "empti": 328, "empty_lik": 329, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392], "excit": 211, "exp": 345, "express": [186, 373], "ey": 330, "fashionmnist": 7, "featur": [4, 10, 11, 122, 123, 124, 125, 130, 288, 313, 392], "flatten": 365, "forward": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 98, 109, 116, 126, 136, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 166, 169, 176, 178, 190, 191, 192, 201, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390], "from": 362, "function": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 141, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 214, 215, 216, 217, 218, 219, 301, 303, 304, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "fuse": 211, "futur": 4, "gelu": [152, 221], "gener": [307, 336], "get": 288, "global_response_norm": 186, "globalresponsenorm": 262, "grad_en": 301, "gradient": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 168, 176, 178, 201, 209, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 236, 237, 238, 240, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380], "guidelin": 305, "hardsigmoid": 222, "hardswish": 223, "how": [301, 303], "hstack": 366, "huber_loss": 181, "huberloss": 255, "hyperparamet": [96, 97], "ident": 250, "imag": [9, 391], "incept": 59, "inception_next_atto": 64, "inception_next_bas": 65, "inception_next_smal": 66, "inception_next_tini": 67, "inception_resnet_v1": 69, "inception_resnet_v2": 70, "inception_v1": 60, "inception_v3": 61, "inception_v4": 62, "inceptionnext": 63, "inceptionresnet": 68, "index": 314, "init": [212, 214, 215, 216, 217, 218, 219], "initi": 213, "inner": 318, "input": 362, "inspect": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "instance_norm": 188, "instancenorm1d": 263, "instancenorm2d": 264, "instancenorm3d": 265, "integr": [3, 286, 313, 392], "interpol": 201, "inv": 16, "iter": 314, "kaiming_norm": 214, "kaiming_uniform": 215, "kei": [3, 4, 10, 122, 123, 124, 125, 130, 286, 288, 313, 392], "kernel": 211, "layer": [90, 91, 92, 93, 94, 95, 211, 232, 235, 239, 247, 248, 252, 258, 267, 277, 283, 285], "layer_norm": 189, "layernorm": 266, "leaky_relu": 154, "leakyrelu": 224, "learn": 313, "lenet": 72, "lenet_1": 73, "lenet_4": 74, "lenet_5": 75, "limit": 10, "linalg": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [15, 175, 177, 178, 248, 251, 252], "linspac": 331, "list": 362, "load": 1, "log": 346, "loss": [175, 182, 248, 258], "lucid": [3, 4, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 140, 175, 286, 288, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392], "mathemat": [186, 233, 278, 279, 280, 281, 282, 373], "matmul": 319, "matrix": 319, "matrix_pow": 17, "max": 347, "max_pool1d": 197, "max_pool2d": 198, "max_pool3d": 199, "maximum": 320, "maxpool1d": 274, "maxpool2d": 275, "maxpool3d": 276, "mean": 348, "mechan": [161, 210], "meshgrid": 368, "metadata": 304, "method": [0, 1, 2, 5, 6, 7, 8, 68, 72, 131, 143, 144, 278, 279, 280, 281, 282, 287, 314], "min": 349, "minimum": 321, "mnist": 8, "mobilenet": [76, 80], "mobilenet_v2": [77, 81], "mobilenet_v3": 78, "mobilenet_v3_larg": 82, "mobilenet_v3_smal": 83, "mobilenet_v4": 79, "mobilenet_v4_conv_larg": 84, "mobilenet_v4_conv_medium": 85, "mobilenet_v4_conv_smal": 86, "mobilenet_v4_hybrid_larg": 87, "mobilenet_v4_hybrid_medium": 88, "model": [140, 141, 286], "modul": [143, 248], "moduledict": 145, "modulelist": 146, "more": 313, "mse_loss": 183, "mseloss": 256, "mul": 322, "multiheadattent": 233, "multipl": [0, 319], "nadam": 295, "new": 302, "newaxi": 302, "nll_loss": 184, "nllloss": 257, "nn": [142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286], "no_grad": 303, "norm": 18, "normal": [175, 187, 216, 248, 267, 384], "note": 10, "number": 307, "ones": 332, "ones_lik": 333, "oper": [15, 319, 336], "optim": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "option": 233, "organ": 286, "outer": 323, "overview": [3, 4, 10, 59, 60, 61, 62, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 99, 100, 101, 102, 103, 104, 105, 106, 117, 118, 119, 120, 121, 233, 278, 279, 280, 281, 282, 286, 288, 313, 392], "pad": 369, "paramet": [1, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 227, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "parameterdict": 147, "parameterlist": 148, "pass": 136, "perform": 314, "pinv": 19, "pipelin": [3, 392], "pitfal": [301, 303], "pool": [175, 196, 248, 277], "potenti": [301, 303], "power": 324, "properti": [144, 314], "qr": 20, "radam": 296, "rais": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "rand": 308, "randint": 309, "randn": 310, "random": [306, 307, 308, 309, 310, 311, 312, 313], "randomcrop": 385, "randomgrayscal": 386, "randomhorizontalflip": 387, "randomrot": 388, "randomverticalflip": 389, "ravel": 370, "reciproc": 350, "refer": [5, 6, 7, 8, 209, 288], "register_model": 304, "regular": 168, "relu": [155, 211, 225], "relu6": 226, "repeat": 371, "reshap": 372, "resiz": 390, "resnest": 89, "resnest_101": 90, "resnest_14": 91, "resnest_200": 92, "resnest_26": 93, "resnest_269": 94, "resnest_50": 95, "resnest_50_1s4x24d": 96, "resnest_50_4s2x40d": 97, "resnet": 98, "resnet_1001": 99, "resnet_101": 100, "resnet_152": 101, "resnet_18": 102, "resnet_200": 103, "resnet_269": 104, "resnet_34": 105, "resnet_50": 106, "resnext": 109, "resnext_101_32x16d": 110, "resnext_101_32x32d": 111, "resnext_101_32x4d": 112, "resnext_101_32x8d": 113, "resnext_101_64x4d": 114, "resnext_50_32x4d": 115, "return": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 139, 141, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 210, 212, 214, 215, 216, 217, 218, 219, 226, 301, 303, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "rmsprop": 297, "rotat": 202, "rprop": 298, "rule": [319, 363], "scaled_dot_product_attent": 161, "scaleddotproductattent": 234, "se_resnet_101": 117, "se_resnet_152": 118, "se_resnet_18": 119, "se_resnet_34": 120, "se_resnet_50": 121, "se_resnext_101_32x4d": 122, "se_resnext_101_32x8d": 123, "se_resnext_101_64x4d": 124, "se_resnext_50_32x4d": 125, "see": 288, "seed": 311, "select": 211, "selectivekernel": 210, "selu": [156, 227], "semodul": 209, "senet": 116, "separ": 211, "sequenti": 149, "sgd": 299, "sigmoid": [157, 228], "sign": 351, "signatur": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "sin": 352, "sinh": 353, "sk_resnet_18": 127, "sk_resnet_34": 128, "sk_resnet_50": 129, "sk_resnext_50_32x4d": 130, "sknet": 126, "slice": 314, "softmax": [158, 229], "solv": 21, "split": 373, "sqrt": 354, "squar": 355, "squeez": [211, 374], "stack": 375, "start": 288, "state": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "sub": 325, "sum": 356, "summar": 141, "summari": 141, "svd": 22, "swish": 230, "tabl": 141, "tan": 357, "tanh": [159, 231, 358], "tensor": [302, 314, 336, 362, 367], "through": 314, "tile": 376, "totensor": 382, "trace": 359, "track": 314, "transform": [248, 278, 283, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "transformerdecod": 279, "transformerdecoderlay": 280, "transformerencod": 281, "transformerencoderlay": 282, "transpos": 360, "tril": 377, "triu": 378, "type": 305, "unari": 336, "unfold": 166, "uniform": [217, 312], "unsqueez": 379, "upsampl": 284, "us": [1, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 362], "usag": [4, 10, 55, 56, 57, 58, 60, 61, 62, 69, 70, 72, 73, 74, 75, 84, 85, 86, 87, 88, 122, 123, 124, 125, 130, 142, 202, 233, 278, 279, 280, 281, 282, 301, 302, 303, 305, 368, 381, 382, 392], "util": [175, 200], "utilit": 367, "valu": 373, "var": 361, "vggnet": 131, "vggnet_11": 132, "vggnet_13": 133, "vggnet_16": 134, "vggnet_19": 135, "vision": [248, 285], "vstack": 380, "weight": 213, "why": 305, "wide_resnet_101": 107, "wide_resnet_50": 108, "work": [4, 301, 303], "xavier_norm": 218, "xavier_uniform": 219, "xception": [136, 137], "zero": 334, "zeros_lik": 335, "zfnet": [138, 139]}})