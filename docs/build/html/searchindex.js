Search.setIndex({"alltitles": {"@ Operator": [[276, "operator"]], "Activation Functions": [[127, null]], "Activation Layers": [[201, null], [212, null]], "Additional Details": [[19, "additional-details"]], "Admonitions and Usage Guidelines": [[262, "admonitions-and-usage-guidelines"]], "Advanced Example with Dilation": [[138, "advanced-example-with-dilation"]], "Advanced Features": [[344, "advanced-features"]], "AlexNet": [[23, null]], "Algorithm": [[246, "algorithm"], [247, "algorithm"], [248, "algorithm"], [249, "algorithm"], [250, "algorithm"], [251, "algorithm"], [252, "algorithm"], [253, "algorithm"], [254, "algorithm"], [255, "algorithm"], [256, "algorithm"]], "Architecture": [[23, "architecture"], [53, "architecture"], [54, "architecture"], [55, "architecture"], [112, "architecture"]], "Architecture Details": [[81, "architecture-details"], [82, "architecture-details"]], "Attention Mechanism": [[179, "attention-mechanism"]], "Attributes": [[5, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [23, "attributes"], [48, "attributes"], [52, "attributes"], [72, "attributes"], [83, "attributes"], [90, "attributes"], [100, "attributes"], [105, "attributes"], [110, "attributes"], [112, "attributes"], [116, "attributes"], [118, "attributes"], [119, "attributes"], [120, "attributes"], [121, "attributes"], [122, "attributes"], [123, "attributes"], [172, "attributes"], [173, "attributes"], [174, "attributes"], [175, "attributes"], [176, "attributes"], [177, "attributes"], [178, "attributes"], [189, "attributes"], [190, "attributes"], [193, "attributes"], [194, "attributes"], [196, "attributes"], [197, "attributes"], [198, "attributes"], [200, "attributes"], [202, "attributes"], [203, "attributes"], [204, "attributes"], [206, "attributes"], [207, "attributes"], [208, "attributes"], [209, "attributes"], [210, "attributes"], [213, "attributes"], [214, "attributes"], [215, "attributes"], [217, "attributes"], [218, "attributes"], [219, "attributes"], [220, "attributes"], [221, "attributes"], [223, "attributes"], [224, "attributes"], [225, "attributes"], [226, "attributes"], [227, "attributes"], [228, "attributes"], [229, "attributes"], [231, "attributes"], [232, "attributes"], [233, "attributes"], [234, "attributes"], [235, "attributes"], [236, "attributes"], [237, "attributes"], [238, "attributes"], [239, "attributes"], [271, "attributes"], [335, "attributes"], [336, "attributes"], [337, "attributes"], [338, "attributes"], [339, "attributes"], [340, "attributes"], [341, "attributes"], [342, "attributes"]], "Backward Gradient Calculation": [[12, "backward-gradient-calculation"], [13, "backward-gradient-calculation"], [14, "backward-gradient-calculation"], [16, "backward-gradient-calculation"], [17, "backward-gradient-calculation"], [18, "backward-gradient-calculation"], [19, "backward-gradient-calculation"], [20, "backward-gradient-calculation"], [21, "backward-gradient-calculation"], [22, "backward-gradient-calculation"], [119, "backward-gradient-calculation"], [120, "backward-gradient-calculation"], [121, "backward-gradient-calculation"], [122, "backward-gradient-calculation"], [123, "backward-gradient-calculation"], [125, "backward-gradient-calculation"], [126, "backward-gradient-calculation"], [128, "backward-gradient-calculation"], [129, "backward-gradient-calculation"], [130, "backward-gradient-calculation"], [131, "backward-gradient-calculation"], [132, "backward-gradient-calculation"], [133, "backward-gradient-calculation"], [146, "backward-gradient-calculation"], [148, "backward-gradient-calculation"], [170, "backward-gradient-calculation"], [178, "backward-gradient-calculation"], [188, "backward-gradient-calculation"], [189, "backward-gradient-calculation"], [190, "backward-gradient-calculation"], [191, "backward-gradient-calculation"], [192, "backward-gradient-calculation"], [193, "backward-gradient-calculation"], [194, "backward-gradient-calculation"], [196, "backward-gradient-calculation"], [197, "backward-gradient-calculation"], [198, "backward-gradient-calculation"], [199, "backward-gradient-calculation"], [200, "backward-gradient-calculation"], [202, "backward-gradient-calculation"], [203, "backward-gradient-calculation"], [204, "backward-gradient-calculation"], [206, "backward-gradient-calculation"], [207, "backward-gradient-calculation"], [208, "backward-gradient-calculation"], [209, "backward-gradient-calculation"], [210, "backward-gradient-calculation"], [213, "backward-gradient-calculation"], [214, "backward-gradient-calculation"], [215, "backward-gradient-calculation"], [217, "backward-gradient-calculation"], [218, "backward-gradient-calculation"], [219, "backward-gradient-calculation"], [220, "backward-gradient-calculation"], [221, "backward-gradient-calculation"], [223, "backward-gradient-calculation"], [224, "backward-gradient-calculation"], [225, "backward-gradient-calculation"], [226, "backward-gradient-calculation"], [227, "backward-gradient-calculation"], [228, "backward-gradient-calculation"], [229, "backward-gradient-calculation"], [234, "backward-gradient-calculation"], [235, "backward-gradient-calculation"], [236, "backward-gradient-calculation"], [237, "backward-gradient-calculation"], [238, "backward-gradient-calculation"], [239, "backward-gradient-calculation"], [272, "backward-gradient-calculation"], [273, "backward-gradient-calculation"], [274, "backward-gradient-calculation"], [275, "backward-gradient-calculation"], [276, "backward-gradient-calculation"], [277, "backward-gradient-calculation"], [278, "backward-gradient-calculation"], [279, "backward-gradient-calculation"], [280, "backward-gradient-calculation"], [281, "backward-gradient-calculation"], [282, "backward-gradient-calculation"], [293, "backward-gradient-calculation"], [294, "backward-gradient-calculation"], [295, "backward-gradient-calculation"], [296, "backward-gradient-calculation"], [297, "backward-gradient-calculation"], [298, "backward-gradient-calculation"], [299, "backward-gradient-calculation"], [300, "backward-gradient-calculation"], [301, "backward-gradient-calculation"], [302, "backward-gradient-calculation"], [303, "backward-gradient-calculation"], [304, "backward-gradient-calculation"], [305, "backward-gradient-calculation"], [306, "backward-gradient-calculation"], [307, "backward-gradient-calculation"], [308, "backward-gradient-calculation"], [309, "backward-gradient-calculation"], [310, "backward-gradient-calculation"], [311, "backward-gradient-calculation"], [312, "backward-gradient-calculation"], [313, "backward-gradient-calculation"], [314, "backward-gradient-calculation"], [315, "backward-gradient-calculation"], [316, "backward-gradient-calculation"], [317, "backward-gradient-calculation"], [319, "backward-gradient-calculation"], [321, "backward-gradient-calculation"], [323, "backward-gradient-calculation"], [324, "backward-gradient-calculation"], [325, "backward-gradient-calculation"], [326, "backward-gradient-calculation"], [327, "backward-gradient-calculation"], [328, "backward-gradient-calculation"], [329, "backward-gradient-calculation"], [330, "backward-gradient-calculation"], [331, "backward-gradient-calculation"], [332, "backward-gradient-calculation"]], "Behavior": [[159, "behavior"], [160, "behavior"], [161, "behavior"], [231, "behavior"], [232, "behavior"], [233, "behavior"]], "Benefits": [[260, "benefits"]], "Binary Functions": [[292, null]], "Bottleneck Configuration": [[61, "bottleneck-configuration"], [62, "bottleneck-configuration"]], "CIFAR10": [[5, null]], "CIFAR100": [[6, null]], "Class Signature": [[0, "class-signature"], [1, "class-signature"], [2, "class-signature"], [5, "class-signature"], [6, "class-signature"], [7, "class-signature"], [8, "class-signature"], [23, "class-signature"], [25, "class-signature"], [30, "class-signature"], [31, "class-signature"], [44, "class-signature"], [48, "class-signature"], [52, "class-signature"], [56, "class-signature"], [57, "class-signature"], [58, "class-signature"], [63, "class-signature"], [72, "class-signature"], [83, "class-signature"], [90, "class-signature"], [100, "class-signature"], [105, "class-signature"], [110, "class-signature"], [112, "class-signature"], [116, "class-signature"], [117, "class-signature"], [118, "class-signature"], [119, "class-signature"], [120, "class-signature"], [121, "class-signature"], [122, "class-signature"], [123, "class-signature"], [172, "class-signature"], [173, "class-signature"], [174, "class-signature"], [175, "class-signature"], [176, "class-signature"], [177, "class-signature"], [178, "class-signature"], [179, "class-signature"], [189, "class-signature"], [190, "class-signature"], [191, "class-signature"], [192, "class-signature"], [193, "class-signature"], [194, "class-signature"], [195, "class-signature"], [196, "class-signature"], [197, "class-signature"], [198, "class-signature"], [199, "class-signature"], [200, "class-signature"], [202, "class-signature"], [203, "class-signature"], [204, "class-signature"], [206, "class-signature"], [207, "class-signature"], [208, "class-signature"], [209, "class-signature"], [210, "class-signature"], [213, "class-signature"], [214, "class-signature"], [215, "class-signature"], [217, "class-signature"], [218, "class-signature"], [219, "class-signature"], [220, "class-signature"], [221, "class-signature"], [223, "class-signature"], [224, "class-signature"], [225, "class-signature"], [226, "class-signature"], [227, "class-signature"], [228, "class-signature"], [229, "class-signature"], [231, "class-signature"], [232, "class-signature"], [233, "class-signature"], [234, "class-signature"], [235, "class-signature"], [236, "class-signature"], [237, "class-signature"], [238, "class-signature"], [239, "class-signature"], [241, "class-signature"], [244, "class-signature"], [246, "class-signature"], [247, "class-signature"], [248, "class-signature"], [249, "class-signature"], [250, "class-signature"], [251, "class-signature"], [252, "class-signature"], [253, "class-signature"], [254, "class-signature"], [255, "class-signature"], [256, "class-signature"], [271, "class-signature"], [333, "class-signature"], [334, "class-signature"], [335, "class-signature"], [336, "class-signature"], [337, "class-signature"], [338, "class-signature"], [339, "class-signature"], [340, "class-signature"], [341, "class-signature"], [342, "class-signature"]], "Combining multiple datasets": [[0, null]], "Conclusion": [[3, "conclusion"], [10, "conclusion"], [243, "conclusion"], [258, "conclusion"], [259, "conclusion"], [260, "conclusion"], [270, "conclusion"], [334, "conclusion"], [344, "conclusion"]], "Configurations": [[30, "configurations"]], "Containers": [[124, null]], "Conv-BatchNorm-ReLU": [[180, null]], "ConvNets": [[51, null], [114, "convnets"]], "Convolution Functions": [[137, null], [145, null]], "Convolution Layers": [[205, null], [212, null]], "Core Components": [[10, "core-components"]], "Create a Tensor from a list": [[318, null]], "Creating a Parameter": [[118, null]], "Creating a tensor with gradient tracking": [[271, null]], "Custom Data Pipelines": [[3, "custom-data-pipelines"]], "Custom Pipelines": [[344, "custom-pipelines"]], "Defining a Custom Optimizer": [[245, null]], "Defining a custom dataset": [[2, null]], "Defining a custom module": [[117, null]], "Defining a custom optimizer": [[244, null]], "DenseNet": [[25, null]], "Depthwise Separable Convolution": [[180, null]], "Description": [[84, "description"], [85, "description"], [86, "description"], [87, "description"], [88, "description"], [89, "description"], [101, "description"], [102, "description"], [103, "description"], [261, "description"]], "Dropout Functions": [[144, null], [145, null]], "Dropout Layers": [[211, null], [212, null]], "EfficientNet": [[30, null]], "EfficientNet Configurations": [[30, "id1"]], "EfficientNet_V2": [[31, null]], "Example": [[3, null], [3, null], [3, null], [12, "example"], [13, "example"], [14, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [59, "example"], [60, "example"], [138, "example"], [243, null], [243, null], [243, null], [258, "example"], [260, "example"], [263, "example"], [265, "example"], [266, "example"], [267, "example"], [268, "example"], [269, "example"], [270, null], [270, null], [270, null], [283, "example"], [284, "example"], [285, "example"], [286, "example"], [287, "example"], [288, "example"], [289, "example"], [290, "example"], [291, "example"], [293, "example"], [294, "example"], [295, "example"], [296, "example"], [297, "example"], [298, "example"], [299, "example"], [300, "example"], [302, "example"], [304, "example"], [306, "example"], [307, "example"], [308, "example"], [309, "example"], [310, "example"], [311, "example"], [312, "example"], [313, "example"], [314, "example"], [315, "example"], [316, "example"], [317, "example"], [319, "example"], [321, "example"], [325, "example"], [327, "example"], [328, "example"], [329, "example"], [331, "example"], [332, "example"]], "Example 1: Adding a new axis to a 1D tensor": [[259, null]], "Example 2: Adding a new axis to a 2D tensor": [[259, null]], "Example 3: Adding a new axis to align tensors for broadcasting": [[259, null]], "Example Usage": [[10, "example-usage"], [45, "example-usage"], [46, "example-usage"], [47, "example-usage"], [49, "example-usage"], [50, "example-usage"], [52, "example-usage"], [53, "example-usage"], [54, "example-usage"], [55, "example-usage"], [96, "example-usage"], [97, "example-usage"], [98, "example-usage"], [99, "example-usage"], [104, "example-usage"], [171, "example-usage"], [333, "example-usage"], [334, "example-usage"], [344, "example-usage"]], "Example Use Cases": [[262, "example-use-cases"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [11, "examples"], [23, "examples"], [24, "examples"], [25, "examples"], [26, "examples"], [27, "examples"], [28, "examples"], [29, "examples"], [30, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [36, "examples"], [37, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [58, "examples"], [61, "examples"], [62, "examples"], [63, "examples"], [64, "examples"], [65, "examples"], [66, "examples"], [67, "examples"], [68, "examples"], [69, "examples"], [70, "examples"], [71, "examples"], [72, "examples"], [73, "examples"], [74, "examples"], [75, "examples"], [76, "examples"], [77, "examples"], [78, "examples"], [79, "examples"], [80, "examples"], [81, "examples"], [82, "examples"], [84, "examples"], [85, "examples"], [86, "examples"], [87, "examples"], [88, "examples"], [89, "examples"], [91, "examples"], [92, "examples"], [93, "examples"], [94, "examples"], [95, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [105, "examples"], [106, "examples"], [107, "examples"], [108, "examples"], [109, "examples"], [110, "examples"], [111, "examples"], [112, "examples"], [113, "examples"], [115, "examples"], [116, "examples"], [117, "examples"], [118, "examples"], [119, "examples"], [120, "examples"], [121, "examples"], [122, "examples"], [123, "examples"], [125, "examples"], [126, "examples"], [128, "examples"], [129, "examples"], [130, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [146, "examples"], [148, "examples"], [149, "examples"], [150, "examples"], [151, "examples"], [153, "examples"], [154, "examples"], [155, "examples"], [157, "examples"], [158, "examples"], [159, "examples"], [160, "examples"], [161, "examples"], [162, "examples"], [163, "examples"], [164, "examples"], [166, "examples"], [167, "examples"], [168, "examples"], [170, "examples"], [172, "examples"], [173, "examples"], [174, "examples"], [175, "examples"], [176, "examples"], [177, "examples"], [178, "examples"], [179, "examples"], [181, "examples"], [183, "examples"], [184, "examples"], [185, "examples"], [186, "examples"], [187, "examples"], [188, "examples"], [189, "examples"], [190, "examples"], [191, "examples"], [192, "examples"], [193, "examples"], [194, "examples"], [195, "examples"], [196, "examples"], [197, "examples"], [198, "examples"], [199, "examples"], [200, "examples"], [202, "examples"], [203, "examples"], [204, "examples"], [206, "examples"], [207, "examples"], [208, "examples"], [209, "examples"], [210, "examples"], [213, "examples"], [214, "examples"], [215, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [231, "examples"], [232, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [236, "examples"], [237, "examples"], [238, "examples"], [239, "examples"], [241, "examples"], [244, "examples"], [245, "examples"], [246, "examples"], [247, "examples"], [248, "examples"], [249, "examples"], [250, "examples"], [251, "examples"], [252, "examples"], [253, "examples"], [254, "examples"], [255, "examples"], [256, "examples"], [261, "examples"], [271, "examples"], [272, "examples"], [273, "examples"], [274, "examples"], [275, "examples"], [277, "examples"], [278, "examples"], [279, "examples"], [280, "examples"], [281, "examples"], [282, "examples"], [301, "examples"], [303, "examples"], [305, "examples"], [318, "examples"], [320, "examples"], [323, "examples"], [324, "examples"], [326, "examples"], [330, "examples"], [335, "examples"], [336, "examples"], [337, "examples"], [338, "examples"], [339, "examples"], [340, "examples"], [341, "examples"], [342, "examples"]], "FashionMNIST": [[7, null]], "Features": [[11, "features"]], "Forward Calculation": [[12, "forward-calculation"], [13, "forward-calculation"], [14, "forward-calculation"], [16, "forward-calculation"], [17, "forward-calculation"], [18, "forward-calculation"], [19, "forward-calculation"], [20, "forward-calculation"], [21, "forward-calculation"], [22, "forward-calculation"], [72, "forward-calculation"], [83, "forward-calculation"], [90, "forward-calculation"], [100, "forward-calculation"], [119, "forward-calculation"], [120, "forward-calculation"], [121, "forward-calculation"], [122, "forward-calculation"], [123, "forward-calculation"], [125, "forward-calculation"], [126, "forward-calculation"], [128, "forward-calculation"], [129, "forward-calculation"], [130, "forward-calculation"], [131, "forward-calculation"], [132, "forward-calculation"], [133, "forward-calculation"], [138, "forward-calculation"], [146, "forward-calculation"], [148, "forward-calculation"], [159, "forward-calculation"], [160, "forward-calculation"], [161, "forward-calculation"], [170, "forward-calculation"], [172, "forward-calculation"], [173, "forward-calculation"], [174, "forward-calculation"], [175, "forward-calculation"], [176, "forward-calculation"], [177, "forward-calculation"], [178, "forward-calculation"], [179, "forward-calculation"], [183, "forward-calculation"], [184, "forward-calculation"], [187, "forward-calculation"], [188, "forward-calculation"], [189, "forward-calculation"], [190, "forward-calculation"], [191, "forward-calculation"], [192, "forward-calculation"], [193, "forward-calculation"], [194, "forward-calculation"], [195, "forward-calculation"], [196, "forward-calculation"], [197, "forward-calculation"], [198, "forward-calculation"], [199, "forward-calculation"], [200, "forward-calculation"], [202, "forward-calculation"], [203, "forward-calculation"], [204, "forward-calculation"], [206, "forward-calculation"], [207, "forward-calculation"], [208, "forward-calculation"], [209, "forward-calculation"], [210, "forward-calculation"], [213, "forward-calculation"], [214, "forward-calculation"], [215, "forward-calculation"], [217, "forward-calculation"], [218, "forward-calculation"], [219, "forward-calculation"], [220, "forward-calculation"], [221, "forward-calculation"], [223, "forward-calculation"], [224, "forward-calculation"], [225, "forward-calculation"], [226, "forward-calculation"], [227, "forward-calculation"], [228, "forward-calculation"], [229, "forward-calculation"], [231, "forward-calculation"], [232, "forward-calculation"], [233, "forward-calculation"], [234, "forward-calculation"], [235, "forward-calculation"], [236, "forward-calculation"], [237, "forward-calculation"], [238, "forward-calculation"], [239, "forward-calculation"], [272, "forward-calculation"], [273, "forward-calculation"], [274, "forward-calculation"], [275, "forward-calculation"], [276, "forward-calculation"], [277, "forward-calculation"], [278, "forward-calculation"], [279, "forward-calculation"], [280, "forward-calculation"], [281, "forward-calculation"], [282, "forward-calculation"], [293, "forward-calculation"], [294, "forward-calculation"], [295, "forward-calculation"], [296, "forward-calculation"], [297, "forward-calculation"], [298, "forward-calculation"], [299, "forward-calculation"], [300, "forward-calculation"], [301, "forward-calculation"], [302, "forward-calculation"], [303, "forward-calculation"], [304, "forward-calculation"], [305, "forward-calculation"], [306, "forward-calculation"], [307, "forward-calculation"], [308, "forward-calculation"], [309, "forward-calculation"], [310, "forward-calculation"], [311, "forward-calculation"], [312, "forward-calculation"], [313, "forward-calculation"], [314, "forward-calculation"], [315, "forward-calculation"], [316, "forward-calculation"], [317, "forward-calculation"], [319, "forward-calculation"], [321, "forward-calculation"], [323, "forward-calculation"], [324, "forward-calculation"], [325, "forward-calculation"], [326, "forward-calculation"], [327, "forward-calculation"], [328, "forward-calculation"], [329, "forward-calculation"], [330, "forward-calculation"], [331, "forward-calculation"], [332, "forward-calculation"], [335, "forward-calculation"], [336, "forward-calculation"], [337, "forward-calculation"], [338, "forward-calculation"], [339, "forward-calculation"], [340, "forward-calculation"], [341, "forward-calculation"], [342, "forward-calculation"]], "Forward Pass": [[110, "forward-pass"]], "Function Signature": [[12, "function-signature"], [13, "function-signature"], [14, "function-signature"], [16, "function-signature"], [17, "function-signature"], [18, "function-signature"], [19, "function-signature"], [20, "function-signature"], [21, "function-signature"], [22, "function-signature"], [24, "function-signature"], [26, "function-signature"], [27, "function-signature"], [28, "function-signature"], [29, "function-signature"], [32, "function-signature"], [33, "function-signature"], [34, "function-signature"], [35, "function-signature"], [36, "function-signature"], [37, "function-signature"], [38, "function-signature"], [39, "function-signature"], [40, "function-signature"], [41, "function-signature"], [42, "function-signature"], [43, "function-signature"], [45, "function-signature"], [46, "function-signature"], [47, "function-signature"], [49, "function-signature"], [50, "function-signature"], [53, "function-signature"], [54, "function-signature"], [55, "function-signature"], [59, "function-signature"], [60, "function-signature"], [61, "function-signature"], [62, "function-signature"], [64, "function-signature"], [65, "function-signature"], [66, "function-signature"], [67, "function-signature"], [68, "function-signature"], [69, "function-signature"], [70, "function-signature"], [71, "function-signature"], [73, "function-signature"], [74, "function-signature"], [75, "function-signature"], [76, "function-signature"], [77, "function-signature"], [78, "function-signature"], [79, "function-signature"], [80, "function-signature"], [81, "function-signature"], [82, "function-signature"], [84, "function-signature"], [85, "function-signature"], [86, "function-signature"], [87, "function-signature"], [88, "function-signature"], [89, "function-signature"], [91, "function-signature"], [92, "function-signature"], [93, "function-signature"], [94, "function-signature"], [95, "function-signature"], [96, "function-signature"], [97, "function-signature"], [98, "function-signature"], [99, "function-signature"], [101, "function-signature"], [102, "function-signature"], [103, "function-signature"], [104, "function-signature"], [106, "function-signature"], [107, "function-signature"], [108, "function-signature"], [109, "function-signature"], [111, "function-signature"], [113, "function-signature"], [115, "function-signature"], [125, "function-signature"], [126, "function-signature"], [128, "function-signature"], [129, "function-signature"], [130, "function-signature"], [131, "function-signature"], [132, "function-signature"], [133, "function-signature"], [134, "function-signature"], [135, "function-signature"], [136, "function-signature"], [138, "function-signature"], [139, "function-signature"], [140, "function-signature"], [141, "function-signature"], [142, "function-signature"], [143, "function-signature"], [146, "function-signature"], [148, "function-signature"], [149, "function-signature"], [150, "function-signature"], [151, "function-signature"], [153, "function-signature"], [154, "function-signature"], [155, "function-signature"], [157, "function-signature"], [158, "function-signature"], [159, "function-signature"], [160, "function-signature"], [161, "function-signature"], [162, "function-signature"], [163, "function-signature"], [164, "function-signature"], [166, "function-signature"], [167, "function-signature"], [168, "function-signature"], [170, "function-signature"], [171, "function-signature"], [181, "function-signature"], [183, "function-signature"], [184, "function-signature"], [185, "function-signature"], [186, "function-signature"], [187, "function-signature"], [188, "function-signature"], [258, "function-signature"], [260, "function-signature"], [261, "function-signature"], [263, "function-signature"], [265, "function-signature"], [266, "function-signature"], [267, "function-signature"], [268, "function-signature"], [269, "function-signature"], [272, "function-signature"], [273, "function-signature"], [274, "function-signature"], [275, "function-signature"], [276, "function-signature"], [277, "function-signature"], [278, "function-signature"], [279, "function-signature"], [280, "function-signature"], [281, "function-signature"], [282, "function-signature"], [283, "function-signature"], [284, "function-signature"], [285, "function-signature"], [286, "function-signature"], [287, "function-signature"], [288, "function-signature"], [289, "function-signature"], [290, "function-signature"], [291, "function-signature"], [293, "function-signature"], [294, "function-signature"], [295, "function-signature"], [296, "function-signature"], [297, "function-signature"], [298, "function-signature"], [299, "function-signature"], [300, "function-signature"], [301, "function-signature"], [302, "function-signature"], [303, "function-signature"], [304, "function-signature"], [305, "function-signature"], [306, "function-signature"], [307, "function-signature"], [308, "function-signature"], [309, "function-signature"], [310, "function-signature"], [311, "function-signature"], [312, "function-signature"], [313, "function-signature"], [314, "function-signature"], [315, "function-signature"], [316, "function-signature"], [317, "function-signature"], [318, "function-signature"], [319, "function-signature"], [320, "function-signature"], [321, "function-signature"], [323, "function-signature"], [324, "function-signature"], [325, "function-signature"], [326, "function-signature"], [327, "function-signature"], [328, "function-signature"], [329, "function-signature"], [330, "function-signature"], [331, "function-signature"], [332, "function-signature"]], "Fused Layers": [[180, null]], "Future Work": [[4, "future-work"]], "Getting Started": [[245, "getting-started"]], "How It Works": [[258, "how-it-works"], [260, "how-it-works"]], "Hyperparameter Configuration": [[70, "hyperparameter-configuration"], [71, "hyperparameter-configuration"]], "Image Datasets": [[9, null]], "Image Transformations": [[343, null]], "Inception": [[44, null]], "InceptionResNet": [[48, null]], "Indexing and slicing": [[271, null]], "Inspecting Optimizer State": [[245, null], [246, null], [247, null], [248, null], [249, null], [250, null], [251, null], [252, null], [253, null], [254, null], [255, null], [256, null]], "Integration with lucid": [[3, "integration-with-lucid"], [243, "integration-with-lucid"], [270, "integration-with-lucid"], [344, "integration-with-lucid"]], "Iterating through a tensor": [[271, null]], "Key Components": [[3, "key-components"], [243, "key-components"]], "Key Features": [[4, "key-features"], [10, "key-features"], [96, "key-features"], [97, "key-features"], [98, "key-features"], [99, "key-features"], [104, "key-features"], [245, "key-features"], [270, "key-features"]], "Key Transformations": [[344, "key-transformations"]], "Layer Configuration": [[64, "layer-configuration"], [65, "layer-configuration"], [66, "layer-configuration"], [67, "layer-configuration"], [68, "layer-configuration"], [69, "layer-configuration"]], "LeNet": [[52, null]], "Learn More": [[270, null]], "Limitations": [[10, "limitations"]], "Linear Algebra Operations": [[15, null]], "Linear Functions": [[145, null], [147, null]], "Linear Layers": [[212, null], [216, null]], "Loading a custom dataset": [[1, null]], "Loss Functions": [[145, null], [152, null]], "Loss Layers": [[212, null], [222, null]], "Lucid": [[10, null]], "MNIST": [[8, null]], "Matrix Multiplication Rules": [[276, "matrix-multiplication-rules"]], "Metadata Captured": [[261, "metadata-captured"]], "Methods": [[0, "methods"], [1, "methods"], [2, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [48, "methods"], [52, "methods"], [105, "methods"], [117, "methods"], [118, "methods"], [244, "methods"], [271, "methods"]], "MobileNet": [[56, null]], "MobileNet_V2": [[57, null]], "MobileNet_V3": [[58, null]], "Modules": [[212, null]], "Normalization Functions": [[145, null], [156, null]], "Normalization Layers": [[212, null], [230, null]], "Notes": [[10, "notes"]], "Optimizers": [[257, null]], "Organizing Models": [[243, "organizing-models"]], "Overview": [[3, "overview"], [4, "overview"], [10, "overview"], [44, "overview"], [45, "overview"], [46, "overview"], [47, "overview"], [48, "overview"], [49, "overview"], [50, "overview"], [52, "overview"], [53, "overview"], [54, "overview"], [55, "overview"], [56, "overview"], [57, "overview"], [58, "overview"], [73, "overview"], [74, "overview"], [75, "overview"], [76, "overview"], [77, "overview"], [78, "overview"], [79, "overview"], [80, "overview"], [91, "overview"], [92, "overview"], [93, "overview"], [94, "overview"], [95, "overview"], [243, "overview"], [245, "overview"], [270, "overview"], [344, "overview"]], "Parameters": [[1, "parameters"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [12, "parameters"], [13, "parameters"], [14, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [52, "parameters"], [56, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [75, "parameters"], [76, "parameters"], [77, "parameters"], [78, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [113, "parameters"], [115, "parameters"], [116, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [125, "parameters"], [126, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [146, "parameters"], [148, "parameters"], [149, "parameters"], [150, "parameters"], [151, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [157, "parameters"], [158, "parameters"], [159, "parameters"], [160, "parameters"], [161, "parameters"], [162, "parameters"], [163, "parameters"], [164, "parameters"], [166, "parameters"], [167, "parameters"], [168, "parameters"], [170, "parameters"], [171, "parameters"], [172, "parameters"], [173, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [179, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [185, "parameters"], [186, "parameters"], [187, "parameters"], [188, "parameters"], [189, "parameters"], [190, "parameters"], [193, "parameters"], [194, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [200, "parameters"], [202, "parameters"], [203, "parameters"], [204, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [209, "parameters"], [210, "parameters"], [213, "parameters"], [214, "parameters"], [215, "parameters"], [217, "parameters"], [218, "parameters"], [219, "parameters"], [220, "parameters"], [221, "parameters"], [223, "parameters"], [224, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [231, "parameters"], [232, "parameters"], [233, "parameters"], [234, "parameters"], [235, "parameters"], [236, "parameters"], [237, "parameters"], [238, "parameters"], [239, "parameters"], [241, "parameters"], [246, "parameters"], [247, "parameters"], [248, "parameters"], [249, "parameters"], [250, "parameters"], [251, "parameters"], [252, "parameters"], [253, "parameters"], [254, "parameters"], [255, "parameters"], [256, "parameters"], [260, "parameters"], [261, "parameters"], [263, "parameters"], [265, "parameters"], [266, "parameters"], [267, "parameters"], [268, "parameters"], [269, "parameters"], [271, "parameters"], [272, "parameters"], [273, "parameters"], [274, "parameters"], [275, "parameters"], [276, "parameters"], [277, "parameters"], [278, "parameters"], [279, "parameters"], [280, "parameters"], [281, "parameters"], [282, "parameters"], [283, "parameters"], [284, "parameters"], [285, "parameters"], [286, "parameters"], [287, "parameters"], [288, "parameters"], [289, "parameters"], [290, "parameters"], [291, "parameters"], [293, "parameters"], [294, "parameters"], [295, "parameters"], [296, "parameters"], [297, "parameters"], [298, "parameters"], [299, "parameters"], [300, "parameters"], [301, "parameters"], [302, "parameters"], [303, "parameters"], [304, "parameters"], [305, "parameters"], [306, "parameters"], [307, "parameters"], [308, "parameters"], [309, "parameters"], [310, "parameters"], [311, "parameters"], [312, "parameters"], [313, "parameters"], [314, "parameters"], [315, "parameters"], [316, "parameters"], [317, "parameters"], [318, "parameters"], [319, "parameters"], [320, "parameters"], [321, "parameters"], [323, "parameters"], [324, "parameters"], [325, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [330, "parameters"], [331, "parameters"], [332, "parameters"], [333, "parameters"], [334, "parameters"], [335, "parameters"], [336, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [342, "parameters"]], "Performing backpropagation": [[271, null]], "Pooling Functions": [[145, null], [165, null]], "Pooling Layers": [[212, null], [240, null]], "Potential Pitfalls": [[258, "potential-pitfalls"], [260, "potential-pitfalls"]], "Properties": [[118, "properties"], [271, "properties"]], "Raises": [[12, "raises"], [13, "raises"], [14, "raises"], [16, "raises"], [17, "raises"], [18, "raises"], [19, "raises"], [20, "raises"], [21, "raises"], [22, "raises"]], "Random Number Generations": [[264, null]], "References": [[5, "references"], [6, "references"], [7, "references"], [8, "references"], [178, "references"], [245, "references"]], "ResNeSt": [[63, null]], "ResNeXt": [[83, null]], "ResNet": [[72, null]], "Returns": [[12, "returns"], [13, "returns"], [14, "returns"], [16, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [24, "returns"], [26, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [40, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [45, "returns"], [46, "returns"], [47, "returns"], [49, "returns"], [50, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [68, "returns"], [69, "returns"], [70, "returns"], [71, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [78, "returns"], [79, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [84, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [89, "returns"], [91, "returns"], [92, "returns"], [93, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [106, "returns"], [107, "returns"], [108, "returns"], [109, "returns"], [111, "returns"], [113, "returns"], [115, "returns"], [125, "returns"], [126, "returns"], [128, "returns"], [129, "returns"], [130, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [136, "returns"], [138, "returns"], [139, "returns"], [140, "returns"], [141, "returns"], [142, "returns"], [143, "returns"], [146, "returns"], [148, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [153, "returns"], [154, "returns"], [155, "returns"], [157, "returns"], [158, "returns"], [159, "returns"], [160, "returns"], [161, "returns"], [162, "returns"], [163, "returns"], [164, "returns"], [166, "returns"], [167, "returns"], [168, "returns"], [170, "returns"], [171, "returns"], [179, "returns"], [181, "returns"], [183, "returns"], [184, "returns"], [185, "returns"], [186, "returns"], [187, "returns"], [188, "returns"], [195, "returns"], [258, "returns"], [260, "returns"], [263, "returns"], [265, "returns"], [266, "returns"], [267, "returns"], [268, "returns"], [269, "returns"], [272, "returns"], [273, "returns"], [274, "returns"], [275, "returns"], [276, "returns"], [277, "returns"], [278, "returns"], [279, "returns"], [280, "returns"], [281, "returns"], [282, "returns"], [283, "returns"], [284, "returns"], [285, "returns"], [286, "returns"], [287, "returns"], [288, "returns"], [289, "returns"], [290, "returns"], [291, "returns"], [293, "returns"], [294, "returns"], [295, "returns"], [296, "returns"], [297, "returns"], [298, "returns"], [299, "returns"], [300, "returns"], [301, "returns"], [302, "returns"], [303, "returns"], [304, "returns"], [305, "returns"], [306, "returns"], [307, "returns"], [308, "returns"], [309, "returns"], [310, "returns"], [311, "returns"], [312, "returns"], [313, "returns"], [314, "returns"], [315, "returns"], [316, "returns"], [317, "returns"], [318, "returns"], [319, "returns"], [320, "returns"], [321, "returns"], [323, "returns"], [324, "returns"], [325, "returns"], [326, "returns"], [327, "returns"], [328, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, "returns"]], "SENet": [[90, null]], "SKNet": [[100, null]], "See Also": [[245, "see-also"]], "Selective Kernel": [[180, null]], "Squeeze-and-Excitation": [[180, null]], "Summary Table": [[115, "summary-table"]], "Tensor Generating Functions": [[292, null]], "Tensor Operations": [[292, null]], "Tensor Utilites": [[322, null]], "Type Definitions": [[262, "type-definitions"]], "Unary Functions": [[292, null]], "Usage": [[4, "usage"], [40, "usage"], [41, "usage"], [42, "usage"], [43, "usage"], [116, "usage"], [171, "usage"], [258, "usage"], [259, "usage"], [260, "usage"], [323, "usage"], [333, "usage"], [334, "usage"], [344, "usage"]], "Use another Tensor as input": [[318, null]], "Using DataLoader with ConcatDataset": [[1, null]], "Using the ASGD Optimizer": [[246, null]], "Using the Adadelta Optimizer": [[247, null]], "Using the Adagrad Optimizer": [[248, null]], "Using the Adam Optimizer": [[249, null]], "Using the AdamW Optimizer": [[250, null]], "Using the Adamax Optimizer": [[251, null]], "Using the NAdam Optimizer": [[252, null]], "Using the RAdam Optimizer": [[253, null]], "Using the RMSprop Optimizer": [[254, null]], "Using the Rprop Optimizer": [[255, null]], "Using the SGD Optimizer": [[256, null]], "Utility Functions": [[145, null], [169, null]], "VGGNet": [[105, null]], "Vision Layers": [[212, null], [242, null]], "Weight Initializations": [[182, null]], "Why Use Type Aliases?": [[262, null]], "Xception": [[110, null]], "ZFNet": [[112, null]], "activation Functions": [[145, null]], "alexnet": [[24, null]], "data.ConcatDataset": [[0, null]], "data.DataLoader": [[1, null]], "data.Dataset": [[2, null]], "densenet_121": [[26, null]], "densenet_169": [[27, null]], "densenet_201": [[28, null]], "densenet_264": [[29, null]], "efficientnet_b0": [[32, null]], "efficientnet_b1": [[33, null]], "efficientnet_b2": [[34, null]], "efficientnet_b3": [[35, null]], "efficientnet_b4": [[36, null]], "efficientnet_b5": [[37, null]], "efficientnet_b6": [[38, null]], "efficientnet_b7": [[39, null]], "efficientnet_v2_l": [[40, null]], "efficientnet_v2_m": [[41, null]], "efficientnet_v2_s": [[42, null]], "efficientnet_v2_xl": [[43, null]], "inception_resnet_v1": [[49, null]], "inception_resnet_v2": [[50, null]], "inception_v1": [[45, null]], "inception_v3": [[46, null]], "inception_v4": [[47, null]], "lenet_1": [[53, null]], "lenet_4": [[54, null]], "lenet_5": [[55, null]], "lucid.Tensor": [[271, null]], "lucid.abs": [[293, null]], "lucid.add": [[272, null]], "lucid.arange": [[283, null]], "lucid.arccos": [[294, null]], "lucid.arcsin": [[295, null]], "lucid.arctan": [[296, null]], "lucid.clip": [[297, null]], "lucid.concatenate": [[319, null]], "lucid.cos": [[298, null]], "lucid.cosh": [[299, null]], "lucid.cube": [[300, null]], "lucid.data": [[3, null]], "lucid.datasets": [[4, null]], "lucid.diag": [[284, null]], "lucid.div": [[273, null]], "lucid.dot": [[274, null]], "lucid.empty": [[285, null]], "lucid.empty_like": [[286, null]], "lucid.exp": [[301, null]], "lucid.eye": [[287, null]], "lucid.flatten": [[320, null]], "lucid.grad_enabled": [[258, null]], "lucid.hstack": [[321, null]], "lucid.inner": [[275, null]], "lucid.linalg": [[11, null]], "lucid.linalg.cholesky": [[12, null]], "lucid.linalg.det": [[13, null]], "lucid.linalg.eig": [[14, null]], "lucid.linalg.inv": [[16, null]], "lucid.linalg.matrix_power": [[17, null]], "lucid.linalg.norm": [[18, null]], "lucid.linalg.pinv": [[19, null]], "lucid.linalg.qr": [[20, null]], "lucid.linalg.solve": [[21, null]], "lucid.linalg.svd": [[22, null]], "lucid.log": [[302, null]], "lucid.matmul": [[276, null]], "lucid.max": [[303, null]], "lucid.maximum": [[277, null]], "lucid.mean": [[304, null]], "lucid.meshgrid": [[323, null]], "lucid.min": [[305, null]], "lucid.minimum": [[278, null]], "lucid.models": [[114, null]], "lucid.mul": [[279, null]], "lucid.newaxis": [[259, null]], "lucid.nn": [[243, null]], "lucid.nn.functional": [[145, null]], "lucid.no_grad": [[260, null]], "lucid.ones": [[288, null]], "lucid.ones_like": [[289, null]], "lucid.optim": [[245, null]], "lucid.outer": [[280, null]], "lucid.pad": [[324, null]], "lucid.power": [[281, null]], "lucid.random": [[270, null]], "lucid.random.bernoulli": [[263, null]], "lucid.random.rand": [[265, null]], "lucid.random.randint": [[266, null]], "lucid.random.randn": [[267, null]], "lucid.random.seed": [[268, null]], "lucid.random.uniform": [[269, null]], "lucid.ravel": [[325, null]], "lucid.reciprocal": [[306, null]], "lucid.register_model": [[261, null]], "lucid.repeat": [[326, null]], "lucid.reshape": [[327, null]], "lucid.sign": [[307, null]], "lucid.sin": [[308, null]], "lucid.sinh": [[309, null]], "lucid.sqrt": [[310, null]], "lucid.square": [[311, null]], "lucid.squeeze": [[328, null]], "lucid.stack": [[329, null]], "lucid.sub": [[282, null]], "lucid.sum": [[312, null]], "lucid.tan": [[313, null]], "lucid.tanh": [[314, null]], "lucid.tensor": [[318, null]], "lucid.tile": [[330, null]], "lucid.trace": [[315, null]], "lucid.transforms": [[344, null]], "lucid.transpose": [[316, null]], "lucid.types": [[262, null]], "lucid.unsqueeze": [[331, null]], "lucid.var": [[317, null]], "lucid.vstack": [[332, null]], "lucid.zeros": [[290, null]], "lucid.zeros_like": [[291, null]], "mobilenet": [[59, null]], "mobilenet_v2": [[60, null]], "mobilenet_v3_large": [[61, null]], "mobilenet_v3_small": [[62, null]], "models.summarize": [[115, null]], "nn.AdaptiveAvgPool1d": [[231, null]], "nn.AdaptiveAvgPool2d": [[232, null]], "nn.AdaptiveAvgPool3d": [[233, null]], "nn.AlphaDropout": [[206, null]], "nn.AvgPool1d": [[234, null]], "nn.AvgPool2d": [[235, null]], "nn.AvgPool3d": [[236, null]], "nn.BCELoss": [[217, null]], "nn.BatchNorm1d": [[223, null]], "nn.BatchNorm2d": [[224, null]], "nn.BatchNorm3d": [[225, null]], "nn.Bilinear": [[213, null]], "nn.Buffer": [[116, null]], "nn.Conv1d": [[202, null]], "nn.Conv2d": [[203, null]], "nn.Conv3d": [[204, null]], "nn.ConvBNReLU1d": [[172, null]], "nn.ConvBNReLU2d": [[173, null]], "nn.ConvBNReLU3d": [[174, null]], "nn.CrossEntropyLoss": [[218, null]], "nn.DepthSeparableConv1d": [[175, null]], "nn.DepthSeparableConv2d": [[176, null]], "nn.DepthSeparableConv3d": [[177, null]], "nn.Dropout": [[207, null]], "nn.Dropout1d": [[208, null]], "nn.Dropout2d": [[209, null]], "nn.Dropout3d": [[210, null]], "nn.ELU": [[189, null]], "nn.GELU": [[190, null]], "nn.HardSigmoid": [[191, null]], "nn.HardSwish": [[192, null]], "nn.HuberLoss": [[219, null]], "nn.Identity": [[214, null]], "nn.InstanceNorm1d": [[226, null]], "nn.InstanceNorm2d": [[227, null]], "nn.InstanceNorm3d": [[228, null]], "nn.LayerNorm": [[229, null]], "nn.LeakyReLU": [[193, null]], "nn.Linear": [[215, null]], "nn.MSELoss": [[220, null]], "nn.MaxPool1d": [[237, null]], "nn.MaxPool2d": [[238, null]], "nn.MaxPool3d": [[239, null]], "nn.Module": [[117, null]], "nn.ModuleDict": [[119, null]], "nn.ModuleList": [[120, null]], "nn.NLLLoss": [[221, null]], "nn.Parameter": [[118, null]], "nn.ParameterDict": [[121, null]], "nn.ParameterList": [[122, null]], "nn.ReLU": [[194, null]], "nn.ReLU6": [[195, null]], "nn.SELU": [[196, null]], "nn.SEModule": [[178, null]], "nn.SelectiveKernel": [[179, null]], "nn.Sequential": [[123, null]], "nn.Sigmoid": [[197, null]], "nn.Softmax": [[198, null]], "nn.Swish": [[199, null]], "nn.Tanh": [[200, null]], "nn.Upsample": [[241, null]], "nn.functional.adaptive_avg_pool1d": [[159, null]], "nn.functional.adaptive_avg_pool2d": [[160, null]], "nn.functional.adaptive_avg_pool3d": [[161, null]], "nn.functional.alpha_dropout": [[139, null]], "nn.functional.avg_pool1d": [[162, null]], "nn.functional.avg_pool2d": [[163, null]], "nn.functional.avg_pool3d": [[164, null]], "nn.functional.batch_norm": [[155, null]], "nn.functional.bilinear": [[146, null]], "nn.functional.binary_cross_entropy": [[149, null]], "nn.functional.conv1d": [[134, null]], "nn.functional.conv2d": [[135, null]], "nn.functional.conv3d": [[136, null]], "nn.functional.cross_entropy": [[150, null]], "nn.functional.dropout": [[140, null]], "nn.functional.dropout1d": [[141, null]], "nn.functional.dropout2d": [[142, null]], "nn.functional.dropout3d": [[143, null]], "nn.functional.elu": [[125, null]], "nn.functional.gelu": [[126, null]], "nn.functional.huber_loss": [[151, null]], "nn.functional.instance_norm": [[157, null]], "nn.functional.interpolate": [[170, null]], "nn.functional.layer_norm": [[158, null]], "nn.functional.leaky_relu": [[128, null]], "nn.functional.linear": [[148, null]], "nn.functional.max_pool1d": [[166, null]], "nn.functional.max_pool2d": [[167, null]], "nn.functional.max_pool3d": [[168, null]], "nn.functional.mse_loss": [[153, null]], "nn.functional.nll_loss": [[154, null]], "nn.functional.relu": [[129, null]], "nn.functional.rotate": [[171, null]], "nn.functional.selu": [[130, null]], "nn.functional.sigmoid": [[131, null]], "nn.functional.softmax": [[132, null]], "nn.functional.tanh": [[133, null]], "nn.functional.unfold": [[138, null]], "nn.init.constant": [[181, null]], "nn.init.kaiming_normal": [[183, null]], "nn.init.kaiming_uniform": [[184, null]], "nn.init.normal": [[185, null]], "nn.init.uniform": [[186, null]], "nn.init.xavier_normal": [[187, null]], "nn.init.xavier_uniform": [[188, null]], "optim.ASGD": [[246, null]], "optim.Adadelta": [[247, null]], "optim.Adagrad": [[248, null]], "optim.Adam": [[249, null]], "optim.AdamW": [[250, null]], "optim.Adamax": [[251, null]], "optim.NAdam": [[252, null]], "optim.Optimizer": [[244, null]], "optim.RAdam": [[253, null]], "optim.RMSprop": [[254, null]], "optim.Rprop": [[255, null]], "optim.SGD": [[256, null]], "resnest_101": [[64, null]], "resnest_14": [[65, null]], "resnest_200": [[66, null]], "resnest_26": [[67, null]], "resnest_269": [[68, null]], "resnest_50": [[69, null]], "resnest_50_1s4x24d": [[70, null]], "resnest_50_4s2x40d": [[71, null]], "resnet_1001": [[73, null]], "resnet_101": [[74, null]], "resnet_152": [[75, null]], "resnet_18": [[76, null]], "resnet_200": [[77, null]], "resnet_269": [[78, null]], "resnet_34": [[79, null]], "resnet_50": [[80, null]], "resnext_101_32x16d": [[84, null]], "resnext_101_32x32d": [[85, null]], "resnext_101_32x4d": [[86, null]], "resnext_101_32x8d": [[87, null]], "resnext_101_64x4d": [[88, null]], "resnext_50_32x4d": [[89, null]], "se_resnet_101": [[91, null]], "se_resnet_152": [[92, null]], "se_resnet_18": [[93, null]], "se_resnet_34": [[94, null]], "se_resnet_50": [[95, null]], "se_resnext_101_32x4d": [[96, null]], "se_resnext_101_32x8d": [[97, null]], "se_resnext_101_64x4d": [[98, null]], "se_resnext_50_32x4d": [[99, null]], "sk_resnet_18": [[101, null]], "sk_resnet_34": [[102, null]], "sk_resnet_50": [[103, null]], "sk_resnext_50_32x4d": [[104, null]], "transforms.CenterCrop": [[335, null]], "transforms.Compose": [[333, null]], "transforms.Normalize": [[336, null]], "transforms.RandomCrop": [[337, null]], "transforms.RandomGrayscale": [[338, null]], "transforms.RandomHorizontalFlip": [[339, null]], "transforms.RandomRotation": [[340, null]], "transforms.RandomVerticalFlip": [[341, null]], "transforms.Resize": [[342, null]], "transforms.ToTensor": [[334, null]], "vggnet_11": [[106, null]], "vggnet_13": [[107, null]], "vggnet_16": [[108, null]], "vggnet_19": [[109, null]], "wide_resnet_101": [[81, null]], "wide_resnet_50": [[82, null]], "xception": [[111, null]], "zfnet": [[113, null]]}, "docnames": ["data/ConcatDataset", "data/DataLoader", "data/Dataset", "data/data", "datasets/datasets", "datasets/image/CIFAR10", "datasets/image/CIFAR100", "datasets/image/FashionMNIST", "datasets/image/MNIST", "datasets/image/index", "index", "linalg/linalg", "linalg/operations/cholesky", "linalg/operations/det", "linalg/operations/eig", "linalg/operations/index", "linalg/operations/inv", "linalg/operations/matrix_power", "linalg/operations/norm", "linalg/operations/pinv", "linalg/operations/qr", "linalg/operations/solve", "linalg/operations/svd", "models/conv/alex/AlexNet", "models/conv/alex/alexnet", "models/conv/dense/DenseNet", "models/conv/dense/densenet_121", "models/conv/dense/densenet_169", "models/conv/dense/densenet_201", "models/conv/dense/densenet_264", "models/conv/efficient/EfficientNet", "models/conv/efficient/EfficientNet_V2", "models/conv/efficient/efficientnet_b0", "models/conv/efficient/efficientnet_b1", "models/conv/efficient/efficientnet_b2", "models/conv/efficient/efficientnet_b3", "models/conv/efficient/efficientnet_b4", "models/conv/efficient/efficientnet_b5", "models/conv/efficient/efficientnet_b6", "models/conv/efficient/efficientnet_b7", "models/conv/efficient/efficientnet_v2_l", "models/conv/efficient/efficientnet_v2_m", "models/conv/efficient/efficientnet_v2_s", "models/conv/efficient/efficientnet_v2_xl", "models/conv/inception/Inception", "models/conv/inception/inception_v1", "models/conv/inception/inception_v3", "models/conv/inception/inception_v4", "models/conv/inception_res/InceptionResNet", "models/conv/inception_res/inception_resnet_v1", "models/conv/inception_res/inception_resnet_v2", "models/conv/index", "models/conv/lenet/LeNet", "models/conv/lenet/lenet_1", "models/conv/lenet/lenet_4", "models/conv/lenet/lenet_5", "models/conv/mobile/MobileNet", "models/conv/mobile/MobileNet_V2", "models/conv/mobile/MobileNet_V3", "models/conv/mobile/mobilenet", "models/conv/mobile/mobilenet_v2", "models/conv/mobile/mobilenet_v3_large", "models/conv/mobile/mobilenet_v3_small", "models/conv/resnest/ResNeSt", "models/conv/resnest/resnest_101", "models/conv/resnest/resnest_14", "models/conv/resnest/resnest_200", "models/conv/resnest/resnest_26", "models/conv/resnest/resnest_269", "models/conv/resnest/resnest_50", "models/conv/resnest/resnest_50_1s4x24d", "models/conv/resnest/resnest_50_4s2x40d", "models/conv/resnet/ResNet", "models/conv/resnet/resnet_1001", "models/conv/resnet/resnet_101", "models/conv/resnet/resnet_152", "models/conv/resnet/resnet_18", "models/conv/resnet/resnet_200", "models/conv/resnet/resnet_269", "models/conv/resnet/resnet_34", "models/conv/resnet/resnet_50", "models/conv/resnet/wide_resnet_101", "models/conv/resnet/wide_resnet_50", "models/conv/resnext/ResNeXt", "models/conv/resnext/resnext_101_32x16d", "models/conv/resnext/resnext_101_32x32d", "models/conv/resnext/resnext_101_32x4d", "models/conv/resnext/resnext_101_32x8d", "models/conv/resnext/resnext_101_64x4d", "models/conv/resnext/resnext_50_32x4d", "models/conv/senet/SENet", "models/conv/senet/se_resnet_101", "models/conv/senet/se_resnet_152", "models/conv/senet/se_resnet_18", "models/conv/senet/se_resnet_34", "models/conv/senet/se_resnet_50", "models/conv/senet/se_resnext_101_32x4d", "models/conv/senet/se_resnext_101_32x8d", "models/conv/senet/se_resnext_101_64x4d", "models/conv/senet/se_resnext_50_32x4d", "models/conv/sknet/SKNet", "models/conv/sknet/sk_resnet_18", "models/conv/sknet/sk_resnet_34", "models/conv/sknet/sk_resnet_50", "models/conv/sknet/sk_resnext_50_32x4d", "models/conv/vgg/VGGNet", "models/conv/vgg/vggnet_11", "models/conv/vgg/vggnet_13", "models/conv/vgg/vggnet_16", "models/conv/vgg/vggnet_19", "models/conv/xception/Xception", "models/conv/xception/xception", "models/conv/zfnet/ZFNet", "models/conv/zfnet/zfnet", "models/models", "models/summarize", "nn/Buffer", "nn/Module", "nn/Parameter", "nn/containers/ModuleDict", "nn/containers/ModuleList", "nn/containers/ParameterDict", "nn/containers/ParameterList", "nn/containers/Sequential", "nn/containers/index", "nn/functions/activation/elu", "nn/functions/activation/gelu", "nn/functions/activation/index", "nn/functions/activation/leaky_relu", "nn/functions/activation/relu", "nn/functions/activation/selu", "nn/functions/activation/sigmoid", "nn/functions/activation/softmax", "nn/functions/activation/tanh", "nn/functions/conv/conv1d", "nn/functions/conv/conv2d", "nn/functions/conv/conv3d", "nn/functions/conv/index", "nn/functions/conv/unfold", "nn/functions/drop/alpha_dropout", "nn/functions/drop/dropout", "nn/functions/drop/dropout1d", "nn/functions/drop/dropout2d", "nn/functions/drop/dropout3d", "nn/functions/drop/index", "nn/functions/index", "nn/functions/linear/bilinear", "nn/functions/linear/index", "nn/functions/linear/linear", "nn/functions/loss/binary_cross_entropy", "nn/functions/loss/cross_entropy", "nn/functions/loss/huber_loss", "nn/functions/loss/index", "nn/functions/loss/mse_loss", "nn/functions/loss/nll_loss", "nn/functions/norm/batch_norm", "nn/functions/norm/index", "nn/functions/norm/instance_norm", "nn/functions/norm/layer_norm", "nn/functions/pool/adaptive_avg_pool1d", "nn/functions/pool/adaptive_avg_pool2d", "nn/functions/pool/adaptive_avg_pool3d", "nn/functions/pool/avg_pool1d", "nn/functions/pool/avg_pool2d", "nn/functions/pool/avg_pool3d", "nn/functions/pool/index", "nn/functions/pool/max_pool1d", "nn/functions/pool/max_pool2d", "nn/functions/pool/max_pool3d", "nn/functions/util/index", "nn/functions/util/interpolate", "nn/functions/util/rotate", "nn/fused/ConvBNReLU1d", "nn/fused/ConvBNReLU2d", "nn/fused/ConvBNReLU3d", "nn/fused/DepthSeparableConv1d", "nn/fused/DepthSeparableConv2d", "nn/fused/DepthSeparableConv3d", "nn/fused/SEModule", "nn/fused/SelectiveKernel", "nn/fused/index", "nn/init/constant", "nn/init/index", "nn/init/kaiming_normal", "nn/init/kaiming_uniform", "nn/init/normal", "nn/init/uniform", "nn/init/xavier_normal", "nn/init/xavier_uniform", "nn/modules/activation/ELU", "nn/modules/activation/GELU", "nn/modules/activation/HardSigmoid", "nn/modules/activation/HardSwish", "nn/modules/activation/LeakyReLU", "nn/modules/activation/ReLU", "nn/modules/activation/ReLU6", "nn/modules/activation/SELU", "nn/modules/activation/Sigmoid", "nn/modules/activation/Softmax", "nn/modules/activation/Swish", "nn/modules/activation/Tanh", "nn/modules/activation/index", "nn/modules/conv/Conv1d", "nn/modules/conv/Conv2d", "nn/modules/conv/Conv3d", "nn/modules/conv/index", "nn/modules/drop/AlphaDropout", "nn/modules/drop/Dropout", "nn/modules/drop/Dropout1d", "nn/modules/drop/Dropout2d", "nn/modules/drop/Dropout3d", "nn/modules/drop/index", "nn/modules/index", "nn/modules/linear/Bilinear", "nn/modules/linear/Identity", "nn/modules/linear/Linear", "nn/modules/linear/index", "nn/modules/loss/BCELoss", "nn/modules/loss/CrossEntropyLoss", "nn/modules/loss/HuberLoss", "nn/modules/loss/MSELoss", "nn/modules/loss/NLLLoss", "nn/modules/loss/index", "nn/modules/norm/BatchNorm1d", "nn/modules/norm/BatchNorm2d", "nn/modules/norm/BatchNorm3d", "nn/modules/norm/InstanceNorm1d", "nn/modules/norm/InstanceNorm2d", "nn/modules/norm/InstanceNorm3d", "nn/modules/norm/LayerNorm", "nn/modules/norm/index", "nn/modules/pool/AdaptiveAvgPool1d", "nn/modules/pool/AdaptiveAvgPool2d", "nn/modules/pool/AdaptiveAvgPool3d", "nn/modules/pool/AvgPool1d", "nn/modules/pool/AvgPool2d", "nn/modules/pool/AvgPool3d", "nn/modules/pool/MaxPool1d", "nn/modules/pool/MaxPool2d", "nn/modules/pool/MaxPool3d", "nn/modules/pool/index", "nn/modules/vision/Upsample", "nn/modules/vision/index", "nn/nn", "optim/Optimizer", "optim/optim", "optim/optimizers/ASGD", "optim/optimizers/Adadelta", "optim/optimizers/Adagrad", "optim/optimizers/Adam", "optim/optimizers/AdamW", "optim/optimizers/Adamax", "optim/optimizers/NAdam", "optim/optimizers/RAdam", "optim/optimizers/RMSprop", "optim/optimizers/Rprop", "optim/optimizers/SGD", "optim/optimizers/index", "others/grad_enabled", "others/newaxis", "others/no_grad", "others/register_model", "others/types", "random/functions/bernoulli", "random/functions/index", "random/functions/rand", "random/functions/randint", "random/functions/randn", "random/functions/seed", "random/functions/uniform", "random/random", "tensor/Tensor_", "tensor/operations/bfunc/add", "tensor/operations/bfunc/div", "tensor/operations/bfunc/dot", "tensor/operations/bfunc/inner", "tensor/operations/bfunc/matmul", "tensor/operations/bfunc/maximum", "tensor/operations/bfunc/minimum", "tensor/operations/bfunc/mul", "tensor/operations/bfunc/outer", "tensor/operations/bfunc/power", "tensor/operations/bfunc/sub", "tensor/operations/gfunc/arange", "tensor/operations/gfunc/diag", "tensor/operations/gfunc/empty", "tensor/operations/gfunc/empty_like", "tensor/operations/gfunc/eye", "tensor/operations/gfunc/ones", "tensor/operations/gfunc/ones_like", "tensor/operations/gfunc/zeros", "tensor/operations/gfunc/zeros_like", "tensor/operations/index", "tensor/operations/ufunc/abs", "tensor/operations/ufunc/arccos", "tensor/operations/ufunc/arcsin", "tensor/operations/ufunc/arctan", "tensor/operations/ufunc/clip", "tensor/operations/ufunc/cos", "tensor/operations/ufunc/cosh", "tensor/operations/ufunc/cube", "tensor/operations/ufunc/exp", "tensor/operations/ufunc/log", "tensor/operations/ufunc/max", "tensor/operations/ufunc/mean", "tensor/operations/ufunc/min", "tensor/operations/ufunc/reciprocal", "tensor/operations/ufunc/sign", "tensor/operations/ufunc/sin", "tensor/operations/ufunc/sinh", "tensor/operations/ufunc/sqrt", "tensor/operations/ufunc/square", "tensor/operations/ufunc/sum", "tensor/operations/ufunc/tan", "tensor/operations/ufunc/tanh", "tensor/operations/ufunc/trace", "tensor/operations/ufunc/transpose", "tensor/operations/ufunc/var", "tensor/tensor", "tensor/utilities/concatenate", "tensor/utilities/flatten", "tensor/utilities/hstack", "tensor/utilities/index", "tensor/utilities/meshgrid", "tensor/utilities/pad", "tensor/utilities/ravel", "tensor/utilities/repeat", "tensor/utilities/reshape", "tensor/utilities/squeeze", "tensor/utilities/stack", "tensor/utilities/tile", "tensor/utilities/unsqueeze", "tensor/utilities/vstack", "transforms/Compose", "transforms/ToTensor", "transforms/image/CenterCrop", "transforms/image/Normalize", "transforms/image/RandomCrop", "transforms/image/RandomGrayscale", "transforms/image/RandomHorizontalFlip", "transforms/image/RandomRotation", "transforms/image/RandomVerticalFlip", "transforms/image/Resize", "transforms/image/index", "transforms/transforms"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["data/ConcatDataset.rst", "data/DataLoader.rst", "data/Dataset.rst", "data/data.rst", "datasets/datasets.rst", "datasets/image/CIFAR10.rst", "datasets/image/CIFAR100.rst", "datasets/image/FashionMNIST.rst", "datasets/image/MNIST.rst", "datasets/image/index.rst", "index.rst", "linalg/linalg.rst", "linalg/operations/cholesky.rst", "linalg/operations/det.rst", "linalg/operations/eig.rst", "linalg/operations/index.rst", "linalg/operations/inv.rst", "linalg/operations/matrix_power.rst", "linalg/operations/norm.rst", "linalg/operations/pinv.rst", "linalg/operations/qr.rst", "linalg/operations/solve.rst", "linalg/operations/svd.rst", "models/conv/alex/AlexNet.rst", "models/conv/alex/alexnet.rst", "models/conv/dense/DenseNet.rst", "models/conv/dense/densenet_121.rst", "models/conv/dense/densenet_169.rst", "models/conv/dense/densenet_201.rst", "models/conv/dense/densenet_264.rst", "models/conv/efficient/EfficientNet.rst", "models/conv/efficient/EfficientNet_V2.rst", "models/conv/efficient/efficientnet_b0.rst", "models/conv/efficient/efficientnet_b1.rst", "models/conv/efficient/efficientnet_b2.rst", "models/conv/efficient/efficientnet_b3.rst", "models/conv/efficient/efficientnet_b4.rst", "models/conv/efficient/efficientnet_b5.rst", "models/conv/efficient/efficientnet_b6.rst", "models/conv/efficient/efficientnet_b7.rst", "models/conv/efficient/efficientnet_v2_l.rst", "models/conv/efficient/efficientnet_v2_m.rst", "models/conv/efficient/efficientnet_v2_s.rst", "models/conv/efficient/efficientnet_v2_xl.rst", "models/conv/inception/Inception.rst", "models/conv/inception/inception_v1.rst", "models/conv/inception/inception_v3.rst", "models/conv/inception/inception_v4.rst", "models/conv/inception_res/InceptionResNet.rst", "models/conv/inception_res/inception_resnet_v1.rst", "models/conv/inception_res/inception_resnet_v2.rst", "models/conv/index.rst", "models/conv/lenet/LeNet.rst", "models/conv/lenet/lenet_1.rst", "models/conv/lenet/lenet_4.rst", "models/conv/lenet/lenet_5.rst", "models/conv/mobile/MobileNet.rst", "models/conv/mobile/MobileNet_V2.rst", "models/conv/mobile/MobileNet_V3.rst", "models/conv/mobile/mobilenet.rst", "models/conv/mobile/mobilenet_v2.rst", "models/conv/mobile/mobilenet_v3_large.rst", "models/conv/mobile/mobilenet_v3_small.rst", "models/conv/resnest/ResNeSt.rst", "models/conv/resnest/resnest_101.rst", "models/conv/resnest/resnest_14.rst", "models/conv/resnest/resnest_200.rst", "models/conv/resnest/resnest_26.rst", "models/conv/resnest/resnest_269.rst", "models/conv/resnest/resnest_50.rst", "models/conv/resnest/resnest_50_1s4x24d.rst", "models/conv/resnest/resnest_50_4s2x40d.rst", "models/conv/resnet/ResNet.rst", "models/conv/resnet/resnet_1001.rst", "models/conv/resnet/resnet_101.rst", "models/conv/resnet/resnet_152.rst", "models/conv/resnet/resnet_18.rst", "models/conv/resnet/resnet_200.rst", "models/conv/resnet/resnet_269.rst", "models/conv/resnet/resnet_34.rst", "models/conv/resnet/resnet_50.rst", "models/conv/resnet/wide_resnet_101.rst", "models/conv/resnet/wide_resnet_50.rst", "models/conv/resnext/ResNeXt.rst", "models/conv/resnext/resnext_101_32x16d.rst", "models/conv/resnext/resnext_101_32x32d.rst", "models/conv/resnext/resnext_101_32x4d.rst", "models/conv/resnext/resnext_101_32x8d.rst", "models/conv/resnext/resnext_101_64x4d.rst", "models/conv/resnext/resnext_50_32x4d.rst", "models/conv/senet/SENet.rst", "models/conv/senet/se_resnet_101.rst", "models/conv/senet/se_resnet_152.rst", "models/conv/senet/se_resnet_18.rst", "models/conv/senet/se_resnet_34.rst", "models/conv/senet/se_resnet_50.rst", "models/conv/senet/se_resnext_101_32x4d.rst", "models/conv/senet/se_resnext_101_32x8d.rst", "models/conv/senet/se_resnext_101_64x4d.rst", "models/conv/senet/se_resnext_50_32x4d.rst", "models/conv/sknet/SKNet.rst", "models/conv/sknet/sk_resnet_18.rst", "models/conv/sknet/sk_resnet_34.rst", "models/conv/sknet/sk_resnet_50.rst", "models/conv/sknet/sk_resnext_50_32x4d.rst", "models/conv/vgg/VGGNet.rst", "models/conv/vgg/vggnet_11.rst", "models/conv/vgg/vggnet_13.rst", "models/conv/vgg/vggnet_16.rst", "models/conv/vgg/vggnet_19.rst", "models/conv/xception/Xception.rst", "models/conv/xception/xception.rst", "models/conv/zfnet/ZFNet.rst", "models/conv/zfnet/zfnet.rst", "models/models.rst", "models/summarize.rst", "nn/Buffer.rst", "nn/Module.rst", "nn/Parameter.rst", "nn/containers/ModuleDict.rst", "nn/containers/ModuleList.rst", "nn/containers/ParameterDict.rst", "nn/containers/ParameterList.rst", "nn/containers/Sequential.rst", "nn/containers/index.rst", "nn/functions/activation/elu.rst", "nn/functions/activation/gelu.rst", "nn/functions/activation/index.rst", "nn/functions/activation/leaky_relu.rst", "nn/functions/activation/relu.rst", "nn/functions/activation/selu.rst", "nn/functions/activation/sigmoid.rst", "nn/functions/activation/softmax.rst", "nn/functions/activation/tanh.rst", "nn/functions/conv/conv1d.rst", "nn/functions/conv/conv2d.rst", "nn/functions/conv/conv3d.rst", "nn/functions/conv/index.rst", "nn/functions/conv/unfold.rst", "nn/functions/drop/alpha_dropout.rst", "nn/functions/drop/dropout.rst", "nn/functions/drop/dropout1d.rst", "nn/functions/drop/dropout2d.rst", "nn/functions/drop/dropout3d.rst", "nn/functions/drop/index.rst", "nn/functions/index.rst", "nn/functions/linear/bilinear.rst", "nn/functions/linear/index.rst", "nn/functions/linear/linear.rst", "nn/functions/loss/binary_cross_entropy.rst", "nn/functions/loss/cross_entropy.rst", "nn/functions/loss/huber_loss.rst", "nn/functions/loss/index.rst", "nn/functions/loss/mse_loss.rst", "nn/functions/loss/nll_loss.rst", "nn/functions/norm/batch_norm.rst", "nn/functions/norm/index.rst", "nn/functions/norm/instance_norm.rst", "nn/functions/norm/layer_norm.rst", "nn/functions/pool/adaptive_avg_pool1d.rst", "nn/functions/pool/adaptive_avg_pool2d.rst", "nn/functions/pool/adaptive_avg_pool3d.rst", "nn/functions/pool/avg_pool1d.rst", "nn/functions/pool/avg_pool2d.rst", "nn/functions/pool/avg_pool3d.rst", "nn/functions/pool/index.rst", "nn/functions/pool/max_pool1d.rst", "nn/functions/pool/max_pool2d.rst", "nn/functions/pool/max_pool3d.rst", "nn/functions/util/index.rst", "nn/functions/util/interpolate.rst", "nn/functions/util/rotate.rst", "nn/fused/ConvBNReLU1d.rst", "nn/fused/ConvBNReLU2d.rst", "nn/fused/ConvBNReLU3d.rst", "nn/fused/DepthSeparableConv1d.rst", "nn/fused/DepthSeparableConv2d.rst", "nn/fused/DepthSeparableConv3d.rst", "nn/fused/SEModule.rst", "nn/fused/SelectiveKernel.rst", "nn/fused/index.rst", "nn/init/constant.rst", "nn/init/index.rst", "nn/init/kaiming_normal.rst", "nn/init/kaiming_uniform.rst", "nn/init/normal.rst", "nn/init/uniform.rst", "nn/init/xavier_normal.rst", "nn/init/xavier_uniform.rst", "nn/modules/activation/ELU.rst", "nn/modules/activation/GELU.rst", "nn/modules/activation/HardSigmoid.rst", "nn/modules/activation/HardSwish.rst", "nn/modules/activation/LeakyReLU.rst", "nn/modules/activation/ReLU.rst", "nn/modules/activation/ReLU6.rst", "nn/modules/activation/SELU.rst", "nn/modules/activation/Sigmoid.rst", "nn/modules/activation/Softmax.rst", "nn/modules/activation/Swish.rst", "nn/modules/activation/Tanh.rst", "nn/modules/activation/index.rst", "nn/modules/conv/Conv1d.rst", "nn/modules/conv/Conv2d.rst", "nn/modules/conv/Conv3d.rst", "nn/modules/conv/index.rst", "nn/modules/drop/AlphaDropout.rst", "nn/modules/drop/Dropout.rst", "nn/modules/drop/Dropout1d.rst", "nn/modules/drop/Dropout2d.rst", "nn/modules/drop/Dropout3d.rst", "nn/modules/drop/index.rst", "nn/modules/index.rst", "nn/modules/linear/Bilinear.rst", "nn/modules/linear/Identity.rst", "nn/modules/linear/Linear.rst", "nn/modules/linear/index.rst", "nn/modules/loss/BCELoss.rst", "nn/modules/loss/CrossEntropyLoss.rst", "nn/modules/loss/HuberLoss.rst", "nn/modules/loss/MSELoss.rst", "nn/modules/loss/NLLLoss.rst", "nn/modules/loss/index.rst", "nn/modules/norm/BatchNorm1d.rst", "nn/modules/norm/BatchNorm2d.rst", "nn/modules/norm/BatchNorm3d.rst", "nn/modules/norm/InstanceNorm1d.rst", "nn/modules/norm/InstanceNorm2d.rst", "nn/modules/norm/InstanceNorm3d.rst", "nn/modules/norm/LayerNorm.rst", "nn/modules/norm/index.rst", "nn/modules/pool/AdaptiveAvgPool1d.rst", "nn/modules/pool/AdaptiveAvgPool2d.rst", "nn/modules/pool/AdaptiveAvgPool3d.rst", "nn/modules/pool/AvgPool1d.rst", "nn/modules/pool/AvgPool2d.rst", "nn/modules/pool/AvgPool3d.rst", "nn/modules/pool/MaxPool1d.rst", "nn/modules/pool/MaxPool2d.rst", "nn/modules/pool/MaxPool3d.rst", "nn/modules/pool/index.rst", "nn/modules/vision/Upsample.rst", "nn/modules/vision/index.rst", "nn/nn.rst", "optim/Optimizer.rst", "optim/optim.rst", "optim/optimizers/ASGD.rst", "optim/optimizers/Adadelta.rst", "optim/optimizers/Adagrad.rst", "optim/optimizers/Adam.rst", "optim/optimizers/AdamW.rst", "optim/optimizers/Adamax.rst", "optim/optimizers/NAdam.rst", "optim/optimizers/RAdam.rst", "optim/optimizers/RMSprop.rst", "optim/optimizers/Rprop.rst", "optim/optimizers/SGD.rst", "optim/optimizers/index.rst", "others/grad_enabled.rst", "others/newaxis.rst", "others/no_grad.rst", "others/register_model.rst", "others/types.rst", "random/functions/bernoulli.rst", "random/functions/index.rst", "random/functions/rand.rst", "random/functions/randint.rst", "random/functions/randn.rst", "random/functions/seed.rst", "random/functions/uniform.rst", "random/random.rst", "tensor/Tensor_.rst", "tensor/operations/bfunc/add.rst", "tensor/operations/bfunc/div.rst", "tensor/operations/bfunc/dot.rst", "tensor/operations/bfunc/inner.rst", "tensor/operations/bfunc/matmul.rst", "tensor/operations/bfunc/maximum.rst", "tensor/operations/bfunc/minimum.rst", "tensor/operations/bfunc/mul.rst", "tensor/operations/bfunc/outer.rst", "tensor/operations/bfunc/power.rst", "tensor/operations/bfunc/sub.rst", "tensor/operations/gfunc/arange.rst", "tensor/operations/gfunc/diag.rst", "tensor/operations/gfunc/empty.rst", "tensor/operations/gfunc/empty_like.rst", "tensor/operations/gfunc/eye.rst", "tensor/operations/gfunc/ones.rst", "tensor/operations/gfunc/ones_like.rst", "tensor/operations/gfunc/zeros.rst", "tensor/operations/gfunc/zeros_like.rst", "tensor/operations/index.rst", "tensor/operations/ufunc/abs.rst", "tensor/operations/ufunc/arccos.rst", "tensor/operations/ufunc/arcsin.rst", "tensor/operations/ufunc/arctan.rst", "tensor/operations/ufunc/clip.rst", "tensor/operations/ufunc/cos.rst", "tensor/operations/ufunc/cosh.rst", "tensor/operations/ufunc/cube.rst", "tensor/operations/ufunc/exp.rst", "tensor/operations/ufunc/log.rst", "tensor/operations/ufunc/max.rst", "tensor/operations/ufunc/mean.rst", "tensor/operations/ufunc/min.rst", "tensor/operations/ufunc/reciprocal.rst", "tensor/operations/ufunc/sign.rst", "tensor/operations/ufunc/sin.rst", "tensor/operations/ufunc/sinh.rst", "tensor/operations/ufunc/sqrt.rst", "tensor/operations/ufunc/square.rst", "tensor/operations/ufunc/sum.rst", "tensor/operations/ufunc/tan.rst", "tensor/operations/ufunc/tanh.rst", "tensor/operations/ufunc/trace.rst", "tensor/operations/ufunc/transpose.rst", "tensor/operations/ufunc/var.rst", "tensor/tensor.rst", "tensor/utilities/concatenate.rst", "tensor/utilities/flatten.rst", "tensor/utilities/hstack.rst", "tensor/utilities/index.rst", "tensor/utilities/meshgrid.rst", "tensor/utilities/pad.rst", "tensor/utilities/ravel.rst", "tensor/utilities/repeat.rst", "tensor/utilities/reshape.rst", "tensor/utilities/squeeze.rst", "tensor/utilities/stack.rst", "tensor/utilities/tile.rst", "tensor/utilities/unsqueeze.rst", "tensor/utilities/vstack.rst", "transforms/Compose.rst", "transforms/ToTensor.rst", "transforms/image/CenterCrop.rst", "transforms/image/Normalize.rst", "transforms/image/RandomCrop.rst", "transforms/image/RandomGrayscale.rst", "transforms/image/RandomHorizontalFlip.rst", "transforms/image/RandomRotation.rst", "transforms/image/RandomVerticalFlip.rst", "transforms/image/Resize.rst", "transforms/image/index.rst", "transforms/transforms.rst"], "indexentries": {"abs() (in module lucid)": [[293, "lucid.abs", false]], "adadelta (class in lucid.optim)": [[247, "lucid.optim.Adadelta", false]], "adagrad (class in lucid.optim)": [[248, "lucid.optim.Adagrad", false]], "adam (class in lucid.optim)": [[249, "lucid.optim.Adam", false]], "adamax (class in lucid.optim)": [[251, "lucid.optim.Adamax", false]], "adamw (class in lucid.optim)": [[250, "lucid.optim.AdamW", false]], "adaptive_avg_pool1d() (in module lucid.nn.functional)": [[159, "lucid.nn.functional.adaptive_avg_pool1d", false]], "adaptive_avg_pool2d() (in module lucid.nn.functional)": [[160, "lucid.nn.functional.adaptive_avg_pool2d", false]], "adaptive_avg_pool3d() (in module lucid.nn.functional)": [[161, "lucid.nn.functional.adaptive_avg_pool3d", false]], "adaptiveavgpool1d (class in lucid.nn)": [[231, "lucid.nn.AdaptiveAvgPool1d", false]], "adaptiveavgpool2d (class in lucid.nn)": [[232, "lucid.nn.AdaptiveAvgPool2d", false]], "adaptiveavgpool3d (class in lucid.nn)": [[233, "lucid.nn.AdaptiveAvgPool3d", false]], "add() (in module lucid)": [[272, "lucid.add", false]], "alexnet (class in lucid.models)": [[23, "lucid.models.AlexNet", false]], "alexnet() (in module lucid.models)": [[24, "lucid.models.alexnet", false]], "alpha_dropout() (in module lucid.nn.functional)": [[139, "lucid.nn.functional.alpha_dropout", false]], "alphadropout (class in lucid.nn)": [[206, "lucid.nn.AlphaDropout", false]], "arange() (in module lucid)": [[283, "lucid.arange", false]], "arccos() (in module lucid)": [[294, "lucid.arccos", false]], "arcsin() (in module lucid)": [[295, "lucid.arcsin", false]], "arctan() (in module lucid)": [[296, "lucid.arctan", false]], "asgd (class in lucid.optim)": [[246, "lucid.optim.ASGD", false]], "avg_pool1d() (in module lucid.nn.functional)": [[162, "lucid.nn.functional.avg_pool1d", false]], "avg_pool2d() (in module lucid.nn.functional)": [[163, "lucid.nn.functional.avg_pool2d", false]], "avg_pool3d() (in module lucid.nn.functional)": [[164, "lucid.nn.functional.avg_pool3d", false]], "avgpool1d (class in lucid.nn)": [[234, "lucid.nn.AvgPool1d", false]], "avgpool2d (class in lucid.nn)": [[235, "lucid.nn.AvgPool2d", false]], "avgpool3d (class in lucid.nn)": [[236, "lucid.nn.AvgPool3d", false]], "batch_norm() (in module lucid.nn.functional)": [[155, "lucid.nn.functional.batch_norm", false]], "batchnorm1d (class in lucid.nn)": [[223, "lucid.nn.BatchNorm1d", false]], "batchnorm2d (class in lucid.nn)": [[224, "lucid.nn.BatchNorm2d", false]], "batchnorm3d (class in lucid.nn)": [[225, "lucid.nn.BatchNorm3d", false]], "bceloss (class in lucid.nn)": [[217, "lucid.nn.BCELoss", false]], "bernoulli() (in module lucid.random)": [[263, "lucid.random.bernoulli", false]], "bilinear (class in lucid.nn)": [[213, "lucid.nn.Bilinear", false]], "bilinear() (in module lucid.nn.functional)": [[146, "lucid.nn.functional.bilinear", false]], "binary_cross_entropy() (in module lucid.nn.functional)": [[149, "lucid.nn.functional.binary_cross_entropy", false]], "buffer (class in lucid.nn)": [[116, "lucid.nn.Buffer", false]], "centercrop (class in lucid.transforms)": [[335, "lucid.transforms.CenterCrop", false]], "cholesky() (in module lucid.linalg)": [[12, "lucid.linalg.cholesky", false]], "cifar10 (class in lucid.datasets)": [[5, "lucid.datasets.CIFAR10", false]], "cifar100 (class in lucid.datasets)": [[6, "lucid.datasets.CIFAR100", false]], "clip() (in module lucid)": [[297, "lucid.clip", false]], "compose (class in lucid.transforms)": [[333, "lucid.transforms.Compose", false]], "concatdataset (class in lucid.data)": [[0, "lucid.data.ConcatDataset", false]], "concatenate() (in module lucid)": [[319, "lucid.concatenate", false]], "constant() (in module lucid.nn.init)": [[181, "lucid.nn.init.constant", false]], "conv1d (class in lucid.nn)": [[202, "lucid.nn.Conv1d", false]], "conv1d() (in module lucid.nn.functional)": [[134, "lucid.nn.functional.conv1d", false]], "conv2d (class in lucid.nn)": [[203, "lucid.nn.Conv2d", false]], "conv2d() (in module lucid.nn.functional)": [[135, "lucid.nn.functional.conv2d", false]], "conv3d (class in lucid.nn)": [[204, "lucid.nn.Conv3d", false]], "conv3d() (in module lucid.nn.functional)": [[136, "lucid.nn.functional.conv3d", false]], "convbnrelu1d (class in lucid.nn)": [[172, "lucid.nn.ConvBNReLU1d", false]], "convbnrelu2d (class in lucid.nn)": [[173, "lucid.nn.ConvBNReLU2d", false]], "convbnrelu3d (class in lucid.nn)": [[174, "lucid.nn.ConvBNReLU3d", false]], "cos() (in module lucid)": [[298, "lucid.cos", false]], "cosh() (in module lucid)": [[299, "lucid.cosh", false]], "cross_entropy() (in module lucid.nn.functional)": [[150, "lucid.nn.functional.cross_entropy", false]], "crossentropyloss (class in lucid.nn)": [[218, "lucid.nn.CrossEntropyLoss", false]], "cube() (in module lucid)": [[300, "lucid.cube", false]], "dataloader (class in lucid.data)": [[1, "lucid.data.DataLoader", false]], "dataset (class in lucid.data)": [[2, "lucid.data.Dataset", false]], "densenet (class in lucid.models)": [[25, "lucid.models.DenseNet", false]], "densenet_121() (in module lucid.models)": [[26, "lucid.models.densenet_121", false]], "densenet_169() (in module lucid.models)": [[27, "lucid.models.densenet_169", false]], "densenet_201() (in module lucid.models)": [[28, "lucid.models.densenet_201", false]], "densenet_264() (in module lucid.models)": [[29, "lucid.models.densenet_264", false]], "depthseparableconv1d (class in lucid.nn)": [[175, "lucid.nn.DepthSeparableConv1d", false]], "depthseparableconv2d (class in lucid.nn)": [[176, "lucid.nn.DepthSeparableConv2d", false]], "depthseparableconv3d (class in lucid.nn)": [[177, "lucid.nn.DepthSeparableConv3d", false]], "det() (in module lucid.linalg)": [[13, "lucid.linalg.det", false]], "diag() (in module lucid)": [[284, "lucid.diag", false]], "div() (in module lucid)": [[273, "lucid.div", false]], "dot() (in module lucid)": [[274, "lucid.dot", false]], "dropout (class in lucid.nn)": [[207, "lucid.nn.Dropout", false]], "dropout() (in module lucid.nn.functional)": [[140, "lucid.nn.functional.dropout", false]], "dropout1d (class in lucid.nn)": [[208, "lucid.nn.Dropout1d", false]], "dropout1d() (in module lucid.nn.functional)": [[141, "lucid.nn.functional.dropout1d", false]], "dropout2d (class in lucid.nn)": [[209, "lucid.nn.Dropout2d", false]], "dropout2d() (in module lucid.nn.functional)": [[142, "lucid.nn.functional.dropout2d", false]], "dropout3d (class in lucid.nn)": [[210, "lucid.nn.Dropout3d", false]], "dropout3d() (in module lucid.nn.functional)": [[143, "lucid.nn.functional.dropout3d", false]], "efficientnet (class in lucid.models)": [[30, "lucid.models.EfficientNet", false]], "efficientnet_b0() (in module lucid.models)": [[32, "lucid.models.efficientnet_b0", false]], "efficientnet_b1() (in module lucid.models)": [[33, "lucid.models.efficientnet_b1", false]], "efficientnet_b2() (in module lucid.models)": [[34, "lucid.models.efficientnet_b2", false]], "efficientnet_b3() (in module lucid.models)": [[35, "lucid.models.efficientnet_b3", false]], "efficientnet_b4() (in module lucid.models)": [[36, "lucid.models.efficientnet_b4", false]], "efficientnet_b5() (in module lucid.models)": [[37, "lucid.models.efficientnet_b5", false]], "efficientnet_b6() (in module lucid.models)": [[38, "lucid.models.efficientnet_b6", false]], "efficientnet_b7() (in module lucid.models)": [[39, "lucid.models.efficientnet_b7", false]], "efficientnet_v2 (class in lucid.models)": [[31, "lucid.models.EfficientNet_V2", false]], "efficientnet_v2_l() (in module lucid.models)": [[40, "lucid.models.efficientnet_v2_l", false]], "efficientnet_v2_m() (in module lucid.models)": [[41, "lucid.models.efficientnet_v2_m", false]], "efficientnet_v2_s() (in module lucid.models)": [[42, "lucid.models.efficientnet_v2_s", false]], "efficientnet_v2_xl() (in module lucid.models)": [[43, "lucid.models.efficientnet_v2_xl", false]], "eig() (in module lucid.linalg)": [[14, "lucid.linalg.eig", false]], "elu (class in lucid.nn)": [[189, "lucid.nn.ELU", false]], "elu() (in module lucid.nn.functional)": [[125, "lucid.nn.functional.elu", false]], "empty() (in module lucid)": [[285, "lucid.empty", false]], "empty_like() (in module lucid)": [[286, "lucid.empty_like", false]], "exp() (in module lucid)": [[301, "lucid.exp", false]], "eye() (in module lucid)": [[287, "lucid.eye", false]], "fashionmnist (class in lucid.datasets)": [[7, "lucid.datasets.FashionMNIST", false]], "flatten() (in module lucid)": [[320, "lucid.flatten", false]], "gelu (class in lucid.nn)": [[190, "lucid.nn.GELU", false]], "gelu() (in module lucid.nn.functional)": [[126, "lucid.nn.functional.gelu", false]], "grad_enabled() (in module lucid)": [[258, "lucid.grad_enabled", false]], "hardsigmoid (class in lucid.nn)": [[191, "lucid.nn.HardSigmoid", false]], "hardswish (class in lucid.nn)": [[192, "lucid.nn.HardSwish", false]], "hstack() (in module lucid)": [[321, "lucid.hstack", false]], "huber_loss() (in module lucid.nn.functional)": [[151, "lucid.nn.functional.huber_loss", false]], "huberloss (class in lucid.nn)": [[219, "lucid.nn.HuberLoss", false]], "identity (class in lucid.nn)": [[214, "lucid.nn.Identity", false]], "inception (class in lucid.models)": [[44, "lucid.models.Inception", false]], "inception_resnet_v1() (in module lucid.models)": [[49, "lucid.models.inception_resnet_v1", false]], "inception_resnet_v2() (in module lucid.models)": [[50, "lucid.models.inception_resnet_v2", false]], "inception_v1() (in module lucid.models)": [[45, "lucid.models.inception_v1", false]], "inception_v3() (in module lucid.models)": [[46, "lucid.models.inception_v3", false]], "inception_v4() (in module lucid.models)": [[47, "lucid.models.inception_v4", false]], "inceptionresnet (class in lucid.models)": [[48, "lucid.models.InceptionResNet", false]], "inner() (in module lucid)": [[275, "lucid.inner", false]], "instance_norm() (in module lucid.nn.functional)": [[157, "lucid.nn.functional.instance_norm", false]], "instancenorm1d (class in lucid.nn)": [[226, "lucid.nn.InstanceNorm1d", false]], "instancenorm2d (class in lucid.nn)": [[227, "lucid.nn.InstanceNorm2d", false]], "instancenorm3d (class in lucid.nn)": [[228, "lucid.nn.InstanceNorm3d", false]], "interpolate() (in module lucid.nn.functional)": [[170, "lucid.nn.functional.interpolate", false]], "inv() (in module lucid.linalg)": [[16, "lucid.linalg.inv", false]], "kaiming_normal() (in module lucid.nn.init)": [[183, "lucid.nn.init.kaiming_normal", false]], "kaiming_uniform() (in module lucid.nn.init)": [[184, "lucid.nn.init.kaiming_uniform", false]], "layer_norm() (in module lucid.nn.functional)": [[158, "lucid.nn.functional.layer_norm", false]], "layernorm (class in lucid.nn)": [[229, "lucid.nn.LayerNorm", false]], "leaky_relu() (in module lucid.nn.functional)": [[128, "lucid.nn.functional.leaky_relu", false]], "leakyrelu (class in lucid.nn)": [[193, "lucid.nn.LeakyReLU", false]], "lenet (class in lucid.models)": [[52, "lucid.models.LeNet", false]], "lenet_1() (in module lucid.models)": [[53, "lucid.models.lenet_1", false]], "lenet_4() (in module lucid.models)": [[54, "lucid.models.lenet_4", false]], "lenet_5() (in module lucid.models)": [[55, "lucid.models.lenet_5", false]], "linear (class in lucid.nn)": [[215, "lucid.nn.Linear", false]], "linear() (in module lucid.nn.functional)": [[148, "lucid.nn.functional.linear", false]], "log() (in module lucid)": [[302, "lucid.log", false]], "lucid": [[10, "module-lucid", false]], "matmul() (in module lucid)": [[276, "lucid.matmul", false]], "matrix_power() (in module lucid.linalg)": [[17, "lucid.linalg.matrix_power", false]], "max() (in module lucid)": [[303, "lucid.max", false]], "max_pool1d() (in module lucid.nn.functional)": [[166, "lucid.nn.functional.max_pool1d", false]], "max_pool2d() (in module lucid.nn.functional)": [[167, "lucid.nn.functional.max_pool2d", false]], "max_pool3d() (in module lucid.nn.functional)": [[168, "lucid.nn.functional.max_pool3d", false]], "maximum() (in module lucid)": [[277, "lucid.maximum", false]], "maxpool1d (class in lucid.nn)": [[237, "lucid.nn.MaxPool1d", false]], "maxpool2d (class in lucid.nn)": [[238, "lucid.nn.MaxPool2d", false]], "maxpool3d (class in lucid.nn)": [[239, "lucid.nn.MaxPool3d", false]], "mean() (in module lucid)": [[304, "lucid.mean", false]], "meshgrid() (in module lucid)": [[323, "lucid.meshgrid", false]], "min() (in module lucid)": [[305, "lucid.min", false]], "minimum() (in module lucid)": [[278, "lucid.minimum", false]], "mnist (class in lucid.datasets)": [[8, "lucid.datasets.MNIST", false]], "mobilenet (class in lucid.models)": [[56, "lucid.models.MobileNet", false]], "mobilenet() (in module lucid.models)": [[59, "lucid.models.mobilenet", false]], "mobilenet_v2 (class in lucid.models)": [[57, "lucid.models.MobileNet_V2", false]], "mobilenet_v2() (in module lucid.models)": [[60, "lucid.models.mobilenet_v2", false]], "mobilenet_v3 (class in lucid.models)": [[58, "lucid.models.MobileNet_V3", false]], "mobilenet_v3_large() (in module lucid.models)": [[61, "lucid.models.mobilenet_v3_large", false]], "mobilenet_v3_small() (in module lucid.models)": [[62, "lucid.models.mobilenet_v3_small", false]], "module": [[10, "module-lucid", false]], "module (class in lucid.nn)": [[117, "lucid.nn.Module", false]], "moduledict (class in lucid.nn)": [[119, "lucid.nn.ModuleDict", false]], "modulelist (class in lucid.nn)": [[120, "lucid.nn.ModuleList", false]], "mse_loss() (in module lucid.nn.functional)": [[153, "lucid.nn.functional.mse_loss", false]], "mseloss (class in lucid.nn)": [[220, "lucid.nn.MSELoss", false]], "mul() (in module lucid)": [[279, "lucid.mul", false]], "nadam (class in lucid.optim)": [[252, "lucid.optim.NAdam", false]], "nll_loss() (in module lucid.nn.functional)": [[154, "lucid.nn.functional.nll_loss", false]], "nllloss (class in lucid.nn)": [[221, "lucid.nn.NLLLoss", false]], "no_grad() (in module lucid)": [[260, "lucid.no_grad", false]], "norm() (in module lucid.linalg)": [[18, "lucid.linalg.norm", false]], "normal() (in module lucid.nn.init)": [[185, "lucid.nn.init.normal", false]], "normalize (class in lucid.transforms)": [[336, "lucid.transforms.Normalize", false]], "ones() (in module lucid)": [[288, "lucid.ones", false]], "ones_like() (in module lucid)": [[289, "lucid.ones_like", false]], "optimizer (class in lucid.optim)": [[244, "lucid.optim.Optimizer", false]], "outer() (in module lucid)": [[280, "lucid.outer", false]], "pad() (in module lucid)": [[324, "lucid.pad", false]], "parameter (class in lucid.nn)": [[118, "lucid.nn.Parameter", false]], "parameterdict (class in lucid.nn)": [[121, "lucid.nn.ParameterDict", false]], "parameterlist (class in lucid.nn)": [[122, "lucid.nn.ParameterList", false]], "pinv() (in module lucid.linalg)": [[19, "lucid.linalg.pinv", false]], "power() (in module lucid)": [[281, "lucid.power", false]], "qr() (in module lucid.linalg)": [[20, "lucid.linalg.qr", false]], "radam (class in lucid.optim)": [[253, "lucid.optim.RAdam", false]], "rand() (in module lucid.random)": [[265, "lucid.random.rand", false]], "randint() (in module lucid.random)": [[266, "lucid.random.randint", false]], "randn() (in module lucid.random)": [[267, "lucid.random.randn", false]], "randomcrop (class in lucid.transforms)": [[337, "lucid.transforms.RandomCrop", false]], "randomgrayscale (class in lucid.transforms)": [[338, "lucid.transforms.RandomGrayscale", false]], "randomhorizontalflip (class in lucid.transforms)": [[339, "lucid.transforms.RandomHorizontalFlip", false]], "randomrotation (class in lucid.transforms)": [[340, "lucid.transforms.RandomRotation", false]], "randomverticalflip (class in lucid.transforms)": [[341, "lucid.transforms.RandomVerticalFlip", false]], "ravel() (in module lucid)": [[325, "lucid.ravel", false]], "reciprocal() (in module lucid)": [[306, "lucid.reciprocal", false]], "register_model() (in module lucid)": [[261, "lucid.register_model", false]], "relu (class in lucid.nn)": [[194, "lucid.nn.ReLU", false]], "relu() (in module lucid.nn.functional)": [[129, "lucid.nn.functional.relu", false]], "relu6 (class in lucid.nn)": [[195, "lucid.nn.ReLU6", false]], "repeat() (in module lucid)": [[326, "lucid.repeat", false]], "reshape() (in module lucid)": [[327, "lucid.reshape", false]], "resize (class in lucid.transforms)": [[342, "lucid.transforms.Resize", false]], "resnest (class in lucid.models)": [[63, "lucid.models.ResNeSt", false]], "resnest_101() (in module lucid.models)": [[64, "lucid.models.resnest_101", false]], "resnest_14() (in module lucid.models)": [[65, "lucid.models.resnest_14", false]], "resnest_200() (in module lucid.models)": [[66, "lucid.models.resnest_200", false]], "resnest_26() (in module lucid.models)": [[67, "lucid.models.resnest_26", false]], "resnest_269() (in module lucid.models)": [[68, "lucid.models.resnest_269", false]], "resnest_50() (in module lucid.models)": [[69, "lucid.models.resnest_50", false]], "resnest_50_1s4x24d() (in module lucid.models)": [[70, "lucid.models.resnest_50_1s4x24d", false]], "resnest_50_4s2x40d() (in module lucid.models)": [[71, "lucid.models.resnest_50_4s2x40d", false]], "resnet (class in lucid.models)": [[72, "lucid.models.ResNet", false]], "resnet_1001() (in module lucid.models)": [[73, "lucid.models.resnet_1001", false]], "resnet_101() (in module lucid.models)": [[74, "lucid.models.resnet_101", false]], "resnet_152() (in module lucid.models)": [[75, "lucid.models.resnet_152", false]], "resnet_18() (in module lucid.models)": [[76, "lucid.models.resnet_18", false]], "resnet_200() (in module lucid.models)": [[77, "lucid.models.resnet_200", false]], "resnet_269() (in module lucid.models)": [[78, "lucid.models.resnet_269", false]], "resnet_34() (in module lucid.models)": [[79, "lucid.models.resnet_34", false]], "resnet_50() (in module lucid.models)": [[80, "lucid.models.resnet_50", false]], "resnext (class in lucid.models)": [[83, "lucid.models.ResNeXt", false]], "resnext_101_32x16d() (in module lucid.models)": [[84, "lucid.models.resnext_101_32x16d", false]], "resnext_101_32x32d() (in module lucid.models)": [[85, "lucid.models.resnext_101_32x32d", false]], "resnext_101_32x4d() (in module lucid.models)": [[86, "lucid.models.resnext_101_32x4d", false]], "resnext_101_32x8d() (in module lucid.models)": [[87, "lucid.models.resnext_101_32x8d", false]], "resnext_101_64x4d() (in module lucid.models)": [[88, "lucid.models.resnext_101_64x4d", false]], "resnext_50_32x4d() (in module lucid.models)": [[89, "lucid.models.resnext_50_32x4d", false]], "rmsprop (class in lucid.optim)": [[254, "lucid.optim.RMSprop", false]], "rotate() (in module lucid.nn.functional)": [[171, "lucid.nn.functional.rotate", false]], "rprop (class in lucid.optim)": [[255, "lucid.optim.Rprop", false]], "se_resnet_101() (in module lucid.models)": [[91, "lucid.models.se_resnet_101", false]], "se_resnet_152() (in module lucid.models)": [[92, "lucid.models.se_resnet_152", false]], "se_resnet_18() (in module lucid.models)": [[93, "lucid.models.se_resnet_18", false]], "se_resnet_34() (in module lucid.models)": [[94, "lucid.models.se_resnet_34", false]], "se_resnet_50() (in module lucid.models)": [[95, "lucid.models.se_resnet_50", false]], "se_resnext_101_32x4d() (in module lucid.models)": [[96, "lucid.models.se_resnext_101_32x4d", false]], "se_resnext_101_32x8d() (in module lucid.models)": [[97, "lucid.models.se_resnext_101_32x8d", false]], "se_resnext_101_64x4d() (in module lucid.models)": [[98, "lucid.models.se_resnext_101_64x4d", false]], "se_resnext_50_32x4d() (in module lucid.models)": [[99, "lucid.models.se_resnext_50_32x4d", false]], "seed() (in module lucid.random)": [[268, "lucid.random.seed", false]], "selectivekernel (class in lucid.nn)": [[179, "lucid.nn.SelectiveKernel", false]], "selu (class in lucid.nn)": [[196, "lucid.nn.SELU", false]], "selu() (in module lucid.nn.functional)": [[130, "lucid.nn.functional.selu", false]], "semodule (class in lucid.nn)": [[178, "lucid.nn.SEModule", false]], "senet (class in lucid.models)": [[90, "lucid.models.SENet", false]], "sequential (class in lucid.nn)": [[123, "lucid.nn.Sequential", false]], "sgd (class in lucid.optim)": [[256, "lucid.optim.SGD", false]], "sigmoid (class in lucid.nn)": [[197, "lucid.nn.Sigmoid", false]], "sigmoid() (in module lucid.nn.functional)": [[131, "lucid.nn.functional.sigmoid", false]], "sign() (in module lucid)": [[307, "lucid.sign", false]], "sin() (in module lucid)": [[308, "lucid.sin", false]], "sinh() (in module lucid)": [[309, "lucid.sinh", false]], "sk_resnet_18() (in module lucid.models)": [[101, "lucid.models.sk_resnet_18", false]], "sk_resnet_34() (in module lucid.models)": [[102, "lucid.models.sk_resnet_34", false]], "sk_resnet_50() (in module lucid.models)": [[103, "lucid.models.sk_resnet_50", false]], "sk_resnext_50_32x4d() (in module lucid.models)": [[104, "lucid.models.sk_resnext_50_32x4d", false]], "sknet (class in lucid.models)": [[100, "lucid.models.SKNet", false]], "softmax (class in lucid.nn)": [[198, "lucid.nn.Softmax", false]], "softmax() (in module lucid.nn.functional)": [[132, "lucid.nn.functional.softmax", false]], "solve() (in module lucid.linalg)": [[21, "lucid.linalg.solve", false]], "sqrt() (in module lucid)": [[310, "lucid.sqrt", false]], "square() (in module lucid)": [[311, "lucid.square", false]], "squeeze() (in module lucid)": [[328, "lucid.squeeze", false]], "stack() (in module lucid)": [[329, "lucid.stack", false]], "sub() (in module lucid)": [[282, "lucid.sub", false]], "sum() (in module lucid)": [[312, "lucid.sum", false]], "summarize() (in module lucid.models)": [[115, "lucid.models.summarize", false]], "svd() (in module lucid.linalg)": [[22, "lucid.linalg.svd", false]], "swish (class in lucid.nn)": [[199, "lucid.nn.Swish", false]], "tan() (in module lucid)": [[313, "lucid.tan", false]], "tanh (class in lucid.nn)": [[200, "lucid.nn.Tanh", false]], "tanh() (in module lucid)": [[314, "lucid.tanh", false]], "tanh() (in module lucid.nn.functional)": [[133, "lucid.nn.functional.tanh", false]], "tensor (class in lucid)": [[271, "lucid.Tensor", false]], "tensor() (in module lucid)": [[318, "lucid.tensor", false]], "tile() (in module lucid)": [[330, "lucid.tile", false]], "totensor (class in lucid.transforms)": [[334, "lucid.transforms.ToTensor", false]], "trace() (in module lucid)": [[315, "lucid.trace", false]], "transpose() (in module lucid)": [[316, "lucid.transpose", false]], "unfold() (in module lucid.nn.functional)": [[138, "lucid.nn.functional.unfold", false]], "uniform() (in module lucid.nn.init)": [[186, "lucid.nn.init.uniform", false]], "uniform() (in module lucid.random)": [[269, "lucid.random.uniform", false]], "unsqueeze() (in module lucid)": [[331, "lucid.unsqueeze", false]], "upsample (class in lucid.nn)": [[241, "lucid.nn.Upsample", false]], "var() (in module lucid)": [[317, "lucid.var", false]], "vggnet (class in lucid.models)": [[105, "lucid.models.VGGNet", false]], "vggnet_11() (in module lucid.models)": [[106, "lucid.models.vggnet_11", false]], "vggnet_13() (in module lucid.models)": [[107, "lucid.models.vggnet_13", false]], "vggnet_16() (in module lucid.models)": [[108, "lucid.models.vggnet_16", false]], "vggnet_19() (in module lucid.models)": [[109, "lucid.models.vggnet_19", false]], "vstack() (in module lucid)": [[332, "lucid.vstack", false]], "wide_resnet_101() (in module lucid.models)": [[81, "lucid.models.wide_resnet_101", false]], "wide_resnet_50() (in module lucid.models)": [[82, "lucid.models.wide_resnet_50", false]], "xavier_normal() (in module lucid.nn.init)": [[187, "lucid.nn.init.xavier_normal", false]], "xavier_uniform() (in module lucid.nn.init)": [[188, "lucid.nn.init.xavier_uniform", false]], "xception (class in lucid.models)": [[110, "lucid.models.Xception", false]], "xception() (in module lucid.models)": [[111, "lucid.models.xception", false]], "zeros() (in module lucid)": [[290, "lucid.zeros", false]], "zeros_like() (in module lucid)": [[291, "lucid.zeros_like", false]], "zfnet (class in lucid.models)": [[112, "lucid.models.ZFNet", false]], "zfnet() (in module lucid.models)": [[113, "lucid.models.zfnet", false]]}, "objects": {"": [[10, 0, 0, "-", "lucid"]], "lucid": [[271, 1, 1, "", "Tensor"], [293, 2, 1, "", "abs"], [272, 2, 1, "", "add"], [283, 2, 1, "", "arange"], [294, 2, 1, "", "arccos"], [295, 2, 1, "", "arcsin"], [296, 2, 1, "", "arctan"], [297, 2, 1, "", "clip"], [319, 2, 1, "", "concatenate"], [298, 2, 1, "", "cos"], [299, 2, 1, "", "cosh"], [300, 2, 1, "", "cube"], [284, 2, 1, "", "diag"], [273, 2, 1, "", "div"], [274, 2, 1, "", "dot"], [285, 2, 1, "", "empty"], [286, 2, 1, "", "empty_like"], [301, 2, 1, "", "exp"], [287, 2, 1, "", "eye"], [320, 2, 1, "", "flatten"], [258, 2, 1, "", "grad_enabled"], [321, 2, 1, "", "hstack"], [275, 2, 1, "", "inner"], [302, 2, 1, "", "log"], [276, 2, 1, "", "matmul"], [303, 2, 1, "", "max"], [277, 2, 1, "", "maximum"], [304, 2, 1, "", "mean"], [323, 2, 1, "", "meshgrid"], [305, 2, 1, "", "min"], [278, 2, 1, "", "minimum"], [279, 2, 1, "", "mul"], [260, 2, 1, "", "no_grad"], [288, 2, 1, "", "ones"], [289, 2, 1, "", "ones_like"], [280, 2, 1, "", "outer"], [324, 2, 1, "", "pad"], [281, 2, 1, "", "power"], [325, 2, 1, "", "ravel"], [306, 2, 1, "", "reciprocal"], [261, 2, 1, "", "register_model"], [326, 2, 1, "", "repeat"], [327, 2, 1, "", "reshape"], [307, 2, 1, "", "sign"], [308, 2, 1, "", "sin"], [309, 2, 1, "", "sinh"], [310, 2, 1, "", "sqrt"], [311, 2, 1, "", "square"], [328, 2, 1, "", "squeeze"], [329, 2, 1, "", "stack"], [282, 2, 1, "", "sub"], [312, 2, 1, "", "sum"], [313, 2, 1, "", "tan"], [314, 2, 1, "", "tanh"], [318, 2, 1, "", "tensor"], [330, 2, 1, "", "tile"], [315, 2, 1, "", "trace"], [316, 2, 1, "", "transpose"], [331, 2, 1, "", "unsqueeze"], [317, 2, 1, "", "var"], [332, 2, 1, "", "vstack"], [290, 2, 1, "", "zeros"], [291, 2, 1, "", "zeros_like"]], "lucid.data": [[0, 1, 1, "", "ConcatDataset"], [1, 1, 1, "", "DataLoader"], [2, 1, 1, "", "Dataset"]], "lucid.datasets": [[5, 1, 1, "", "CIFAR10"], [6, 1, 1, "", "CIFAR100"], [7, 1, 1, "", "FashionMNIST"], [8, 1, 1, "", "MNIST"]], "lucid.linalg": [[12, 2, 1, "", "cholesky"], [13, 2, 1, "", "det"], [14, 2, 1, "", "eig"], [16, 2, 1, "", "inv"], [17, 2, 1, "", "matrix_power"], [18, 2, 1, "", "norm"], [19, 2, 1, "", "pinv"], [20, 2, 1, "", "qr"], [21, 2, 1, "", "solve"], [22, 2, 1, "", "svd"]], "lucid.models": [[23, 1, 1, "", "AlexNet"], [25, 1, 1, "", "DenseNet"], [30, 1, 1, "", "EfficientNet"], [31, 1, 1, "", "EfficientNet_V2"], [44, 1, 1, "", "Inception"], [48, 1, 1, "", "InceptionResNet"], [52, 1, 1, "", "LeNet"], [56, 1, 1, "", "MobileNet"], [57, 1, 1, "", "MobileNet_V2"], [58, 1, 1, "", "MobileNet_V3"], [63, 1, 1, "", "ResNeSt"], [83, 1, 1, "", "ResNeXt"], [72, 1, 1, "", "ResNet"], [90, 1, 1, "", "SENet"], [100, 1, 1, "", "SKNet"], [105, 1, 1, "", "VGGNet"], [110, 1, 1, "", "Xception"], [112, 1, 1, "", "ZFNet"], [24, 2, 1, "", "alexnet"], [26, 2, 1, "", "densenet_121"], [27, 2, 1, "", "densenet_169"], [28, 2, 1, "", "densenet_201"], [29, 2, 1, "", "densenet_264"], [32, 2, 1, "", "efficientnet_b0"], [33, 2, 1, "", "efficientnet_b1"], [34, 2, 1, "", "efficientnet_b2"], [35, 2, 1, "", "efficientnet_b3"], [36, 2, 1, "", "efficientnet_b4"], [37, 2, 1, "", "efficientnet_b5"], [38, 2, 1, "", "efficientnet_b6"], [39, 2, 1, "", "efficientnet_b7"], [40, 2, 1, "", "efficientnet_v2_l"], [41, 2, 1, "", "efficientnet_v2_m"], [42, 2, 1, "", "efficientnet_v2_s"], [43, 2, 1, "", "efficientnet_v2_xl"], [49, 2, 1, "", "inception_resnet_v1"], [50, 2, 1, "", "inception_resnet_v2"], [45, 2, 1, "", "inception_v1"], [46, 2, 1, "", "inception_v3"], [47, 2, 1, "", "inception_v4"], [53, 2, 1, "", "lenet_1"], [54, 2, 1, "", "lenet_4"], [55, 2, 1, "", "lenet_5"], [59, 2, 1, "", "mobilenet"], [60, 2, 1, "", "mobilenet_v2"], [61, 2, 1, "", "mobilenet_v3_large"], [62, 2, 1, "", "mobilenet_v3_small"], [64, 2, 1, "", "resnest_101"], [65, 2, 1, "", "resnest_14"], [66, 2, 1, "", "resnest_200"], [67, 2, 1, "", "resnest_26"], [68, 2, 1, "", "resnest_269"], [69, 2, 1, "", "resnest_50"], [70, 2, 1, "", "resnest_50_1s4x24d"], [71, 2, 1, "", "resnest_50_4s2x40d"], [73, 2, 1, "", "resnet_1001"], [74, 2, 1, "", "resnet_101"], [75, 2, 1, "", "resnet_152"], [76, 2, 1, "", "resnet_18"], [77, 2, 1, "", "resnet_200"], [78, 2, 1, "", "resnet_269"], [79, 2, 1, "", "resnet_34"], [80, 2, 1, "", "resnet_50"], [84, 2, 1, "", "resnext_101_32x16d"], [85, 2, 1, "", "resnext_101_32x32d"], [86, 2, 1, "", "resnext_101_32x4d"], [87, 2, 1, "", "resnext_101_32x8d"], [88, 2, 1, "", "resnext_101_64x4d"], [89, 2, 1, "", "resnext_50_32x4d"], [91, 2, 1, "", "se_resnet_101"], [92, 2, 1, "", "se_resnet_152"], [93, 2, 1, "", "se_resnet_18"], [94, 2, 1, "", "se_resnet_34"], [95, 2, 1, "", "se_resnet_50"], [96, 2, 1, "", "se_resnext_101_32x4d"], [97, 2, 1, "", "se_resnext_101_32x8d"], [98, 2, 1, "", "se_resnext_101_64x4d"], [99, 2, 1, "", "se_resnext_50_32x4d"], [101, 2, 1, "", "sk_resnet_18"], [102, 2, 1, "", "sk_resnet_34"], [103, 2, 1, "", "sk_resnet_50"], [104, 2, 1, "", "sk_resnext_50_32x4d"], [115, 2, 1, "", "summarize"], [106, 2, 1, "", "vggnet_11"], [107, 2, 1, "", "vggnet_13"], [108, 2, 1, "", "vggnet_16"], [109, 2, 1, "", "vggnet_19"], [81, 2, 1, "", "wide_resnet_101"], [82, 2, 1, "", "wide_resnet_50"], [111, 2, 1, "", "xception"], [113, 2, 1, "", "zfnet"]], "lucid.nn": [[231, 1, 1, "", "AdaptiveAvgPool1d"], [232, 1, 1, "", "AdaptiveAvgPool2d"], [233, 1, 1, "", "AdaptiveAvgPool3d"], [206, 1, 1, "", "AlphaDropout"], [234, 1, 1, "", "AvgPool1d"], [235, 1, 1, "", "AvgPool2d"], [236, 1, 1, "", "AvgPool3d"], [217, 1, 1, "", "BCELoss"], [223, 1, 1, "", "BatchNorm1d"], [224, 1, 1, "", "BatchNorm2d"], [225, 1, 1, "", "BatchNorm3d"], [213, 1, 1, "", "Bilinear"], [116, 1, 1, "", "Buffer"], [202, 1, 1, "", "Conv1d"], [203, 1, 1, "", "Conv2d"], [204, 1, 1, "", "Conv3d"], [172, 1, 1, "", "ConvBNReLU1d"], [173, 1, 1, "", "ConvBNReLU2d"], [174, 1, 1, "", "ConvBNReLU3d"], [218, 1, 1, "", "CrossEntropyLoss"], [175, 1, 1, "", "DepthSeparableConv1d"], [176, 1, 1, "", "DepthSeparableConv2d"], [177, 1, 1, "", "DepthSeparableConv3d"], [207, 1, 1, "", "Dropout"], [208, 1, 1, "", "Dropout1d"], [209, 1, 1, "", "Dropout2d"], [210, 1, 1, "", "Dropout3d"], [189, 1, 1, "", "ELU"], [190, 1, 1, "", "GELU"], [191, 1, 1, "", "HardSigmoid"], [192, 1, 1, "", "HardSwish"], [219, 1, 1, "", "HuberLoss"], [214, 1, 1, "", "Identity"], [226, 1, 1, "", "InstanceNorm1d"], [227, 1, 1, "", "InstanceNorm2d"], [228, 1, 1, "", "InstanceNorm3d"], [229, 1, 1, "", "LayerNorm"], [193, 1, 1, "", "LeakyReLU"], [215, 1, 1, "", "Linear"], [220, 1, 1, "", "MSELoss"], [237, 1, 1, "", "MaxPool1d"], [238, 1, 1, "", "MaxPool2d"], [239, 1, 1, "", "MaxPool3d"], [117, 1, 1, "", "Module"], [119, 1, 1, "", "ModuleDict"], [120, 1, 1, "", "ModuleList"], [221, 1, 1, "", "NLLLoss"], [118, 1, 1, "", "Parameter"], [121, 1, 1, "", "ParameterDict"], [122, 1, 1, "", "ParameterList"], [194, 1, 1, "", "ReLU"], [195, 1, 1, "", "ReLU6"], [196, 1, 1, "", "SELU"], [178, 1, 1, "", "SEModule"], [179, 1, 1, "", "SelectiveKernel"], [123, 1, 1, "", "Sequential"], [197, 1, 1, "", "Sigmoid"], [198, 1, 1, "", "Softmax"], [199, 1, 1, "", "Swish"], [200, 1, 1, "", "Tanh"], [241, 1, 1, "", "Upsample"]], "lucid.nn.functional": [[159, 2, 1, "", "adaptive_avg_pool1d"], [160, 2, 1, "", "adaptive_avg_pool2d"], [161, 2, 1, "", "adaptive_avg_pool3d"], [139, 2, 1, "", "alpha_dropout"], [162, 2, 1, "", "avg_pool1d"], [163, 2, 1, "", "avg_pool2d"], [164, 2, 1, "", "avg_pool3d"], [155, 2, 1, "", "batch_norm"], [146, 2, 1, "", "bilinear"], [149, 2, 1, "", "binary_cross_entropy"], [134, 2, 1, "", "conv1d"], [135, 2, 1, "", "conv2d"], [136, 2, 1, "", "conv3d"], [150, 2, 1, "", "cross_entropy"], [140, 2, 1, "", "dropout"], [141, 2, 1, "", "dropout1d"], [142, 2, 1, "", "dropout2d"], [143, 2, 1, "", "dropout3d"], [125, 2, 1, "", "elu"], [126, 2, 1, "", "gelu"], [151, 2, 1, "", "huber_loss"], [157, 2, 1, "", "instance_norm"], [170, 2, 1, "", "interpolate"], [158, 2, 1, "", "layer_norm"], [128, 2, 1, "", "leaky_relu"], [148, 2, 1, "", "linear"], [166, 2, 1, "", "max_pool1d"], [167, 2, 1, "", "max_pool2d"], [168, 2, 1, "", "max_pool3d"], [153, 2, 1, "", "mse_loss"], [154, 2, 1, "", "nll_loss"], [129, 2, 1, "", "relu"], [171, 2, 1, "", "rotate"], [130, 2, 1, "", "selu"], [131, 2, 1, "", "sigmoid"], [132, 2, 1, "", "softmax"], [133, 2, 1, "", "tanh"], [138, 2, 1, "", "unfold"]], "lucid.nn.init": [[181, 2, 1, "", "constant"], [183, 2, 1, "", "kaiming_normal"], [184, 2, 1, "", "kaiming_uniform"], [185, 2, 1, "", "normal"], [186, 2, 1, "", "uniform"], [187, 2, 1, "", "xavier_normal"], [188, 2, 1, "", "xavier_uniform"]], "lucid.optim": [[246, 1, 1, "", "ASGD"], [247, 1, 1, "", "Adadelta"], [248, 1, 1, "", "Adagrad"], [249, 1, 1, "", "Adam"], [250, 1, 1, "", "AdamW"], [251, 1, 1, "", "Adamax"], [252, 1, 1, "", "NAdam"], [244, 1, 1, "", "Optimizer"], [253, 1, 1, "", "RAdam"], [254, 1, 1, "", "RMSprop"], [255, 1, 1, "", "Rprop"], [256, 1, 1, "", "SGD"]], "lucid.random": [[263, 2, 1, "", "bernoulli"], [265, 2, 1, "", "rand"], [266, 2, 1, "", "randint"], [267, 2, 1, "", "randn"], [268, 2, 1, "", "seed"], [269, 2, 1, "", "uniform"]], "lucid.transforms": [[335, 1, 1, "", "CenterCrop"], [333, 1, 1, "", "Compose"], [336, 1, 1, "", "Normalize"], [337, 1, 1, "", "RandomCrop"], [338, 1, 1, "", "RandomGrayscale"], [339, 1, 1, "", "RandomHorizontalFlip"], [340, 1, 1, "", "RandomRotation"], [341, 1, 1, "", "RandomVerticalFlip"], [342, 1, 1, "", "Resize"], [334, 1, 1, "", "ToTensor"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function"}, "terms": {"": [3, 10, 11, 17, 19, 22, 42, 61, 62, 64, 65, 66, 67, 68, 69, 114, 115, 116, 117, 118, 119, 121, 122, 123, 159, 160, 161, 179, 218, 221, 231, 232, 233, 234, 237, 238, 243, 244, 245, 259, 261, 276, 284, 302, 304, 312, 315, 317, 318, 328, 334, 336, 344], "0": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 30, 31, 40, 41, 42, 43, 46, 48, 52, 59, 90, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 316, 317, 318, 319, 321, 324, 325, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344], "000": [5, 6, 7, 8, 285, 286], "0000": [218, 219, 221], "0001": 246, "000e": [285, 286], "001": [246, 249, 250, 252, 253, 256], "002": [251, 252], "004": 252, "005": 193, "008": [59, 114], "01": [128, 193, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256], "01051757": 267, "013": [28, 114], "016": [73, 114], "0205": 218, "0217": 218, "0227": 218, "024": [95, 114], "026": [84, 114], "028": [89, 114], "0299": 218, "032": [40, 80, 114], "044715": [126, 190], "0450": 218, "0451": 218, "046": [38, 114], "047": [107, 114], "04719755": 294, "0474259": 131, "048": [97, 114], "0480": 218, "04861": 114, "05": [155, 157, 158, 172, 173, 174, 193, 223, 224, 225, 226, 227, 228, 229], "0507": [130, 196], "06": [247, 255], "069": [67, 78, 114], "07": [149, 150, 217, 218], "0700": 218, "0706508": 200, "071": [73, 114], "0721": 218, "073": [103, 114], "07722396": 199, "0794": 221, "08": [249, 250, 251, 252, 253, 254], "0802": 221, "08333333": 19, "085537": 301, "088": [95, 114], "08955": 114, "0900": [198, 218], "096": [111, 114], "0986": [132, 198], "09861229": 302, "0992": 218, "1": [0, 1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 90, 96, 97, 98, 99, 100, 104, 105, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "10": [0, 1, 2, 3, 5, 6, 7, 23, 24, 25, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 105, 112, 113, 114, 115, 119, 120, 123, 135, 136, 146, 148, 159, 202, 203, 204, 209, 210, 213, 215, 224, 225, 227, 231, 235, 236, 238, 248, 261, 266, 269, 270, 273, 276, 279, 280, 296, 312, 335, 337, 338, 340], "100": [6, 24, 40, 41, 42, 43, 106, 107, 108, 109, 114, 261, 344], "1000": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "1000000": 246, "1001": [73, 114, 218], "1003": 218, "1007": 114, "10096": 114, "101": [63, 64, 74, 81, 84, 85, 86, 87, 88, 91, 96, 97, 98, 114], "10106": 114, "1014": 130, "102": [78, 114], "1025": [120, 123], "1026": [120, 123], "1027": [120, 123], "10499": 131, "1050": 197, "1054": 221, "1056": [120, 123], "10590": 114, "108": [41, 114], "1097": 114, "11": [76, 93, 105, 106, 114, 146, 202, 203, 204, 209, 213, 224, 225, 227, 235, 236, 238, 276, 335, 336, 337, 338, 340], "110": [68, 114], "1105": 114, "1109": 114, "111": [34, 114], "1111": 217, "112": [61, 69, 114], "1134": 146, "114b": 338, "119": 146, "1192": [131, 132, 198], "12": [25, 26, 27, 28, 29, 35, 53, 54, 114, 121, 146, 161, 202, 203, 204, 209, 210, 213, 224, 225, 227, 233, 235, 236, 238, 276, 280, 281, 335, 337, 338, 340], "120": [40, 52, 55, 61, 62, 114], "121": [25, 26, 114], "123": [183, 184, 185, 186, 187, 188, 268, 269], "124": [183, 184, 187, 188], "125": 236, "1250": 219, "1251": 114, "1258": 114, "126": [81, 114], "128": [38, 49, 72, 81, 82, 105, 114, 123, 179, 333, 344], "1280": 58, "128x128": [333, 344], "13": [45, 105, 107, 114, 146, 202, 203, 204, 213, 225, 235, 236, 238, 276, 335, 337, 338, 340], "1314": 114, "132": [106, 114], "1324": 114, "133": [107, 114], "136": [42, 114], "138": [108, 114], "14": [27, 65, 114, 202, 203, 204, 209, 210, 213, 225, 235, 236, 238, 262, 276, 280, 335, 337, 338, 340], "1409": 114, "143": [109, 114], "144": 62, "145": 146, "149": [27, 73, 114], "15": [0, 146, 202, 203, 204, 213, 225, 235, 236, 238, 276, 280, 315, 335, 337, 338, 340, 344], "1513": 221, "152": [75, 92, 114], "155": 276, "1556": 114, "1588": [126, 190], "16": [25, 26, 52, 55, 58, 61, 62, 84, 90, 105, 108, 114, 120, 121, 123, 160, 161, 172, 173, 174, 178, 179, 202, 203, 204, 209, 210, 213, 224, 225, 232, 233, 235, 236, 238, 243, 276, 280, 310, 335, 337, 338, 340], "160": [61, 74, 114], "16227766": 20, "16425": 221, "1643": 217, "166": 276, "167": 192, "169": [25, 27, 114], "17": [67, 114, 202, 203, 204, 213, 225, 236, 275, 335, 337, 338, 340], "170": 146, "1704": 114, "17520119": 309, "177": [86, 114], "18": [54, 76, 93, 101, 114, 202, 203, 204, 209, 213, 225, 236, 279, 280, 335, 337, 338, 340], "1800": 218, "184": 61, "18877099": 199, "19": [36, 105, 109, 114, 135, 136, 146, 203, 204, 225, 274, 276], "192": [53, 54, 75, 114], "194": [84, 114], "1966": [132, 197, 198], "198": [61, 114], "1998": [114, 218], "1_53": 114, "1d": [134, 159, 162, 166, 172, 175, 223, 226, 231, 269, 276, 284, 315, 323, 324, 325, 326, 330], "1e": [149, 150, 155, 157, 158, 172, 173, 174, 217, 218, 223, 224, 225, 226, 227, 228, 229, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "1e6": 246, "1s4x24d": 70, "1st": [23, 112], "2": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 40, 41, 42, 43, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 93, 101, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "20": [0, 5, 6, 7, 8, 28, 114, 119, 120, 123, 203, 204, 209, 225, 280, 301], "200": [61, 66, 77, 114], "2004": 114, "201": [28, 66, 114], "2011": 178, "2012": 114, "2014": 114, "2015": 114, "2016": 114, "2017": 114, "2018": [114, 178], "2019": 114, "2020": 114, "2021": 114, "2023": 178, "2039": 221, "204": 204, "21": [42, 79, 94, 114, 121, 146, 203, 204, 225, 280], "210": [43, 114], "211": 276, "22": [49, 111, 114, 146, 203, 204, 209, 225, 274, 276], "221": [43, 114], "2231": [218, 221], "224": [23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 105, 112, 114], "2247": [223, 224, 225, 226, 227, 228, 229], "224x224": [30, 45, 96, 97, 98, 99, 104], "226": 276, "22752314": 267, "2278": 114, "23": [64, 74, 81, 84, 85, 86, 87, 88, 91, 203, 204, 225], "232": [59, 98, 114], "2324": [114, 196], "234": [183, 184, 185, 186, 187, 188, 269], "235": [35, 114], "238": [62, 114], "23840584": 199, "24": [25, 26, 58, 61, 62, 66, 70, 77, 146, 160, 203, 204, 209, 225, 232, 280], "240": [61, 62, 109, 114], "240x240": 30, "2424": [132, 198], "2447": 198, "246": [53, 114], "24d": 70, "25": [0, 70, 80, 89, 101, 114, 131, 197, 204, 220, 225, 235, 236, 273, 306, 317], "2500": [217, 219, 221], "2512": 189, "2547": 196, "256": [72, 105], "26": [67, 114, 121, 148, 204, 215, 225, 280], "260": 114, "260x260": 30, "26325684": 267, "264": [29, 114], "2689": [132, 197, 198], "26894142": 199, "269": [68, 78, 114], "27": [69, 99, 114, 146, 202, 204, 225, 300], "272": [88, 114], "274": [64, 104, 114], "276": [183, 184, 187, 188], "28": [53, 54, 95, 114, 146, 204, 280], "288": [62, 66, 114], "289": [32, 114], "28x28": [7, 8, 53, 54], "29": [104, 114, 204], "299": [110, 114], "299r": 338, "299x299": [46, 47, 49, 50], "2_i": [226, 227, 228], "2d": [135, 142, 160, 163, 167, 173, 176, 224, 227, 232, 276, 284, 287, 315, 320, 323, 324, 326, 330, 340], "2e": 251, "2nd": [23, 112], "2x": 71, "2x2": [138, 335, 337], "3": [1, 2, 3, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 126, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 151, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 297, 299, 300, 301, 302, 303, 304, 305, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342], "30": [37, 46, 68, 71, 78, 114, 120, 171, 204, 340], "300": 114, "300x300": 30, "302": [41, 114], "3026": 221, "30823025": 199, "31": [146, 204, 276], "310": [285, 286], "31622777": 20, "319": 114, "32": [25, 27, 28, 55, 63, 64, 65, 66, 67, 68, 69, 84, 85, 86, 87, 89, 114, 120, 123, 146, 148, 160, 172, 173, 174, 178, 179, 203, 204, 215, 232, 243, 274, 275, 280], "320": [67, 114], "321": [183, 184, 187, 188], "326": [91, 114], "32x16d": 114, "32x32": [5, 6, 52, 55], "32x32d": 114, "32x4d": [96, 99, 104, 114], "32x8d": [97, 114], "33": [29, 114, 120, 123, 148, 204, 215], "33333333": 19, "336": [87, 106, 114], "337": [29, 114], "34": [79, 94, 102, 114, 120, 123, 146, 204, 276, 280], "342": [183, 184, 187, 188], "344": [36, 114], "345": [183, 184, 185, 186, 187, 188, 269], "35": [50, 114, 120, 123, 204], "352": [45, 114], "355": [39, 114], "3567": [217, 221], "357": [108, 113, 114], "36": [66, 75, 77, 92, 204], "3679": [125, 130, 189], "368": [101, 103, 114], "36th": 114, "37": 202, "370": [34, 114], "372": 146, "375": 220, "3750": 219, "37754067": 199, "378": [54, 114], "380": 114, "380x380": 30, "38344152": 265, "38629436": 302, "389056": 301, "38th": 114, "392": [46, 114], "393": [37, 45, 114], "3935": 189, "3d": [136, 143, 161, 164, 168, 174, 177, 204, 225, 228, 233], "3x3": [114, 270], "4": [0, 1, 2, 3, 11, 12, 13, 14, 16, 18, 19, 20, 25, 30, 52, 53, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 94, 95, 102, 103, 114, 115, 121, 123, 134, 135, 136, 138, 141, 142, 143, 146, 148, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 249, 253, 254, 256, 259, 262, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 289, 291, 297, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342], "40": [47, 58, 61, 62, 71, 114], "400": 55, "4044": 217, "4076": 218, "4096": [23, 112], "40d": 71, "41421356": 12, "416": [78, 96, 114], "41666667": 19, "417": [71, 114], "41808962": 267, "419974": 133, "4199743": 200, "42": [146, 178, 262, 270], "421": [183, 184, 187, 188], "423": [183, 184, 185, 186], "42718872": 20, "4278": 114, "4284": 114, "4286": 217, "43": [38, 114, 274, 276], "432": [37, 114], "4323": 189, "4375": 219, "43758721": 265, "44": [74, 86, 114], "440": [42, 114], "4472136": 14, "448": [39, 114], "4495": [225, 228], "45": [102, 114, 146, 171, 340], "4510": 114, "4520": 114, "4545": 206, "455": [88, 114], "456": 114, "456x456": 30, "464": [71, 114], "468": [85, 114], "4700": 114, "4708": 114, "47112767": 296, "472": [85, 114], "48": [25, 28, 29, 62, 64, 68, 78, 96, 114, 148, 215], "480": [27, 61, 114], "481": [61, 114], "483": [69, 114], "49": [91, 114], "4979": 189, "4s2x40d": [71, 114], "4x": 70, "4x4": 342, "5": [1, 2, 10, 11, 16, 17, 18, 19, 23, 30, 32, 46, 52, 53, 54, 55, 58, 61, 62, 100, 101, 102, 103, 112, 114, 115, 117, 118, 119, 120, 121, 123, 126, 131, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 151, 153, 155, 157, 158, 159, 162, 163, 170, 172, 173, 174, 179, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 238, 239, 255, 259, 262, 263, 266, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 293, 294, 295, 303, 304, 305, 306, 307, 312, 315, 316, 317, 318, 321, 323, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "50": [5, 6, 63, 69, 70, 71, 72, 80, 82, 89, 95, 99, 103, 104, 114, 148, 215, 255, 274, 276, 338, 339, 341, 344], "5000": [217, 219, 221], "504": [60, 114], "50_1s4x24d": 114, "510": 114, "5108": 221, "512": [50, 72, 76, 102, 114], "519": 114, "52359878": 295, "528": 114, "528x528": 30, "53": [146, 275], "530": [85, 114], "536": [35, 114], "537": [62, 114], "543": [183, 184, 185, 186, 187, 188, 269], "54308063": 299, "544": [108, 114], "545": 281, "5455": 206, "549": [74, 114], "55": [41, 114], "557": [80, 114], "559": [99, 114], "560": [33, 65, 114], "563": [183, 184, 187, 188], "568": [43, 114], "569": [97, 114], "57": [103, 114, 146], "57079633": [294, 295], "57366333": 268, "576": 62, "586": [47, 114], "587g": 338, "592": [93, 114], "5987": 114, "5995": 114, "5th": [23, 112], "6": [11, 19, 23, 25, 26, 27, 28, 29, 30, 52, 55, 63, 69, 72, 79, 80, 82, 89, 94, 95, 102, 103, 112, 121, 122, 134, 135, 136, 138, 143, 146, 148, 159, 184, 188, 191, 195, 202, 203, 204, 207, 208, 209, 210, 213, 215, 217, 223, 224, 225, 226, 227, 228, 229, 231, 235, 236, 238, 239, 247, 255, 259, 262, 269, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 303, 304, 305, 312, 315, 316, 317, 318, 321, 326, 327, 332, 334, 335, 336, 337, 338, 340, 342], "60": [5, 6, 75, 114], "600": [30, 114], "600x600": 30, "6052": 221, "6065": 189, "608": [113, 114], "61": [24, 55, 114], "6105": 114, "611": [65, 114], "6114": 114, "6124": [223, 224, 225, 226, 227, 228, 229], "617": [40, 114], "62": [113, 114, 146], "62686041": 309, "630": 114, "6321": [125, 189], "63245553": 20, "636": [32, 114], "64": [25, 29, 58, 61, 63, 64, 65, 66, 67, 68, 69, 72, 77, 88, 100, 105, 114, 120, 123, 146, 178, 179], "640": [36, 114], "645": 114, "64589411": 265, "647": [101, 114], "64x4d": [98, 114], "654": [183, 184, 185, 186, 187, 188, 269], "657": [183, 184, 187, 188], "6590": [132, 198], "66": [39, 92, 114], "6652": 198, "66666667": 19, "6667": 217, "667": [109, 114], "6682": 217, "669": [77, 114], "67": 276, "672": [61, 79, 114], "67326": 196, "6733": 130, "676": [70, 114], "678": [183, 184, 185, 186, 187, 188], "68811989": 267, "689": [76, 114], "69314718": 302, "696": [81, 114], "7": [18, 26, 33, 105, 114, 121, 134, 135, 136, 138, 143, 146, 148, 149, 150, 159, 179, 190, 195, 196, 197, 200, 202, 203, 204, 209, 210, 213, 215, 217, 218, 220, 224, 225, 227, 228, 231, 235, 236, 238, 239, 262, 263, 266, 269, 272, 274, 275, 276, 280, 282, 284, 301, 304, 312, 315, 316, 317, 330, 334, 335, 336, 337, 338, 340, 342], "70": [7, 8, 66, 114], "7001": 218, "704": [29, 86, 114], "706": [55, 114], "70710678": [14, 308], "7132": 114, "7141": 114, "7147": 221, "7182818": 301, "72": [58, 61, 62], "726791": 114, "7311": [132, 197, 198], "739": [49, 114], "74": 276, "75": [148, 215, 220, 246], "7581": 130, "760": [64, 104, 114], "76159416": [199, 314], "7616": [133, 200], "76219569": 299, "7635": 196, "770": 114, "772": 281, "778": [93, 114], "78": [82, 114], "78357324": 267, "78539816": 296, "791": [87, 114], "79172504": 265, "792": [84, 114], "795": [33, 114], "797": [79, 114], "7x7": 112, "8": [17, 21, 25, 30, 68, 72, 75, 78, 84, 85, 86, 87, 88, 89, 92, 101, 102, 103, 115, 120, 121, 123, 134, 135, 136, 138, 143, 146, 148, 149, 159, 160, 161, 172, 173, 174, 178, 190, 191, 196, 197, 200, 202, 203, 204, 207, 208, 209, 210, 213, 215, 217, 220, 224, 225, 227, 228, 231, 232, 233, 235, 236, 238, 239, 249, 250, 251, 252, 253, 254, 262, 263, 266, 273, 274, 275, 276, 280, 281, 283, 284, 300, 304, 312, 315, 316, 317, 334, 335, 336, 337, 338, 340, 342], "80": [5, 6, 7, 8, 61], "8005": 218, "808": [75, 114], "817": [46, 114], "818": 114, "8182": 206, "82": 146, "821": [92, 114], "83": [88, 114], "833": 114, "84": [52, 54, 55], "840": [24, 114], "8413": [126, 190], "847": [50, 114], "848": [92, 107, 114], "856": [26, 114], "85772238": 199, "8584": 196, "86": 114, "862": [111, 114], "863": [106, 114], "864": [77, 114], "868": [94, 114], "872": [60, 70, 91, 114], "876": [183, 184, 187, 188, 269], "88": [62, 87, 98, 114], "8808": [132, 197, 198], "886": [81, 114], "887": 281, "891773": 265, "89442719": 14, "895": [102, 114], "896": [99, 114], "9": [0, 1, 3, 8, 21, 34, 114, 135, 138, 146, 148, 159, 202, 203, 204, 209, 213, 215, 217, 224, 225, 227, 231, 235, 236, 238, 246, 247, 249, 250, 251, 252, 253, 254, 256, 262, 263, 266, 269, 272, 276, 280, 281, 282, 284, 310, 311, 334, 335, 336, 337, 338, 340], "904": [89, 114], "90709145": 268, "9091": 206, "9120": 221, "9163": 221, "928": [28, 114], "929": [68, 114], "93": [97, 114], "94": 73, "9486833": 20, "949e": [285, 286], "9526": 131, "9545": 190, "955": [96, 114], "958": [94, 114], "96": 62, "960": 61, "96366276": 265, "9640": 200, "96402758": 314, "973": [82, 114], "978": [26, 114], "984": [47, 98, 114], "99": 254, "9957": 221, "99734545": 268, "999": [0, 249, 250, 251, 252, 253], "A": [1, 3, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 31, 48, 52, 56, 63, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 105, 106, 107, 108, 109, 114, 117, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 146, 148, 149, 150, 154, 155, 157, 158, 170, 179, 206, 207, 208, 209, 210, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 265, 266, 267, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340], "As": 268, "At": 241, "Be": 0, "By": [0, 2, 3, 10, 73, 74, 75, 76, 77, 78, 79, 80, 118, 171, 243, 253, 259, 263, 265, 266, 267, 269, 334, 344], "For": [2, 3, 4, 10, 12, 13, 14, 16, 17, 18, 19, 21, 123, 125, 126, 128, 129, 130, 131, 133, 146, 148, 170, 183, 184, 187, 188, 196, 202, 203, 204, 213, 215, 223, 224, 225, 226, 227, 228, 243, 245, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 301, 302, 303, 304, 305, 308, 310, 312, 315, 316, 317, 324, 326, 328, 330, 331, 344], "If": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 72, 115, 117, 119, 120, 121, 122, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 143, 146, 148, 155, 157, 160, 161, 170, 171, 172, 173, 174, 175, 176, 177, 179, 183, 184, 202, 203, 204, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 249, 250, 254, 255, 261, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 338, 339, 341, 342], "In": [3, 10, 19, 134, 135, 136, 218, 221, 258, 259, 260, 333, 344], "It": [1, 2, 3, 7, 10, 19, 20, 21, 23, 26, 27, 28, 29, 44, 45, 46, 52, 53, 54, 55, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 93, 105, 111, 114, 117, 119, 120, 121, 122, 123, 143, 146, 170, 171, 172, 173, 174, 178, 190, 191, 194, 195, 200, 213, 214, 217, 218, 219, 220, 221, 231, 232, 233, 241, 243, 244, 245, 246, 252, 254, 255, 256, 259, 268, 272, 273, 274, 277, 278, 279, 281, 282, 303, 305, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334], "Its": [21, 270], "Near": 19, "No": 138, "Not": 214, "One": [53, 344], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "There": 327, "These": [4, 10, 11, 14, 17, 20, 22, 40, 41, 42, 43, 81, 82, 101, 102, 103, 111, 114, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 255, 262, 270, 344], "To": [3, 114, 245, 263, 267, 270, 285, 286, 323, 344], "With": [3, 138, 334, 344], "_": [17, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 133, 148, 170, 224, 225, 226, 227, 228, 234, 235, 236, 237, 238, 239, 246, 247, 249, 250, 251, 252, 254, 256, 274, 275, 276, 280, 315, 316, 335, 336, 337, 339, 340, 341], "_1": [14, 119, 120, 121, 122, 123, 146, 213, 280, 319, 321, 332], "_2": [14, 119, 120, 121, 122, 123, 146, 213, 280, 319, 321, 332], "__call__": [1, 117], "__getitem__": [0, 2, 3, 5, 6, 7, 8], "__init__": [0, 1, 2, 3, 10, 23, 30, 31, 44, 48, 52, 56, 57, 58, 63, 105, 112, 115, 116, 117, 118, 119, 120, 121, 122, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 271, 333, 334], "__iter__": [0, 1], "__len__": [0, 1, 2, 3, 5, 6, 7, 8], "__repr__": 244, "__setattr__": 117, "_activ": 132, "_arraylik": [262, 284, 286, 289, 291], "_arraylikeint": 324, "_arrayorscalar": [116, 118, 262, 263, 271, 318], "_base_activ": 52, "_base_dtyp": [283, 285, 288, 290], "_c": 336, "_decai": 252, "_fanmod": [183, 184], "_grad_en": [258, 260], "_i": [14, 18, 132, 146, 198, 220, 223, 229, 234, 237, 274, 275, 277, 278, 280, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 326, 328, 331, 332], "_in": [183, 184, 187, 188], "_interpolatetyp": 241, "_j": [132, 198, 234, 237, 280, 304, 312, 316, 317], "_k": 329, "_left": 170, "_make_lay": 105, "_modul": 117, "_n": [14, 119, 120, 121, 122, 123, 319, 321, 332], "_numpyarrai": 262, "_out": [183, 184, 187, 188, 326, 330], "_p": 18, "_pad": 324, "_paddingstr": [172, 173, 174, 175, 176, 177, 202, 203, 204], "_paramet": 117, "_reductiontyp": [149, 150, 151, 153, 154, 217, 218, 219, 220, 221], "_resnestbottleneck": 63, "_right": 170, "_scalar": [181, 185, 186, 187, 188, 262, 283, 297], "_seresnetbottleneck": [91, 92, 95], "_seresnetmodul": [93, 94], "_shapelik": [115, 158, 229, 262, 266, 288, 290, 327, 328, 331], "_size": [159, 160, 161], "_skresnetmodul": [101, 102, 103], "_slope": 193, "_statedict": 244, "_t": [253, 254], "_tensor": [116, 118, 284, 318], "_tensorop": 271, "_u": 19, "_v": 19, "_valu": [297, 324], "_width": 324, "a_i": [277, 278, 281], "aaai": 114, "ab": 292, "abc": [2, 244], "abil": [10, 114, 344], "about": [10, 115], "abov": [10, 258, 260, 268, 284, 287], "absolut": [17, 18, 151, 251, 293], "abstract": [2, 3, 243, 244, 245, 246, 254, 256], "abstractmethod": 244, "acceler": [114, 196, 223, 224, 225, 246, 252, 254, 256], "accept": [214, 265, 271], "access": [0, 2, 3, 4, 5, 6, 7, 8, 84, 85, 86, 87, 88, 89, 116, 118, 119, 120, 121, 122, 123, 327], "accord": [170, 202, 203, 204, 213, 215, 218, 221, 247, 248, 249, 250, 251, 252, 253, 316], "accordingli": 13, "account": [17, 19, 20, 199], "accumul": [246, 247, 248, 272, 273, 277, 278, 279, 282], "accur": 92, "accuraci": [40, 41, 42, 43, 56, 57, 58, 95, 114], "achiev": [83, 84, 85, 86, 87, 88, 89, 114, 134, 135, 136, 159, 231, 232, 233, 252, 339, 341], "across": [0, 5, 6, 59, 116, 120, 123, 158, 159, 160, 161, 187, 188, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 262, 263, 265, 266, 267, 268, 269, 270, 285, 286, 304, 317], "act": 250, "activ": [10, 23, 52, 61, 62, 73, 77, 78, 90, 105, 112, 114, 119, 123, 125, 126, 128, 129, 130, 131, 132, 133, 139, 172, 173, 174, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 217, 218, 221, 223, 224, 225, 229, 303, 305], "actual": [118, 217, 218, 220, 221, 271, 337], "ad": [25, 58, 72, 117, 119, 120, 121, 122, 123, 134, 135, 136, 146, 148, 149, 150, 155, 157, 158, 162, 163, 164, 166, 167, 168, 172, 173, 174, 202, 203, 204, 217, 218, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 247, 248, 249, 250, 251, 252, 253, 254, 261, 331, 344], "adadelta": 257, "adagrad": [247, 257], "adam": [114, 250, 251, 252, 253, 257], "adamax": 257, "adamw": 257, "adapt": [23, 44, 52, 63, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 159, 160, 161, 178, 179, 231, 232, 233, 247, 248, 249, 252, 253, 254, 255], "adaptive_avg_pool1d": [145, 165, 231], "adaptive_avg_pool2d": [145, 165, 232], "adaptive_avg_pool3d": [145, 165, 233], "adaptiveavgpool1d": [212, 240], "adaptiveavgpool2d": [23, 90, 105, 112, 212, 240], "adaptiveavgpool3d": [212, 240], "add": [4, 117, 119, 120, 123, 146, 148, 202, 203, 204, 213, 215, 229, 244, 246, 249, 254, 256, 259, 292, 324, 331], "add_modul": [117, 123], "add_param_group": 244, "addit": [4, 10, 17, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 117, 120, 123, 146, 148, 155, 157, 213, 215, 223, 224, 225, 226, 227, 228, 246, 252, 259, 270, 272, 329], "addition": 252, "address": [218, 221, 249, 250, 253], "adjust": [49, 56, 58, 59, 96, 97, 98, 99, 100, 104, 159, 160, 161, 179, 206, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 245, 249, 253, 254, 255, 321, 332], "advanc": [3, 19, 31, 57, 77, 114, 120, 123, 134, 135, 136, 159, 160, 161, 231, 232, 233, 243, 246], "advantag": [50, 260], "affect": [258, 325, 328, 333], "affin": [172, 173, 174, 223, 224, 225, 226, 227, 228, 229, 340], "after": [17, 23, 61, 62, 112, 118, 119, 120, 121, 122, 123, 143, 178, 179, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 250, 260, 271, 272, 273, 277, 278, 279, 281, 282, 324, 334], "afterward": 260, "aggreg": [114, 179, 280, 326, 330], "aim": [4, 10], "al": [45, 114], "alex": [5, 6, 114], "alexnet": [51, 112, 114], "algebra": [10, 11, 287], "algorithm": [7, 10, 17, 19, 20, 244, 245, 270], "align": [21, 170, 241, 275, 276], "align_corn": [170, 241], "all": [0, 3, 4, 10, 20, 30, 114, 117, 119, 120, 121, 122, 123, 135, 136, 159, 160, 161, 163, 164, 167, 168, 170, 173, 174, 179, 193, 194, 204, 231, 232, 233, 235, 236, 239, 243, 244, 245, 246, 249, 254, 255, 256, 281, 303, 304, 305, 312, 315, 317, 319, 320, 321, 326, 328, 329, 330, 332, 335, 336, 344], "allevi": [114, 125], "alloc": [285, 286], "allow": [0, 1, 3, 4, 10, 19, 20, 50, 52, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 96, 97, 98, 99, 100, 104, 114, 118, 119, 120, 121, 122, 123, 125, 128, 129, 132, 136, 138, 171, 179, 189, 190, 193, 196, 197, 198, 200, 202, 203, 204, 241, 243, 247, 248, 259, 283, 288, 290, 291, 316, 318, 323, 333, 334, 344], "along": [132, 170, 179, 198, 275, 276, 280, 303, 304, 305, 312, 315, 317, 319, 321, 323, 326, 329, 330, 331, 332, 339, 341], "alongsid": 116, "alpha": [125, 128, 130, 139, 189, 196, 206, 246, 254], "alpha_dropout": [144, 145, 206], "alphadropout": [211, 212], "alphadropoutmodel": 206, "alreadi": 261, "also": [115, 125, 126, 128, 129, 130, 131, 133, 146, 148, 170, 252, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332], "alter": [123, 327], "altern": [1, 190, 247, 276], "alwai": [118, 325, 338, 339, 341], "among": [46, 179], "amount": [134, 135, 136, 162, 163, 164, 166, 167, 168, 175, 176, 177, 252], "amsgrad": [249, 250], "an": [0, 1, 3, 10, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 111, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 126, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 160, 161, 170, 171, 175, 176, 177, 179, 187, 188, 189, 195, 197, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 249, 252, 254, 260, 261, 262, 271, 276, 284, 287, 297, 304, 312, 317, 319, 326, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "analog": [326, 330], "analysi": [4, 178, 202, 203, 204, 228, 234, 236, 237, 239], "andreetto": 114, "andrew": 114, "angl": [171, 340], "ani": [0, 1, 2, 3, 17, 19, 24, 72, 100, 111, 113, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 130, 131, 133, 139, 140, 146, 148, 155, 157, 197, 229, 243, 244, 258, 260, 261, 268, 271, 283, 284, 285, 287, 288, 289, 290, 291, 303, 305, 316, 318, 319, 320, 321, 324, 326, 329, 330, 331, 332, 333, 344], "anoth": [122, 282, 289, 291, 334, 344], "api": [4, 231, 232, 233, 344], "appear": 244, "append": [120, 122, 123], "appli": [2, 4, 5, 6, 7, 8, 10, 17, 23, 30, 31, 83, 100, 110, 112, 114, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 172, 173, 174, 178, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 250, 251, 252, 253, 276, 324, 326, 333, 336, 338, 339, 340, 341, 342, 344], "applic": [4, 19, 25, 49, 50, 56, 57, 58, 60, 61, 62, 114, 134, 157, 202, 203, 204, 213, 215, 270, 283, 290, 324, 342], "approach": [3, 48, 123, 250], "appropri": [19, 58, 61, 62, 114, 117, 121, 123, 202, 203, 204, 206, 207, 208, 218, 235, 236, 258, 260], "approx": 130, "approxim": [19, 126, 190, 191, 192, 235, 238], "ar": [1, 2, 3, 4, 10, 13, 14, 16, 17, 19, 20, 21, 22, 40, 41, 42, 43, 44, 45, 46, 114, 116, 117, 118, 119, 120, 121, 122, 123, 132, 134, 135, 136, 138, 146, 148, 160, 161, 170, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 191, 198, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 249, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 293, 297, 301, 303, 304, 305, 306, 307, 312, 315, 316, 319, 323, 326, 327, 330, 333, 334, 335, 337, 338, 342, 344], "arang": 292, "arbitrari": [120, 214, 285, 286, 297, 302, 304, 308, 310, 312, 316, 317], "arcco": 292, "arch": 261, "architectur": [24, 25, 26, 27, 28, 29, 30, 31, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 119, 120, 121, 122, 123, 126, 178, 191, 192, 194, 199, 213, 214, 243, 261], "arcsin": 292, "arctan": 292, "area": [170, 241], "arg": [117, 214, 261, 285], "argument": [3, 4, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 117, 123, 214, 265, 285, 316], "around": [14, 171, 200], "arr": [262, 319, 321, 329, 332], "arrai": [10, 116, 118, 259, 262, 271, 276, 284, 289, 291, 318, 325, 326, 334, 344], "art": 114, "artifici": 114, "arxiv": 114, "asarrai": 262, "asgd": 257, "aspect": 342, "assign": [117, 119, 121, 123, 170, 218, 221], "assist": [44, 45, 46], "associ": [121, 122], "assum": [0, 1, 244, 245, 258], "attempt": [119, 123], "attent": [63, 70, 71, 100, 114, 122, 146, 178], "attribut": 117, "audio": 202, "augment": [3, 4, 93, 171, 270, 326, 330, 333, 337, 338, 339, 340, 341, 344], "autodiff": 10, "autograd": 243, "automat": [4, 10, 118, 119, 120, 121, 122, 243, 263, 265, 266, 267, 269, 271, 285, 286, 291, 323, 334], "auxiliari": [44, 45, 46, 116], "avail": [4, 5, 6, 7, 8, 10], "avd": 63, "averag": [23, 53, 54, 55, 63, 72, 83, 90, 100, 105, 112, 116, 159, 160, 161, 162, 163, 164, 170, 178, 179, 220, 231, 232, 233, 234, 235, 236, 246, 247, 249, 254, 304], "avg_down": 72, "avg_pool": [234, 235, 236], "avg_pool1d": [145, 165], "avg_pool2d": [145, 165], "avg_pool3d": [145, 165], "avgpool": [23, 90, 105, 112, 179], "avgpool1d": [212, 240], "avgpool1dmodel": 234, "avgpool2d": [212, 240], "avgpool2dmodel": 235, "avgpool3d": [212, 240], "avgpool3dmodel": 236, "avoid": [2, 3, 19, 31, 121, 260], "ax": [11, 259, 303, 304, 305, 312, 316, 317, 326, 328, 330], "axi": [132, 198, 275, 276, 303, 304, 305, 312, 317, 319, 321, 323, 324, 326, 328, 329, 330, 331, 332, 339, 341], "b": [11, 21, 114, 146, 148, 186, 202, 203, 204, 213, 215, 259, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 319, 321, 329, 332, 338], "b0": [30, 32, 114], "b1": [30, 33, 114], "b2": [30, 34, 114], "b3": [30, 35, 114], "b4": [30, 36, 114], "b5": [30, 37, 114], "b6": [30, 38, 114], "b7": [30, 39, 114], "b_i": [277, 278, 281], "back": [170, 235, 236, 261, 275, 280, 326, 330], "backbon": [101, 102, 103], "backpropag": [10, 13, 14, 16, 17, 19, 20, 22, 114, 116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 170, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 243, 260, 267, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 301, 303, 305, 318, 324, 326, 330, 334], "backward": [10, 116, 118, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 271, 334], "balanc": [31, 40, 41, 42, 43, 58, 84, 85, 86, 87, 88, 89, 114, 219], "bar": 246, "base": [3, 11, 16, 17, 20, 21, 25, 44, 45, 46, 47, 48, 49, 50, 52, 63, 70, 71, 83, 84, 85, 86, 87, 88, 89, 100, 105, 110, 114, 117, 119, 120, 121, 122, 138, 146, 159, 160, 161, 179, 206, 218, 219, 231, 232, 233, 243, 244, 245, 246, 250, 254, 255, 256, 263, 272, 273, 277, 278, 279, 281, 282, 291, 301, 302, 303, 305, 316, 323, 324, 337, 338, 339, 340, 341], "base_width": [63, 64, 65, 66, 67, 68, 69, 81, 82, 83, 100], "basic": [10, 23, 72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 110, 112, 115, 134, 135, 136, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 183, 184, 187, 188, 231, 232, 233, 335, 336, 337, 338, 339, 340, 341, 342], "basicblock": [72, 76, 79], "batch": [1, 2, 3, 11, 17, 20, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 49, 50, 90, 96, 97, 98, 99, 104, 134, 135, 136, 138, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 202, 203, 204, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 253, 276, 335, 336, 337, 338, 340, 342], "batch_norm": [145, 156, 223, 224, 225], "batch_norm1": 123, "batch_norm2": 123, "batch_siz": [1, 2, 3, 110, 179], "batchnorm": [172, 173, 174], "batchnorm1d": [172, 212, 230], "batchnorm1dmodel": 223, "batchnorm2d": [123, 173, 212, 230], "batchnorm2dmodel": 224, "batchnorm3d": [174, 212, 230], "batchnorm3dmodel": 225, "bceloss": [212, 222], "becaus": [2, 266], "becom": [18, 117, 247, 255], "been": 199, "befor": [17, 90, 115, 118, 246, 252, 260, 268, 324, 336, 344], "begin": [1, 18, 125, 128, 129, 130, 189, 191, 192, 193, 194, 196, 219, 220, 221, 234, 235, 236, 237, 238, 239, 253, 255, 259, 270, 277, 278, 280, 293, 297, 303, 305, 307, 324], "behav": [219, 315], "behavior": [114, 120, 123, 258, 270, 276, 286, 344], "being": [122, 171, 206, 207, 208, 209, 210, 253, 258, 260, 319, 321, 332], "belong": 0, "below": [20, 45, 46, 47, 49, 50, 52, 53, 54, 55, 276, 284, 287], "benchmark": [5, 6, 7, 8], "benefici": 123, "benefit": [125, 243, 252, 262], "bernoulli": [206, 207, 208, 209, 210, 264], "best": [183, 184, 187, 188], "beta": [223, 224, 225, 226, 227, 228, 229, 249, 250, 251, 252, 253], "beta1": [249, 250, 251, 252, 253], "beta2": [249, 250, 251, 252, 253], "beta_1": [249, 250, 251, 252, 253], "beta_2": [249, 250, 251, 252, 253], "better": [16, 112, 114, 126, 183, 184, 187, 188, 199, 226, 227, 228, 243, 250, 252, 254, 336], "between": [40, 41, 42, 43, 84, 85, 86, 87, 88, 89, 114, 117, 134, 135, 136, 138, 146, 151, 172, 173, 174, 175, 176, 177, 179, 195, 202, 203, 204, 206, 207, 208, 209, 210, 213, 217, 218, 219, 220, 221, 246, 254, 255, 256, 270, 272, 273, 276, 279, 282, 283, 317, 338, 339, 341, 342], "beyond": [10, 120], "bia": [134, 135, 136, 146, 148, 155, 157, 158, 172, 173, 174, 175, 176, 177, 202, 203, 204, 213, 215, 223, 224, 225, 226, 227, 228, 229, 249, 250, 251, 252, 253], "bias": [202, 203, 204, 215, 229, 243], "bias1": 121, "bias2": 121, "big": [175, 176, 177], "bilinear": [145, 147, 170, 212, 216, 241], "bilinearmodel": 213, "binari": [131, 149, 197, 206, 207, 208, 209, 210, 217], "binary_cross_entropi": [145, 152], "block": [25, 26, 27, 28, 29, 30, 31, 48, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 117, 138, 172, 173, 174, 179, 202, 203, 204, 260], "block1": [115, 243], "block2": [115, 243], "block_arg": [72, 90], "block_cfg": 31, "block_config": 25, "blue": 338, "bmatrix": 280, "bn": [172, 173, 174], "bn_affin": [172, 173, 174], "bool": [1, 5, 6, 7, 8, 22, 30, 44, 45, 46, 63, 72, 115, 117, 118, 139, 140, 141, 142, 143, 155, 157, 170, 172, 173, 174, 175, 176, 177, 202, 203, 204, 213, 215, 223, 224, 225, 226, 227, 228, 229, 241, 249, 250, 254, 258, 263, 265, 266, 267, 269, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 303, 304, 305, 312, 317, 318, 334], "both": [134, 148, 160, 162, 166, 172, 190, 199, 202, 203, 232, 234, 235, 237, 238, 241, 274, 275, 276, 280, 284, 323, 342], "bottleneck": [25, 57, 58, 60, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 114, 178], "bottleneck_cfg": 58, "bottom": 170, "bound": [184, 186, 188, 255, 269], "box": 4, "branch": [44, 45, 46, 114, 179], "break": 243, "brief": 344, "bright": 344, "broadcast": [209, 210, 304, 312, 317, 327, 331], "buffer": [246, 252, 254, 256], "build": [10, 31, 50, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 100, 101, 102, 103, 114, 117, 120, 123, 243, 344], "built": [3, 10, 73, 77, 78, 123, 243], "burg": 8, "c": [5, 6, 8, 72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 114, 138, 141, 142, 143, 150, 154, 155, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 178, 209, 210, 218, 221, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 259, 321, 332, 336], "c_": [202, 203, 204], "c_in": [134, 135, 136, 172, 173, 174], "c_out": [134, 135, 136], "calcul": [0, 1, 10, 11, 118, 241, 247, 248, 251, 252, 253, 260, 266, 271], "calculu": [12, 19], "call": [1, 117, 258, 261, 272, 273, 276, 277, 278, 279, 281, 282], "callabl": [244, 261, 333], "can": [0, 2, 3, 4, 10, 12, 14, 16, 17, 19, 20, 22, 30, 58, 72, 81, 82, 96, 97, 98, 99, 110, 111, 114, 115, 116, 118, 119, 120, 121, 122, 123, 128, 134, 135, 136, 171, 179, 190, 193, 195, 200, 202, 203, 204, 226, 227, 228, 235, 236, 237, 238, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 262, 269, 270, 271, 276, 285, 286, 287, 288, 290, 291, 304, 312, 317, 321, 323, 324, 326, 327, 330, 331, 332, 333, 334, 337, 339, 340, 341, 344], "cannot": [13, 14, 16, 17, 20, 21, 22, 263], "cap": 195, "capabl": [10, 70, 71, 283, 284, 287, 288, 289, 290, 291], "capac": [56, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 104, 114], "captur": [100, 114, 138, 202, 203, 204, 213], "cardin": [63, 64, 65, 66, 67, 68, 69, 70, 71, 83, 84, 85, 86, 87, 88, 89, 100, 114], "care": 260, "cartesian": 323, "case": [3, 18, 52, 58, 59, 125, 128, 129, 130, 189, 191, 192, 193, 194, 196, 219, 220, 221, 234, 235, 236, 237, 238, 239, 243, 248, 253, 255, 259, 277, 278, 293, 297, 303, 305, 307, 324, 344], "categori": [7, 73, 74, 75, 76, 77, 78, 79, 80], "caus": [3, 19, 246, 254, 256], "cautiou": 0, "cdot": [12, 13, 16, 17, 18, 21, 125, 126, 128, 130, 131, 134, 135, 136, 146, 148, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 178, 187, 188, 190, 191, 192, 197, 199, 206, 213, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 255, 274, 275, 276, 279, 281], "center": [171, 200, 254, 335, 344], "centercrop": [343, 344], "central": 262, "certain": [13, 126, 146, 199, 213, 249, 250, 258, 303, 305], "cfg": [61, 62], "chain": [16, 17, 123, 333, 344], "challeng": [7, 114], "cham": 114, "chanc": [338, 339, 341], "chang": [151, 219, 255, 259, 260, 261, 325, 327, 331, 338, 344], "channel": [25, 30, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 94, 96, 97, 98, 99, 104, 105, 110, 114, 134, 135, 136, 138, 141, 142, 143, 155, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 202, 203, 204, 209, 210, 223, 224, 225, 226, 227, 228, 231, 234, 235, 236, 237, 238, 239, 336, 338, 342], "character": [81, 82], "check": [258, 335, 337], "checkpoint": 245, "chen": 114, "choic": 323, "choleski": 15, "chollet": 114, "choos": 114, "chosen": 206, "christian": 114, "christoph": 8, "chu": 114, "cifar": [5, 6], "cifar10": 9, "cifar100": 9, "cifar100_train": 6, "cifar10_train": 5, "clariti": 262, "class": [3, 4, 10, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 115, 132, 150, 154, 243, 245, 261, 284, 287, 318, 344], "classic": 55, "classif": [4, 5, 6, 7, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 131, 132, 149, 150, 154, 197, 198, 217, 218, 221], "classifi": [23, 44, 45, 46, 52, 53, 54, 55, 72, 83, 100, 105, 110, 112], "cleaner": [1, 260, 276], "clear": [118, 271, 285, 286], "clearli": 262, "clf_in_featur": 52, "clf_layer": 52, "clip": [171, 191, 195, 255, 292], "clockwis": 171, "close": [16, 19, 196, 217, 254], "closer": 189, "closur": [244, 245], "cloth": 7, "cnn": 114, "co": [292, 308], "code": [17, 119, 121, 123, 258, 260, 262, 270], "coeffici": [21, 30, 170, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "col": 138, "collect": [4, 11, 114, 119, 120, 122, 123, 245], "color": [338, 344], "colorjitt": 344, "column": [13, 14, 16, 20, 21, 22, 115, 138, 287, 321, 323], "com": [7, 8], "combin": [1, 3, 47, 48, 49, 104, 114, 120, 123, 125, 126, 172, 173, 174, 178, 179, 190, 218, 243, 252, 253, 304, 312, 317, 319, 344], "combined_dataset": [0, 1], "common": [138, 171, 245, 344], "commonli": [10, 56, 57, 58, 59, 60, 61, 62, 126, 131, 132, 133, 134, 136, 146, 153, 155, 157, 171, 178, 187, 188, 191, 192, 195, 198, 204, 217, 220, 221, 234, 235, 236, 237, 238, 239, 259, 262, 288, 328, 334, 335, 336, 337, 339, 340, 341, 344], "compar": [81, 82, 112, 114, 270, 329], "compat": [4, 11, 100, 214, 229, 243, 259, 270, 334, 344], "complex": [2, 3, 10, 14, 50, 72, 75, 78, 79, 92, 94, 115, 119, 120, 123, 129, 194, 237, 239, 243, 245, 344], "compon": [19, 44, 45, 46, 47, 48, 49, 50, 117, 120, 245, 271, 344], "compos": [5, 6, 7, 8, 110, 202, 203, 204, 234, 235, 236, 237, 238, 239, 243, 344], "compound": 31, "comprehens": 3, "compris": [81, 82], "comput": [10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 56, 58, 61, 62, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 104, 114, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 146, 148, 149, 150, 151, 153, 154, 155, 157, 159, 160, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 254, 258, 259, 260, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 324, 326, 330, 334, 344], "computation": [3, 19, 73, 191, 192], "compute_loss": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "concaten": [0, 134, 135, 136, 321, 322, 329, 332], "concept": [10, 19, 57, 114], "condit": [12, 13, 16], "confer": 114, "config": 105, "configur": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 58, 59, 60, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 113, 122, 172, 173, 174], "conjunct": [138, 221], "connect": [23, 25, 26, 27, 28, 29, 30, 31, 47, 48, 49, 50, 52, 53, 54, 55, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 105, 110, 112, 114, 148, 178, 179, 202, 203, 204, 215], "consecut": 105, "consid": [3, 16, 19, 25, 123, 183, 184, 187, 188, 243, 255, 258, 285, 286, 344], "consider": 19, "consist": [2, 4, 7, 23, 53, 54, 55, 72, 116, 159, 160, 161, 179, 231, 232, 233, 262, 268, 270, 324, 335, 342, 344], "consistent_tensor": 270, "consol": 115, "constant": [149, 150, 155, 157, 158, 182, 196, 217, 218, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 254, 262, 324], "constant_pad": 324, "constraint": [1, 56, 58, 179], "construct": [10, 26, 27, 28, 29, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 101, 102, 103, 106, 107, 108, 109, 120, 243, 284, 326, 330], "constructor": [26, 27, 28, 29, 40, 41, 42, 43, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 81, 82, 96, 97, 98, 99, 104, 106, 107, 108, 109], "contain": [1, 5, 6, 7, 8, 13, 14, 19, 20, 21, 22, 48, 52, 72, 83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 115, 117, 119, 120, 121, 122, 123, 132, 138, 146, 148, 149, 150, 154, 170, 217, 218, 221, 244, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 286, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 320, 323], "content": 171, "context": [258, 260], "contextmanag": 260, "contigu": 325, "continu": [193, 267], "contrast": [226, 227, 228, 344], "contribut": [170, 206, 207, 208, 209, 210, 234, 237, 238, 239, 246, 252, 315], "control": [83, 179, 189, 219, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 270, 334, 344], "conv": [48, 90, 172, 173, 174, 224, 225], "conv1": [53, 54, 55, 123, 202, 203, 204, 234, 235, 236, 237, 238, 239], "conv1d": [137, 145, 172, 175, 205, 212, 234, 237], "conv1dmodel": 202, "conv2": [53, 54, 55, 123, 202, 203, 204], "conv2d": [120, 123, 137, 145, 173, 176, 205, 212, 224, 235, 238, 243], "conv2dmodel": 203, "conv3d": [137, 145, 174, 177, 205, 212, 225, 236, 239], "conv3dmodel": 204, "conv_bia": [172, 173, 174], "conv_config": 105, "conv_lay": [52, 120], "convblock": 243, "convbnrelu1d": 180, "convbnrelu2d": 180, "convbnrelu3d": 180, "conveni": [4, 24, 113], "convent": 276, "converg": [19, 200, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 336], "convers": [218, 221, 338, 344], "convert": [5, 6, 7, 8, 105, 116, 118, 132, 198, 271, 323, 333, 334, 338, 344], "convnetwork": 120, "convolut": [23, 24, 25, 30, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 52, 53, 54, 55, 56, 58, 61, 62, 63, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 104, 105, 110, 112, 113, 114, 120, 134, 135, 136, 138, 172, 173, 174, 175, 176, 177, 178, 179, 202, 203, 204, 235, 236, 238, 239, 324], "convolv": [134, 135, 136, 202, 203, 204], "coordin": 323, "core": [0, 1, 2, 3, 117, 243, 244, 271, 344], "corinna": 8, "corner": [170, 241, 335, 337], "correct": [119, 218, 221, 249, 250, 251, 252, 253, 334], "correctli": [19, 117, 119, 120, 121, 122, 123, 218, 221, 270], "correspond": [0, 1, 2, 5, 6, 7, 8, 14, 59, 61, 62, 81, 82, 101, 102, 103, 119, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 146, 148, 170, 191, 194, 198, 213, 215, 223, 224, 225, 226, 227, 228, 235, 236, 246, 254, 256, 263, 274, 275, 277, 278, 281, 301, 302, 308, 310, 321, 324, 326, 330, 332], "cort": 8, "cosh": [292, 309, 314], "cosin": [294, 298, 299, 308], "cost": [56, 58, 83, 114, 175, 176, 177], "could": 117, "count": [114, 115, 319], "counterclockwis": [171, 340], "cover": [11, 134, 135, 136], "coverag": [159, 160, 161], "creat": [2, 3, 10, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 120, 123, 179, 195, 243, 259, 261, 270, 283, 287, 288, 289, 290, 291, 323, 329, 333, 344], "creation": [40, 41, 42, 43, 120, 123, 344], "criterion": [217, 218, 219, 220, 221], "critic": [19, 245, 270], "crop": [335, 337, 344], "cross": [149, 150, 217, 218], "cross_entropi": [145, 152], "crossentropyloss": [212, 222], "cube": 292, "cumul": [126, 190], "current": [117, 246, 249, 255, 258], "custom": [4, 10, 23, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 49, 50, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 111, 112, 113, 116, 119, 120, 121, 122, 123, 171, 172, 173, 174, 189, 193, 243, 270, 287], "custom_config": 105, "custom_lenet": 52, "customiz": 344, "custommodul": 116, "customnetwork": 119, "customparametermodel": [121, 122], "cvpr": 114, "d": [114, 136, 143, 161, 164, 168, 174, 225, 228, 229, 233, 236, 239, 259, 284, 340], "d_": [136, 161, 164, 168, 204, 233, 236, 239], "d_1": 229, "d_2": 229, "d_n": 229, "d_out": [136, 164, 168], "dampen": [246, 254, 256], "data": [4, 5, 6, 7, 8, 10, 17, 116, 118, 122, 133, 134, 136, 138, 142, 143, 148, 171, 172, 173, 174, 179, 194, 200, 202, 203, 204, 215, 228, 234, 236, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 262, 270, 271, 272, 273, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 324, 325, 326, 327, 328, 330, 333, 334, 337, 338, 339, 340, 341, 344], "databas": 8, "dataload": [2, 3], "dataset": [3, 5, 6, 7, 8, 40, 41, 42, 43, 53, 54, 55, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 171, 248, 260, 333, 335, 344], "dataset1": [0, 1], "dataset2": [0, 1], "ddot": 280, "debug": [115, 123, 258, 268, 344], "decai": [246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "decompos": [12, 20, 22], "decomposit": [11, 12, 16, 19, 20, 22], "decor": [84, 85, 86, 87, 88, 89, 261], "decoupl": [114, 247, 248, 250, 251, 252, 253], "decreas": [249, 250, 255], "deep": [1, 3, 4, 10, 48, 72, 73, 74, 75, 77, 78, 84, 85, 86, 87, 88, 89, 91, 92, 95, 114, 155, 190, 196, 243, 270, 333, 334, 344], "deeper": [10, 45, 47, 50, 72, 79, 114, 196], "def": [0, 1, 2, 3, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "default": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 125, 128, 132, 134, 135, 136, 139, 140, 141, 142, 143, 149, 150, 151, 153, 154, 155, 157, 158, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 193, 198, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 244, 245, 252, 258, 263, 265, 266, 267, 269, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 303, 304, 305, 312, 316, 317, 318, 319, 321, 323, 324, 326, 329, 332, 334, 338, 339, 341], "defin": [1, 3, 4, 10, 25, 31, 44, 45, 46, 47, 48, 49, 50, 52, 58, 63, 72, 90, 101, 102, 103, 105, 119, 120, 121, 122, 123, 190, 192, 195, 199, 217, 218, 219, 220, 221, 234, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 266, 267, 281, 286, 297, 316, 333, 344], "definit": [10, 12, 172, 173, 174, 344], "degre": [171, 340, 344], "delai": 246, "delta": [132, 151, 198, 219, 247], "delta_": [132, 198], "demonstr": [10, 11, 96, 97, 98, 99, 104, 114, 243, 262], "denomin": [155, 157, 158, 172, 173, 174, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 254, 273], "denot": [17, 70, 71, 197, 202, 203, 204, 206, 207, 208, 209, 210, 316], "dens": [10, 25, 26, 27, 28, 29, 114, 248], "dense1": 10, "dense2": 10, "densenet": [26, 27, 28, 29, 51, 114, 178], "densenet_121": 114, "densenet_169": 114, "densenet_201": 114, "densenet_264": 114, "densiti": [126, 190], "depend": [10, 17, 18, 58, 122, 149, 150, 151, 153, 154, 170, 202, 274, 284, 303, 305, 326, 330, 337, 338, 342], "depth": [30, 31, 114, 120, 136, 143, 161, 164, 168, 204, 225, 228, 233, 236, 239], "depth_coef": 30, "depthseparableconv1d": 180, "depthseparableconv2d": 180, "depthseparableconv3d": 180, "depthwis": [56, 110, 114, 134, 135, 136, 175, 176, 177], "depthwise_separ": [175, 176, 177], "der": 114, "deriv": [19, 20, 132, 159, 160, 161, 190, 198, 200, 202, 203, 204, 213, 215, 261], "descend": 22, "descent": [10, 246, 256], "describ": [13, 14], "descript": 344, "deseri": 116, "design": [3, 4, 10, 11, 23, 24, 40, 41, 42, 43, 45, 46, 47, 53, 54, 55, 58, 73, 74, 75, 76, 77, 78, 79, 80, 91, 94, 110, 113, 114, 118, 120, 121, 122, 123, 125, 130, 196, 206, 243, 262, 344], "desir": [111, 116, 159, 160, 161, 231, 232, 233, 241, 316, 318], "destin": 117, "det": [11, 15], "det_a": 13, "detail": [10, 115, 245, 270, 276], "detect": 114, "determin": [0, 10, 11, 12, 13, 52, 81, 82, 159, 160, 161, 183, 184, 187, 188, 202, 203, 204, 231, 232, 233, 235, 236, 238, 239, 254, 258, 263, 265, 266, 267, 269, 285, 286, 335, 337], "determinist": 171, "develop": [10, 243, 270, 344], "deviat": [183, 185, 187, 333, 336, 344], "devic": [57, 58], "diag": [19, 292], "diagon": [19, 20, 22, 284, 287, 315], "diagonaliz": 14, "dict": [24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 101, 102, 103, 104, 111, 113, 117, 119, 121, 214, 244], "dictionari": [52, 117, 118, 119, 121, 123, 244], "differ": [0, 17, 44, 52, 58, 96, 97, 98, 99, 104, 120, 123, 132, 146, 170, 179, 198, 213, 220, 245, 259, 268, 270, 282, 291, 317, 328, 344], "differenti": [10, 12, 21, 190, 243, 263, 265, 266, 267, 269, 271, 283, 285, 286, 288, 290], "digit": [7, 8, 55, 114], "dilat": [134, 135, 136, 172, 173, 174, 175, 176, 177, 202, 203, 204], "dilation_height": 138, "dilation_width": 138, "dim": [218, 221], "dimens": [13, 14, 16, 17, 20, 21, 22, 23, 72, 83, 100, 105, 112, 114, 118, 132, 146, 148, 155, 157, 158, 160, 161, 170, 178, 179, 198, 202, 203, 204, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 241, 259, 262, 265, 269, 271, 275, 285, 303, 304, 305, 312, 315, 316, 317, 319, 321, 324, 326, 328, 329, 330, 331, 332, 335, 337, 342], "dimension": [17, 19, 20, 22, 134, 135, 136, 162, 163, 164, 166, 167, 168, 179, 202, 203, 204, 208, 209, 210, 223, 224, 225, 226, 227, 228, 234, 235, 236, 237, 238, 239, 259, 275, 276, 280, 284, 301, 304, 312, 315, 317, 320, 325, 326, 328, 330], "diminish": 248, "direct": [14, 217, 218, 219, 220, 221, 246, 254, 255, 256], "directli": [40, 41, 42, 43, 114, 119, 120, 121, 122, 170, 241, 247, 248, 250, 251, 252, 253, 268, 270, 318, 344], "directori": [3, 4, 5, 6, 7, 8], "disabl": [258, 260], "discontinu": 307, "discrep": [217, 218, 221], "discret": [263, 266, 270], "disk": 3, "displai": [24, 113, 115], "distribut": [126, 132, 170, 183, 184, 185, 186, 187, 188, 190, 198, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 218, 221, 234, 235, 236, 263, 265, 266, 267, 269, 270, 304, 312, 315, 317, 329, 336, 338, 339, 340, 341], "div": 292, "divers": [171, 339, 341, 344], "diversifi": 344, "divid": [1, 19, 114, 120, 123, 132, 134, 135, 136, 198, 217, 218, 219, 220, 221, 273, 336], "divis": [10, 19, 134, 135, 136, 206, 207, 208, 209, 210, 247, 248, 249, 250, 251, 252, 253, 254, 273], "do": [19, 21, 116, 119, 120, 121, 122, 139, 140, 141, 142, 243, 253, 258, 291, 315, 324], "document": [4, 10, 114, 245, 262, 270], "doe": [10, 17, 18, 19, 20, 22, 115, 116, 119, 120, 121, 122, 123, 188, 249, 250, 255, 258, 260, 263, 265, 266, 267, 268, 269, 283, 284, 285, 286, 287, 288, 289, 290, 291, 327], "doesn": 260, "doi": 114, "domain": 4, "don": 260, "dot": [14, 17, 119, 120, 121, 122, 123, 229, 237, 238, 239, 275, 280, 292, 319, 321, 329, 332], "down": [3, 243, 342], "download": [4, 5, 6, 7, 8], "downsampl": 63, "drawback": 125, "drawn": [265, 266, 267, 269, 270, 340], "drop": [206, 207, 208, 209, 210], "drop_path_r": 31, "dropout": [23, 30, 31, 40, 41, 42, 43, 46, 105, 112, 114, 126, 139, 141, 142, 143, 206, 208, 209, 210], "dropout1d": [144, 145, 211, 212], "dropout1dmodel": 208, "dropout2d": [144, 145, 211, 212], "dropout3d": [144, 145, 211, 212], "dropout_prob": 46, "dropoutmodel": 207, "dtype": [116, 118, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 334], "due": [17, 19, 25, 134, 135, 194, 340], "dummi": 115, "duplic": [119, 121], "dure": [3, 10, 13, 14, 16, 19, 20, 22, 31, 44, 45, 46, 72, 114, 116, 117, 118, 119, 120, 121, 122, 123, 132, 139, 140, 141, 142, 143, 155, 157, 171, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 260, 271, 272, 303, 304, 305, 312, 317, 334, 337, 340, 344], "dy": [128, 193], "dynam": [0, 2, 3, 100, 104, 114, 117, 120, 121, 122, 123, 159, 160, 161, 179, 229, 231, 232, 233, 248, 253, 258], "dynamicnetwork": 120, "e": [0, 13, 14, 16, 17, 20, 22, 30, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 49, 50, 52, 53, 54, 55, 63, 105, 116, 132, 179, 197, 198, 199, 206, 218, 244, 247, 254, 255, 287, 299, 301, 302, 309, 314, 315, 319, 338], "each": [1, 2, 3, 4, 14, 17, 19, 20, 22, 23, 25, 31, 52, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 105, 112, 114, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 146, 148, 155, 157, 159, 160, 161, 178, 179, 191, 194, 198, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 263, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 321, 323, 324, 326, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344], "earli": 253, "eas": [4, 10], "easi": [2, 3, 4, 10, 84, 85, 86, 87, 88, 89, 118, 119, 121], "easier": [3, 119, 120, 123], "easili": [4, 118, 122, 344], "eccv": 114, "economi": 22, "edg": [58, 324], "edu": [5, 6], "educ": [10, 114], "effect": [114, 119, 120, 121, 122, 123, 132, 134, 135, 136, 138, 189, 190, 194, 197, 198, 200, 223, 224, 225, 226, 227, 228, 229, 241, 258, 259, 260, 321, 332], "effici": [1, 2, 3, 5, 6, 7, 8, 10, 11, 16, 21, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 57, 58, 60, 61, 62, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 104, 110, 114, 138, 175, 176, 177, 191, 192, 195, 218, 243, 260], "efficientnet": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 114], "efficientnet_b0": 114, "efficientnet_b1": 114, "efficientnet_b2": 114, "efficientnet_b3": 114, "efficientnet_b4": 114, "efficientnet_b5": 114, "efficientnet_b6": 114, "efficientnet_b7": 114, "efficientnet_v2": [40, 41, 42, 43], "efficientnet_v2_": 114, "efficientnet_v2_l": 114, "efficientnet_v2_m": 114, "efficientnet_v2_xl": 114, "efficientnetv2": 114, "eig": 15, "eigenvalu": [14, 20], "eigenvector": 14, "eigval": 14, "eigvec": 14, "either": [148, 241, 262, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 318, 323], "element": [0, 19, 20, 46, 118, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 172, 173, 174, 175, 176, 177, 178, 191, 192, 194, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 229, 234, 235, 236, 237, 238, 239, 259, 263, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 320, 323, 324, 326, 327, 328, 330], "elementwise_affin": 229, "elsewher": [237, 238, 239, 287], "elu": [127, 145, 201, 212], "elumodel": 189, "embed": [56, 57, 58, 60, 61, 62], "emploi": 31, "empti": [117, 123, 292], "empty_lik": 292, "enabl": [0, 1, 2, 3, 10, 17, 22, 30, 49, 63, 100, 101, 102, 103, 114, 117, 118, 119, 120, 121, 122, 194, 202, 203, 204, 213, 215, 243, 245, 258, 260, 263, 265, 266, 267, 269, 271, 333], "encapsul": [243, 271], "encod": [218, 221], "encompass": 30, "encourag": [207, 208, 209, 210, 217, 218, 221, 249], "end": [18, 125, 128, 129, 130, 189, 191, 192, 193, 194, 196, 219, 220, 221, 234, 235, 236, 237, 238, 239, 253, 255, 277, 278, 280, 283, 293, 297, 303, 305, 307, 319, 324, 344], "enforc": [117, 119, 121], "engin": 19, "enhanc": [46, 47, 49, 50, 54, 57, 70, 71, 81, 82, 96, 97, 98, 99, 104, 112, 113, 114, 119, 121, 179, 195, 344], "ensur": [3, 5, 6, 7, 8, 19, 20, 21, 31, 40, 41, 42, 43, 116, 117, 118, 119, 120, 121, 122, 123, 132, 159, 160, 161, 172, 173, 174, 193, 198, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 243, 244, 246, 247, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 281, 304, 312, 317, 324, 334, 335, 336, 337, 338, 342, 344], "enter": 260, "entir": [3, 141, 142, 143, 209, 210, 270], "entri": [31, 52, 61, 62, 328], "entropi": [149, 150, 217, 218], "environ": [10, 61, 62], "ep": [149, 150, 155, 157, 158, 172, 173, 174, 217, 218, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 254], "epoch": [1, 3], "epsilon": [217, 218, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 254], "equal": [17, 170, 234, 235, 236, 335, 337], "equat": [14, 19, 21], "equival": [276, 315, 325], "error": [0, 3, 14, 16, 31, 117, 120, 121, 122, 123, 126, 151, 153, 190, 217, 218, 219, 220, 243, 244, 260, 262], "especi": [3, 119, 121, 122, 197, 259, 260, 262, 268, 333, 334, 338, 344], "essenti": [1, 3, 10, 11, 17, 19, 48, 135, 138, 243, 268, 270, 303, 333, 334, 338, 344], "estim": [220, 249, 250, 251, 252, 253, 254], "et": [45, 114], "eta": 255, "eta_": 255, "etc": [25, 31, 63, 217, 241, 334], "euclidean": 18, "european": 114, "evalu": [117, 155, 157, 206, 207, 208, 209, 210, 223, 224, 225, 226, 227, 228, 344], "even": [247, 260, 283, 284, 287, 288, 289, 290, 291], "evenli": [159, 160, 161, 231, 232, 233, 283], "everi": [1, 344], "everywher": 307, "exact": [117, 120, 316, 338, 340], "exactli": 123, "exampl": [4, 276], "excel": 47, "except": [0, 307, 319, 321, 332], "excit": [30, 58, 61, 62, 90, 93, 96, 97, 98, 99, 114, 178], "exclus": [266, 269, 283], "exdb": 8, "execut": [120, 260], "exist": [21, 119, 121, 123, 261, 319], "exit": 260, "exp": [125, 130, 131, 133, 189, 196, 292], "expand": [4, 138, 326, 330], "expans": [61, 62], "expansion_factor": 58, "expect": [12, 120, 123, 206, 207, 208, 209, 210, 229, 243, 262], "expens": 3, "experi": [10, 268, 270, 344], "experiment": 270, "explan": [17, 19, 23, 105, 112, 159, 160, 161, 231, 232, 233, 246], "explicit": 123, "explicitli": [114, 119, 121], "explod": [196, 223, 224, 225], "explor": [243, 270], "expon": [17, 281], "exponenti": [125, 130, 132, 189, 196, 198, 206, 249, 250, 251, 252, 253, 301], "extend": [4, 63, 83, 100, 114], "extens": [114, 245], "extern": [4, 10], "extra": 43, "extract": [44, 48, 72, 83, 100, 110, 114, 138, 204, 234, 236, 261, 284, 303, 305, 335, 337], "extractor": [52, 53, 54, 55, 110], "extrem": [19, 73, 114], "ey": 292, "f": [1, 4, 5, 6, 7, 8, 10, 114, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 195, 198], "f_1": 178, "f_2": 178, "facilit": [44, 119, 123, 132, 198, 202, 203, 204, 243, 245, 336, 344], "factor": [30, 46, 125, 134, 135, 136, 138, 178, 187, 188, 241, 246, 253, 254, 255, 256, 262], "factori": 111, "failur": [119, 120, 121, 122, 243], "fals": [1, 5, 6, 7, 8, 22, 30, 61, 62, 72, 115, 116, 117, 118, 139, 140, 141, 142, 143, 155, 157, 170, 181, 183, 184, 185, 186, 187, 188, 202, 203, 204, 213, 215, 241, 249, 250, 254, 258, 263, 265, 266, 267, 269, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 303, 304, 305, 312, 317, 318, 334], "famili": [114, 261], "fan": [183, 184, 187, 188], "fan_in": [183, 184], "fan_out": [183, 184], "fashion": 7, "fashion_train": 7, "fashionmnist": 9, "fast": 253, "faster": [114, 248, 252, 260], "fc": [48, 72, 83, 90, 100, 120, 178, 203, 204, 234, 235, 236, 237, 238, 239], "fc1": [54, 55, 115, 119, 123, 190, 191, 192, 194, 195, 196, 197, 199, 200, 215], "fc2": [54, 55, 115, 119, 123, 190, 191, 192, 194, 196, 197, 199, 200, 215], "fc3": 55, "featur": [3, 23, 25, 44, 47, 48, 52, 53, 54, 55, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 100, 101, 102, 103, 105, 110, 112, 113, 114, 146, 148, 155, 172, 173, 174, 178, 179, 204, 207, 208, 209, 210, 213, 215, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 243, 248], "feature_extractor": 52, "fed": [3, 344], "feed": [3, 271, 344], "feedforward": 115, "fergu": [112, 114], "fetch": 0, "few": 115, "fewer": [1, 64, 65, 66, 67, 68, 69, 114], "field": [5, 6, 8, 100, 104, 114, 179], "file": [3, 261], "fill": [181, 185, 186, 265, 266, 267, 269, 288, 289, 290, 291], "filter": [31, 112, 114, 134, 135, 136, 138, 172, 173, 174, 203, 204], "filter_height": 138, "filter_s": 138, "filter_width": 138, "final": [25, 26, 27, 28, 29, 30, 31, 44, 45, 46, 47, 48, 49, 50, 58, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 119, 120, 121, 122, 123, 179, 333, 344], "find": [21, 303, 305], "fine": [178, 344], "finish": 260, "first": [5, 6, 7, 8, 14, 52, 112, 115, 120, 121, 146, 178, 213, 249, 250, 251, 252, 253, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 323, 332, 333, 334, 344], "fit": 243, "fix": [120, 324], "flatten": [48, 52, 123, 138, 280, 322, 325, 326], "flexibl": [1, 3, 4, 10, 44, 48, 49, 50, 52, 59, 63, 72, 96, 97, 98, 99, 104, 105, 110, 114, 119, 120, 121, 122, 123, 241, 243, 245, 262, 288, 289, 334, 344], "flip": [339, 341, 344], "float": [2, 5, 6, 7, 8, 30, 31, 46, 56, 59, 116, 118, 125, 128, 139, 140, 141, 142, 143, 149, 150, 151, 155, 157, 158, 171, 172, 173, 174, 181, 185, 186, 187, 188, 189, 193, 206, 207, 208, 209, 210, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 269, 271, 283, 286, 297, 318, 336, 338, 339, 340, 341], "float32": [116, 118, 271, 283, 284, 287, 288, 290, 318, 334], "float64": [291, 318, 334], "flow": [47, 48, 90, 114, 123, 188, 190, 197, 200, 202, 203, 204, 213, 215, 258], "fly": [2, 3], "fname": 3, "focu": 10, "focus": 10, "follow": [0, 10, 11, 14, 20, 21, 22, 23, 26, 27, 28, 29, 30, 61, 62, 96, 97, 98, 99, 104, 105, 110, 112, 115, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 170, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 303, 305, 323, 327, 335, 336, 337, 338, 339, 340, 341, 344], "form": [20, 179, 280, 323, 326, 330, 344], "format": [2, 3, 5, 6, 7, 8, 115, 218, 221, 334], "formul": 126, "formula": [14, 22, 132, 159, 160, 161, 198, 199, 219, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 276, 317, 338], "forward": [10, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 105, 112, 115, 116, 117, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "found": 10, "foundat": [48, 90, 117, 243, 245, 271], "four": [26, 27, 28, 29, 64, 65, 66, 67, 68, 69, 324], "frac": [12, 13, 14, 16, 17, 18, 19, 21, 22, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 146, 148, 159, 160, 161, 162, 163, 164, 166, 167, 168, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 247, 248, 249, 250, 251, 252, 253, 254, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336], "frame": 143, "framework": [4, 10, 114, 218, 221, 223, 224, 225, 226, 227, 228, 244, 245, 344], "frequent": [218, 221], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 17, 19, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 138, 146, 155, 157, 170, 172, 173, 174, 178, 179, 181, 183, 184, 185, 186, 187, 188, 195, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 276, 277, 278, 282, 284, 303, 304, 305, 312, 317, 319, 321, 323, 326, 328, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 344], "full": [22, 59, 61, 62], "full_matric": 22, "fulli": [4, 11, 23, 25, 26, 27, 28, 29, 30, 31, 48, 52, 53, 54, 55, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 105, 110, 112, 114, 148, 178, 179, 215, 270], "func": 261, "function": [3, 4, 5, 6, 7, 8, 10, 11, 117, 119, 120, 121, 122, 123, 172, 173, 174, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 243, 245, 262, 270, 333, 344], "fundament": [10, 148, 215, 334], "further": [10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 58, 59, 60, 61, 62, 70, 71, 270, 304, 312, 317], "fuse": 100, "fusion": [101, 102, 103], "futur": 214, "g": [0, 13, 14, 17, 20, 22, 30, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 49, 50, 52, 53, 54, 55, 63, 105, 114, 178, 179, 206, 244, 247, 254, 319, 338], "g_": 248, "g_t": 254, "gain": [187, 188], "gamma": [223, 224, 225, 226, 227, 228, 229], "gap": [72, 83, 100, 178], "gaussian": [126, 190], "gelu": [127, 145, 201, 212], "gelunetwork": 190, "gener": [19, 115, 171, 206, 207, 208, 209, 210, 227, 250, 252, 253, 260, 263, 265, 266, 267, 268, 269, 270, 275, 283, 285, 286, 323, 337, 338, 339, 341, 344], "geoffrei": [5, 6], "get": [5, 6, 7, 8], "github": 7, "give": [10, 246, 254], "given": [13, 14, 17, 19, 20, 22, 138, 217, 218, 221, 244, 258, 263, 289, 291, 333, 338, 339, 341, 344], "global": [0, 30, 72, 83, 90, 100, 178, 258, 260, 268, 270], "go": [45, 114], "goal": [217, 218, 221], "googlenet": [45, 114], "gpu": 114, "grad": [116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 138, 146, 148, 170, 175, 176, 177, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 244, 245, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 341, 342], "grad_output": 17, "gradient": [10, 11, 47, 48, 114, 116, 118, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 263, 265, 266, 267, 269, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 334], "grain": 178, "graph": [10, 188, 271, 283, 284, 287, 288, 289, 290, 291, 334], "grayscal": [7, 8, 52, 53, 54, 55, 338, 344], "greater": 297, "green": 338, "grid": 323, "groundbreak": 114, "group": [63, 70, 71, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 104, 114, 120, 134, 135, 136, 172, 173, 174, 179, 202, 203, 204, 244, 245], "group1": 120, "group2": 120, "groupedconvblock": 83, "growth_rat": [25, 26, 27, 28, 29], "guarante": 268, "h": [72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 114, 135, 136, 138, 142, 143, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 178, 224, 225, 227, 228, 232, 233, 236, 239, 335, 337], "h_": [135, 136, 160, 161, 163, 164, 167, 168, 170, 203, 204, 232, 233, 235, 236, 238, 239], "h_out": [135, 136, 163, 164, 167, 168], "h_stack": 321, "ha": [0, 14, 115, 123, 134, 135, 136, 172, 173, 174, 195, 199, 217, 218, 223, 224, 225, 226, 227, 228, 229, 241, 244, 245, 276, 315, 319, 321, 329, 332, 338], "half": 310, "han": 7, "hand": 21, "handl": [0, 3, 10, 19, 117, 119, 120, 121, 122, 123, 218, 221, 243, 245, 260], "handwritten": [7, 8, 55], "hang": 114, "hard": [61, 62, 192], "hard_sigmoid": 191, "hardsigmoid": [192, 201, 212], "hardswish": [201, 212], "hardwar": 10, "hat": [249, 250, 251, 252, 253], "have": [0, 1, 13, 14, 16, 19, 20, 22, 118, 120, 122, 123, 135, 136, 188, 243, 287, 288, 289, 290, 291, 303, 305, 319, 321, 323, 328, 329, 332, 336, 342], "he": 114, "head": [58, 110], "height": [110, 135, 136, 138, 142, 143, 160, 161, 163, 164, 167, 168, 170, 171, 179, 203, 204, 224, 225, 227, 228, 232, 233, 235, 236, 238, 239, 241, 335, 337, 342], "help": [10, 46, 128, 130, 143, 189, 193, 195, 196, 200, 223, 224, 225, 234, 235, 237, 238, 246, 249, 250, 252, 258, 259, 260, 262], "henc": 327, "here": [3, 12, 117, 146, 243, 245, 259, 260, 262, 270, 333, 334, 344], "hidden": [23, 112, 120], "hidden_s": 120, "hierarch": [120, 123, 243], "hierarchi": 203, "hierarchicalnetwork": 120, "high": [10, 40, 41, 42, 43, 58, 80, 95, 104, 266, 269], "higher": [31, 56, 83, 218, 221, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 275, 276, 280, 301], "highest": 266, "highli": [60, 114], "highlight": [178, 237, 238, 239], "hint": 262, "hinton": [5, 6], "histor": 248, "histori": [263, 265, 266, 267, 269, 283, 284, 285, 286, 287, 288, 289, 290, 291], "hold": [119, 120, 121, 122], "horizont": [321, 329, 339, 344], "hot": [218, 221], "how": [2, 3, 10, 96, 97, 98, 99, 104, 120, 123, 243, 262, 344], "howard": 114, "howev": [116, 188], "hstack": 322, "html": [5, 6], "http": [5, 6, 7, 8], "hu": [114, 178], "huang": 114, "huber": [151, 219], "huber_loss": [145, 152], "huberloss": [212, 222], "huberregressionmodel": 219, "hue": 344, "hyperbol": [133, 200, 299, 309, 314], "hyperparamet": [64, 65, 66, 67, 68, 69, 72, 83, 111, 244, 246], "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "iccv": 114, "idea": 114, "ideal": [10, 56, 123], "ident": [16, 17, 114, 171, 212, 216, 268, 270, 287, 327], "identifi": 121, "idx": [2, 3], "ieee": [114, 178], "ii": 315, "ij": [132, 170, 198, 274, 275, 276, 280, 323], "ik": [274, 275, 276], "ill": [13, 19], "ilsvrc": 114, "imag": [3, 4, 5, 6, 7, 8, 23, 24, 26, 27, 28, 29, 31, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 113, 114, 135, 157, 171, 173, 178, 203, 227, 323, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "image_dir": 3, "image_path": 3, "imagedataset": 3, "imageio": 3, "imagenet": [26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 56, 57, 58, 59, 60, 61, 62, 81, 82, 96, 97, 98, 99, 104, 114], "imbal": [218, 221], "impact": [114, 252], "implement": [2, 3, 10, 19, 23, 25, 30, 44, 45, 46, 47, 49, 50, 52, 56, 57, 58, 72, 81, 82, 84, 85, 86, 87, 88, 89, 90, 110, 112, 114, 117, 138, 175, 176, 177, 179, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 321, 332, 338], "impli": [202, 203], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "improp": [120, 123, 270], "improv": [31, 45, 46, 47, 48, 50, 63, 72, 83, 96, 97, 98, 99, 100, 112, 114, 155, 171, 178, 190, 196, 200, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 337, 340, 344], "imread": 3, "in1_featur": [146, 213], "in2_featur": [146, 213], "in_channel": [72, 120, 123, 172, 173, 174, 175, 176, 177, 178, 179, 202, 203, 204, 224, 225, 234, 235, 236, 237, 238, 239, 243], "in_featur": [119, 120, 123, 148, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 226, 229, 234, 235, 236, 237, 238, 239], "incept": [45, 46, 47, 48, 49, 50, 51, 114], "inception_resnet_v1": 114, "inception_resnet_v2": 114, "inception_v1": 114, "inception_v3": 114, "inception_v4": 114, "inceptionresnet": [49, 50], "includ": [3, 4, 7, 10, 11, 17, 18, 23, 44, 45, 46, 49, 52, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 111, 112, 115, 117, 118, 120, 122, 123, 170, 172, 173, 174, 175, 176, 177, 241, 243, 244, 245, 252, 262, 270, 276, 324], "inclus": [118, 121, 266, 269], "incom": [148, 215], "incomplet": 2, "incompletedataset": 2, "incorpor": [22, 60, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 114, 190], "increas": [56, 83, 84, 85, 86, 87, 88, 89, 100, 134, 135, 136, 138, 171, 248, 255, 259, 321, 332, 338, 339, 341, 344], "independ": [120, 134, 135, 136, 206, 207, 208, 209, 210, 229, 276, 286, 336, 338, 340, 342], "index": [0, 2, 5, 6, 7, 8, 259, 283, 284, 287, 323, 327], "indexerror": 0, "indic": [0, 1, 70, 71, 105, 115, 118, 120, 122, 123, 150, 154, 218, 221, 234, 258, 271, 335, 337], "individu": [3, 120, 123, 219, 229, 245, 248, 255], "induc": [130, 196], "inf": 313, "infer": [96, 97, 98, 99, 104, 120, 123, 260], "infin": [20, 22, 251], "inform": [10, 114, 115, 116, 178, 245, 247, 260], "infti": [18, 253], "inherit": [1, 246, 254, 256], "init": 182, "initi": [1, 25, 48, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 106, 107, 108, 109, 111, 116, 118, 119, 120, 121, 122, 123, 179, 181, 183, 184, 185, 186, 187, 188, 202, 203, 204, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 229, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 265, 268, 269, 270, 283, 287, 288, 289, 290, 291, 318], "initial_accumulator_valu": 248, "inner": [10, 274, 292], "innov": 58, "input": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 96, 97, 98, 99, 100, 104, 110, 112, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 270, 271, 272, 274, 275, 276, 280, 284, 286, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "input1": 213, "input2": 213, "input_": [23, 112, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 231, 232, 233], "input_1": 146, "input_2": 146, "input_data": [189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239], "input_s": [120, 122, 198, 218, 221], "input_shap": 115, "input_tensor": [10, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 105, 110, 116, 119, 120, 121, 122, 123, 132, 175, 176, 177, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 243, 335, 336, 337, 338, 339, 340, 341, 342], "insid": [3, 258, 260], "insight": [10, 114], "inspect": [117, 118, 123, 244], "instabl": [19, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "instal": 10, "instanc": [0, 1, 10, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 111, 113, 115, 117, 118, 119, 121, 122, 123, 157, 195, 226, 227, 228, 229, 244, 261, 318, 326, 330, 344], "instance_norm": [145, 156, 226, 227, 228], "instancenorm1d": [212, 230], "instancenorm1dmodel": 226, "instancenorm2d": [212, 230], "instancenorm3d": [212, 230], "instanti": [2, 30, 40, 41, 42, 43, 96, 97, 98, 99, 104, 261], "instead": [10, 115, 119, 120, 121, 122, 123, 183, 184, 187, 188, 249, 250, 251, 260, 262, 285, 286], "int": [0, 1, 2, 5, 6, 7, 8, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 132, 134, 135, 136, 138, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 185, 186, 187, 188, 198, 202, 203, 204, 213, 215, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 249, 250, 251, 252, 253, 255, 261, 263, 265, 266, 267, 268, 269, 271, 283, 284, 285, 287, 288, 290, 297, 303, 304, 305, 312, 316, 317, 318, 319, 324, 326, 327, 328, 329, 330, 331, 335, 337, 342], "integ": [1, 3, 17, 90, 105, 134, 135, 136, 160, 161, 202, 203, 204, 229, 232, 233, 235, 236, 237, 238, 239, 262, 266, 267, 269, 270, 285, 288, 290, 304, 312, 316, 317, 324, 326, 327, 330], "integr": [1, 2, 4, 5, 6, 7, 8, 11, 63, 114, 118, 120, 122, 123, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 213, 215, 234, 235, 236, 237, 238, 239], "intellig": [114, 178], "intend": [116, 121, 122], "intens": [19, 25, 73, 336, 338], "intent": 262, "interact": [146, 213, 243, 270], "interdepend": 114, "interfac": [2, 117, 120, 245], "interfer": [258, 260], "intermedi": [19, 70, 71, 178], "intern": [73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 114, 119, 120, 121, 122, 123, 218, 221, 243, 335, 336, 337, 338, 339, 340, 341, 342], "interpol": [145, 169, 241, 342], "interpret": [114, 132, 198, 262, 319], "interv": [265, 269, 283], "introduc": [31, 45, 46, 56, 57, 58, 83, 114, 129, 178, 190, 194, 195, 197, 200, 206, 207, 208, 209, 210, 337, 340, 344], "introspect": 123, "intuit": [10, 119, 121, 243, 344], "inv": 15, "inv_a": 16, "invari": [235, 238], "invers": [10, 13, 16, 17, 19, 248, 294, 295, 296], "invert": [13, 16, 17, 21, 57, 58, 60, 114], "invok": 261, "involv": [12, 13, 14, 16, 19, 20, 22, 100, 125, 126, 128, 129, 130, 131, 133, 146, 148, 170, 202, 203, 204, 213, 215, 262, 263, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 291, 301, 302, 303, 305, 308, 310, 323, 324, 326, 330], "is_leaf": 271, "issu": [3, 196, 223, 224, 225, 249, 250], "item": [7, 220], "iter": [0, 1, 2, 3, 116, 117, 120, 122, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 283], "ith": [132, 198], "its": [4, 17, 19, 23, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 101, 102, 103, 112, 114, 115, 116, 119, 120, 121, 122, 134, 135, 136, 138, 171, 179, 188, 190, 194, 199, 237, 238, 239, 243, 244, 247, 255, 258, 259, 260, 261, 283, 285, 286, 290, 303, 305, 318, 327, 336, 339, 341, 344], "itself": [12, 17, 119, 120, 121, 122], "j": [8, 132, 178, 198, 223, 224, 225, 226, 227, 228, 234, 235, 237, 238, 323, 329, 335, 337], "jie": 114, "jk": 275, "join": [3, 319], "json": 261, "k": [17, 114, 134, 202, 218, 224, 225, 227, 228, 234, 237, 238, 274, 275, 284, 287, 319], "k_d": [136, 204, 236, 239], "k_h": [135, 136, 203, 204, 235, 236, 239], "k_w": [135, 136, 203, 204, 235, 236, 239], "kaim": [114, 183, 184, 187, 188], "kaiming_norm": 182, "kaiming_uniform": 182, "kalenichenko": 114, "karen": 114, "kashif": 7, "keep": [117, 194, 247, 260, 327], "keep_grad": [118, 263, 265, 266, 267, 269, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 334], "keep_var": 117, "keepdim": [303, 304, 305, 312, 317], "kei": [114, 117, 119, 121, 123, 244], "kept": [304, 312, 317], "kernel": [52, 53, 54, 55, 61, 62, 100, 101, 102, 103, 104, 112, 114, 134, 135, 136, 138, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 231, 232, 233, 235, 236, 239], "kernel_s": [58, 61, 62, 100, 101, 102, 103, 120, 123, 162, 163, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 224, 225, 234, 235, 236, 237, 238, 239], "keyerror": 117, "keyword": [24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 113, 117, 214], "kj": [274, 276], "known": 114, "kriz": [5, 6], "krizhevski": [5, 6, 114], "kroneck": [132, 198], "kwarg": [24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 117, 214, 261], "l": [12, 19, 40, 114, 134, 141, 159, 162, 166, 172, 178, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231], "l2": [246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "l_": [134, 159, 162, 166, 202, 231, 234, 237], "l_out": [134, 162, 166], "label": [4, 5, 6, 7, 8, 46, 217, 218, 221], "lambd": 246, "lambda": [14, 130, 196, 246, 250], "lambda_1": 14, "lambda_2": 14, "lambda_i": 14, "lambda_n": 14, "languag": [4, 202, 213, 234, 237], "larg": [0, 3, 19, 25, 40, 43, 58, 61, 73, 74, 75, 78, 91, 92, 114, 175, 176, 177, 195, 219, 243, 246, 249, 250, 251, 254, 255, 256, 260], "larger": [30, 31, 72, 100, 119, 121, 134, 135, 136, 138, 246, 277, 324, 335, 337, 342], "largest": 303, "last": [1, 132, 158, 198, 275, 276, 319, 339, 341], "last_channel": 58, "latest": 4, "layer": [10, 23, 25, 26, 27, 28, 29, 30, 31, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 105, 106, 107, 108, 109, 112, 114, 115, 117, 119, 120, 123, 132, 148, 155, 157, 158, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 198, 202, 203, 204, 213, 214, 215, 221, 229, 234, 235, 236, 237, 238, 239, 243, 270, 324, 334], "layer1": 261, "layer2": 261, "layer_group": 120, "layer_norm": [145, 156, 229], "layer_sequ": [120, 123], "layernorm": [212, 230], "layernormmodel": 229, "le": 114, "lead": [120, 123, 190, 226, 227, 228, 229, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 270], "leaf": 271, "leaki": [128, 193], "leaky_relu": [127, 145, 193], "leakyrelu": [201, 212], "learn": [1, 3, 4, 7, 8, 10, 17, 19, 31, 83, 84, 85, 86, 87, 88, 89, 112, 113, 114, 119, 120, 121, 122, 129, 132, 178, 189, 193, 194, 198, 202, 203, 204, 207, 208, 209, 210, 213, 215, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 268, 333, 334, 344], "learnabl": [116, 117, 118, 155, 157, 158, 172, 173, 174, 202, 203, 204, 213, 215, 223, 224, 225, 226, 227, 228, 229, 243], "least": [19, 20, 22, 241, 315], "lecun": [8, 114], "left": [17, 18, 19, 22, 126, 132, 190, 198, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 237, 238, 239, 335, 337], "leftarrow": 252, "len": [0, 1, 2, 3, 323], "lenet": [51, 53, 54, 55, 114], "lenet_1": 114, "lenet_4": 114, "lenet_5": 114, "length": [120, 134, 141, 159, 162, 166, 202, 214, 223, 226, 231, 234, 237, 324, 336], "leq": [191, 192, 219, 253, 281, 297], "lerp": 170, "less": [0, 125, 128, 151, 189, 193, 218, 219, 221, 297], "let": 14, "level": [10, 48], "leverag": [21, 47, 50, 84, 85, 86, 87, 88, 89, 110, 114, 179, 243], "li": 114, "librari": [3, 10, 11, 117, 243, 244, 245, 261, 262, 270, 271, 344], "lie": 263, "lightweight": [10, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 57, 61, 62, 64, 65, 66, 67, 68, 69, 76, 93, 179, 192, 195], "like": [10, 31, 48, 84, 85, 86, 87, 88, 89, 101, 102, 103, 114, 116, 117, 120, 123, 134, 187, 188, 196, 206, 223, 224, 225, 226, 227, 228, 258, 259, 262, 318, 334, 344], "likelihood": [154, 218, 221], "limit": [61, 62, 115, 195, 247, 297], "linalg": [10, 15], "linalgerror": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [10, 11, 12, 19, 20, 21, 57, 60, 90, 114, 115, 119, 120, 121, 123, 125, 126, 128, 129, 130, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 213, 214, 217, 218, 219, 220, 221, 223, 226, 229, 234, 235, 236, 237, 238, 239, 261, 287], "linearli": 219, "list": [0, 1, 31, 52, 58, 63, 72, 83, 90, 100, 105, 115, 116, 118, 119, 120, 121, 122, 158, 179, 214, 229, 244, 262, 263, 265, 266, 267, 269, 271, 284, 285, 286, 288, 289, 290, 291, 316, 327, 328, 331, 333], "listdir": 3, "liter": [72, 149, 150, 151, 153, 154, 170, 172, 173, 174, 175, 176, 177, 179, 183, 184, 202, 203, 204, 217, 218, 219, 220, 221, 241, 323], "liu": 114, "ln": 281, "load": [3, 4, 5, 6, 7, 8, 116, 117, 118, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261], "load_state_dict": [117, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "loader": [1, 2, 3], "local": [114, 138, 202], "locat": [114, 170], "log": [154, 217, 218, 221, 292], "log_softmax": 221, "logarithm": [281, 301, 302], "logic": [3, 231, 232, 233, 243, 244], "logit": [23, 112, 132, 198, 218], "logsoftmax": [218, 221], "long": [252, 316], "loop": [1, 120, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "loss": [10, 19, 119, 120, 121, 122, 123, 132, 149, 150, 151, 153, 154, 189, 190, 193, 194, 196, 197, 198, 200, 206, 207, 208, 209, 210, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "low": [10, 48, 57, 61, 62, 266, 269], "lower": [12, 56, 186, 246, 254, 255, 256, 269], "lowest": 266, "lr": [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "lu": 16, "lucid": [0, 1, 2, 5, 6, 7, 8, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 292, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "m": [41, 105, 114, 119, 120, 123, 235, 236, 238, 239, 249, 250, 251, 252, 253, 287], "m_": [249, 250, 251, 252, 253], "m_t": [252, 253], "maaten": 114, "machin": [3, 7, 8, 10, 19, 114, 178, 249, 259, 268], "magnitud": [254, 255, 344], "mai": [3, 10, 14, 16, 19, 120, 122, 171, 219, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 270, 338, 344], "main": [10, 20, 48, 120, 284, 287], "maintain": [19, 40, 41, 42, 43, 56, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 104, 114, 116, 117, 119, 120, 121, 123, 130, 183, 184, 187, 188, 189, 190, 196, 206, 207, 208, 209, 210, 223, 224, 225, 226, 227, 228, 249, 254, 335, 338, 342], "make": [1, 3, 10, 44, 48, 52, 57, 60, 61, 62, 72, 114, 120, 123, 197, 218, 219, 229, 235, 238, 243, 248, 249, 250, 251, 259, 261, 270, 271, 276, 323, 333, 344], "manag": [10, 117, 119, 120, 121, 122, 123, 243, 245, 258, 260, 261, 270], "manhattan": 18, "mani": 115, "manipul": [10, 119, 121, 344], "manner": [120, 123], "manual": [149, 150, 154, 217, 218, 221, 260], "map": [70, 71, 72, 83, 93, 100, 114, 117, 131, 133, 178, 197, 200], "mask": [116, 206, 207, 208, 209, 210], "match": [21, 117, 120, 123, 149, 151, 153, 158, 172, 173, 174, 244, 301, 326, 327, 330, 331, 336, 344], "math": [298, 308, 313], "mathbf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 110, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 170, 175, 176, 177, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 274, 275, 276, 280, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342], "mathcal": [183, 185, 187, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229], "mathemat": [16, 172, 173, 174, 337, 339, 340, 341], "mathrm": 19, "matmul": 292, "matric": [11, 13, 14, 16, 19, 21, 22, 274, 275, 276, 287, 323], "matrix": [10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 138, 146, 214, 215, 243, 274, 323], "matrix_pow": 15, "matthew": 114, "max": [18, 90, 105, 129, 166, 167, 168, 191, 192, 194, 195, 237, 238, 239, 251, 277, 292, 297], "max_pool": [237, 238, 239], "max_pool1d": [145, 165], "max_pool2d": [145, 165], "max_pool3d": [145, 165], "max_valu": 297, "maxim": 3, "maximum": [18, 194, 195, 237, 238, 239, 249, 251, 292, 297, 303, 340], "maxpool": [23, 112], "maxpool1d": [212, 240], "maxpool1dmodel": 237, "maxpool2d": [120, 123, 203, 212, 240], "maxpool2dmodel": 238, "maxpool3d": [204, 212, 240], "maxpool3dmodel": 239, "mean": [5, 6, 7, 8, 20, 70, 71, 115, 116, 130, 134, 135, 136, 139, 149, 150, 151, 153, 154, 155, 157, 172, 173, 174, 185, 189, 190, 191, 193, 194, 196, 197, 200, 204, 206, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 249, 250, 251, 252, 253, 254, 258, 267, 292, 297, 301, 302, 303, 305, 308, 310, 312, 315, 316, 317, 333, 336, 344], "meaning": [123, 262], "measur": [217, 218, 220, 221], "mechan": [10, 70, 71, 90, 100, 104, 122, 146], "medium": 41, "membership": 217, "memori": [2, 3, 25, 260, 285, 286], "meshgrid": 322, "method": [3, 10, 11, 16, 31, 90, 110, 111, 119, 120, 121, 122, 123, 149, 150, 151, 153, 154, 183, 184, 187, 188, 217, 218, 219, 220, 221, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 270], "mid_channel": [61, 62], "middl": 259, "might": 243, "min": [191, 192, 195, 278, 292, 297], "min_valu": 297, "mind": [0, 3, 10, 120, 123, 260], "mingx": 114, "mini": 1, "minim": [4, 10, 58, 114, 123, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 245], "minimalist": 10, "minimum": [292, 297, 305], "minu": 197, "mirror": [289, 291], "mismatch": [31, 117, 243, 244], "miss": [117, 243], "mitig": [128, 189, 193, 196, 223, 224, 225], "mlp": 179, "mnist": [4, 7, 9, 53, 54], "mnist_train": [4, 8], "mobil": [56, 57, 58, 60, 61, 62, 114], "mobilenet": [51, 57, 58, 60, 61, 62, 114, 195], "mobilenet_v2": 114, "mobilenet_v3": [61, 62], "mobilenet_v3_larg": 114, "mobilenet_v3_smal": 114, "mobilenetv2": [57, 114], "mobilenetv3": [58, 61, 62, 114], "mode": [10, 143, 155, 157, 170, 183, 184, 206, 207, 208, 209, 210, 241, 324], "model": [1, 3, 4, 10, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 132, 171, 172, 173, 174, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 261, 270, 333, 334, 344], "model_b0": 30, "model_b7": 30, "moder": 94, "modern": 114, "modif": [111, 123, 260], "modifi": [24, 72, 110, 113, 119, 120, 121, 122, 181, 183, 184, 185, 186, 187, 188, 206, 258, 260, 268, 321, 332], "modul": [5, 6, 7, 8, 10, 23, 24, 30, 31, 44, 47, 48, 49, 50, 52, 56, 57, 58, 72, 83, 90, 100, 105, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 262, 270, 334, 344], "modular": [3, 10, 114, 117, 120, 123, 243, 344], "moduledict": [120, 121, 123, 124], "modulelist": [122, 123, 124], "moment": [249, 250, 251, 252, 253], "momentum": [155, 157, 172, 173, 174, 223, 224, 225, 226, 227, 228, 246, 252, 254, 256], "momentum_decai": 252, "monoton": 199, "moor": 19, "more": [3, 4, 7, 10, 14, 72, 79, 119, 120, 123, 175, 176, 177, 189, 207, 208, 209, 210, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 267, 276, 315, 329, 344], "most": [11, 114, 238, 334, 335, 344], "move": [246, 254], "mse": [151, 153, 219, 220], "mse_loss": [145, 152], "mseloss": [212, 222], "mu": [185, 223, 224, 225, 226, 227, 228, 229, 317], "mu_c": 336, "mu_i": [226, 227, 228], "much": 344, "mul": 292, "multi": [3, 4, 49, 100, 101, 102, 103, 114, 132, 150, 154, 179, 198, 218, 221, 304, 312, 317], "multidimension": [265, 269, 285], "multipl": [1, 3, 10, 11, 17, 21, 23, 72, 90, 104, 121, 122, 123, 138, 170, 171, 178, 179, 206, 207, 208, 209, 210, 218, 221, 243, 259, 263, 265, 266, 267, 269, 274, 279, 285, 286, 333, 338, 344], "multipli": [17, 59, 122, 148, 215, 241, 255, 279, 280], "must": [0, 1, 3, 12, 13, 14, 16, 17, 20, 21, 22, 115, 117, 119, 120, 121, 122, 123, 158, 206, 207, 208, 209, 210, 221, 241, 244, 260, 263, 315, 319, 321, 324, 326, 327, 329, 330, 332, 335, 336, 337, 338, 339, 341], "my_simple_model": 261, "mymodel": [117, 118, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "myoptim": [244, 245], "n": [17, 18, 72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 114, 119, 120, 123, 134, 135, 136, 138, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 178, 183, 185, 187, 202, 203, 204, 209, 210, 213, 215, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 287, 304, 315, 317], "n1": 18, "nabla_": [247, 248, 249, 250, 251, 252, 253, 255], "nabla_t": 253, "nadam": 257, "nair": [5, 6], "name": [114, 115, 117, 119, 121, 123, 261, 262], "nan": [20, 22], "natur": [19, 114, 202, 213, 234, 237, 281, 301, 302], "ndarrai": [116, 118, 262, 263, 271, 284, 286, 289, 291, 318], "ndim": [20, 22, 118, 271], "ne": 17, "nearest": [170, 241], "necessari": [4, 5, 6, 7, 8, 19, 260, 321, 332], "need": [2, 4, 120, 121, 122, 132, 213, 243, 260, 285, 286, 333, 334, 344], "neg": [17, 19, 22, 125, 154, 171, 189, 193, 194, 196, 218, 221, 255, 319], "negative_slop": [128, 193], "neglect": 122, "neighbor": 170, "neq": 18, "nest": [115, 120, 123, 243], "nestedmodel": 115, "nesterov": 252, "net": [112, 114], "network": [3, 4, 10, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 47, 48, 55, 56, 59, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 100, 105, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 146, 148, 155, 171, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 254, 256, 269, 270, 271, 283, 288, 290, 303, 305, 324, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "neural": [3, 4, 10, 23, 24, 30, 32, 33, 34, 35, 36, 37, 38, 39, 48, 55, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 146, 148, 155, 171, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 254, 256, 269, 270, 271, 283, 288, 290, 303, 305, 324, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "neuralnetwork": [191, 192, 194, 199], "neuron": 193, "never": 338, "new": [117, 118, 125, 126, 128, 129, 130, 131, 133, 146, 148, 170, 179, 183, 184, 185, 186, 187, 188, 244, 261, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 321, 324, 326, 327, 329, 330, 331, 332], "next": [123, 333], "nll": 154, "nll_loss": [145, 152], "nllloss": [212, 222], "nn": [5, 6, 7, 8, 10, 23, 25, 30, 31, 44, 48, 52, 56, 57, 58, 72, 83, 90, 96, 97, 98, 99, 100, 104, 105, 112, 115, 124, 127, 137, 144, 147, 152, 156, 165, 169, 180, 182, 201, 205, 211, 212, 216, 222, 230, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 334, 344], "no_grad": 258, "node": 271, "nois": [22, 270], "non": [14, 17, 19, 22, 122, 126, 128, 129, 183, 184, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 206, 207, 208, 209, 210, 249, 250, 260, 281, 297], "none": [0, 1, 2, 5, 6, 7, 8, 30, 31, 44, 48, 52, 56, 57, 58, 63, 72, 110, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342], "norm": [11, 15, 251], "normal": [5, 6, 7, 8, 90, 126, 130, 132, 133, 155, 157, 158, 172, 173, 174, 182, 183, 187, 190, 196, 198, 206, 223, 224, 225, 226, 227, 228, 229, 254, 267, 270, 333, 343, 344], "normalized_shap": [158, 229], "note": [134, 206], "noth": [139, 140, 141, 142], "notimplementederror": [2, 117, 244], "notin": 297, "nov": 114, "novel": [7, 114], "np": [72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 116, 118, 178, 218, 221, 262, 271, 276, 283, 284, 287, 288, 290, 291, 302, 318, 334], "npy": [5, 6, 7, 8], "num_class": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 198, 218, 221], "num_featur": [123, 172, 173, 174, 223, 224, 225, 226, 227, 228], "num_init_featur": [25, 26, 27, 28, 29], "num_paramet": 122, "number": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 122, 123, 134, 135, 136, 138, 141, 142, 143, 146, 148, 150, 154, 155, 157, 159, 160, 161, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 197, 202, 203, 204, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 235, 236, 237, 238, 239, 246, 265, 268, 269, 271, 281, 283, 285, 287, 303, 304, 305, 316, 317, 319, 321, 324, 326, 327, 328, 330, 332, 336, 338, 339, 341, 344], "numer": [16, 19, 149, 150, 155, 157, 158, 172, 173, 174, 195, 217, 218, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 251, 252, 253, 254, 262, 273, 283, 288, 290], "numpi": [10, 116, 118, 218, 221, 262, 271, 276, 284, 287, 302, 315, 318, 324, 326, 330, 334, 344], "o": [3, 236, 239, 288, 289], "object": [1, 3, 11, 100, 114, 117, 121, 122, 220, 243, 260, 272, 273, 277, 278, 279, 282, 318], "observ": 249, "obtain": 1, "occur": [171, 260, 261, 319], "occurr": 17, "odot": [206, 207, 208, 209, 210], "off": 258, "offer": [4, 10, 243, 245, 270, 344], "offset": 287, "often": [17, 81, 82, 134, 135, 136, 138, 218, 221, 283, 290, 334, 338, 342, 344], "older": 252, "onc": 260, "one": [0, 96, 97, 98, 99, 104, 122, 123, 132, 134, 148, 162, 166, 172, 173, 174, 196, 197, 198, 202, 208, 218, 221, 223, 226, 234, 237, 241, 244, 259, 262, 267, 282, 289, 303, 305, 320, 325, 329, 334], "ones": [146, 148, 202, 203, 204, 215, 223, 224, 225, 226, 227, 228, 229, 243, 287, 289, 292], "ones_lik": 292, "onli": [10, 115, 170, 191, 194, 206, 207, 208, 209, 210, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 237, 238, 239, 255, 258, 283, 297, 303, 305, 315, 324, 325, 327, 328], "onto": [20, 22], "openml": [5, 6, 7, 8], "oper": [3, 10, 11, 16, 19, 70, 71, 90, 91, 92, 93, 94, 95, 116, 117, 120, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 143, 146, 148, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 301, 302, 303, 304, 305, 308, 310, 312, 315, 317, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 342], "operatornam": [17, 19], "opposit": 246, "optim": [3, 10, 11, 17, 19, 20, 22, 25, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 61, 62, 114, 116, 118, 121, 122, 138, 202, 203, 204, 243, 260], "optimizer_st": [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "option": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 125, 128, 132, 135, 136, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 193, 198, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 244, 246, 254, 256, 263, 265, 266, 267, 269, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 303, 304, 305, 312, 316, 317, 318, 319, 323, 326, 328, 329, 334, 338, 339, 341], "ord": 18, "order": [1, 3, 18, 22, 119, 120, 121, 122, 123, 316, 333], "ordered_dict": 123, "ordereddict": [117, 119, 120, 123], "organ": [119, 120, 121, 123, 261], "orient": 344, "origin": [46, 55, 139, 171, 178, 200, 324, 325, 326, 327, 330, 331, 342], "orthogon": [19, 20, 22], "orthonorm": 20, "oscil": [246, 254, 256], "other": [2, 3, 10, 16, 46, 50, 52, 55, 116, 117, 120, 123, 183, 184, 206, 243, 244, 258, 260, 270, 271, 283, 285, 288, 290, 315, 323, 344], "otherwis": [73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 125, 128, 129, 130, 132, 189, 191, 192, 193, 194, 196, 198, 207, 208, 209, 210, 219, 234, 235, 236, 237, 238, 239, 244, 255, 261, 277, 278, 303, 305], "otim": [19, 146, 213], "out": [0, 3, 4, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 183, 184, 187, 188, 202, 203, 204, 206, 207, 208, 209, 210, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332], "out_channel": [52, 58, 61, 62, 120, 123, 172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 224, 225, 234, 235, 236, 237, 238, 239, 243], "out_featur": [119, 120, 123, 146, 148, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 226, 229, 234, 235, 236, 237, 238, 239], "outcom": [338, 339, 341], "outer": 292, "outlier": [151, 219], "output": [0, 1, 2, 10, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 146, 148, 159, 160, 161, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 290, 291, 301, 302, 303, 304, 305, 308, 310, 312, 315, 316, 317, 323, 324, 326, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "output_height": 138, "output_lay": [120, 123], "output_s": [120, 159, 160, 161, 231, 232, 233], "output_width": 138, "outsid": 0, "over": [0, 1, 2, 3, 11, 57, 70, 71, 100, 112, 117, 120, 122, 132, 159, 160, 161, 178, 198, 202, 203, 204, 218, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 265, 269, 303, 304, 305, 312, 315, 317, 338, 339, 341], "overal": 110, "overdetermin": 19, "overfit": [1, 23, 112, 140, 143, 207, 208, 209, 210, 246, 249, 254, 256], "overhead": [58, 114, 178], "overli": 195, "overrid": [2, 3], "overridden": [117, 244], "overwrit": [119, 121], "own": [4, 119, 120, 121, 122, 134, 135, 136, 188, 243, 336], "p": [18, 19, 30, 118, 121, 122, 139, 140, 141, 142, 143, 206, 207, 208, 209, 210, 234, 237, 238, 338, 339, 341, 344], "p_d": [236, 239], "p_h": [235, 236, 239], "p_w": [235, 236, 239], "packag": [2, 3, 4, 11, 114, 243, 245, 261, 268, 270, 334, 344], "pad": [52, 120, 123, 134, 135, 136, 138, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 322], "pad_after_dim1": 324, "pad_after_dim2": 324, "pad_before_dim1": 324, "pad_before_dim2": 324, "pad_width": 324, "padding_height": 138, "padding_width": 138, "pair": 146, "pang": 114, "paper": 45, "parallel": [1, 3, 100, 114], "param": [117, 118, 121, 122, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "param1": 117, "param_dict": 121, "param_group": [244, 245], "param_groups_setup": 244, "param_list": 122, "param_s": 261, "paramet": [0, 2, 10, 53, 54, 55, 114, 117, 243, 244, 245, 262, 270, 344], "parameterdict": 124, "parameterlist": 124, "parent": 243, "part": [116, 117, 188, 243, 258, 260, 270, 283, 284, 287, 288, 289, 290, 291, 334, 344], "partial": [12, 13, 14, 16, 17, 18, 19, 21, 22, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "particip": [118, 334], "particular": [119, 121], "particularli": [10, 19, 57, 84, 85, 86, 87, 88, 89, 120, 121, 122, 123, 132, 148, 172, 173, 174, 175, 176, 177, 198, 215, 218, 221, 226, 227, 228, 229, 250, 258, 261, 333], "pass": [2, 10, 19, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 115, 117, 118, 119, 120, 121, 122, 123, 170, 172, 173, 174, 178, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 243, 262, 271, 304, 312, 315, 316, 317, 319, 321, 325, 327, 328, 332, 334, 344], "past": [246, 247, 249, 254], "patch": [138, 235], "path": [3, 5, 6, 7, 8], "pathwai": 114, "pattern": [114, 129, 178, 194, 202, 203, 204], "penal": [246, 254, 256], "penalti": [247, 248, 249, 250, 251, 252, 253], "penros": 19, "per": [1, 58, 84, 85, 86, 87, 88, 89, 101, 102, 103, 159, 226, 227, 228, 229, 231], "perform": [3, 10, 11, 12, 19, 23, 31, 40, 41, 42, 43, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 80, 96, 97, 98, 99, 100, 105, 112, 114, 117, 118, 122, 126, 134, 135, 136, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 258, 260, 268, 270, 272, 273, 276, 279, 282, 301, 303, 305, 312, 316, 333, 335, 337, 342, 344], "permut": 316, "persist": [116, 263, 265, 266, 267, 269, 285, 286], "perturb": [14, 21, 22, 344], "phi": [126, 190], "pi": [126, 190, 298, 308, 313], "piecewis": [191, 192], "pil": [334, 344], "pinv": 15, "pioneer": 114, "pipelin": [5, 6, 7, 8, 270, 333, 334, 336], "pixel": [5, 6, 7, 8, 170, 241, 336, 338], "place": [181, 183, 184, 185, 186, 187, 188], "placehold": [117, 214], "plai": [262, 270], "plot": 323, "point": [4, 171, 258], "pointwis": [175, 176, 177], "pool": [23, 52, 53, 54, 55, 63, 72, 83, 90, 100, 105, 112, 114, 159, 160, 161, 162, 163, 164, 166, 167, 168, 178, 179, 203, 204, 231, 232, 233, 234, 235, 236, 237, 238, 239, 303, 305], "pool1": 123, "pool2": 123, "poorli": 16, "popul": 117, "popular": [4, 114], "portion": 344, "pose": 19, "posit": [1, 12, 17, 117, 123, 171, 189, 193, 194, 196, 234, 235, 236, 237, 238, 239, 255, 259, 281, 326, 330, 337], "possibl": [10, 344], "potenti": [19, 214, 254, 328], "power": [10, 17, 57, 61, 62, 63, 114, 178, 259, 260, 292, 333, 334, 344], "pp": 114, "practic": [19, 218, 221], "practition": 344, "pre": [40, 41, 42, 43, 73, 77, 78], "preactbottleneck": [73, 77, 78], "preced": [114, 118, 241, 271], "preconfigur": [32, 33, 34, 35, 36, 37, 38, 39, 49, 50], "predefin": [4, 114, 120, 196], "predict": [110, 217, 218, 220, 221], "prefix": [117, 261], "prepar": [3, 259, 324, 326, 330, 334, 344], "prepend": 117, "preprint": 114, "preprocess": [3, 4, 138, 171, 270, 333, 334, 344], "present": [217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 235], "preserv": [139, 171, 206, 283, 284, 287, 288, 289, 290, 291, 304, 312, 317], "preset": 4, "prevent": [1, 119, 120, 121, 122, 123, 140, 143, 195, 207, 208, 209, 210, 217, 218, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260], "previou": [114, 246, 255, 260], "previous": 249, "primari": [10, 262], "primarili": 123, "print": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 258, 259, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342], "priorit": [61, 62, 179, 191], "prob": 263, "probabilist": 270, "probabl": [30, 46, 126, 132, 139, 140, 141, 142, 143, 149, 190, 198, 206, 207, 208, 209, 210, 217, 218, 221, 263, 338, 339, 341, 344], "problem": [19, 20, 22, 114, 128, 189, 193, 253], "proceed": 114, "process": [2, 3, 4, 17, 20, 22, 23, 49, 70, 71, 72, 100, 111, 112, 114, 122, 134, 135, 136, 157, 171, 172, 173, 174, 178, 179, 196, 200, 202, 204, 213, 223, 224, 225, 226, 227, 228, 229, 234, 236, 237, 239, 246, 262, 323, 334, 335, 336, 337, 342, 344], "produc": [23, 112, 115, 159, 160, 161, 178, 202, 203, 204, 231, 232, 233, 268, 270], "product": [10, 20, 22, 192, 197, 199, 213, 229, 243, 274, 275, 279, 280], "program": [258, 270], "progress": [31, 248], "project": [20, 22], "projector": 19, "promin": [234, 236, 237, 238, 239], "promot": [123, 218, 221, 243], "propag": [13, 14, 16, 19, 20, 21, 22, 114, 117, 123, 146, 148, 170, 178, 235, 236, 254, 255, 263, 274, 275, 276, 280, 303, 305, 323, 324, 327, 331], "properli": [0, 122, 132, 198, 243], "properti": [11, 13, 16, 17, 126, 130, 139, 190, 196, 206, 248, 253], "proport": [5, 6, 7, 8, 317], "proportion": 342, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 24, 44, 45, 46, 48, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 105, 110, 111, 113, 114, 117, 119, 120, 121, 122, 126, 148, 160, 161, 171, 217, 218, 219, 221, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 254, 256, 258, 260, 262, 268, 270, 271, 276, 283, 289, 303, 305, 316, 318, 326, 328, 330, 344], "pseudo": [16, 19], "purpos": [265, 269, 283, 288, 290], "python": 262, "pytorch": 318, "q": [20, 114], "qr": 15, "quad": [19, 217, 218, 219, 220, 221, 237, 238, 239, 272, 273, 277, 278, 279, 282, 335], "quadrat": 219, "quoc": 114, "quotient": 273, "r": [20, 114, 338, 339, 340, 341], "r_t": 253, "radam": 257, "radix": [63, 64, 65, 66, 67, 68, 69, 70, 71], "rais": [0, 1, 2, 117, 243, 244, 281], "rand": [264, 270], "randint": [264, 270], "randn": [23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 175, 176, 177, 178, 179, 243, 264, 268, 270], "random": [1, 2, 3, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 101, 102, 103, 104, 110, 175, 176, 177, 178, 179, 337, 338, 339, 340, 341, 344], "random_integ": 270, "random_tensor": 270, "randomcrop": [343, 344], "randomgrayscal": [343, 344], "randomhorizontalflip": [343, 344], "randomli": [1, 139, 140, 141, 142, 143, 171, 206, 207, 208, 209, 210, 337, 338, 339, 340, 341, 344], "randomnoisedataset": [0, 1, 2], "randomrot": [343, 344], "randomverticalflip": 343, "rang": [0, 1, 11, 72, 80, 114, 122, 131, 133, 134, 135, 150, 154, 188, 195, 197, 200, 246, 254, 256, 263, 266, 294, 295, 297, 336, 340, 344], "rank": 19, "rasul": 7, "rate": [30, 31, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "rather": [7, 121, 122, 250, 327], "ratio": [30, 90, 178, 179, 342], "ravel": 322, "raw": [132, 198, 218, 262], "re": [118, 260], "readabl": [119, 120, 121, 123, 243, 262], "readi": [3, 10, 96, 97, 98, 99, 104, 114], "real": [19, 22, 57, 197], "rearrang": 138, "reassembl": 114, "recalibr": [91, 93, 94, 96, 97, 98, 99, 114, 178], "receiv": [237, 238, 239, 324], "recent": 254, "recept": [100, 104, 114, 179], "reciproc": [19, 292, 302, 310], "recognit": [55, 70, 71, 114, 203], "rectangular": 287, "rectif": 253, "rectifi": [128, 129, 193, 194, 253], "recurr": [120, 229], "recurs": [115, 117], "red": 338, "reduc": [23, 56, 72, 83, 100, 105, 112, 114, 175, 176, 177, 178, 223, 224, 225, 226, 227, 228, 234, 235, 236, 237, 238, 239, 252, 255, 260, 262, 303, 304, 305, 312, 317, 338], "reduct": [22, 30, 90, 149, 150, 151, 153, 154, 178, 179, 217, 218, 219, 220, 221, 303, 305], "reevalu": 244, "refer": [4, 10, 117, 270, 284, 287, 319], "reflect": 258, "regardless": [19, 325], "region": [136, 159, 160, 161, 170, 191, 232, 233, 324, 335, 344], "regist": [81, 82, 84, 85, 86, 87, 88, 89, 111, 116, 117, 118, 122, 243, 261], "register_buff": 116, "register_model": [24, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 101, 102, 103, 106, 107, 108, 109, 111, 113], "register_paramet": 117, "registr": [117, 243], "registri": [84, 85, 86, 87, 88, 89, 261], "registry_path": 261, "regress": [4, 153, 219, 220], "regular": [19, 23, 30, 31, 46, 112, 143, 207, 208, 209, 210, 246, 247, 248, 251, 252, 253, 254, 256], "relat": [260, 287, 288], "relationship": 342, "relev": [170, 246, 254, 256], "reli": 260, "reliabl": [5, 6, 7, 8], "reliant": [207, 208, 209, 210], "relu": [10, 23, 90, 105, 112, 114, 115, 119, 120, 121, 123, 125, 127, 128, 145, 172, 173, 174, 178, 179, 183, 184, 187, 188, 189, 193, 195, 199, 201, 202, 203, 204, 212, 213, 214, 215], "relu1": 123, "relu2": 123, "relu3": 123, "relu6": [201, 212], "remain": [5, 6, 7, 8, 116, 158, 206, 207, 208, 209, 210, 255], "rememb": 270, "remov": [261, 328], "rep": 330, "repeat": [322, 323, 330], "repetit": [326, 330], "replac": [7, 270, 338], "repres": [7, 16, 18, 22, 52, 64, 65, 66, 67, 68, 69, 117, 118, 123, 146, 148, 155, 157, 158, 202, 203, 204, 213, 215, 218, 221, 229, 244, 245, 246, 252, 253, 254, 255, 256, 262, 263, 272, 273, 279, 282, 284, 304, 315, 316, 317, 323, 335, 337, 339, 340, 341, 342], "represent": [63, 70, 71, 81, 82, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 104, 114, 178, 235, 238, 244], "reproduc": [263, 265, 266, 267, 268, 269, 270, 344], "requir": [2, 3, 4, 10, 58, 64, 65, 66, 67, 68, 69, 84, 85, 86, 87, 88, 89, 100, 116, 119, 123, 125, 126, 128, 129, 130, 131, 133, 146, 148, 170, 178, 179, 188, 214, 218, 221, 243, 258, 260, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 342], "requires_grad": [116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 138, 146, 148, 170, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 243, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334], "rescal": [149, 150, 154, 217, 218, 221], "research": 243, "reset": [118, 268, 271], "reshap": [10, 90, 148, 203, 204, 241, 259, 262, 322, 325], "residu": [47, 48, 49, 50, 57, 58, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 114], "residualblock": 72, "resili": 255, "resiz": [170, 333, 343, 344], "resnest": [51, 64, 65, 66, 67, 68, 69, 70, 71, 114], "resnest_101": 114, "resnest_14": 114, "resnest_200": 114, "resnest_26": 114, "resnest_269": 114, "resnest_50": 114, "resnest_50_1s4x24d": 114, "resnest_50_4s2x40d": 114, "resnet": [48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 92, 93, 94, 95, 100, 101, 102, 103, 114, 178], "resnet_1001": 114, "resnet_101": 114, "resnet_152": 114, "resnet_18": 114, "resnet_200": 114, "resnet_269": 114, "resnet_34": 114, "resnet_50": 114, "resnet_arg": 100, "resnext": [51, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 104, 114], "resnext_101_32x16d": 114, "resnext_101_32x32d": 114, "resnext_101_32x4d": 114, "resnext_101_32x8d": 114, "resnext_101_64x4d": 114, "resnext_50_32x4d": 114, "resolut": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 96, 97, 98, 99, 104, 114], "resourc": [58, 61, 62, 114, 260], "respect": [12, 13, 14, 16, 17, 18, 19, 20, 22, 52, 105, 116, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 170, 179, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 297, 301, 302, 303, 304, 305, 308, 310, 312, 315, 316, 317, 323, 324, 326, 330, 338], "respons": [96, 97, 98, 99, 114, 119, 245], "restor": [178, 260], "restructur": 327, "result": [12, 16, 17, 19, 114, 117, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 146, 148, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 179, 191, 195, 198, 243, 244, 258, 260, 263, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 344], "resum": 245, "retain": [118, 271, 283, 290, 303, 304, 305, 312, 317, 334], "retent": 334, "rethink": 114, "retriev": [0, 2, 119, 121, 122], "return": [0, 1, 2, 3, 5, 6, 7, 8, 10, 48, 52, 90, 116, 117, 119, 120, 121, 122, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 262, 333, 344], "reus": [114, 334], "reusabl": [123, 243, 333], "revers": [10, 123, 316, 339, 341], "revert": 260, "revolution": 114, "rgb": [5, 6, 45, 46, 47, 49, 50], "rho": 247, "rho_": 253, "rho_t": 253, "right": [17, 18, 19, 21, 22, 126, 132, 190, 198, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 237, 238, 239, 335], "risk": 262, "rmsprop": 257, "rob": 114, "robust": [171, 206, 207, 208, 209, 210, 219, 243, 247, 337, 338, 340, 344], "roland": 7, "role": [262, 270, 344], "root": [4, 5, 6, 7, 8, 248, 254, 310], "rotat": [145, 169, 340, 344], "rotated_imag": 171, "rout": [237, 238, 239], "routin": 10, "row": [13, 14, 16, 21, 148, 287, 323, 332], "rprop": 257, "rule": [16, 17, 259, 272, 273, 277, 278, 279, 281, 282], "run": [10, 116, 155, 157, 172, 173, 174, 223, 224, 225, 226, 227, 228, 247, 260, 268, 270], "running_mean": [116, 155, 157, 223, 224, 225, 226, 227, 228], "running_var": [155, 157, 223, 224, 225, 226, 227, 228], "runtim": [31, 120, 123, 243], "s_": 255, "s_d": [236, 239], "s_h": [235, 236, 239], "s_w": [235, 236, 239], "sain": 114, "same": [13, 14, 16, 17, 21, 132, 139, 140, 141, 142, 143, 155, 157, 158, 160, 161, 171, 172, 173, 174, 175, 176, 177, 179, 195, 202, 203, 204, 206, 207, 208, 209, 210, 214, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 255, 263, 268, 270, 276, 286, 289, 291, 301, 303, 304, 305, 319, 321, 325, 327, 328, 329, 332, 336], "sampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 96, 97, 98, 99, 104, 159, 160, 161, 183, 184, 185, 186, 187, 188, 206, 207, 208, 209, 210, 213, 215, 218, 221, 229, 231, 232, 233, 263, 267, 270, 335, 337, 339, 340, 341, 342], "sandler": 114, "satisfi": [12, 14, 21], "satur": [189, 344], "save": [2, 116, 118, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 261], "scalabl": [3, 30, 84, 85, 86, 87, 88, 89, 110, 114, 243], "scalar": [13, 18, 149, 150, 151, 153, 154, 262, 263], "scale": [14, 19, 25, 30, 31, 49, 53, 54, 55, 56, 59, 63, 70, 71, 73, 74, 75, 78, 91, 92, 100, 101, 102, 103, 114, 125, 130, 132, 155, 157, 158, 178, 179, 187, 188, 189, 191, 193, 196, 197, 198, 200, 206, 207, 208, 209, 210, 218, 223, 224, 225, 226, 227, 228, 229, 241, 246, 248, 249, 250, 262, 270, 317, 342], "scale_factor": 241, "scenario": [121, 122, 229, 250, 251, 334, 338], "schedul": 246, "scientif": 259, "score": [72, 83, 100, 132, 218], "scratch": 10, "script": 270, "se": [30, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114], "se_resnet_101": 114, "se_resnet_152": 114, "se_resnet_18": 114, "se_resnet_34": 114, "se_resnet_50": 114, "se_resnext_101_32x4d": 114, "se_resnext_101_32x8d": 114, "se_resnext_101_64x4d": 114, "se_resnext_50_32x4d": 114, "se_scal": 30, "seamless": [0, 1, 3, 4, 243, 270], "seamlessli": [3, 4, 11, 118, 120, 123, 243, 262, 344], "search": 114, "second": [14, 120, 121, 146, 178, 213, 249, 250, 251, 252, 253, 259, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 321, 323, 341], "section": 276, "see": [10, 276], "seed": [263, 264, 265, 266, 267, 269, 270, 344], "seen": 247, "select": [100, 101, 102, 103, 104, 114, 170, 178, 179, 237, 239, 312], "selectivekernel": 180, "self": [0, 1, 2, 3, 10, 23, 30, 31, 44, 48, 52, 56, 57, 58, 63, 90, 105, 112, 115, 116, 117, 118, 119, 120, 121, 122, 130, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 323, 333, 334], "selu": [127, 139, 145, 201, 206, 212], "selunetwork": 196, "semodul": 180, "senet": [51, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114], "sensit": [151, 219, 223, 224, 225], "sentiment": 4, "separ": [0, 56, 70, 71, 110, 114, 134, 135, 136, 175, 176, 177, 226, 227, 228], "sequenc": [17, 72, 83, 100, 119, 121, 134, 283, 319, 321, 324, 326, 329, 330, 332, 333], "sequenti": [23, 48, 52, 90, 105, 110, 112, 115, 119, 120, 124, 134, 172, 173, 174, 214, 333, 344], "seri": [44, 53, 54, 100, 134, 172, 202, 234, 237], "serial": [116, 117, 245], "serv": [3, 7, 25, 48, 90, 105, 117, 119, 120, 121, 122, 123, 243, 255, 334], "set": [3, 4, 5, 6, 7, 8, 70, 71, 81, 82, 96, 97, 98, 99, 104, 115, 118, 122, 134, 135, 136, 193, 194, 196, 202, 203, 204, 206, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 244, 249, 250, 254, 263, 265, 266, 267, 268, 269, 270, 271, 283, 285, 286, 290, 291, 297, 303, 305, 318, 334, 338, 344], "setup": [4, 10, 84, 85, 86, 87, 88, 89], "sever": [19, 202, 203, 204, 234, 235, 236, 237, 238, 239, 260, 333, 344], "sgd": [10, 246, 253, 257], "sgn": 18, "shape": [3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 48, 52, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 259, 262, 263, 265, 266, 267, 269, 270, 271, 274, 285, 286, 287, 288, 289, 290, 291, 297, 302, 303, 304, 305, 308, 310, 312, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 344], "shapelik": 266, "share": 114, "shen": 178, "shift": [155, 157, 158, 191, 223, 224, 225, 226, 227, 228, 229], "shorthand": 276, "should": [52, 116, 260, 263, 265, 266, 267, 269, 285, 286, 294, 295, 315, 324, 333], "show": [258, 261], "showcas": 10, "shown": [199, 268], "shrink": 247, "shuffl": [1, 2, 3], "side": [21, 120, 123, 134, 135, 136, 162, 163, 164, 166, 167, 168, 172, 173, 174, 202, 203, 204, 234, 235, 236, 237, 238, 239, 260], "sigma": [19, 178, 183, 185, 187, 197, 199, 223, 224, 225, 226, 227, 228, 229, 316], "sigma_c": 336, "sigma_i": 19, "sigmoid": [127, 145, 178, 183, 184, 187, 188, 191, 192, 199, 201, 212, 217], "sigmoidnetwork": 197, "sign": [17, 219, 255, 292], "signal": [172, 202, 203, 204, 223, 226, 234, 235, 236, 237, 238, 239], "signific": 260, "significantli": [57, 83, 114, 178, 333], "sim": [206, 207, 208, 209, 210], "similar": [10, 183, 184, 276, 302, 318, 324], "similarli": [22, 315], "simonyan": 114, "simpl": [3, 4, 10, 115, 123, 134, 135, 136, 146, 148, 162, 163, 164, 166, 167, 168, 190, 191, 192, 194, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 274, 275, 280, 333], "simplebinaryclassificationmodel": 217, "simpleclassificationmodel": [218, 221], "simplegelumodel": 190, "simplehardsigmoidmodel": 191, "simplehardswishmodel": 192, "simpleleakyrelumodel": 193, "simplemodel": [10, 115, 195, 215, 261], "simpleregressionmodel": 220, "simplerelumodel": 194, "simpleselumodel": 196, "simplesigmoidmodel": 197, "simpleswishmodel": 199, "simpletanhmodel": 200, "simpli": [258, 315, 316, 327], "simplic": [114, 191, 194], "simplifi": [4, 40, 41, 42, 43, 53, 111, 123, 172, 173, 174], "simul": [115, 344], "simultan": 171, "sin": [292, 298], "sinc": [17, 20, 119, 120, 121, 122, 134, 135, 136, 188, 258, 260, 263, 267, 323, 344], "sine": [295, 308, 309], "singl": [0, 4, 17, 20, 22, 72, 132, 172, 173, 174, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 218, 229, 235, 236, 237, 238, 239, 244, 262, 269, 285, 319, 328, 336, 338, 344], "singleton": 229, "singular": [13, 16, 17, 19, 21, 22], "sinh": [292, 299, 314], "size": [0, 1, 2, 3, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 52, 53, 54, 55, 59, 61, 62, 72, 100, 112, 114, 115, 118, 120, 134, 135, 136, 138, 141, 142, 143, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 202, 203, 204, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 266, 269, 270, 271, 303, 304, 305, 312, 317, 319, 321, 328, 331, 332, 335, 337, 342, 344], "sk": [100, 101, 102, 103, 104, 114, 179], "sk_resnet_18": 114, "sk_resnet_34": 114, "sk_resnet_50": 114, "sk_resnext_50_32x4d": 114, "skblock": 100, "skip": [114, 260], "sknet": [51, 101, 102, 103, 104, 114], "slice": [146, 315], "slide": [138, 234, 236, 237, 239], "slight": 178, "slightli": 344, "slope": [128, 189, 193], "slow": [3, 253], "small": [19, 40, 41, 42, 43, 53, 54, 55, 58, 61, 62, 114, 128, 149, 150, 155, 157, 158, 193, 196, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 235, 238, 247, 248, 249, 250, 251, 252, 253, 254, 255], "smaller": [40, 41, 42, 43, 112, 114, 120, 123, 243, 248, 249, 278, 335, 337, 342], "smallest": 305, "smooth": [46, 126, 189, 190, 199, 246, 254, 344], "smoother": 246, "so": [119, 120, 121, 122, 171, 243, 253, 285, 286, 333], "softmax": [127, 145, 179, 201, 212, 218], "softmaxmodel": 198, "solut": [19, 21], "solv": [11, 12, 15, 19, 20, 22], "solver": 11, "some": [125, 140, 171, 206, 207, 208, 223, 224, 225, 226, 227, 228, 248, 249, 250, 260, 262], "sometim": 259, "sophist": [120, 123], "sourc": 270, "space": [14, 20, 22, 134, 135, 136, 138, 159, 160, 161, 172, 173, 174, 175, 176, 177, 202, 203, 204, 231, 232, 233, 283, 344], "span": 4, "spars": [248, 249], "spatial": [23, 72, 83, 100, 105, 112, 114, 173, 178, 203, 204, 223, 224, 225, 226, 227, 228, 229, 235, 236, 237, 238, 239, 241, 323], "spatial_dim": 178, "spatio": 204, "special": [0, 1, 10, 19, 116, 117, 118, 206, 270], "specif": [4, 10, 26, 27, 28, 29, 40, 41, 42, 43, 48, 56, 70, 71, 81, 82, 119, 120, 121, 122, 123, 179, 188, 206, 207, 208, 209, 210, 226, 227, 228, 243, 244, 258, 270, 285, 303, 305, 326, 330], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 18, 24, 25, 31, 52, 59, 60, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 102, 103, 105, 106, 107, 108, 109, 111, 113, 115, 120, 132, 138, 143, 149, 150, 151, 153, 154, 158, 159, 160, 161, 170, 171, 178, 198, 202, 203, 204, 217, 218, 219, 220, 221, 229, 231, 232, 233, 235, 236, 237, 238, 239, 241, 244, 262, 265, 266, 267, 268, 269, 281, 283, 284, 285, 286, 287, 288, 290, 291, 297, 303, 304, 305, 312, 316, 317, 318, 319, 321, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 344], "speech": 226, "speed": [61, 62, 191, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "split": [4, 63, 70, 71, 114, 319, 321, 332], "springer": 114, "sqrt": [126, 183, 184, 187, 188, 190, 223, 224, 225, 226, 227, 228, 229, 247, 248, 249, 250, 252, 253, 254, 292, 294, 295], "squar": [1, 3, 12, 13, 14, 16, 17, 19, 20, 21, 22, 151, 153, 219, 220, 247, 248, 249, 254, 292, 310], "squaredataset": [0, 1, 2, 3], "squeez": [30, 58, 61, 62, 90, 93, 96, 97, 98, 99, 114, 178, 322], "stabil": [16, 19, 114, 149, 150, 155, 157, 158, 172, 173, 174, 195, 217, 218, 223, 224, 225, 226, 227, 228, 229, 246, 247, 248, 249, 250, 251, 252, 253, 254, 336], "stabl": [183, 184, 187, 188, 206, 218, 246, 250, 251, 254, 255, 256], "stack": [123, 179, 321, 322, 332, 344], "stage": [63, 64, 65, 66, 67, 68, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103], "stage1": 90, "stage2": 90, "stage3": 90, "stage4": 90, "standalon": 195, "standard": [72, 81, 82, 126, 128, 175, 176, 177, 183, 185, 187, 189, 190, 193, 206, 255, 267, 270, 276, 333, 336, 344], "start": [1, 3, 246, 248, 255, 283, 335, 337], "state": [114, 116, 117, 118, 120, 123, 244, 258, 260, 268], "state_dict": [117, 118, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "static": 123, "statist": [19, 139, 155, 157], "std": [5, 6, 7, 8, 185, 333, 336, 344], "stem": [48, 63, 72, 83, 100], "stem_typ": 72, "stem_width": [63, 64, 65, 66, 67, 68, 69, 72], "step": [118, 138, 179, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 283, 333, 334], "step_siz": 255, "still": 247, "stochast": [10, 30, 31, 246, 256], "stochastic_depth": 30, "stop": 283, "storag": [119, 121, 271], "store": [2, 4, 5, 6, 7, 8, 72, 83, 100, 116, 117, 118, 119, 120, 121, 122, 178, 231, 232, 233, 260, 271, 335, 336, 337, 338, 339, 340, 341, 342], "str": [5, 6, 7, 8, 72, 105, 117, 119, 121, 123, 149, 150, 151, 153, 154, 170, 241, 244, 261, 323], "straightforward": [256, 258, 272], "strategi": 245, "streamlin": [2, 3], "strict": [117, 244], "stride": [31, 52, 53, 54, 55, 58, 61, 62, 120, 123, 134, 135, 136, 138, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 231, 232, 233, 234, 235, 236, 237, 238, 239], "stride_height": 138, "stride_width": 138, "string": [117, 119, 121, 123, 202, 203, 204, 244], "structur": [0, 10, 20, 31, 58, 110, 116, 117, 120, 243, 244, 261, 262, 287, 334], "style": [48, 157, 226, 227, 323], "sub": [119, 120, 121, 122, 123, 243, 292, 335, 337], "sub_tensor": 271, "subclass": [1, 2, 3, 10, 117, 118, 119, 243, 244], "sublay": 115, "submodul": [115, 117, 243], "subsequ": [120, 123, 188, 270], "subset": [70, 71, 207, 208], "subtract": [10, 282, 336], "suffer": 248, "suit": [26, 27, 28, 29, 46, 56, 100, 183, 184, 187, 188], "suitabl": [32, 33, 34, 35, 36, 37, 38, 39, 48, 53, 54, 55, 57, 61, 62, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 95, 114, 219, 248, 249, 265], "sum": [18, 119, 120, 121, 122, 123, 132, 149, 150, 151, 153, 154, 179, 198, 217, 218, 219, 220, 221, 248, 272, 275, 280, 292, 315, 317, 319, 321, 323, 326, 330, 332], "sum_": [17, 132, 198, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 274, 275, 304, 312, 315, 317, 323, 326], "sum_i": [18, 280], "sum_j": 280, "sum_k": 276, "summar": [30, 81, 82, 110, 234, 235, 236], "summari": [81, 82, 96, 97, 98, 99, 104], "summat": 17, "sun": 178, "super": [10, 115, 116, 117, 118, 119, 120, 121, 122, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261], "support": [1, 3, 4, 10, 11, 17, 18, 19, 20, 22, 59, 72, 119, 120, 121, 122, 123, 170, 171, 241, 243, 245, 252, 270, 271, 272, 273, 276, 277, 278, 279, 281, 282, 284, 287, 297, 302, 304, 308, 310, 312, 315, 316, 317, 319, 323, 327, 334, 344], "suppos": 344, "sure": [243, 344], "svd": [15, 19], "swish": [61, 62, 201, 212], "symmetr": [12, 159, 160, 161, 187, 188, 200], "syntax": [1, 276], "system": [11, 12, 19, 20, 21, 114, 258, 323], "systemat": [114, 344], "szegedi": [45, 114], "t": [19, 114, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 271, 276, 318, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "t0": 246, "t1": 318, "t2": 318, "tabl": 30, "tabular": 4, "tailor": [4, 58, 64, 65, 66, 67, 68, 69, 243, 344], "take": [20, 234, 235, 236, 237, 238, 239, 241, 260, 333], "taken": 315, "tan": [114, 292], "tangent": [133, 200, 296, 313, 314], "tanh": [52, 120, 123, 126, 127, 145, 183, 184, 187, 188, 190, 201, 212, 292], "tanhnetwork": 200, "target": [5, 6, 7, 8, 123, 149, 150, 151, 153, 154, 159, 160, 161, 170, 217, 218, 219, 220, 221, 231, 232, 233, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 335, 337, 342], "target_tensor": [217, 218, 219, 220, 221], "target_transform": [5, 6, 7, 8], "task": [4, 10, 11, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 110, 114, 131, 132, 135, 146, 149, 150, 153, 154, 178, 179, 197, 198, 202, 203, 204, 217, 218, 219, 220, 221, 226, 227, 228, 234, 236, 237, 239, 249, 259, 270, 287, 344], "techniqu": [12, 16, 31, 112, 155, 206, 207, 208, 209, 210, 226, 227, 228, 245, 342, 344], "tempor": [202, 204, 236, 239], "temporarili": 260, "tensor": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 72, 84, 85, 86, 87, 88, 89, 90, 101, 102, 103, 105, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 258, 260, 262, 263, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "term": [19, 146, 172, 173, 174, 175, 176, 177, 246, 250, 252, 253, 254, 256], "test": [4, 5, 6, 7, 8], "test_backward": 115, "test_siz": [5, 6, 7, 8], "text": [4, 13, 17, 18, 72, 83, 100, 101, 102, 103, 110, 119, 125, 128, 129, 130, 132, 134, 135, 136, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 234, 235, 236, 237, 238, 239, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 266, 272, 273, 275, 277, 278, 279, 281, 282, 293, 297, 303, 304, 305, 307, 312, 317, 319, 321, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 337, 339, 340, 341], "th": [146, 217, 218, 220, 221, 226, 227, 228, 277, 278, 281], "than": [0, 1, 7, 121, 122, 125, 128, 151, 175, 176, 177, 189, 193, 199, 219, 244, 250, 297, 315, 324, 329, 335, 337, 342], "thei": [0, 10, 22, 114, 116, 120, 122, 123, 262, 323, 327, 335, 337, 344], "them": [3, 114, 117, 122, 138, 246, 259, 319, 329, 333, 336, 344], "therebi": [206, 235, 236, 238, 239], "theta": [246, 247, 340], "theta_": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "theta_t": [253, 254], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 60, 61, 62, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 114, 115, 116, 118, 120, 121, 122, 123, 129, 131, 132, 133, 134, 135, 136, 138, 146, 148, 159, 170, 171, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 266, 267, 268, 270, 271, 275, 276, 280, 283, 285, 288, 289, 290, 291, 297, 301, 302, 303, 304, 305, 308, 310, 312, 315, 316, 317, 318, 324, 326, 327, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "thing": 260, "those": [10, 53, 54, 55, 122, 188], "three": [22, 55, 136, 161, 164, 168, 172, 173, 174, 204, 210, 225, 228, 233, 236, 239], "threshold": [19, 151, 219], "through": [0, 3, 4, 10, 14, 19, 20, 22, 23, 44, 48, 52, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 101, 102, 103, 111, 112, 119, 120, 123, 146, 148, 170, 178, 179, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 263, 267, 274, 275, 280, 323, 325, 327, 328, 331, 344], "throughout": [130, 334], "tile": 322, "time": [0, 3, 17, 53, 54, 55, 57, 134, 172, 193, 196, 202, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 254, 256, 260, 326, 330], "to_tensor": [5, 6, 7, 8], "togeth": [123, 333, 344], "too": 255, "tool": [3, 10, 243, 259, 270, 333, 344], "top": [12, 13, 14, 20, 22, 146, 148, 170, 202, 203, 204, 213, 215, 335, 337], "torch": [105, 318], "toronto": [5, 6], "total": [0, 1, 2, 5, 6, 7, 8, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 115, 118, 271, 327], "totensor": [333, 344], "trace": [11, 292], "track": [10, 172, 173, 174, 223, 224, 225, 226, 227, 228, 243, 258, 260, 263, 265, 266, 267, 269, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 334], "track_running_stat": [172, 173, 174, 223, 224, 225, 226, 227, 228], "tradit": [7, 247, 248, 251, 252, 253], "trail": 158, "train": [1, 2, 3, 4, 5, 6, 7, 8, 10, 31, 44, 45, 46, 96, 97, 98, 99, 104, 114, 115, 116, 117, 120, 122, 123, 132, 139, 140, 141, 142, 143, 155, 157, 171, 190, 193, 196, 197, 198, 200, 206, 207, 208, 209, 210, 223, 224, 225, 226, 227, 228, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 333, 336, 337, 338, 339, 340, 341, 344], "trainabl": [115, 223, 224, 225, 226, 227, 228, 243], "transact": 178, "transfer": [157, 226, 227], "transform": [2, 4, 5, 6, 7, 8, 10, 14, 114, 121, 146, 148, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 259, 323], "transform_pipelin": [333, 344], "transformed_imag": [333, 344], "transit": [25, 219], "translat": [235, 238], "transpos": [10, 12, 292], "treat": [0, 116, 229, 243], "triangular": [12, 20], "true": [1, 2, 3, 4, 5, 6, 7, 8, 22, 44, 45, 46, 61, 62, 63, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 146, 148, 155, 157, 170, 172, 173, 174, 175, 176, 177, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 241, 243, 244, 249, 250, 254, 258, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334], "truncat": 115, "truncate_from": 115, "try": 0, "tune": 344, "tupl": [2, 3, 5, 6, 7, 8, 14, 20, 22, 25, 72, 115, 117, 118, 134, 135, 136, 138, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 202, 203, 204, 214, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 249, 250, 251, 252, 253, 255, 262, 265, 266, 267, 269, 271, 285, 288, 290, 303, 304, 305, 312, 317, 319, 321, 323, 324, 327, 328, 329, 331, 332, 335, 336, 337, 342], "twice": 324, "two": [10, 13, 14, 16, 17, 19, 20, 22, 53, 54, 55, 58, 70, 71, 101, 105, 134, 135, 136, 146, 163, 167, 178, 179, 203, 209, 213, 224, 227, 235, 238, 249, 250, 251, 252, 253, 255, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 315, 323], "type": [52, 63, 72, 90, 100, 116, 117, 118, 146, 213, 271, 283, 284, 285, 286, 287, 288, 289, 290, 291, 318, 323, 334], "typeerror": [0, 1, 2, 117, 244], "typic": [11, 72, 83, 100, 116, 132, 139, 171, 178, 195, 196, 198, 221, 223, 224, 225, 226, 227, 228, 245, 246, 254, 256, 260, 262, 331, 334, 336, 340, 342, 344], "u": [19, 22, 184, 186, 188], "u_": 251, "ultra": 78, "unchang": [116, 143, 189, 193, 194, 196, 206, 207, 208, 209, 210, 214, 325, 328], "undefin": 281, "under": [84, 85, 86, 87, 88, 89, 243], "underbrac": 17, "underdetermin": 19, "undergo": 344, "underli": [0, 10, 40, 41, 42, 43, 45, 46, 47, 49, 50, 318, 321, 325, 327, 332], "understand": [10, 112, 114, 115, 123, 344], "unexpect": [117, 120, 123, 270], "unfold": [137, 145], "unifi": 0, "uniform": [182, 184, 188, 202, 203, 204, 213, 215, 264, 265, 266, 270, 338, 339, 340, 341], "uniformli": [265, 269], "uniniti": [285, 286], "unintend": 260, "union": 105, "uniqu": [12, 19, 21, 119, 121], "unit": [23, 52, 112, 125, 126, 128, 129, 130, 183, 184, 187, 188, 189, 190, 193, 194, 196, 206], "unless": [73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 271], "unlik": [116, 119, 120, 121, 122, 128, 189, 193, 206, 229, 247, 248, 250, 251, 252, 253, 255], "unnecessari": 260, "unpad": 324, "unseen": 344, "unsqueez": 322, "unstabl": 16, "up": [244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 340, 342], "updat": [4, 116, 122, 123, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260], "upon": [46, 58, 114, 119, 120, 121, 122], "upper": [20, 186, 255, 269], "upsampl": [212, 242], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 22, 25, 30, 31, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 146, 148, 153, 155, 157, 160, 161, 170, 171, 172, 173, 174, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 301, 303, 304, 305, 312, 317, 323, 324, 326, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "usag": [3, 11, 25, 110, 120, 123, 175, 176, 177, 244, 245, 335, 336, 337, 338, 339, 340, 341, 342], "use_aux": [44, 45, 46], "use_h": [61, 62], "use_s": [61, 62], "user": [1, 2, 3, 4, 10, 119, 120, 121, 122, 243, 248, 333, 334, 344], "usual": 218, "util": [3, 10, 11, 101, 102, 103, 121, 122, 243, 270], "v": [14, 19, 22, 114, 249, 250, 252, 253, 284], "v1": [44, 45, 48, 49, 50, 56, 57, 114], "v2": [31, 40, 41, 42, 43, 48, 50, 51, 57, 58, 60, 114], "v3": [44, 46, 47, 51, 58, 61, 62, 114], "v4": [44, 47, 114], "v_": [246, 249, 250, 252, 253, 254, 256], "v_stack": 332, "v_t": [253, 254], "val": 181, "valid": [172, 173, 174, 175, 176, 177, 179, 202, 203, 204, 316], "valu": [10, 13, 17, 18, 19, 22, 56, 81, 82, 115, 117, 119, 121, 123, 125, 128, 131, 132, 133, 134, 135, 136, 138, 149, 150, 151, 153, 154, 155, 157, 158, 159, 170, 171, 172, 173, 174, 178, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 200, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 263, 265, 266, 267, 268, 269, 270, 283, 284, 285, 286, 287, 293, 294, 295, 297, 300, 301, 302, 303, 305, 307, 308, 310, 311, 319, 324, 325, 327, 331, 336, 338, 339, 341], "valuabl": 270, "valueerror": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 244], "van": 114, "vanish": [114, 189, 196, 223, 224, 225], "var": 292, "vari": [100, 120, 122, 159, 170, 231, 340], "variabl": [117, 123, 159, 160, 161, 214, 231, 232, 233, 243, 258, 260, 265, 285, 337, 340], "varianc": [130, 139, 155, 157, 172, 173, 174, 183, 184, 187, 188, 196, 206, 223, 224, 225, 226, 227, 228, 229, 249, 250, 251, 252, 253, 267, 317, 340, 344], "variant": [25, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 81, 82, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 249, 250, 251], "variat": [175, 176, 177, 226, 227, 228, 337, 344], "varieti": [4, 48, 63, 270, 344], "variou": [7, 25, 44, 49, 50, 52, 59, 114, 194, 245, 270, 303, 305, 324, 334], "vasudevan": 114, "vdot": 280, "vector": [14, 19, 20, 21, 22, 146, 148, 213, 215, 274, 275, 276, 280], "veloc": [246, 254, 256], "veri": [19, 75, 77, 114, 247], "versa": 255, "versatil": [270, 323], "version": [22, 44, 48, 52, 53, 54, 254, 280, 338], "vertic": [329, 332, 341], "vgg": 105, "vggnet": [51, 106, 107, 108, 109, 114], "vggnet_11": 114, "vggnet_13": 114, "vggnet_16": 114, "vggnet_19": 114, "via": [3, 4, 100], "vice": 255, "video": [136, 143, 174, 204, 228, 236, 239], "view": [48, 52, 120, 235, 236, 237, 238, 239, 327], "vinod": [5, 6], "vision": [56, 57, 60, 63, 72, 114, 135, 203, 213, 344], "visual": [112, 114], "vol": 114, "vollgraf": 7, "volumetr": [136, 143, 174, 204, 228, 236, 239], "vstack": 322, "w": [72, 84, 85, 86, 87, 88, 89, 101, 102, 103, 114, 135, 136, 138, 142, 143, 146, 148, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 178, 202, 203, 204, 213, 215, 224, 225, 227, 228, 232, 233, 236, 239, 335, 337], "w_": [135, 136, 160, 161, 163, 164, 167, 168, 170, 203, 204, 232, 233, 235, 236, 238, 239], "w_out": [135, 136, 163, 164, 167, 168], "wa": [45, 206, 207, 208, 209, 210, 260], "wai": [1, 24, 113, 258, 260, 327], "wang": 114, "want": [0, 10, 333, 335], "warn": [119, 121], "we": [3, 10, 259, 323], "weight": [70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 114, 134, 135, 136, 146, 148, 149, 150, 154, 155, 157, 158, 170, 178, 179, 183, 184, 187, 188, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 265, 270], "weight1": 121, "weight2": 121, "weight_decai": [246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "weinberg": 114, "well": [26, 27, 28, 29, 31, 46, 100, 183, 184], "were": 123, "weyand": 114, "what": 260, "when": [0, 1, 3, 10, 17, 30, 117, 120, 122, 123, 125, 128, 134, 135, 136, 189, 214, 223, 224, 225, 226, 227, 228, 241, 244, 247, 255, 258, 260, 261, 262, 270, 281, 333, 335], "where": [3, 4, 5, 6, 7, 8, 13, 14, 16, 17, 18, 19, 20, 22, 61, 62, 110, 114, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 270, 272, 273, 277, 278, 279, 281, 282, 285, 286, 297, 301, 302, 303, 304, 305, 308, 310, 312, 315, 316, 317, 319, 324, 326, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341], "whether": [1, 13, 30, 44, 45, 46, 61, 62, 63, 117, 118, 183, 184, 254, 258, 263, 265, 266, 267, 269, 271, 285, 286, 303, 304, 305, 312, 317], "which": [0, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 31, 47, 50, 56, 57, 59, 64, 65, 66, 67, 68, 69, 70, 71, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 114, 117, 119, 121, 123, 128, 132, 151, 171, 175, 176, 177, 179, 189, 190, 193, 195, 198, 200, 206, 219, 221, 223, 224, 225, 226, 227, 228, 229, 249, 250, 252, 254, 258, 260, 262, 265, 266, 269, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 319, 326, 327, 329, 331, 334, 335, 337, 338, 339, 340, 341, 342, 344], "while": [10, 40, 41, 42, 43, 50, 56, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 104, 114, 120, 123, 139, 190, 194, 195, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 260, 327, 329, 338, 344], "who": [10, 119, 120, 121, 122], "whose": [22, 286, 289, 291, 293, 297, 301, 307], "wide": [4, 5, 6, 8, 11, 19, 72, 80, 81, 82, 114, 129, 194, 202, 203, 218], "wide_resnet_101": 114, "wide_resnet_50": 114, "wider": [81, 82, 134, 135], "wideresnet": 114, "width": [30, 31, 56, 59, 63, 70, 71, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 110, 114, 135, 136, 138, 142, 143, 160, 161, 163, 164, 167, 168, 170, 171, 179, 203, 204, 224, 225, 227, 228, 232, 233, 235, 236, 238, 239, 241, 335, 337, 342], "width_coef": 30, "width_multipli": [56, 59], "window": [162, 163, 164, 166, 167, 168, 234, 235, 236, 237, 238, 239, 247, 303, 305], "wise": [94, 96, 97, 98, 99, 114, 125, 126, 128, 129, 130, 131, 132, 133, 172, 173, 174, 178, 192, 198, 199, 206, 207, 208, 209, 210, 243, 259, 272, 273, 276, 277, 278, 279, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 302, 306, 307, 308, 309, 310, 311, 313, 314, 315, 321, 332], "within": [2, 114, 115, 116, 119, 120, 121, 122, 123, 133, 170, 171, 188, 190, 191, 192, 194, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 245, 260, 283, 297, 340, 344], "without": [10, 83, 119, 120, 121, 146, 148, 202, 203, 204, 213, 215, 258, 261, 303, 325, 327, 331], "won": 260, "work": [1, 2, 3, 10, 12, 259, 262], "workflow": [270, 344], "workload": 10, "wrap": [3, 243, 260, 318], "wrapper": 243, "www": [5, 6], "x": [10, 11, 21, 48, 52, 90, 105, 110, 114, 115, 116, 117, 119, 120, 121, 122, 123, 132, 146, 148, 171, 175, 176, 177, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 263, 265, 266, 267, 269, 285, 286, 301, 323, 335, 336, 337, 338, 339, 340, 341, 342], "x1": 213, "x2": 213, "x_": [218, 221, 323], "x_c": [218, 221], "x_i": 217, "x_k": 218, "xavier": [183, 184, 187, 188], "xavier_norm": 182, "xavier_uniform": 182, "xception": [51, 114], "xiao": 7, "xie": 114, "xl": [43, 114], "xy": 323, "x\u2081": 213, "x\u2082": 213, "y": [110, 114, 119, 120, 121, 122, 123, 171, 175, 176, 177, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 263, 265, 266, 267, 269, 285, 286, 323, 338], "y_": [218, 221, 323], "y_c": [218, 221], "y_i": 217, "yann": [8, 114], "yet": [10, 259], "yield": [0, 1, 117, 260], "you": [0, 58, 115, 120, 122, 123, 243, 245, 258, 260, 270, 285, 286, 287, 291, 316, 318, 333, 335, 344], "your": [58, 243, 245, 258, 260, 270, 344], "z": [114, 286, 290, 291], "zalandoresearch": 7, "zeiler": [112, 114], "zero": [17, 19, 20, 46, 115, 125, 128, 134, 135, 136, 139, 140, 141, 142, 143, 162, 163, 164, 166, 167, 168, 181, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 196, 202, 203, 204, 206, 207, 208, 209, 210, 229, 234, 235, 236, 237, 238, 239, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 285, 286, 287, 291, 292, 297, 307, 324], "zero_grad": [118, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 271], "zeros_lik": [286, 292], "zfnet": [51, 114], "zhang": 114, "zhmoginov": 114, "zhu": 114, "zisserman": 114, "\u03c3\u1d62": 19}, "titles": ["data.ConcatDataset", "data.DataLoader", "data.Dataset", "lucid.data", "lucid.datasets", "CIFAR10", "CIFAR100", "FashionMNIST", "MNIST", "Image Datasets", "Lucid", "lucid.linalg", "lucid.linalg.cholesky", "lucid.linalg.det", "lucid.linalg.eig", "Linear Algebra Operations", "lucid.linalg.inv", "lucid.linalg.matrix_power", "lucid.linalg.norm", "lucid.linalg.pinv", "lucid.linalg.qr", "lucid.linalg.solve", "lucid.linalg.svd", "AlexNet", "alexnet", "DenseNet", "densenet_121", "densenet_169", "densenet_201", "densenet_264", "EfficientNet", "EfficientNet_V2", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3", "efficientnet_b4", "efficientnet_b5", "efficientnet_b6", "efficientnet_b7", "efficientnet_v2_l", "efficientnet_v2_m", "efficientnet_v2_s", "efficientnet_v2_xl", "Inception", "inception_v1", "inception_v3", "inception_v4", "InceptionResNet", "inception_resnet_v1", "inception_resnet_v2", "ConvNets", "LeNet", "lenet_1", "lenet_4", "lenet_5", "MobileNet", "MobileNet_V2", "MobileNet_V3", "mobilenet", "mobilenet_v2", "mobilenet_v3_large", "mobilenet_v3_small", "ResNeSt", "resnest_101", "resnest_14", "resnest_200", "resnest_26", "resnest_269", "resnest_50", "resnest_50_1s4x24d", "resnest_50_4s2x40d", "ResNet", "resnet_1001", "resnet_101", "resnet_152", "resnet_18", "resnet_200", "resnet_269", "resnet_34", "resnet_50", "wide_resnet_101", "wide_resnet_50", "ResNeXt", "resnext_101_32x16d", "resnext_101_32x32d", "resnext_101_32x4d", "resnext_101_32x8d", "resnext_101_64x4d", "resnext_50_32x4d", "SENet", "se_resnet_101", "se_resnet_152", "se_resnet_18", "se_resnet_34", "se_resnet_50", "se_resnext_101_32x4d", "se_resnext_101_32x8d", "se_resnext_101_64x4d", "se_resnext_50_32x4d", "SKNet", "sk_resnet_18", "sk_resnet_34", "sk_resnet_50", "sk_resnext_50_32x4d", "VGGNet", "vggnet_11", "vggnet_13", "vggnet_16", "vggnet_19", "Xception", "xception", "ZFNet", "zfnet", "lucid.models", "models.summarize", "nn.Buffer", "nn.Module", "nn.Parameter", "nn.ModuleDict", "nn.ModuleList", "nn.ParameterDict", "nn.ParameterList", "nn.Sequential", "Containers", "nn.functional.elu", "nn.functional.gelu", "Activation Functions", "nn.functional.leaky_relu", "nn.functional.relu", "nn.functional.selu", "nn.functional.sigmoid", "nn.functional.softmax", "nn.functional.tanh", "nn.functional.conv1d", "nn.functional.conv2d", "nn.functional.conv3d", "Convolution Functions", "nn.functional.unfold", "nn.functional.alpha_dropout", "nn.functional.dropout", "nn.functional.dropout1d", "nn.functional.dropout2d", "nn.functional.dropout3d", "Dropout Functions", "lucid.nn.functional", "nn.functional.bilinear", "Linear Functions", "nn.functional.linear", "nn.functional.binary_cross_entropy", "nn.functional.cross_entropy", "nn.functional.huber_loss", "Loss Functions", "nn.functional.mse_loss", "nn.functional.nll_loss", "nn.functional.batch_norm", "Normalization Functions", "nn.functional.instance_norm", "nn.functional.layer_norm", "nn.functional.adaptive_avg_pool1d", "nn.functional.adaptive_avg_pool2d", "nn.functional.adaptive_avg_pool3d", "nn.functional.avg_pool1d", "nn.functional.avg_pool2d", "nn.functional.avg_pool3d", "Pooling Functions", "nn.functional.max_pool1d", "nn.functional.max_pool2d", "nn.functional.max_pool3d", "Utility Functions", "nn.functional.interpolate", "nn.functional.rotate", "nn.ConvBNReLU1d", "nn.ConvBNReLU2d", "nn.ConvBNReLU3d", "nn.DepthSeparableConv1d", "nn.DepthSeparableConv2d", "nn.DepthSeparableConv3d", "nn.SEModule", "nn.SelectiveKernel", "Fused Layers", "nn.init.constant", "Weight Initializations", "nn.init.kaiming_normal", "nn.init.kaiming_uniform", "nn.init.normal", "nn.init.uniform", "nn.init.xavier_normal", "nn.init.xavier_uniform", "nn.ELU", "nn.GELU", "nn.HardSigmoid", "nn.HardSwish", "nn.LeakyReLU", "nn.ReLU", "nn.ReLU6", "nn.SELU", "nn.Sigmoid", "nn.Softmax", "nn.Swish", "nn.Tanh", "Activation Layers", "nn.Conv1d", "nn.Conv2d", "nn.Conv3d", "Convolution Layers", "nn.AlphaDropout", "nn.Dropout", "nn.Dropout1d", "nn.Dropout2d", "nn.Dropout3d", "Dropout Layers", "Modules", "nn.Bilinear", "nn.Identity", "nn.Linear", "Linear Layers", "nn.BCELoss", "nn.CrossEntropyLoss", "nn.HuberLoss", "nn.MSELoss", "nn.NLLLoss", "Loss Layers", "nn.BatchNorm1d", "nn.BatchNorm2d", "nn.BatchNorm3d", "nn.InstanceNorm1d", "nn.InstanceNorm2d", "nn.InstanceNorm3d", "nn.LayerNorm", "Normalization Layers", "nn.AdaptiveAvgPool1d", "nn.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool3d", "nn.AvgPool1d", "nn.AvgPool2d", "nn.AvgPool3d", "nn.MaxPool1d", "nn.MaxPool2d", "nn.MaxPool3d", "Pooling Layers", "nn.Upsample", "Vision Layers", "lucid.nn", "optim.Optimizer", "lucid.optim", "optim.ASGD", "optim.Adadelta", "optim.Adagrad", "optim.Adam", "optim.AdamW", "optim.Adamax", "optim.NAdam", "optim.RAdam", "optim.RMSprop", "optim.Rprop", "optim.SGD", "Optimizers", "lucid.grad_enabled", "lucid.newaxis", "lucid.no_grad", "lucid.register_model", "lucid.types", "lucid.random.bernoulli", "Random Number Generations", "lucid.random.rand", "lucid.random.randint", "lucid.random.randn", "lucid.random.seed", "lucid.random.uniform", "lucid.random", "lucid.Tensor", "lucid.add", "lucid.div", "lucid.dot", "lucid.inner", "lucid.matmul", "lucid.maximum", "lucid.minimum", "lucid.mul", "lucid.outer", "lucid.power", "lucid.sub", "lucid.arange", "lucid.diag", "lucid.empty", "lucid.empty_like", "lucid.eye", "lucid.ones", "lucid.ones_like", "lucid.zeros", "lucid.zeros_like", "Tensor Operations", "lucid.abs", "lucid.arccos", "lucid.arcsin", "lucid.arctan", "lucid.clip", "lucid.cos", "lucid.cosh", "lucid.cube", "lucid.exp", "lucid.log", "lucid.max", "lucid.mean", "lucid.min", "lucid.reciprocal", "lucid.sign", "lucid.sin", "lucid.sinh", "lucid.sqrt", "lucid.square", "lucid.sum", "lucid.tan", "lucid.tanh", "lucid.trace", "lucid.transpose", "lucid.var", "lucid.tensor", "lucid.concatenate", "lucid.flatten", "lucid.hstack", "Tensor Utilites", "lucid.meshgrid", "lucid.pad", "lucid.ravel", "lucid.repeat", "lucid.reshape", "lucid.squeeze", "lucid.stack", "lucid.tile", "lucid.unsqueeze", "lucid.vstack", "transforms.Compose", "transforms.ToTensor", "transforms.CenterCrop", "transforms.Normalize", "transforms.RandomCrop", "transforms.RandomGrayscale", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.RandomVerticalFlip", "transforms.Resize", "Image Transformations", "lucid.transforms"], "titleterms": {"1": 259, "1d": 259, "2": 259, "2d": 259, "3": 259, "It": [258, 260], "ab": 293, "activ": [127, 145, 201, 212], "ad": 259, "adadelta": 247, "adagrad": 248, "adam": 249, "adamax": 251, "adamw": 250, "adaptive_avg_pool1d": 159, "adaptive_avg_pool2d": 160, "adaptive_avg_pool3d": 161, "adaptiveavgpool1d": 231, "adaptiveavgpool2d": 232, "adaptiveavgpool3d": 233, "add": 272, "addit": 19, "admonit": 262, "advanc": [138, 344], "alexnet": [23, 24], "algebra": 15, "algorithm": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "alias": 262, "align": 259, "alpha_dropout": 139, "alphadropout": 206, "also": 245, "anoth": 318, "arang": 283, "arcco": 294, "architectur": [23, 53, 54, 55, 81, 82, 112], "arcsin": 295, "arctan": 296, "asgd": 246, "attent": 179, "attribut": [5, 6, 7, 8, 23, 48, 52, 72, 83, 90, 100, 105, 110, 112, 116, 118, 119, 120, 121, 122, 123, 172, 173, 174, 175, 176, 177, 178, 189, 190, 193, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 271, 335, 336, 337, 338, 339, 340, 341, 342], "avg_pool1d": 162, "avg_pool2d": 163, "avg_pool3d": 164, "avgpool1d": 234, "avgpool2d": 235, "avgpool3d": 236, "axi": 259, "backpropag": 271, "backwardbatch_norm": 155, "batchnorm": 180, "batchnorm1d": 223, "batchnorm2d": 224, "batchnorm3d": 225, "bceloss": 217, "behavior": [159, 160, 161, 231, 232, 233], "benefit": 260, "bernoulli": 263, "bilinear": [146, 213], "binari": 292, "binary_cross_entropi": 149, "bottleneck": [61, 62], "broadcast": 259, "buffer": 116, "calcul": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 72, 83, 90, 100, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 138, 146, 148, 159, 160, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342], "captur": 261, "case": 262, "centercrop": 335, "choleski": 12, "cifar10": 5, "cifar100": 6, "class": [0, 1, 2, 5, 6, 7, 8, 23, 25, 30, 31, 44, 48, 52, 56, 57, 58, 63, 72, 83, 90, 100, 105, 110, 112, 116, 117, 118, 119, 120, 121, 122, 123, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 271, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "clip": 297, "co": 298, "combin": 0, "compon": [3, 10, 243], "compos": 333, "concatdataset": [0, 1], "concaten": 319, "conclus": [3, 10, 243, 258, 259, 260, 270, 334, 344], "configur": [30, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71], "constant": 181, "contain": 124, "conv": 180, "conv1d": [134, 202], "conv2d": [135, 203], "conv3d": [136, 204], "convbnrelu1d": 172, "convbnrelu2d": 173, "convbnrelu3d": 174, "convnet": [51, 114], "convolut": [137, 145, 180, 205, 212], "core": 10, "cosh": 299, "creat": [118, 271, 318], "cross_entropi": 150, "crossentropyloss": 218, "cube": 300, "custom": [1, 2, 3, 117, 244, 245, 344], "data": [0, 1, 2, 3], "dataload": 1, "dataset": [0, 1, 2, 4, 9], "defin": [2, 117, 244, 245], "definit": 262, "densenet": 25, "densenet_121": 26, "densenet_169": 27, "densenet_201": 28, "densenet_264": 29, "depthseparableconv1d": 175, "depthseparableconv2d": 176, "depthseparableconv3d": 177, "depthwis": 180, "descript": [84, 85, 86, 87, 88, 89, 101, 102, 103, 261], "det": 13, "detail": [19, 81, 82], "diag": 284, "dilat": 138, "div": 273, "dot": 274, "dropout": [140, 144, 145, 207, 211, 212], "dropout1d": [141, 208], "dropout2d": [142, 209], "dropout3d": [143, 210], "efficientnet": 30, "efficientnet_b0": 32, "efficientnet_b1": 33, "efficientnet_b2": 34, "efficientnet_b3": 35, "efficientnet_b4": 36, "efficientnet_b5": 37, "efficientnet_b6": 38, "efficientnet_b7": 39, "efficientnet_v2": 31, "efficientnet_v2_": 42, "efficientnet_v2_l": 40, "efficientnet_v2_m": 41, "efficientnet_v2_xl": 43, "eig": 14, "elu": [125, 189], "empti": 285, "empty_lik": 286, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344], "excit": 180, "exp": 301, "ey": 287, "fashionmnist": 7, "featur": [4, 10, 11, 96, 97, 98, 99, 104, 245, 270, 344], "flatten": 320, "forward": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 72, 83, 90, 100, 110, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 138, 146, 148, 159, 160, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342], "from": 318, "function": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 181, 183, 184, 185, 186, 187, 188, 258, 260, 261, 263, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "fuse": 180, "futur": 4, "gelu": [126, 190], "gener": [264, 292], "get": 245, "grad_en": 258, "gradient": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 146, 148, 170, 178, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "guidelin": 262, "hardsigmoid": 191, "hardswish": 192, "how": [258, 260], "hstack": 321, "huber_loss": 151, "huberloss": 219, "hyperparamet": [70, 71], "ident": 214, "imag": [9, 343], "incept": 44, "inception_resnet_v1": 49, "inception_resnet_v2": 50, "inception_v1": 45, "inception_v3": 46, "inception_v4": 47, "inceptionresnet": 48, "index": 271, "init": [181, 183, 184, 185, 186, 187, 188], "initi": 182, "inner": 275, "input": 318, "inspect": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "instance_norm": 157, "instancenorm1d": 226, "instancenorm2d": 227, "instancenorm3d": 228, "integr": [3, 243, 270, 344], "interpol": 170, "inv": 16, "iter": 271, "kaiming_norm": 183, "kaiming_uniform": 184, "kei": [3, 4, 10, 96, 97, 98, 99, 104, 243, 245, 270, 344], "kernel": 180, "layer": [64, 65, 66, 67, 68, 69, 180, 201, 205, 211, 212, 216, 222, 230, 240, 242], "layer_norm": 158, "layernorm": 229, "leaky_relu": 128, "leakyrelu": 193, "learn": 270, "lenet": 52, "lenet_1": 53, "lenet_4": 54, "lenet_5": 55, "limit": 10, "linalg": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [15, 145, 147, 148, 212, 215, 216], "list": 318, "load": 1, "log": 302, "loss": [145, 152, 212, 222], "lucid": [3, 4, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 114, 145, 243, 245, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 344], "matmul": 276, "matrix": 276, "matrix_pow": 17, "max": 303, "max_pool1d": 166, "max_pool2d": 167, "max_pool3d": 168, "maximum": 277, "maxpool1d": 237, "maxpool2d": 238, "maxpool3d": 239, "mean": 304, "mechan": 179, "meshgrid": 323, "metadata": 261, "method": [0, 1, 2, 5, 6, 7, 8, 48, 52, 105, 117, 118, 244, 271], "min": 305, "minimum": 278, "mnist": 8, "mobilenet": [56, 59], "mobilenet_v2": [57, 60], "mobilenet_v3": 58, "mobilenet_v3_larg": 61, "mobilenet_v3_smal": 62, "model": [114, 115, 243], "modul": [117, 212], "moduledict": 119, "modulelist": 120, "more": 270, "mse_loss": 153, "mseloss": 220, "mul": 279, "multipl": [0, 276], "nadam": 252, "new": 259, "newaxi": 259, "nll_loss": 154, "nllloss": 221, "nn": [116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243], "no_grad": 260, "norm": 18, "normal": [145, 156, 185, 212, 230, 336], "note": 10, "number": 264, "ones": 288, "ones_lik": 289, "oper": [15, 276, 292], "optim": [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], "organ": 243, "outer": 280, "overview": [3, 4, 10, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 73, 74, 75, 76, 77, 78, 79, 80, 91, 92, 93, 94, 95, 243, 245, 270, 344], "pad": 324, "paramet": [1, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "parameterdict": 121, "parameterlist": 122, "pass": 110, "perform": 271, "pinv": 19, "pipelin": [3, 344], "pitfal": [258, 260], "pool": [145, 165, 212, 240], "potenti": [258, 260], "power": 281, "properti": [118, 271], "qr": 20, "radam": 253, "rais": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "rand": 265, "randint": 266, "randn": 267, "random": [263, 264, 265, 266, 267, 268, 269, 270], "randomcrop": 337, "randomgrayscal": 338, "randomhorizontalflip": 339, "randomrot": 340, "randomverticalflip": 341, "ravel": 325, "reciproc": 306, "refer": [5, 6, 7, 8, 178, 245], "register_model": 261, "relu": [129, 180, 194], "relu6": 195, "repeat": 326, "reshap": 327, "resiz": 342, "resnest": 63, "resnest_101": 64, "resnest_14": 65, "resnest_200": 66, "resnest_26": 67, "resnest_269": 68, "resnest_50": 69, "resnest_50_1s4x24d": 70, "resnest_50_4s2x40d": 71, "resnet": 72, "resnet_1001": 73, "resnet_101": 74, "resnet_152": 75, "resnet_18": 76, "resnet_200": 77, "resnet_269": 78, "resnet_34": 79, "resnet_50": 80, "resnext": 83, "resnext_101_32x16d": 84, "resnext_101_32x32d": 85, "resnext_101_32x4d": 86, "resnext_101_32x8d": 87, "resnext_101_64x4d": 88, "resnext_50_32x4d": 89, "return": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 53, 54, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 115, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 179, 181, 183, 184, 185, 186, 187, 188, 195, 258, 260, 263, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "rmsprop": 254, "rotat": 171, "rprop": 255, "rule": 276, "se_resnet_101": 91, "se_resnet_152": 92, "se_resnet_18": 93, "se_resnet_34": 94, "se_resnet_50": 95, "se_resnext_101_32x4d": 96, "se_resnext_101_32x8d": 97, "se_resnext_101_64x4d": 98, "se_resnext_50_32x4d": 99, "see": 245, "seed": 268, "select": 180, "selectivekernel": 179, "selu": [130, 196], "semodul": 178, "senet": 90, "separ": 180, "sequenti": 123, "sgd": 256, "sigmoid": [131, 197], "sign": 307, "signatur": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "sin": 308, "sinh": 309, "sk_resnet_18": 101, "sk_resnet_34": 102, "sk_resnet_50": 103, "sk_resnext_50_32x4d": 104, "sknet": 100, "slice": 271, "softmax": [132, 198], "solv": 21, "sqrt": 310, "squar": 311, "squeez": [180, 328], "stack": 329, "start": 245, "state": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "sub": 282, "sum": 312, "summar": 115, "summari": 115, "svd": 22, "swish": 199, "tabl": 115, "tan": 313, "tanh": [133, 200, 314], "tensor": [259, 271, 292, 318, 322], "through": 271, "tile": 330, "totensor": 334, "trace": 315, "track": 271, "transform": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "transpos": 316, "type": 262, "unari": 292, "unfold": 138, "uniform": [186, 269], "unsqueez": 331, "upsampl": 241, "us": [1, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 318], "usag": [4, 10, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 96, 97, 98, 99, 104, 116, 171, 258, 259, 260, 262, 323, 333, 334, 344], "util": [145, 169], "utilit": 322, "var": 317, "vggnet": 105, "vggnet_11": 106, "vggnet_13": 107, "vggnet_16": 108, "vggnet_19": 109, "vision": [212, 242], "vstack": 332, "weight": 182, "why": 262, "wide_resnet_101": 81, "wide_resnet_50": 82, "work": [4, 258, 260], "xavier_norm": 187, "xavier_uniform": 188, "xception": [110, 111], "zero": 290, "zeros_lik": 291, "zfnet": [112, 113]}})