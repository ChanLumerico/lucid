Search.setIndex({"alltitles": {"@ Operator": [[331, "operator"]], "Activation Functions": [[162, null], [184, null]], "Activation Layers": [[242, null], [258, null]], "Additional Details": [[24, "additional-details"]], "Additional Options": [[243, "additional-options"]], "Admonitions and Usage Guidelines": [[317, "admonitions-and-usage-guidelines"]], "Advanced Example with Dilation": [[175, "advanced-example-with-dilation"]], "Advanced Features": [[404, "advanced-features"]], "Advantages": [[10, "advantages"], [12, "advantages"], [13, "advantages"], [14, "advantages"]], "AlexNet": [[28, null]], "Algorithm": [[301, "algorithm"], [302, "algorithm"], [303, "algorithm"], [304, "algorithm"], [305, "algorithm"], [306, "algorithm"], [307, "algorithm"], [308, "algorithm"], [309, "algorithm"], [310, "algorithm"], [311, "algorithm"]], "Architecture": [[28, "architecture"], [30, "architecture"], [78, "architecture"], [79, "architecture"], [80, "architecture"], [143, "architecture"]], "Architecture Details": [[112, "architecture-details"], [113, "architecture-details"]], "Attention Functions": [[169, null], [184, null]], "Attention Layers": [[245, null], [258, null]], "Attention Mechanism": [[170, "attention-mechanism"], [220, "attention-mechanism"]], "Attributes": [[5, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [28, "attributes"], [73, "attributes"], [77, "attributes"], [103, "attributes"], [114, "attributes"], [121, "attributes"], [131, "attributes"], [136, "attributes"], [141, "attributes"], [143, "attributes"], [151, "attributes"], [153, "attributes"], [154, "attributes"], [155, "attributes"], [156, "attributes"], [157, "attributes"], [158, "attributes"], [213, "attributes"], [214, "attributes"], [215, "attributes"], [216, "attributes"], [217, "attributes"], [218, "attributes"], [219, "attributes"], [230, "attributes"], [231, "attributes"], [234, "attributes"], [235, "attributes"], [237, "attributes"], [238, "attributes"], [239, "attributes"], [241, "attributes"], [246, "attributes"], [247, "attributes"], [248, "attributes"], [250, "attributes"], [252, "attributes"], [253, "attributes"], [254, "attributes"], [255, "attributes"], [256, "attributes"], [259, "attributes"], [260, "attributes"], [261, "attributes"], [263, "attributes"], [264, "attributes"], [265, "attributes"], [266, "attributes"], [267, "attributes"], [269, "attributes"], [270, "attributes"], [271, "attributes"], [273, "attributes"], [274, "attributes"], [275, "attributes"], [276, "attributes"], [278, "attributes"], [279, "attributes"], [280, "attributes"], [281, "attributes"], [282, "attributes"], [283, "attributes"], [284, "attributes"], [285, "attributes"], [286, "attributes"], [326, "attributes"], [395, "attributes"], [396, "attributes"], [397, "attributes"], [398, "attributes"], [399, "attributes"], [400, "attributes"], [401, "attributes"], [402, "attributes"]], "Backward Gradient Calculation": [[17, "backward-gradient-calculation"], [18, "backward-gradient-calculation"], [19, "backward-gradient-calculation"], [21, "backward-gradient-calculation"], [22, "backward-gradient-calculation"], [23, "backward-gradient-calculation"], [24, "backward-gradient-calculation"], [25, "backward-gradient-calculation"], [26, "backward-gradient-calculation"], [27, "backward-gradient-calculation"], [154, "backward-gradient-calculation"], [155, "backward-gradient-calculation"], [156, "backward-gradient-calculation"], [157, "backward-gradient-calculation"], [158, "backward-gradient-calculation"], [160, "backward-gradient-calculation"], [161, "backward-gradient-calculation"], [163, "backward-gradient-calculation"], [164, "backward-gradient-calculation"], [165, "backward-gradient-calculation"], [166, "backward-gradient-calculation"], [167, "backward-gradient-calculation"], [168, "backward-gradient-calculation"], [177, "backward-gradient-calculation"], [185, "backward-gradient-calculation"], [187, "backward-gradient-calculation"], [211, "backward-gradient-calculation"], [219, "backward-gradient-calculation"], [229, "backward-gradient-calculation"], [230, "backward-gradient-calculation"], [231, "backward-gradient-calculation"], [232, "backward-gradient-calculation"], [233, "backward-gradient-calculation"], [234, "backward-gradient-calculation"], [235, "backward-gradient-calculation"], [237, "backward-gradient-calculation"], [238, "backward-gradient-calculation"], [239, "backward-gradient-calculation"], [240, "backward-gradient-calculation"], [241, "backward-gradient-calculation"], [246, "backward-gradient-calculation"], [247, "backward-gradient-calculation"], [248, "backward-gradient-calculation"], [250, "backward-gradient-calculation"], [253, "backward-gradient-calculation"], [254, "backward-gradient-calculation"], [255, "backward-gradient-calculation"], [256, "backward-gradient-calculation"], [259, "backward-gradient-calculation"], [260, "backward-gradient-calculation"], [261, "backward-gradient-calculation"], [263, "backward-gradient-calculation"], [264, "backward-gradient-calculation"], [265, "backward-gradient-calculation"], [266, "backward-gradient-calculation"], [267, "backward-gradient-calculation"], [269, "backward-gradient-calculation"], [270, "backward-gradient-calculation"], [271, "backward-gradient-calculation"], [273, "backward-gradient-calculation"], [274, "backward-gradient-calculation"], [275, "backward-gradient-calculation"], [276, "backward-gradient-calculation"], [281, "backward-gradient-calculation"], [282, "backward-gradient-calculation"], [283, "backward-gradient-calculation"], [284, "backward-gradient-calculation"], [285, "backward-gradient-calculation"], [286, "backward-gradient-calculation"], [327, "backward-gradient-calculation"], [328, "backward-gradient-calculation"], [329, "backward-gradient-calculation"], [330, "backward-gradient-calculation"], [331, "backward-gradient-calculation"], [332, "backward-gradient-calculation"], [333, "backward-gradient-calculation"], [334, "backward-gradient-calculation"], [335, "backward-gradient-calculation"], [336, "backward-gradient-calculation"], [337, "backward-gradient-calculation"], [349, "backward-gradient-calculation"], [350, "backward-gradient-calculation"], [351, "backward-gradient-calculation"], [352, "backward-gradient-calculation"], [353, "backward-gradient-calculation"], [354, "backward-gradient-calculation"], [355, "backward-gradient-calculation"], [356, "backward-gradient-calculation"], [357, "backward-gradient-calculation"], [358, "backward-gradient-calculation"], [359, "backward-gradient-calculation"], [360, "backward-gradient-calculation"], [361, "backward-gradient-calculation"], [362, "backward-gradient-calculation"], [363, "backward-gradient-calculation"], [364, "backward-gradient-calculation"], [365, "backward-gradient-calculation"], [366, "backward-gradient-calculation"], [367, "backward-gradient-calculation"], [368, "backward-gradient-calculation"], [369, "backward-gradient-calculation"], [370, "backward-gradient-calculation"], [371, "backward-gradient-calculation"], [372, "backward-gradient-calculation"], [373, "backward-gradient-calculation"], [375, "backward-gradient-calculation"], [376, "backward-gradient-calculation"], [378, "backward-gradient-calculation"], [380, "backward-gradient-calculation"], [381, "backward-gradient-calculation"], [382, "backward-gradient-calculation"], [383, "backward-gradient-calculation"], [384, "backward-gradient-calculation"], [386, "backward-gradient-calculation"], [387, "backward-gradient-calculation"], [388, "backward-gradient-calculation"], [389, "backward-gradient-calculation"], [390, "backward-gradient-calculation"], [391, "backward-gradient-calculation"], [392, "backward-gradient-calculation"]], "Behavior": [[199, "behavior"], [200, "behavior"], [201, "behavior"], [278, "behavior"], [279, "behavior"], [280, "behavior"]], "Benefits": [[315, "benefits"]], "Binary Functions": [[348, null]], "Bottleneck Configuration": [[87, "bottleneck-configuration"], [88, "bottleneck-configuration"]], "Broadcasting Rules": [[375, "broadcasting-rules"]], "CIFAR10": [[5, null]], "CIFAR100": [[6, null]], "Class Signature": [[0, "class-signature"], [1, "class-signature"], [2, "class-signature"], [5, "class-signature"], [6, "class-signature"], [7, "class-signature"], [8, "class-signature"], [28, "class-signature"], [30, "class-signature"], [31, "class-signature"], [45, "class-signature"], [50, "class-signature"], [51, "class-signature"], [64, "class-signature"], [68, "class-signature"], [73, "class-signature"], [77, "class-signature"], [81, "class-signature"], [82, "class-signature"], [83, "class-signature"], [84, "class-signature"], [94, "class-signature"], [103, "class-signature"], [114, "class-signature"], [121, "class-signature"], [131, "class-signature"], [136, "class-signature"], [141, "class-signature"], [143, "class-signature"], [147, "class-signature"], [151, "class-signature"], [152, "class-signature"], [153, "class-signature"], [154, "class-signature"], [155, "class-signature"], [156, "class-signature"], [157, "class-signature"], [158, "class-signature"], [213, "class-signature"], [214, "class-signature"], [215, "class-signature"], [216, "class-signature"], [217, "class-signature"], [218, "class-signature"], [219, "class-signature"], [220, "class-signature"], [230, "class-signature"], [231, "class-signature"], [232, "class-signature"], [233, "class-signature"], [234, "class-signature"], [235, "class-signature"], [236, "class-signature"], [237, "class-signature"], [238, "class-signature"], [239, "class-signature"], [240, "class-signature"], [241, "class-signature"], [243, "class-signature"], [244, "class-signature"], [246, "class-signature"], [247, "class-signature"], [248, "class-signature"], [250, "class-signature"], [251, "class-signature"], [252, "class-signature"], [253, "class-signature"], [254, "class-signature"], [255, "class-signature"], [256, "class-signature"], [259, "class-signature"], [260, "class-signature"], [261, "class-signature"], [263, "class-signature"], [264, "class-signature"], [265, "class-signature"], [266, "class-signature"], [267, "class-signature"], [269, "class-signature"], [270, "class-signature"], [271, "class-signature"], [272, "class-signature"], [273, "class-signature"], [274, "class-signature"], [275, "class-signature"], [276, "class-signature"], [278, "class-signature"], [279, "class-signature"], [280, "class-signature"], [281, "class-signature"], [282, "class-signature"], [283, "class-signature"], [284, "class-signature"], [285, "class-signature"], [286, "class-signature"], [288, "class-signature"], [290, "class-signature"], [291, "class-signature"], [292, "class-signature"], [293, "class-signature"], [294, "class-signature"], [296, "class-signature"], [299, "class-signature"], [301, "class-signature"], [302, "class-signature"], [303, "class-signature"], [304, "class-signature"], [305, "class-signature"], [306, "class-signature"], [307, "class-signature"], [308, "class-signature"], [309, "class-signature"], [310, "class-signature"], [311, "class-signature"], [326, "class-signature"], [393, "class-signature"], [394, "class-signature"], [395, "class-signature"], [396, "class-signature"], [397, "class-signature"], [398, "class-signature"], [399, "class-signature"], [400, "class-signature"], [401, "class-signature"], [402, "class-signature"]], "Combining multiple datasets": [[0, null]], "Conclusion": [[3, "conclusion"], [10, "conclusion"], [12, "conclusion"], [13, "conclusion"], [14, "conclusion"], [15, "conclusion"], [298, "conclusion"], [313, "conclusion"], [314, "conclusion"], [315, "conclusion"], [325, "conclusion"], [394, "conclusion"], [404, "conclusion"]], "Configurations": [[50, "configurations"]], "Containers": [[159, null]], "Conv-BatchNorm-ReLU": [[221, null]], "ConvNeXt": [[30, null]], "ConvNeXt_V2": [[31, null]], "ConvNets": [[76, null], [145, "convnets"]], "Convolution Functions": [[174, null], [184, null]], "Convolution Layers": [[249, null], [258, null]], "Core Components": [[15, "core-components"]], "Create a Tensor from a list": [[374, null]], "Creating a Parameter": [[153, null]], "Creating a tensor with gradient tracking": [[326, null]], "Custom Data Pipelines": [[3, "custom-data-pipelines"]], "Custom Pipelines": [[404, "custom-pipelines"]], "Defining a Custom Optimizer": [[300, null]], "Defining a custom dataset": [[2, null]], "Defining a custom module": [[152, null]], "Defining a custom optimizer": [[299, null]], "DenseNet": [[45, null]], "Depthwise Separable Convolution": [[221, null]], "Description": [[115, "description"], [116, "description"], [117, "description"], [118, "description"], [119, "description"], [120, "description"], [132, "description"], [133, "description"], [134, "description"], [316, "description"]], "Details": [[89, "details"], [90, "details"], [91, "details"], [92, "details"], [93, "details"]], "Differences from nn.Transformer": [[147, "differences-from-nn-transformer"]], "Dropout Functions": [[183, null], [184, null]], "Dropout Layers": [[257, null], [258, null]], "EfficientNet": [[50, null]], "EfficientNet Configurations": [[50, "id1"]], "EfficientNet_V2": [[51, null]], "Einops Functions": [[11, null]], "Embedding Process": [[209, "embedding-process"]], "Example": [[3, null], [3, null], [3, null], [10, null], [10, null], [10, null], [17, "example"], [18, "example"], [19, "example"], [21, "example"], [22, "example"], [23, "example"], [24, "example"], [25, "example"], [26, "example"], [27, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [85, "example"], [86, "example"], [175, "example"], [298, null], [298, null], [298, null], [313, "example"], [315, "example"], [318, "example"], [320, "example"], [321, "example"], [322, "example"], [323, "example"], [324, "example"], [325, null], [325, null], [325, null], [338, "example"], [339, "example"], [340, "example"], [341, "example"], [342, "example"], [344, "example"], [345, "example"], [346, "example"], [347, "example"], [349, "example"], [350, "example"], [351, "example"], [352, "example"], [353, "example"], [354, "example"], [355, "example"], [356, "example"], [358, "example"], [360, "example"], [362, "example"], [363, "example"], [364, "example"], [365, "example"], [366, "example"], [367, "example"], [368, "example"], [369, "example"], [370, "example"], [371, "example"], [372, "example"], [373, "example"], [376, "example"], [378, "example"], [382, "example"], [384, "example"], [386, "example"], [387, "example"], [389, "example"], [390, "example"], [391, "example"], [392, "example"]], "Example 1: Adding a new axis to a 1D tensor": [[314, null]], "Example 2: Adding a new axis to a 2D tensor": [[314, null]], "Example 3: Adding a new axis to align tensors for broadcasting": [[314, null]], "Example Usage": [[15, "example-usage"], [65, "example-usage"], [66, "example-usage"], [67, "example-usage"], [74, "example-usage"], [75, "example-usage"], [77, "example-usage"], [78, "example-usage"], [79, "example-usage"], [80, "example-usage"], [127, "example-usage"], [128, "example-usage"], [129, "example-usage"], [130, "example-usage"], [135, "example-usage"], [212, "example-usage"], [393, "example-usage"], [394, "example-usage"], [404, "example-usage"]], "Example Use Cases": [[317, "example-use-cases"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [12, "examples"], [13, "examples"], [14, "examples"], [16, "examples"], [28, "examples"], [29, "examples"], [30, "examples"], [31, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [36, "examples"], [37, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [44, "examples"], [45, "examples"], [46, "examples"], [47, "examples"], [48, "examples"], [49, "examples"], [50, "examples"], [52, "examples"], [53, "examples"], [54, "examples"], [55, "examples"], [56, "examples"], [57, "examples"], [58, "examples"], [59, "examples"], [60, "examples"], [61, "examples"], [62, "examples"], [63, "examples"], [68, "examples"], [83, "examples"], [87, "examples"], [88, "examples"], [94, "examples"], [95, "examples"], [96, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [105, "examples"], [106, "examples"], [107, "examples"], [108, "examples"], [109, "examples"], [110, "examples"], [111, "examples"], [112, "examples"], [113, "examples"], [115, "examples"], [116, "examples"], [117, "examples"], [118, "examples"], [119, "examples"], [120, "examples"], [122, "examples"], [123, "examples"], [124, "examples"], [125, "examples"], [126, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [146, "examples"], [147, "examples"], [148, "examples"], [149, "examples"], [151, "examples"], [152, "examples"], [153, "examples"], [154, "examples"], [155, "examples"], [156, "examples"], [157, "examples"], [158, "examples"], [160, "examples"], [161, "examples"], [163, "examples"], [164, "examples"], [165, "examples"], [166, "examples"], [167, "examples"], [168, "examples"], [170, "examples"], [171, "examples"], [172, "examples"], [173, "examples"], [176, "examples"], [177, "examples"], [178, "examples"], [179, "examples"], [180, "examples"], [181, "examples"], [182, "examples"], [185, "examples"], [187, "examples"], [188, "examples"], [189, "examples"], [190, "examples"], [192, "examples"], [193, "examples"], [194, "examples"], [195, "examples"], [197, "examples"], [198, "examples"], [199, "examples"], [200, "examples"], [201, "examples"], [202, "examples"], [203, "examples"], [204, "examples"], [206, "examples"], [207, "examples"], [208, "examples"], [209, "examples"], [211, "examples"], [213, "examples"], [214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [222, "examples"], [224, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [231, "examples"], [232, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [236, "examples"], [237, "examples"], [238, "examples"], [239, "examples"], [240, "examples"], [241, "examples"], [244, "examples"], [246, "examples"], [247, "examples"], [248, "examples"], [250, "examples"], [251, "examples"], [252, "examples"], [253, "examples"], [254, "examples"], [255, "examples"], [256, "examples"], [259, "examples"], [260, "examples"], [261, "examples"], [263, "examples"], [264, "examples"], [265, "examples"], [266, "examples"], [267, "examples"], [269, "examples"], [270, "examples"], [271, "examples"], [272, "examples"], [273, "examples"], [274, "examples"], [275, "examples"], [276, "examples"], [278, "examples"], [279, "examples"], [280, "examples"], [281, "examples"], [282, "examples"], [283, "examples"], [284, "examples"], [285, "examples"], [286, "examples"], [288, "examples"], [296, "examples"], [299, "examples"], [300, "examples"], [301, "examples"], [302, "examples"], [303, "examples"], [304, "examples"], [305, "examples"], [306, "examples"], [307, "examples"], [308, "examples"], [309, "examples"], [310, "examples"], [311, "examples"], [316, "examples"], [326, "examples"], [327, "examples"], [328, "examples"], [329, "examples"], [330, "examples"], [332, "examples"], [333, "examples"], [334, "examples"], [335, "examples"], [336, "examples"], [337, "examples"], [343, "examples"], [357, "examples"], [359, "examples"], [361, "examples"], [374, "examples"], [375, "examples"], [377, "examples"], [380, "examples"], [381, "examples"], [383, "examples"], [385, "examples"], [388, "examples"], [395, "examples"], [396, "examples"], [397, "examples"], [398, "examples"], [399, "examples"], [400, "examples"], [401, "examples"], [402, "examples"]], "FashionMNIST": [[7, null]], "Features": [[16, "features"]], "Forward Calculation": [[17, "forward-calculation"], [18, "forward-calculation"], [19, "forward-calculation"], [21, "forward-calculation"], [22, "forward-calculation"], [23, "forward-calculation"], [24, "forward-calculation"], [25, "forward-calculation"], [26, "forward-calculation"], [27, "forward-calculation"], [103, "forward-calculation"], [114, "forward-calculation"], [121, "forward-calculation"], [131, "forward-calculation"], [154, "forward-calculation"], [155, "forward-calculation"], [156, "forward-calculation"], [157, "forward-calculation"], [158, "forward-calculation"], [160, "forward-calculation"], [161, "forward-calculation"], [163, "forward-calculation"], [164, "forward-calculation"], [165, "forward-calculation"], [166, "forward-calculation"], [167, "forward-calculation"], [168, "forward-calculation"], [175, "forward-calculation"], [178, "forward-calculation"], [185, "forward-calculation"], [187, "forward-calculation"], [199, "forward-calculation"], [200, "forward-calculation"], [201, "forward-calculation"], [211, "forward-calculation"], [213, "forward-calculation"], [214, "forward-calculation"], [215, "forward-calculation"], [216, "forward-calculation"], [217, "forward-calculation"], [218, "forward-calculation"], [219, "forward-calculation"], [220, "forward-calculation"], [224, "forward-calculation"], [225, "forward-calculation"], [228, "forward-calculation"], [229, "forward-calculation"], [230, "forward-calculation"], [231, "forward-calculation"], [232, "forward-calculation"], [233, "forward-calculation"], [234, "forward-calculation"], [235, "forward-calculation"], [236, "forward-calculation"], [237, "forward-calculation"], [238, "forward-calculation"], [239, "forward-calculation"], [240, "forward-calculation"], [241, "forward-calculation"], [244, "forward-calculation"], [246, "forward-calculation"], [247, "forward-calculation"], [248, "forward-calculation"], [250, "forward-calculation"], [251, "forward-calculation"], [252, "forward-calculation"], [253, "forward-calculation"], [254, "forward-calculation"], [255, "forward-calculation"], [256, "forward-calculation"], [259, "forward-calculation"], [260, "forward-calculation"], [261, "forward-calculation"], [263, "forward-calculation"], [264, "forward-calculation"], [265, "forward-calculation"], [266, "forward-calculation"], [267, "forward-calculation"], [269, "forward-calculation"], [270, "forward-calculation"], [271, "forward-calculation"], [272, "forward-calculation"], [273, "forward-calculation"], [274, "forward-calculation"], [275, "forward-calculation"], [276, "forward-calculation"], [278, "forward-calculation"], [279, "forward-calculation"], [280, "forward-calculation"], [281, "forward-calculation"], [282, "forward-calculation"], [283, "forward-calculation"], [284, "forward-calculation"], [285, "forward-calculation"], [286, "forward-calculation"], [327, "forward-calculation"], [328, "forward-calculation"], [329, "forward-calculation"], [330, "forward-calculation"], [331, "forward-calculation"], [332, "forward-calculation"], [333, "forward-calculation"], [334, "forward-calculation"], [335, "forward-calculation"], [336, "forward-calculation"], [337, "forward-calculation"], [349, "forward-calculation"], [350, "forward-calculation"], [351, "forward-calculation"], [352, "forward-calculation"], [353, "forward-calculation"], [354, "forward-calculation"], [355, "forward-calculation"], [356, "forward-calculation"], [357, "forward-calculation"], [358, "forward-calculation"], [359, "forward-calculation"], [360, "forward-calculation"], [361, "forward-calculation"], [362, "forward-calculation"], [363, "forward-calculation"], [364, "forward-calculation"], [365, "forward-calculation"], [366, "forward-calculation"], [367, "forward-calculation"], [368, "forward-calculation"], [369, "forward-calculation"], [370, "forward-calculation"], [371, "forward-calculation"], [372, "forward-calculation"], [373, "forward-calculation"], [376, "forward-calculation"], [378, "forward-calculation"], [380, "forward-calculation"], [381, "forward-calculation"], [382, "forward-calculation"], [383, "forward-calculation"], [384, "forward-calculation"], [386, "forward-calculation"], [387, "forward-calculation"], [388, "forward-calculation"], [389, "forward-calculation"], [390, "forward-calculation"], [391, "forward-calculation"], [392, "forward-calculation"], [395, "forward-calculation"], [396, "forward-calculation"], [397, "forward-calculation"], [398, "forward-calculation"], [399, "forward-calculation"], [400, "forward-calculation"], [401, "forward-calculation"], [402, "forward-calculation"]], "Forward Method": [[290, "forward-method"], [291, "forward-method"], [292, "forward-method"], [293, "forward-method"], [294, "forward-method"]], "Forward Pass": [[141, "forward-pass"]], "Function Signature": [[12, "function-signature"], [13, "function-signature"], [14, "function-signature"], [17, "function-signature"], [18, "function-signature"], [19, "function-signature"], [21, "function-signature"], [22, "function-signature"], [23, "function-signature"], [24, "function-signature"], [25, "function-signature"], [26, "function-signature"], [27, "function-signature"], [29, "function-signature"], [32, "function-signature"], [33, "function-signature"], [34, "function-signature"], [35, "function-signature"], [36, "function-signature"], [37, "function-signature"], [38, "function-signature"], [39, "function-signature"], [40, "function-signature"], [41, "function-signature"], [42, "function-signature"], [43, "function-signature"], [44, "function-signature"], [46, "function-signature"], [47, "function-signature"], [48, "function-signature"], [49, "function-signature"], [52, "function-signature"], [53, "function-signature"], [54, "function-signature"], [55, "function-signature"], [56, "function-signature"], [57, "function-signature"], [58, "function-signature"], [59, "function-signature"], [60, "function-signature"], [61, "function-signature"], [62, "function-signature"], [63, "function-signature"], [65, "function-signature"], [66, "function-signature"], [67, "function-signature"], [69, "function-signature"], [70, "function-signature"], [71, "function-signature"], [72, "function-signature"], [74, "function-signature"], [75, "function-signature"], [78, "function-signature"], [79, "function-signature"], [80, "function-signature"], [85, "function-signature"], [86, "function-signature"], [87, "function-signature"], [88, "function-signature"], [89, "function-signature"], [90, "function-signature"], [91, "function-signature"], [92, "function-signature"], [93, "function-signature"], [95, "function-signature"], [96, "function-signature"], [97, "function-signature"], [98, "function-signature"], [99, "function-signature"], [100, "function-signature"], [101, "function-signature"], [102, "function-signature"], [104, "function-signature"], [105, "function-signature"], [106, "function-signature"], [107, "function-signature"], [108, "function-signature"], [109, "function-signature"], [110, "function-signature"], [111, "function-signature"], [112, "function-signature"], [113, "function-signature"], [115, "function-signature"], [116, "function-signature"], [117, "function-signature"], [118, "function-signature"], [119, "function-signature"], [120, "function-signature"], [122, "function-signature"], [123, "function-signature"], [124, "function-signature"], [125, "function-signature"], [126, "function-signature"], [127, "function-signature"], [128, "function-signature"], [129, "function-signature"], [130, "function-signature"], [132, "function-signature"], [133, "function-signature"], [134, "function-signature"], [135, "function-signature"], [137, "function-signature"], [138, "function-signature"], [139, "function-signature"], [140, "function-signature"], [142, "function-signature"], [144, "function-signature"], [146, "function-signature"], [148, "function-signature"], [149, "function-signature"], [160, "function-signature"], [161, "function-signature"], [163, "function-signature"], [164, "function-signature"], [165, "function-signature"], [166, "function-signature"], [167, "function-signature"], [168, "function-signature"], [170, "function-signature"], [171, "function-signature"], [172, "function-signature"], [173, "function-signature"], [175, "function-signature"], [176, "function-signature"], [177, "function-signature"], [178, "function-signature"], [179, "function-signature"], [180, "function-signature"], [181, "function-signature"], [182, "function-signature"], [185, "function-signature"], [187, "function-signature"], [188, "function-signature"], [189, "function-signature"], [190, "function-signature"], [192, "function-signature"], [193, "function-signature"], [194, "function-signature"], [195, "function-signature"], [197, "function-signature"], [198, "function-signature"], [199, "function-signature"], [200, "function-signature"], [201, "function-signature"], [202, "function-signature"], [203, "function-signature"], [204, "function-signature"], [206, "function-signature"], [207, "function-signature"], [208, "function-signature"], [209, "function-signature"], [211, "function-signature"], [212, "function-signature"], [222, "function-signature"], [224, "function-signature"], [225, "function-signature"], [226, "function-signature"], [227, "function-signature"], [228, "function-signature"], [229, "function-signature"], [313, "function-signature"], [315, "function-signature"], [316, "function-signature"], [318, "function-signature"], [320, "function-signature"], [321, "function-signature"], [322, "function-signature"], [323, "function-signature"], [324, "function-signature"], [327, "function-signature"], [328, "function-signature"], [329, "function-signature"], [330, "function-signature"], [331, "function-signature"], [332, "function-signature"], [333, "function-signature"], [334, "function-signature"], [335, "function-signature"], [336, "function-signature"], [337, "function-signature"], [338, "function-signature"], [339, "function-signature"], [340, "function-signature"], [341, "function-signature"], [342, "function-signature"], [343, "function-signature"], [344, "function-signature"], [345, "function-signature"], [346, "function-signature"], [347, "function-signature"], [349, "function-signature"], [350, "function-signature"], [351, "function-signature"], [352, "function-signature"], [353, "function-signature"], [354, "function-signature"], [355, "function-signature"], [356, "function-signature"], [357, "function-signature"], [358, "function-signature"], [359, "function-signature"], [360, "function-signature"], [361, "function-signature"], [362, "function-signature"], [363, "function-signature"], [364, "function-signature"], [365, "function-signature"], [366, "function-signature"], [367, "function-signature"], [368, "function-signature"], [369, "function-signature"], [370, "function-signature"], [371, "function-signature"], [372, "function-signature"], [373, "function-signature"], [374, "function-signature"], [375, "function-signature"], [376, "function-signature"], [377, "function-signature"], [378, "function-signature"], [380, "function-signature"], [381, "function-signature"], [382, "function-signature"], [383, "function-signature"], [384, "function-signature"], [385, "function-signature"], [386, "function-signature"], [387, "function-signature"], [388, "function-signature"], [389, "function-signature"], [390, "function-signature"], [391, "function-signature"], [392, "function-signature"]], "Fused Layers": [[221, null]], "Future Work": [[4, "future-work"]], "Getting Started": [[300, "getting-started"]], "How It Works": [[313, "how-it-works"], [315, "how-it-works"]], "Hyperparameter Configuration": [[101, "hyperparameter-configuration"], [102, "hyperparameter-configuration"]], "Image Datasets": [[9, null]], "Image Transformations": [[403, null]], "Inception": [[64, null]], "InceptionNeXt": [[68, null]], "InceptionResNet": [[73, null]], "Indexing and slicing": [[326, null]], "Inspecting Optimizer State": [[300, null], [301, null], [302, null], [303, null], [304, null], [305, null], [306, null], [307, null], [308, null], [309, null], [310, null], [311, null]], "Integration with lucid": [[3, "integration-with-lucid"], [298, "integration-with-lucid"], [325, "integration-with-lucid"], [404, "integration-with-lucid"]], "Iterating through a tensor": [[326, null]], "Key Components": [[3, "key-components"], [298, "key-components"]], "Key Features": [[4, "key-features"], [15, "key-features"], [127, "key-features"], [128, "key-features"], [129, "key-features"], [130, "key-features"], [135, "key-features"], [300, "key-features"], [325, "key-features"]], "Key Transformations": [[404, "key-transformations"]], "Layer Configuration": [[95, "layer-configuration"], [96, "layer-configuration"], [97, "layer-configuration"], [98, "layer-configuration"], [99, "layer-configuration"], [100, "layer-configuration"]], "LeNet": [[77, null]], "Learn More": [[325, null]], "Limitations": [[15, "limitations"]], "Linear Algebra Operations": [[20, null]], "Linear Functions": [[184, null], [186, null]], "Linear Layers": [[258, null], [262, null]], "Loading a custom dataset": [[1, null]], "Loss Functions": [[184, null], [191, null]], "Loss Layers": [[258, null], [268, null]], "Lucid": [[15, null]], "MNIST": [[8, null]], "Mathematical Definition": [[12, "mathematical-definition"], [13, "mathematical-definition"], [14, "mathematical-definition"]], "Mathematical Details": [[243, "mathematical-details"], [290, "mathematical-details"], [291, "mathematical-details"], [292, "mathematical-details"], [293, "mathematical-details"], [294, "mathematical-details"]], "Mathematical Expression": [[195, "mathematical-expression"], [385, "mathematical-expression"]], "Matrix Multiplication Rules": [[331, "matrix-multiplication-rules"]], "Metadata Captured": [[316, "metadata-captured"]], "Methods": [[0, "methods"], [1, "methods"], [2, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [73, "methods"], [77, "methods"], [136, "methods"], [152, "methods"], [153, "methods"], [299, "methods"], [326, "methods"]], "MobileNet": [[81, null]], "MobileNet_V2": [[82, null]], "MobileNet_V3": [[83, null]], "MobileNet_V4": [[84, null]], "Modules": [[258, null]], "Normalization Functions": [[184, null], [196, null]], "Normalization Layers": [[258, null], [277, null]], "Notes": [[15, "notes"]], "Optimizers": [[312, null]], "Organizing Models": [[298, "organizing-models"]], "Overview": [[3, "overview"], [4, "overview"], [10, "overview"], [15, "overview"], [64, "overview"], [65, "overview"], [66, "overview"], [67, "overview"], [73, "overview"], [74, "overview"], [75, "overview"], [77, "overview"], [78, "overview"], [79, "overview"], [80, "overview"], [81, "overview"], [82, "overview"], [83, "overview"], [84, "overview"], [89, "overview"], [90, "overview"], [91, "overview"], [92, "overview"], [93, "overview"], [104, "overview"], [105, "overview"], [106, "overview"], [107, "overview"], [108, "overview"], [109, "overview"], [110, "overview"], [111, "overview"], [122, "overview"], [123, "overview"], [124, "overview"], [125, "overview"], [126, "overview"], [243, "overview"], [290, "overview"], [291, "overview"], [292, "overview"], [293, "overview"], [294, "overview"], [298, "overview"], [300, "overview"], [325, "overview"], [404, "overview"]], "Parameters": [[1, "parameters"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [12, "parameters"], [13, "parameters"], [14, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [56, "parameters"], [57, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [75, "parameters"], [77, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [116, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [120, "parameters"], [121, "parameters"], [122, "parameters"], [123, "parameters"], [124, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [137, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [143, "parameters"], [144, "parameters"], [146, "parameters"], [147, "parameters"], [148, "parameters"], [149, "parameters"], [151, "parameters"], [153, "parameters"], [154, "parameters"], [155, "parameters"], [156, "parameters"], [157, "parameters"], [158, "parameters"], [160, "parameters"], [161, "parameters"], [163, "parameters"], [164, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [168, "parameters"], [170, "parameters"], [171, "parameters"], [172, "parameters"], [173, "parameters"], [175, "parameters"], [176, "parameters"], [177, "parameters"], [178, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [182, "parameters"], [185, "parameters"], [187, "parameters"], [188, "parameters"], [189, "parameters"], [190, "parameters"], [192, "parameters"], [193, "parameters"], [194, "parameters"], [195, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [200, "parameters"], [201, "parameters"], [202, "parameters"], [203, "parameters"], [204, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [209, "parameters"], [211, "parameters"], [212, "parameters"], [213, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [218, "parameters"], [219, "parameters"], [220, "parameters"], [222, "parameters"], [224, "parameters"], [225, "parameters"], [226, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [230, "parameters"], [231, "parameters"], [234, "parameters"], [235, "parameters"], [237, "parameters"], [238, "parameters"], [239, "parameters"], [241, "parameters"], [243, "parameters"], [244, "parameters"], [246, "parameters"], [247, "parameters"], [248, "parameters"], [250, "parameters"], [251, "parameters"], [252, "parameters"], [253, "parameters"], [254, "parameters"], [255, "parameters"], [256, "parameters"], [259, "parameters"], [260, "parameters"], [261, "parameters"], [263, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [267, "parameters"], [269, "parameters"], [270, "parameters"], [271, "parameters"], [272, "parameters"], [273, "parameters"], [274, "parameters"], [275, "parameters"], [276, "parameters"], [278, "parameters"], [279, "parameters"], [280, "parameters"], [281, "parameters"], [282, "parameters"], [283, "parameters"], [284, "parameters"], [285, "parameters"], [286, "parameters"], [288, "parameters"], [290, "parameters"], [291, "parameters"], [292, "parameters"], [293, "parameters"], [294, "parameters"], [296, "parameters"], [301, "parameters"], [302, "parameters"], [303, "parameters"], [304, "parameters"], [305, "parameters"], [306, "parameters"], [307, "parameters"], [308, "parameters"], [309, "parameters"], [310, "parameters"], [311, "parameters"], [315, "parameters"], [316, "parameters"], [318, "parameters"], [320, "parameters"], [321, "parameters"], [322, "parameters"], [323, "parameters"], [324, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [330, "parameters"], [331, "parameters"], [332, "parameters"], [333, "parameters"], [334, "parameters"], [335, "parameters"], [336, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [342, "parameters"], [343, "parameters"], [344, "parameters"], [345, "parameters"], [346, "parameters"], [347, "parameters"], [349, "parameters"], [350, "parameters"], [351, "parameters"], [352, "parameters"], [353, "parameters"], [354, "parameters"], [355, "parameters"], [356, "parameters"], [357, "parameters"], [358, "parameters"], [359, "parameters"], [360, "parameters"], [361, "parameters"], [362, "parameters"], [363, "parameters"], [364, "parameters"], [365, "parameters"], [366, "parameters"], [367, "parameters"], [368, "parameters"], [369, "parameters"], [370, "parameters"], [371, "parameters"], [372, "parameters"], [373, "parameters"], [374, "parameters"], [375, "parameters"], [376, "parameters"], [377, "parameters"], [378, "parameters"], [380, "parameters"], [381, "parameters"], [382, "parameters"], [383, "parameters"], [384, "parameters"], [385, "parameters"], [386, "parameters"], [387, "parameters"], [388, "parameters"], [389, "parameters"], [390, "parameters"], [391, "parameters"], [392, "parameters"], [393, "parameters"], [394, "parameters"], [395, "parameters"], [396, "parameters"], [397, "parameters"], [398, "parameters"], [399, "parameters"], [400, "parameters"], [401, "parameters"], [402, "parameters"]], "Performing backpropagation": [[326, null]], "Pooling Functions": [[184, null], [205, null]], "Pooling Layers": [[258, null], [287, null]], "Potential Pitfalls": [[313, "potential-pitfalls"], [315, "potential-pitfalls"]], "Properties": [[153, "properties"], [326, "properties"]], "Raises": [[17, "raises"], [18, "raises"], [19, "raises"], [21, "raises"], [22, "raises"], [23, "raises"], [24, "raises"], [25, "raises"], [26, "raises"], [27, "raises"]], "Random Number Generations": [[319, null]], "References": [[5, "references"], [6, "references"], [7, "references"], [8, "references"], [219, "references"], [300, "references"]], "Regularization": [[177, "regularization"]], "ResNeSt": [[94, null]], "ResNeXt": [[114, null]], "ResNet": [[103, null]], "Return Values": [[385, "return-values"]], "Returns": [[12, "returns"], [13, "returns"], [14, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [21, "returns"], [22, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [26, "returns"], [27, "returns"], [29, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [36, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [40, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [44, "returns"], [46, "returns"], [47, "returns"], [48, "returns"], [49, "returns"], [52, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [58, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [63, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [69, "returns"], [70, "returns"], [71, "returns"], [72, "returns"], [74, "returns"], [75, "returns"], [78, "returns"], [79, "returns"], [80, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, "returns"], [104, "returns"], [105, "returns"], [106, "returns"], [107, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [111, "returns"], [112, "returns"], [113, "returns"], [115, "returns"], [116, "returns"], [117, "returns"], [118, "returns"], [119, "returns"], [120, "returns"], [122, "returns"], [123, "returns"], [124, "returns"], [125, "returns"], [126, "returns"], [127, "returns"], [128, "returns"], [129, "returns"], [130, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [137, "returns"], [138, "returns"], [139, "returns"], [140, "returns"], [142, "returns"], [144, "returns"], [146, "returns"], [148, "returns"], [149, "returns"], [160, "returns"], [161, "returns"], [163, "returns"], [164, "returns"], [165, "returns"], [166, "returns"], [167, "returns"], [168, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [173, "returns"], [175, "returns"], [176, "returns"], [177, "returns"], [178, "returns"], [179, "returns"], [180, "returns"], [181, "returns"], [182, "returns"], [185, "returns"], [187, "returns"], [188, "returns"], [189, "returns"], [190, "returns"], [192, "returns"], [193, "returns"], [194, "returns"], [195, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [200, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [206, "returns"], [207, "returns"], [208, "returns"], [209, "returns"], [211, "returns"], [212, "returns"], [220, "returns"], [222, "returns"], [224, "returns"], [225, "returns"], [226, "returns"], [227, "returns"], [228, "returns"], [229, "returns"], [236, "returns"], [288, "returns"], [313, "returns"], [315, "returns"], [318, "returns"], [320, "returns"], [321, "returns"], [322, "returns"], [323, "returns"], [324, "returns"], [327, "returns"], [328, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, "returns"], [333, "returns"], [334, "returns"], [335, "returns"], [336, "returns"], [337, "returns"], [338, "returns"], [339, "returns"], [340, "returns"], [341, "returns"], [342, "returns"], [343, "returns"], [344, "returns"], [345, "returns"], [346, "returns"], [347, "returns"], [349, "returns"], [350, "returns"], [351, "returns"], [352, "returns"], [353, "returns"], [354, "returns"], [355, "returns"], [356, "returns"], [357, "returns"], [358, "returns"], [359, "returns"], [360, "returns"], [361, "returns"], [362, "returns"], [363, "returns"], [364, "returns"], [365, "returns"], [366, "returns"], [367, "returns"], [368, "returns"], [369, "returns"], [370, "returns"], [371, "returns"], [372, "returns"], [373, "returns"], [374, "returns"], [375, "returns"], [376, "returns"], [377, "returns"], [378, "returns"], [380, "returns"], [381, "returns"], [382, "returns"], [383, "returns"], [384, "returns"], [386, "returns"], [387, "returns"], [388, "returns"], [389, "returns"], [390, "returns"], [391, "returns"], [392, "returns"]], "SENet": [[121, null]], "SKNet": [[131, null]], "See Also": [[300, "see-also"]], "Selective Kernel": [[221, null]], "Sparse Layers": [[258, null], [289, null]], "Squeeze-and-Excitation": [[221, null]], "Summary Table": [[146, "summary-table"]], "Tensor Generating Functions": [[348, null]], "Tensor Operations": [[348, null]], "Tensor Utilites": [[379, null]], "Transformer": [[147, null]], "Transformer Layers": [[258, null], [295, null]], "Transformers": [[145, "transformers"], [150, null]], "Type Definitions": [[317, "type-definitions"]], "Unary Functions": [[348, null]], "Usage": [[4, "usage"], [60, "usage"], [61, "usage"], [62, "usage"], [63, "usage"], [151, "usage"], [212, "usage"], [313, "usage"], [314, "usage"], [315, "usage"], [380, "usage"], [393, "usage"], [394, "usage"], [404, "usage"]], "Usage Example": [[89, "usage-example"], [90, "usage-example"], [91, "usage-example"], [92, "usage-example"], [93, "usage-example"], [243, "usage-example"], [290, "usage-example"], [291, "usage-example"], [292, "usage-example"], [293, "usage-example"], [294, "usage-example"]], "Use another Tensor as input": [[374, null]], "Using DataLoader with ConcatDataset": [[1, null]], "Using the ASGD Optimizer": [[301, null]], "Using the Adadelta Optimizer": [[302, null]], "Using the Adagrad Optimizer": [[303, null]], "Using the Adam Optimizer": [[304, null]], "Using the AdamW Optimizer": [[305, null]], "Using the Adamax Optimizer": [[306, null]], "Using the NAdam Optimizer": [[307, null]], "Using the RAdam Optimizer": [[308, null]], "Using the RMSprop Optimizer": [[309, null]], "Using the Rprop Optimizer": [[310, null]], "Using the SGD Optimizer": [[311, null]], "Utility Functions": [[184, null], [210, null]], "VGGNet": [[136, null]], "Vision Layers": [[258, null], [297, null]], "Weight Initializations": [[223, null]], "Why Use Type Aliases?": [[317, null]], "Xception": [[141, null]], "ZFNet": [[143, null]], "alexnet": [[29, null]], "convnext_base": [[32, null]], "convnext_large": [[33, null]], "convnext_small": [[34, null]], "convnext_tiny": [[35, null]], "convnext_v2_atto": [[36, null]], "convnext_v2_base": [[37, null]], "convnext_v2_femto": [[38, null]], "convnext_v2_huge": [[39, null]], "convnext_v2_large": [[40, null]], "convnext_v2_nano": [[41, null]], "convnext_v2_pico": [[42, null]], "convnext_v2_tiny": [[43, null]], "convnext_xlarge": [[44, null]], "data.ConcatDataset": [[0, null]], "data.DataLoader": [[1, null]], "data.Dataset": [[2, null]], "densenet_121": [[46, null]], "densenet_169": [[47, null]], "densenet_201": [[48, null]], "densenet_264": [[49, null]], "efficientnet_b0": [[52, null]], "efficientnet_b1": [[53, null]], "efficientnet_b2": [[54, null]], "efficientnet_b3": [[55, null]], "efficientnet_b4": [[56, null]], "efficientnet_b5": [[57, null]], "efficientnet_b6": [[58, null]], "efficientnet_b7": [[59, null]], "efficientnet_v2_l": [[60, null]], "efficientnet_v2_m": [[61, null]], "efficientnet_v2_s": [[62, null]], "efficientnet_v2_xl": [[63, null]], "inception_next_atto": [[69, null]], "inception_next_base": [[70, null]], "inception_next_small": [[71, null]], "inception_next_tiny": [[72, null]], "inception_resnet_v1": [[74, null]], "inception_resnet_v2": [[75, null]], "inception_v1": [[65, null]], "inception_v3": [[66, null]], "inception_v4": [[67, null]], "lenet_1": [[78, null]], "lenet_4": [[79, null]], "lenet_5": [[80, null]], "lucid.Tensor": [[326, null]], "lucid.abs": [[349, null]], "lucid.add": [[327, null]], "lucid.arange": [[338, null]], "lucid.arccos": [[350, null]], "lucid.arcsin": [[351, null]], "lucid.arctan": [[352, null]], "lucid.broadcast_to": [[375, null]], "lucid.clip": [[353, null]], "lucid.concatenate": [[376, null]], "lucid.cos": [[354, null]], "lucid.cosh": [[355, null]], "lucid.cube": [[356, null]], "lucid.data": [[3, null]], "lucid.datasets": [[4, null]], "lucid.diag": [[339, null]], "lucid.div": [[328, null]], "lucid.dot": [[329, null]], "lucid.einops": [[10, null]], "lucid.einops.rearrange": [[12, null]], "lucid.einops.reduce": [[13, null]], "lucid.einops.repeat": [[14, null]], "lucid.empty": [[340, null]], "lucid.empty_like": [[341, null]], "lucid.exp": [[357, null]], "lucid.eye": [[342, null]], "lucid.flatten": [[377, null]], "lucid.grad_enabled": [[313, null]], "lucid.hstack": [[378, null]], "lucid.inner": [[330, null]], "lucid.linalg": [[16, null]], "lucid.linalg.cholesky": [[17, null]], "lucid.linalg.det": [[18, null]], "lucid.linalg.eig": [[19, null]], "lucid.linalg.inv": [[21, null]], "lucid.linalg.matrix_power": [[22, null]], "lucid.linalg.norm": [[23, null]], "lucid.linalg.pinv": [[24, null]], "lucid.linalg.qr": [[25, null]], "lucid.linalg.solve": [[26, null]], "lucid.linalg.svd": [[27, null]], "lucid.linspace": [[343, null]], "lucid.log": [[358, null]], "lucid.matmul": [[331, null]], "lucid.max": [[359, null]], "lucid.maximum": [[332, null]], "lucid.mean": [[360, null]], "lucid.meshgrid": [[380, null]], "lucid.min": [[361, null]], "lucid.minimum": [[333, null]], "lucid.models": [[145, null]], "lucid.mul": [[334, null]], "lucid.newaxis": [[314, null]], "lucid.nn": [[298, null]], "lucid.nn.functional": [[184, null]], "lucid.no_grad": [[315, null]], "lucid.ones": [[344, null]], "lucid.ones_like": [[345, null]], "lucid.optim": [[300, null]], "lucid.outer": [[335, null]], "lucid.pad": [[381, null]], "lucid.power": [[336, null]], "lucid.random": [[325, null]], "lucid.random.bernoulli": [[318, null]], "lucid.random.rand": [[320, null]], "lucid.random.randint": [[321, null]], "lucid.random.randn": [[322, null]], "lucid.random.seed": [[323, null]], "lucid.random.uniform": [[324, null]], "lucid.ravel": [[382, null]], "lucid.reciprocal": [[362, null]], "lucid.register_model": [[316, null]], "lucid.repeat": [[383, null]], "lucid.reshape": [[384, null]], "lucid.sign": [[363, null]], "lucid.sin": [[364, null]], "lucid.sinh": [[365, null]], "lucid.split": [[385, null]], "lucid.sqrt": [[366, null]], "lucid.square": [[367, null]], "lucid.squeeze": [[386, null]], "lucid.stack": [[387, null]], "lucid.sub": [[337, null]], "lucid.sum": [[368, null]], "lucid.tan": [[369, null]], "lucid.tanh": [[370, null]], "lucid.tensor": [[374, null]], "lucid.tile": [[388, null]], "lucid.trace": [[371, null]], "lucid.transforms": [[404, null]], "lucid.transpose": [[372, null]], "lucid.tril": [[389, null]], "lucid.triu": [[390, null]], "lucid.types": [[317, null]], "lucid.unsqueeze": [[391, null]], "lucid.var": [[373, null]], "lucid.vstack": [[392, null]], "lucid.zeros": [[346, null]], "lucid.zeros_like": [[347, null]], "mobilenet": [[85, null]], "mobilenet_v2": [[86, null]], "mobilenet_v3_large": [[87, null]], "mobilenet_v3_small": [[88, null]], "mobilenet_v4_conv_large": [[89, null]], "mobilenet_v4_conv_medium": [[90, null]], "mobilenet_v4_conv_small": [[91, null]], "mobilenet_v4_hybrid_large": [[92, null]], "mobilenet_v4_hybrid_medium": [[93, null]], "models.summarize": [[146, null]], "nn.AdaptiveAvgPool1d": [[278, null]], "nn.AdaptiveAvgPool2d": [[279, null]], "nn.AdaptiveAvgPool3d": [[280, null]], "nn.AlphaDropout": [[250, null]], "nn.AvgPool1d": [[281, null]], "nn.AvgPool2d": [[282, null]], "nn.AvgPool3d": [[283, null]], "nn.BCELoss": [[263, null]], "nn.BatchNorm1d": [[269, null]], "nn.BatchNorm2d": [[270, null]], "nn.BatchNorm3d": [[271, null]], "nn.Bilinear": [[259, null]], "nn.Buffer": [[151, null]], "nn.Conv1d": [[246, null]], "nn.Conv2d": [[247, null]], "nn.Conv3d": [[248, null]], "nn.ConvBNReLU1d": [[213, null]], "nn.ConvBNReLU2d": [[214, null]], "nn.ConvBNReLU3d": [[215, null]], "nn.CrossEntropyLoss": [[264, null]], "nn.DepthSeparableConv1d": [[216, null]], "nn.DepthSeparableConv2d": [[217, null]], "nn.DepthSeparableConv3d": [[218, null]], "nn.DropBlock": [[251, null]], "nn.DropPath": [[252, null]], "nn.Dropout": [[253, null]], "nn.Dropout1d": [[254, null]], "nn.Dropout2d": [[255, null]], "nn.Dropout3d": [[256, null]], "nn.ELU": [[230, null]], "nn.Embedding": [[288, null]], "nn.GELU": [[231, null]], "nn.GlobalResponseNorm": [[272, null]], "nn.HardSigmoid": [[232, null]], "nn.HardSwish": [[233, null]], "nn.HuberLoss": [[265, null]], "nn.Identity": [[260, null]], "nn.InstanceNorm1d": [[273, null]], "nn.InstanceNorm2d": [[274, null]], "nn.InstanceNorm3d": [[275, null]], "nn.LayerNorm": [[276, null]], "nn.LeakyReLU": [[234, null]], "nn.Linear": [[261, null]], "nn.MSELoss": [[266, null]], "nn.MaxPool1d": [[284, null]], "nn.MaxPool2d": [[285, null]], "nn.MaxPool3d": [[286, null]], "nn.Module": [[152, null]], "nn.ModuleDict": [[154, null]], "nn.ModuleList": [[155, null]], "nn.MultiHeadAttention": [[243, null]], "nn.NLLLoss": [[267, null]], "nn.Parameter": [[153, null]], "nn.ParameterDict": [[156, null]], "nn.ParameterList": [[157, null]], "nn.ReLU": [[235, null]], "nn.ReLU6": [[236, null]], "nn.SELU": [[237, null]], "nn.SEModule": [[219, null]], "nn.ScaledDotProductAttention": [[244, null]], "nn.SelectiveKernel": [[220, null]], "nn.Sequential": [[158, null]], "nn.Sigmoid": [[238, null]], "nn.Softmax": [[239, null]], "nn.Swish": [[240, null]], "nn.Tanh": [[241, null]], "nn.Transformer": [[290, null]], "nn.TransformerDecoder": [[291, null]], "nn.TransformerDecoderLayer": [[292, null]], "nn.TransformerEncoder": [[293, null]], "nn.TransformerEncoderLayer": [[294, null]], "nn.Upsample": [[296, null]], "nn.functional.adaptive_avg_pool1d": [[199, null]], "nn.functional.adaptive_avg_pool2d": [[200, null]], "nn.functional.adaptive_avg_pool3d": [[201, null]], "nn.functional.alpha_dropout": [[176, null]], "nn.functional.avg_pool1d": [[202, null]], "nn.functional.avg_pool2d": [[203, null]], "nn.functional.avg_pool3d": [[204, null]], "nn.functional.batch_norm": [[194, null]], "nn.functional.bilinear": [[185, null]], "nn.functional.binary_cross_entropy": [[188, null]], "nn.functional.conv1d": [[171, null]], "nn.functional.conv2d": [[172, null]], "nn.functional.conv3d": [[173, null]], "nn.functional.cross_entropy": [[189, null]], "nn.functional.drop_block": [[177, null]], "nn.functional.drop_path": [[178, null]], "nn.functional.dropout": [[179, null]], "nn.functional.dropout1d": [[180, null]], "nn.functional.dropout2d": [[181, null]], "nn.functional.dropout3d": [[182, null]], "nn.functional.elu": [[160, null]], "nn.functional.embedding": [[209, null]], "nn.functional.gelu": [[161, null]], "nn.functional.global_response_norm": [[195, null]], "nn.functional.huber_loss": [[190, null]], "nn.functional.instance_norm": [[197, null]], "nn.functional.interpolate": [[211, null]], "nn.functional.layer_norm": [[198, null]], "nn.functional.leaky_relu": [[163, null]], "nn.functional.linear": [[187, null]], "nn.functional.max_pool1d": [[206, null]], "nn.functional.max_pool2d": [[207, null]], "nn.functional.max_pool3d": [[208, null]], "nn.functional.mse_loss": [[192, null]], "nn.functional.nll_loss": [[193, null]], "nn.functional.relu": [[164, null]], "nn.functional.rotate": [[212, null]], "nn.functional.scaled_dot_product_attention": [[170, null]], "nn.functional.selu": [[165, null]], "nn.functional.sigmoid": [[166, null]], "nn.functional.softmax": [[167, null]], "nn.functional.tanh": [[168, null]], "nn.functional.unfold": [[175, null]], "nn.init.constant": [[222, null]], "nn.init.kaiming_normal": [[224, null]], "nn.init.kaiming_uniform": [[225, null]], "nn.init.normal": [[226, null]], "nn.init.uniform": [[227, null]], "nn.init.xavier_normal": [[228, null]], "nn.init.xavier_uniform": [[229, null]], "optim.ASGD": [[301, null]], "optim.Adadelta": [[302, null]], "optim.Adagrad": [[303, null]], "optim.Adam": [[304, null]], "optim.AdamW": [[305, null]], "optim.Adamax": [[306, null]], "optim.NAdam": [[307, null]], "optim.Optimizer": [[299, null]], "optim.RAdam": [[308, null]], "optim.RMSprop": [[309, null]], "optim.Rprop": [[310, null]], "optim.SGD": [[311, null]], "rearrange": [[10, "rearrange"]], "reduce": [[10, "reduce"]], "repeat": [[10, "repeat"]], "resnest_101": [[95, null]], "resnest_14": [[96, null]], "resnest_200": [[97, null]], "resnest_26": [[98, null]], "resnest_269": [[99, null]], "resnest_50": [[100, null]], "resnest_50_1s4x24d": [[101, null]], "resnest_50_4s2x40d": [[102, null]], "resnet_1001": [[104, null]], "resnet_101": [[105, null]], "resnet_152": [[106, null]], "resnet_18": [[107, null]], "resnet_200": [[108, null]], "resnet_269": [[109, null]], "resnet_34": [[110, null]], "resnet_50": [[111, null]], "resnext_101_32x16d": [[115, null]], "resnext_101_32x32d": [[116, null]], "resnext_101_32x4d": [[117, null]], "resnext_101_32x8d": [[118, null]], "resnext_101_64x4d": [[119, null]], "resnext_50_32x4d": [[120, null]], "se_resnet_101": [[122, null]], "se_resnet_152": [[123, null]], "se_resnet_18": [[124, null]], "se_resnet_34": [[125, null]], "se_resnet_50": [[126, null]], "se_resnext_101_32x4d": [[127, null]], "se_resnext_101_32x8d": [[128, null]], "se_resnext_101_64x4d": [[129, null]], "se_resnext_50_32x4d": [[130, null]], "sk_resnet_18": [[132, null]], "sk_resnet_34": [[133, null]], "sk_resnet_50": [[134, null]], "sk_resnext_50_32x4d": [[135, null]], "transformer_base": [[148, null]], "transformer_big": [[149, null]], "transforms.CenterCrop": [[395, null]], "transforms.Compose": [[393, null]], "transforms.Normalize": [[396, null]], "transforms.RandomCrop": [[397, null]], "transforms.RandomGrayscale": [[398, null]], "transforms.RandomHorizontalFlip": [[399, null]], "transforms.RandomRotation": [[400, null]], "transforms.RandomVerticalFlip": [[401, null]], "transforms.Resize": [[402, null]], "transforms.ToTensor": [[394, null]], "vggnet_11": [[137, null]], "vggnet_13": [[138, null]], "vggnet_16": [[139, null]], "vggnet_19": [[140, null]], "wide_resnet_101": [[112, null]], "wide_resnet_50": [[113, null]], "xception": [[142, null]], "zfnet": [[144, null]]}, "docnames": ["data/ConcatDataset", "data/DataLoader", "data/Dataset", "data/data", "datasets/datasets", "datasets/image/CIFAR10", "datasets/image/CIFAR100", "datasets/image/FashionMNIST", "datasets/image/MNIST", "datasets/image/index", "einops/einops", "einops/functions/index", "einops/functions/rearrange", "einops/functions/reduce", "einops/functions/repeat", "index", "linalg/linalg", "linalg/operations/cholesky", "linalg/operations/det", "linalg/operations/eig", "linalg/operations/index", "linalg/operations/inv", "linalg/operations/matrix_power", "linalg/operations/norm", "linalg/operations/pinv", "linalg/operations/qr", "linalg/operations/solve", "linalg/operations/svd", "models/conv/alex/AlexNet_", "models/conv/alex/alexnet", "models/conv/convnext/ConvNeXt", "models/conv/convnext/ConvNeXt_V2", "models/conv/convnext/convnext_base", "models/conv/convnext/convnext_large", "models/conv/convnext/convnext_small", "models/conv/convnext/convnext_tiny", "models/conv/convnext/convnext_v2_atto", "models/conv/convnext/convnext_v2_base", "models/conv/convnext/convnext_v2_femto", "models/conv/convnext/convnext_v2_huge", "models/conv/convnext/convnext_v2_large", "models/conv/convnext/convnext_v2_nano", "models/conv/convnext/convnext_v2_pico", "models/conv/convnext/convnext_v2_tiny", "models/conv/convnext/convnext_xlarge", "models/conv/dense/DenseNet", "models/conv/dense/densenet_121", "models/conv/dense/densenet_169", "models/conv/dense/densenet_201", "models/conv/dense/densenet_264", "models/conv/efficient/EfficientNet", "models/conv/efficient/EfficientNet_V2", "models/conv/efficient/efficientnet_b0", "models/conv/efficient/efficientnet_b1", "models/conv/efficient/efficientnet_b2", "models/conv/efficient/efficientnet_b3", "models/conv/efficient/efficientnet_b4", "models/conv/efficient/efficientnet_b5", "models/conv/efficient/efficientnet_b6", "models/conv/efficient/efficientnet_b7", "models/conv/efficient/efficientnet_v2_l", "models/conv/efficient/efficientnet_v2_m", "models/conv/efficient/efficientnet_v2_s", "models/conv/efficient/efficientnet_v2_xl", "models/conv/inception/Inception", "models/conv/inception/inception_v1", "models/conv/inception/inception_v3", "models/conv/inception/inception_v4", "models/conv/inception_next/InceptionNeXt", "models/conv/inception_next/inception_next_atto", "models/conv/inception_next/inception_next_base", "models/conv/inception_next/inception_next_small", "models/conv/inception_next/inception_next_tiny", "models/conv/inception_res/InceptionResNet", "models/conv/inception_res/inception_resnet_v1", "models/conv/inception_res/inception_resnet_v2", "models/conv/index", "models/conv/lenet/LeNet", "models/conv/lenet/lenet_1", "models/conv/lenet/lenet_4", "models/conv/lenet/lenet_5", "models/conv/mobile/MobileNet_", "models/conv/mobile/MobileNet_V2_", "models/conv/mobile/MobileNet_V3", "models/conv/mobile/MobileNet_V4", "models/conv/mobile/mobilenet", "models/conv/mobile/mobilenet_v2", "models/conv/mobile/mobilenet_v3_large", "models/conv/mobile/mobilenet_v3_small", "models/conv/mobile/mobilenet_v4_conv_large", "models/conv/mobile/mobilenet_v4_conv_medium", "models/conv/mobile/mobilenet_v4_conv_small", "models/conv/mobile/mobilenet_v4_hybrid_large", "models/conv/mobile/mobilenet_v4_hybrid_medium", "models/conv/resnest/ResNeSt", "models/conv/resnest/resnest_101", "models/conv/resnest/resnest_14", "models/conv/resnest/resnest_200", "models/conv/resnest/resnest_26", "models/conv/resnest/resnest_269", "models/conv/resnest/resnest_50", "models/conv/resnest/resnest_50_1s4x24d", "models/conv/resnest/resnest_50_4s2x40d", "models/conv/resnet/ResNet", "models/conv/resnet/resnet_1001", "models/conv/resnet/resnet_101", "models/conv/resnet/resnet_152", "models/conv/resnet/resnet_18", "models/conv/resnet/resnet_200", "models/conv/resnet/resnet_269", "models/conv/resnet/resnet_34", "models/conv/resnet/resnet_50", "models/conv/resnet/wide_resnet_101", "models/conv/resnet/wide_resnet_50", "models/conv/resnext/ResNeXt", "models/conv/resnext/resnext_101_32x16d", "models/conv/resnext/resnext_101_32x32d", "models/conv/resnext/resnext_101_32x4d", "models/conv/resnext/resnext_101_32x8d", "models/conv/resnext/resnext_101_64x4d", "models/conv/resnext/resnext_50_32x4d", "models/conv/senet/SENet", "models/conv/senet/se_resnet_101", "models/conv/senet/se_resnet_152", "models/conv/senet/se_resnet_18", "models/conv/senet/se_resnet_34", "models/conv/senet/se_resnet_50", "models/conv/senet/se_resnext_101_32x4d", "models/conv/senet/se_resnext_101_32x8d", "models/conv/senet/se_resnext_101_64x4d", "models/conv/senet/se_resnext_50_32x4d", "models/conv/sknet/SKNet", "models/conv/sknet/sk_resnet_18", "models/conv/sknet/sk_resnet_34", "models/conv/sknet/sk_resnet_50", "models/conv/sknet/sk_resnext_50_32x4d", "models/conv/vgg/VGGNet", "models/conv/vgg/vggnet_11", "models/conv/vgg/vggnet_13", "models/conv/vgg/vggnet_16", "models/conv/vgg/vggnet_19", "models/conv/xception/Xception_", "models/conv/xception/xception", "models/conv/zfnet/ZFNet_", "models/conv/zfnet/zfnet", "models/models", "models/summarize", "models/transformer/base/Transformer", "models/transformer/base/transformer_base", "models/transformer/base/transformer_big", "models/transformer/index", "nn/Buffer", "nn/Module", "nn/Parameter", "nn/containers/ModuleDict", "nn/containers/ModuleList", "nn/containers/ParameterDict", "nn/containers/ParameterList", "nn/containers/Sequential", "nn/containers/index", "nn/functions/activation/elu", "nn/functions/activation/gelu", "nn/functions/activation/index", "nn/functions/activation/leaky_relu", "nn/functions/activation/relu", "nn/functions/activation/selu", "nn/functions/activation/sigmoid", "nn/functions/activation/softmax", "nn/functions/activation/tanh", "nn/functions/attention/index", "nn/functions/attention/scaled_dot_product_attention", "nn/functions/conv/conv1d", "nn/functions/conv/conv2d", "nn/functions/conv/conv3d", "nn/functions/conv/index", "nn/functions/conv/unfold", "nn/functions/drop/alpha_dropout", "nn/functions/drop/drop_block", "nn/functions/drop/drop_path", "nn/functions/drop/dropout", "nn/functions/drop/dropout1d", "nn/functions/drop/dropout2d", "nn/functions/drop/dropout3d", "nn/functions/drop/index", "nn/functions/index", "nn/functions/linear/bilinear", "nn/functions/linear/index", "nn/functions/linear/linear", "nn/functions/loss/binary_cross_entropy", "nn/functions/loss/cross_entropy", "nn/functions/loss/huber_loss", "nn/functions/loss/index", "nn/functions/loss/mse_loss", "nn/functions/loss/nll_loss", "nn/functions/norm/batch_norm", "nn/functions/norm/global_response_norm", "nn/functions/norm/index", "nn/functions/norm/instance_norm", "nn/functions/norm/layer_norm", "nn/functions/pool/adaptive_avg_pool1d", "nn/functions/pool/adaptive_avg_pool2d", "nn/functions/pool/adaptive_avg_pool3d", "nn/functions/pool/avg_pool1d", "nn/functions/pool/avg_pool2d", "nn/functions/pool/avg_pool3d", "nn/functions/pool/index", "nn/functions/pool/max_pool1d", "nn/functions/pool/max_pool2d", "nn/functions/pool/max_pool3d", "nn/functions/util/embedding", "nn/functions/util/index", "nn/functions/util/interpolate", "nn/functions/util/rotate", "nn/fused/ConvBNReLU1d", "nn/fused/ConvBNReLU2d", "nn/fused/ConvBNReLU3d", "nn/fused/DepthSeparableConv1d", "nn/fused/DepthSeparableConv2d", "nn/fused/DepthSeparableConv3d", "nn/fused/SEModule", "nn/fused/SelectiveKernel", "nn/fused/index", "nn/init/constant", "nn/init/index", "nn/init/kaiming_normal", "nn/init/kaiming_uniform", "nn/init/normal", "nn/init/uniform", "nn/init/xavier_normal", "nn/init/xavier_uniform", "nn/modules/activation/ELU", "nn/modules/activation/GELU", "nn/modules/activation/HardSigmoid", "nn/modules/activation/HardSwish", "nn/modules/activation/LeakyReLU", "nn/modules/activation/ReLU", "nn/modules/activation/ReLU6", "nn/modules/activation/SELU", "nn/modules/activation/Sigmoid", "nn/modules/activation/Softmax", "nn/modules/activation/Swish", "nn/modules/activation/Tanh", "nn/modules/activation/index", "nn/modules/attention/MultiHeadAttention", "nn/modules/attention/ScaledDotProductAttention", "nn/modules/attention/index", "nn/modules/conv/Conv1d", "nn/modules/conv/Conv2d", "nn/modules/conv/Conv3d", "nn/modules/conv/index", "nn/modules/drop/AlphaDropout", "nn/modules/drop/DropBlock", "nn/modules/drop/DropPath", "nn/modules/drop/Dropout", "nn/modules/drop/Dropout1d", "nn/modules/drop/Dropout2d", "nn/modules/drop/Dropout3d", "nn/modules/drop/index", "nn/modules/index", "nn/modules/linear/Bilinear", "nn/modules/linear/Identity", "nn/modules/linear/Linear", "nn/modules/linear/index", "nn/modules/loss/BCELoss", "nn/modules/loss/CrossEntropyLoss", "nn/modules/loss/HuberLoss", "nn/modules/loss/MSELoss", "nn/modules/loss/NLLLoss", "nn/modules/loss/index", "nn/modules/norm/BatchNorm1d", "nn/modules/norm/BatchNorm2d", "nn/modules/norm/BatchNorm3d", "nn/modules/norm/GlobalResponseNorm", "nn/modules/norm/InstanceNorm1d", "nn/modules/norm/InstanceNorm2d", "nn/modules/norm/InstanceNorm3d", "nn/modules/norm/LayerNorm", "nn/modules/norm/index", "nn/modules/pool/AdaptiveAvgPool1d", "nn/modules/pool/AdaptiveAvgPool2d", "nn/modules/pool/AdaptiveAvgPool3d", "nn/modules/pool/AvgPool1d", "nn/modules/pool/AvgPool2d", "nn/modules/pool/AvgPool3d", "nn/modules/pool/MaxPool1d", "nn/modules/pool/MaxPool2d", "nn/modules/pool/MaxPool3d", "nn/modules/pool/index", "nn/modules/sparse/Embedding", "nn/modules/sparse/index", "nn/modules/transformer/Transformer", "nn/modules/transformer/TransformerDecoder", "nn/modules/transformer/TransformerDecoderLayer", "nn/modules/transformer/TransformerEncoder", "nn/modules/transformer/TransformerEncoderLayer", "nn/modules/transformer/index", "nn/modules/vision/Upsample", "nn/modules/vision/index", "nn/nn", "optim/Optimizer", "optim/optim", "optim/optimizers/ASGD", "optim/optimizers/Adadelta", "optim/optimizers/Adagrad", "optim/optimizers/Adam", "optim/optimizers/AdamW", "optim/optimizers/Adamax", "optim/optimizers/NAdam", "optim/optimizers/RAdam", "optim/optimizers/RMSprop", "optim/optimizers/Rprop", "optim/optimizers/SGD", "optim/optimizers/index", "others/grad_enabled", "others/newaxis", "others/no_grad", "others/register_model", "others/types", "random/functions/bernoulli", "random/functions/index", "random/functions/rand", "random/functions/randint", "random/functions/randn", "random/functions/seed", "random/functions/uniform", "random/random", "tensor/Tensor_", "tensor/operations/bfunc/add", "tensor/operations/bfunc/div", "tensor/operations/bfunc/dot", "tensor/operations/bfunc/inner", "tensor/operations/bfunc/matmul", "tensor/operations/bfunc/maximum", "tensor/operations/bfunc/minimum", "tensor/operations/bfunc/mul", "tensor/operations/bfunc/outer", "tensor/operations/bfunc/power", "tensor/operations/bfunc/sub", "tensor/operations/gfunc/arange", "tensor/operations/gfunc/diag", "tensor/operations/gfunc/empty", "tensor/operations/gfunc/empty_like", "tensor/operations/gfunc/eye", "tensor/operations/gfunc/linspace", "tensor/operations/gfunc/ones", "tensor/operations/gfunc/ones_like", "tensor/operations/gfunc/zeros", "tensor/operations/gfunc/zeros_like", "tensor/operations/index", "tensor/operations/ufunc/abs", "tensor/operations/ufunc/arccos", "tensor/operations/ufunc/arcsin", "tensor/operations/ufunc/arctan", "tensor/operations/ufunc/clip", "tensor/operations/ufunc/cos", "tensor/operations/ufunc/cosh", "tensor/operations/ufunc/cube", "tensor/operations/ufunc/exp", "tensor/operations/ufunc/log", "tensor/operations/ufunc/max", "tensor/operations/ufunc/mean", "tensor/operations/ufunc/min", "tensor/operations/ufunc/reciprocal", "tensor/operations/ufunc/sign", "tensor/operations/ufunc/sin", "tensor/operations/ufunc/sinh", "tensor/operations/ufunc/sqrt", "tensor/operations/ufunc/square", "tensor/operations/ufunc/sum", "tensor/operations/ufunc/tan", "tensor/operations/ufunc/tanh", "tensor/operations/ufunc/trace", "tensor/operations/ufunc/transpose", "tensor/operations/ufunc/var", "tensor/tensor", "tensor/utilities/broadcast_to", "tensor/utilities/concatenate", "tensor/utilities/flatten", "tensor/utilities/hstack", "tensor/utilities/index", "tensor/utilities/meshgrid", "tensor/utilities/pad", "tensor/utilities/ravel", "tensor/utilities/repeat", "tensor/utilities/reshape", "tensor/utilities/split", "tensor/utilities/squeeze", "tensor/utilities/stack", "tensor/utilities/tile", "tensor/utilities/tril", "tensor/utilities/triu", "tensor/utilities/unsqueeze", "tensor/utilities/vstack", "transforms/Compose", "transforms/ToTensor", "transforms/image/CenterCrop", "transforms/image/Normalize", "transforms/image/RandomCrop", "transforms/image/RandomGrayscale", "transforms/image/RandomHorizontalFlip", "transforms/image/RandomRotation", "transforms/image/RandomVerticalFlip", "transforms/image/Resize", "transforms/image/index", "transforms/transforms"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["data/ConcatDataset.rst", "data/DataLoader.rst", "data/Dataset.rst", "data/data.rst", "datasets/datasets.rst", "datasets/image/CIFAR10.rst", "datasets/image/CIFAR100.rst", "datasets/image/FashionMNIST.rst", "datasets/image/MNIST.rst", "datasets/image/index.rst", "einops/einops.rst", "einops/functions/index.rst", "einops/functions/rearrange.rst", "einops/functions/reduce.rst", "einops/functions/repeat.rst", "index.rst", "linalg/linalg.rst", "linalg/operations/cholesky.rst", "linalg/operations/det.rst", "linalg/operations/eig.rst", "linalg/operations/index.rst", "linalg/operations/inv.rst", "linalg/operations/matrix_power.rst", "linalg/operations/norm.rst", "linalg/operations/pinv.rst", "linalg/operations/qr.rst", "linalg/operations/solve.rst", "linalg/operations/svd.rst", "models/conv/alex/AlexNet_.rst", "models/conv/alex/alexnet.rst", "models/conv/convnext/ConvNeXt.rst", "models/conv/convnext/ConvNeXt_V2.rst", "models/conv/convnext/convnext_base.rst", "models/conv/convnext/convnext_large.rst", "models/conv/convnext/convnext_small.rst", "models/conv/convnext/convnext_tiny.rst", "models/conv/convnext/convnext_v2_atto.rst", "models/conv/convnext/convnext_v2_base.rst", "models/conv/convnext/convnext_v2_femto.rst", "models/conv/convnext/convnext_v2_huge.rst", "models/conv/convnext/convnext_v2_large.rst", "models/conv/convnext/convnext_v2_nano.rst", "models/conv/convnext/convnext_v2_pico.rst", "models/conv/convnext/convnext_v2_tiny.rst", "models/conv/convnext/convnext_xlarge.rst", "models/conv/dense/DenseNet.rst", "models/conv/dense/densenet_121.rst", "models/conv/dense/densenet_169.rst", "models/conv/dense/densenet_201.rst", "models/conv/dense/densenet_264.rst", "models/conv/efficient/EfficientNet.rst", "models/conv/efficient/EfficientNet_V2.rst", "models/conv/efficient/efficientnet_b0.rst", "models/conv/efficient/efficientnet_b1.rst", "models/conv/efficient/efficientnet_b2.rst", "models/conv/efficient/efficientnet_b3.rst", "models/conv/efficient/efficientnet_b4.rst", "models/conv/efficient/efficientnet_b5.rst", "models/conv/efficient/efficientnet_b6.rst", "models/conv/efficient/efficientnet_b7.rst", "models/conv/efficient/efficientnet_v2_l.rst", "models/conv/efficient/efficientnet_v2_m.rst", "models/conv/efficient/efficientnet_v2_s.rst", "models/conv/efficient/efficientnet_v2_xl.rst", "models/conv/inception/Inception.rst", "models/conv/inception/inception_v1.rst", "models/conv/inception/inception_v3.rst", "models/conv/inception/inception_v4.rst", "models/conv/inception_next/InceptionNeXt.rst", "models/conv/inception_next/inception_next_atto.rst", "models/conv/inception_next/inception_next_base.rst", "models/conv/inception_next/inception_next_small.rst", "models/conv/inception_next/inception_next_tiny.rst", "models/conv/inception_res/InceptionResNet.rst", "models/conv/inception_res/inception_resnet_v1.rst", "models/conv/inception_res/inception_resnet_v2.rst", "models/conv/index.rst", "models/conv/lenet/LeNet.rst", "models/conv/lenet/lenet_1.rst", "models/conv/lenet/lenet_4.rst", "models/conv/lenet/lenet_5.rst", "models/conv/mobile/MobileNet_.rst", "models/conv/mobile/MobileNet_V2_.rst", "models/conv/mobile/MobileNet_V3.rst", "models/conv/mobile/MobileNet_V4.rst", "models/conv/mobile/mobilenet.rst", "models/conv/mobile/mobilenet_v2.rst", "models/conv/mobile/mobilenet_v3_large.rst", "models/conv/mobile/mobilenet_v3_small.rst", "models/conv/mobile/mobilenet_v4_conv_large.rst", "models/conv/mobile/mobilenet_v4_conv_medium.rst", "models/conv/mobile/mobilenet_v4_conv_small.rst", "models/conv/mobile/mobilenet_v4_hybrid_large.rst", "models/conv/mobile/mobilenet_v4_hybrid_medium.rst", "models/conv/resnest/ResNeSt.rst", "models/conv/resnest/resnest_101.rst", "models/conv/resnest/resnest_14.rst", "models/conv/resnest/resnest_200.rst", "models/conv/resnest/resnest_26.rst", "models/conv/resnest/resnest_269.rst", "models/conv/resnest/resnest_50.rst", "models/conv/resnest/resnest_50_1s4x24d.rst", "models/conv/resnest/resnest_50_4s2x40d.rst", "models/conv/resnet/ResNet.rst", "models/conv/resnet/resnet_1001.rst", "models/conv/resnet/resnet_101.rst", "models/conv/resnet/resnet_152.rst", "models/conv/resnet/resnet_18.rst", "models/conv/resnet/resnet_200.rst", "models/conv/resnet/resnet_269.rst", "models/conv/resnet/resnet_34.rst", "models/conv/resnet/resnet_50.rst", "models/conv/resnet/wide_resnet_101.rst", "models/conv/resnet/wide_resnet_50.rst", "models/conv/resnext/ResNeXt.rst", "models/conv/resnext/resnext_101_32x16d.rst", "models/conv/resnext/resnext_101_32x32d.rst", "models/conv/resnext/resnext_101_32x4d.rst", "models/conv/resnext/resnext_101_32x8d.rst", "models/conv/resnext/resnext_101_64x4d.rst", "models/conv/resnext/resnext_50_32x4d.rst", "models/conv/senet/SENet.rst", "models/conv/senet/se_resnet_101.rst", "models/conv/senet/se_resnet_152.rst", "models/conv/senet/se_resnet_18.rst", "models/conv/senet/se_resnet_34.rst", "models/conv/senet/se_resnet_50.rst", "models/conv/senet/se_resnext_101_32x4d.rst", "models/conv/senet/se_resnext_101_32x8d.rst", "models/conv/senet/se_resnext_101_64x4d.rst", "models/conv/senet/se_resnext_50_32x4d.rst", "models/conv/sknet/SKNet.rst", "models/conv/sknet/sk_resnet_18.rst", "models/conv/sknet/sk_resnet_34.rst", "models/conv/sknet/sk_resnet_50.rst", "models/conv/sknet/sk_resnext_50_32x4d.rst", "models/conv/vgg/VGGNet.rst", "models/conv/vgg/vggnet_11.rst", "models/conv/vgg/vggnet_13.rst", "models/conv/vgg/vggnet_16.rst", "models/conv/vgg/vggnet_19.rst", "models/conv/xception/Xception_.rst", "models/conv/xception/xception.rst", "models/conv/zfnet/ZFNet_.rst", "models/conv/zfnet/zfnet.rst", "models/models.rst", "models/summarize.rst", "models/transformer/base/Transformer.rst", "models/transformer/base/transformer_base.rst", "models/transformer/base/transformer_big.rst", "models/transformer/index.rst", "nn/Buffer.rst", "nn/Module.rst", "nn/Parameter.rst", "nn/containers/ModuleDict.rst", "nn/containers/ModuleList.rst", "nn/containers/ParameterDict.rst", "nn/containers/ParameterList.rst", "nn/containers/Sequential.rst", "nn/containers/index.rst", "nn/functions/activation/elu.rst", "nn/functions/activation/gelu.rst", "nn/functions/activation/index.rst", "nn/functions/activation/leaky_relu.rst", "nn/functions/activation/relu.rst", "nn/functions/activation/selu.rst", "nn/functions/activation/sigmoid.rst", "nn/functions/activation/softmax.rst", "nn/functions/activation/tanh.rst", "nn/functions/attention/index.rst", "nn/functions/attention/scaled_dot_product_attention.rst", "nn/functions/conv/conv1d.rst", "nn/functions/conv/conv2d.rst", "nn/functions/conv/conv3d.rst", "nn/functions/conv/index.rst", "nn/functions/conv/unfold.rst", "nn/functions/drop/alpha_dropout.rst", "nn/functions/drop/drop_block.rst", "nn/functions/drop/drop_path.rst", "nn/functions/drop/dropout.rst", "nn/functions/drop/dropout1d.rst", "nn/functions/drop/dropout2d.rst", "nn/functions/drop/dropout3d.rst", "nn/functions/drop/index.rst", "nn/functions/index.rst", "nn/functions/linear/bilinear.rst", "nn/functions/linear/index.rst", "nn/functions/linear/linear.rst", "nn/functions/loss/binary_cross_entropy.rst", "nn/functions/loss/cross_entropy.rst", "nn/functions/loss/huber_loss.rst", "nn/functions/loss/index.rst", "nn/functions/loss/mse_loss.rst", "nn/functions/loss/nll_loss.rst", "nn/functions/norm/batch_norm.rst", "nn/functions/norm/global_response_norm.rst", "nn/functions/norm/index.rst", "nn/functions/norm/instance_norm.rst", "nn/functions/norm/layer_norm.rst", "nn/functions/pool/adaptive_avg_pool1d.rst", "nn/functions/pool/adaptive_avg_pool2d.rst", "nn/functions/pool/adaptive_avg_pool3d.rst", "nn/functions/pool/avg_pool1d.rst", "nn/functions/pool/avg_pool2d.rst", "nn/functions/pool/avg_pool3d.rst", "nn/functions/pool/index.rst", "nn/functions/pool/max_pool1d.rst", "nn/functions/pool/max_pool2d.rst", "nn/functions/pool/max_pool3d.rst", "nn/functions/util/embedding.rst", "nn/functions/util/index.rst", "nn/functions/util/interpolate.rst", "nn/functions/util/rotate.rst", "nn/fused/ConvBNReLU1d.rst", "nn/fused/ConvBNReLU2d.rst", "nn/fused/ConvBNReLU3d.rst", "nn/fused/DepthSeparableConv1d.rst", "nn/fused/DepthSeparableConv2d.rst", "nn/fused/DepthSeparableConv3d.rst", "nn/fused/SEModule.rst", "nn/fused/SelectiveKernel.rst", "nn/fused/index.rst", "nn/init/constant.rst", "nn/init/index.rst", "nn/init/kaiming_normal.rst", "nn/init/kaiming_uniform.rst", "nn/init/normal.rst", "nn/init/uniform.rst", "nn/init/xavier_normal.rst", "nn/init/xavier_uniform.rst", "nn/modules/activation/ELU.rst", "nn/modules/activation/GELU.rst", "nn/modules/activation/HardSigmoid.rst", "nn/modules/activation/HardSwish.rst", "nn/modules/activation/LeakyReLU.rst", "nn/modules/activation/ReLU.rst", "nn/modules/activation/ReLU6.rst", "nn/modules/activation/SELU.rst", "nn/modules/activation/Sigmoid.rst", "nn/modules/activation/Softmax.rst", "nn/modules/activation/Swish.rst", "nn/modules/activation/Tanh.rst", "nn/modules/activation/index.rst", "nn/modules/attention/MultiHeadAttention.rst", "nn/modules/attention/ScaledDotProductAttention.rst", "nn/modules/attention/index.rst", "nn/modules/conv/Conv1d.rst", "nn/modules/conv/Conv2d.rst", "nn/modules/conv/Conv3d.rst", "nn/modules/conv/index.rst", "nn/modules/drop/AlphaDropout.rst", "nn/modules/drop/DropBlock.rst", "nn/modules/drop/DropPath.rst", "nn/modules/drop/Dropout.rst", "nn/modules/drop/Dropout1d.rst", "nn/modules/drop/Dropout2d.rst", "nn/modules/drop/Dropout3d.rst", "nn/modules/drop/index.rst", "nn/modules/index.rst", "nn/modules/linear/Bilinear.rst", "nn/modules/linear/Identity.rst", "nn/modules/linear/Linear.rst", "nn/modules/linear/index.rst", "nn/modules/loss/BCELoss.rst", "nn/modules/loss/CrossEntropyLoss.rst", "nn/modules/loss/HuberLoss.rst", "nn/modules/loss/MSELoss.rst", "nn/modules/loss/NLLLoss.rst", "nn/modules/loss/index.rst", "nn/modules/norm/BatchNorm1d.rst", "nn/modules/norm/BatchNorm2d.rst", "nn/modules/norm/BatchNorm3d.rst", "nn/modules/norm/GlobalResponseNorm.rst", "nn/modules/norm/InstanceNorm1d.rst", "nn/modules/norm/InstanceNorm2d.rst", "nn/modules/norm/InstanceNorm3d.rst", "nn/modules/norm/LayerNorm.rst", "nn/modules/norm/index.rst", "nn/modules/pool/AdaptiveAvgPool1d.rst", "nn/modules/pool/AdaptiveAvgPool2d.rst", "nn/modules/pool/AdaptiveAvgPool3d.rst", "nn/modules/pool/AvgPool1d.rst", "nn/modules/pool/AvgPool2d.rst", "nn/modules/pool/AvgPool3d.rst", "nn/modules/pool/MaxPool1d.rst", "nn/modules/pool/MaxPool2d.rst", "nn/modules/pool/MaxPool3d.rst", "nn/modules/pool/index.rst", "nn/modules/sparse/Embedding.rst", "nn/modules/sparse/index.rst", "nn/modules/transformer/Transformer.rst", "nn/modules/transformer/TransformerDecoder.rst", "nn/modules/transformer/TransformerDecoderLayer.rst", "nn/modules/transformer/TransformerEncoder.rst", "nn/modules/transformer/TransformerEncoderLayer.rst", "nn/modules/transformer/index.rst", "nn/modules/vision/Upsample.rst", "nn/modules/vision/index.rst", "nn/nn.rst", "optim/Optimizer.rst", "optim/optim.rst", "optim/optimizers/ASGD.rst", "optim/optimizers/Adadelta.rst", "optim/optimizers/Adagrad.rst", "optim/optimizers/Adam.rst", "optim/optimizers/AdamW.rst", "optim/optimizers/Adamax.rst", "optim/optimizers/NAdam.rst", "optim/optimizers/RAdam.rst", "optim/optimizers/RMSprop.rst", "optim/optimizers/Rprop.rst", "optim/optimizers/SGD.rst", "optim/optimizers/index.rst", "others/grad_enabled.rst", "others/newaxis.rst", "others/no_grad.rst", "others/register_model.rst", "others/types.rst", "random/functions/bernoulli.rst", "random/functions/index.rst", "random/functions/rand.rst", "random/functions/randint.rst", "random/functions/randn.rst", "random/functions/seed.rst", "random/functions/uniform.rst", "random/random.rst", "tensor/Tensor_.rst", "tensor/operations/bfunc/add.rst", "tensor/operations/bfunc/div.rst", "tensor/operations/bfunc/dot.rst", "tensor/operations/bfunc/inner.rst", "tensor/operations/bfunc/matmul.rst", "tensor/operations/bfunc/maximum.rst", "tensor/operations/bfunc/minimum.rst", "tensor/operations/bfunc/mul.rst", "tensor/operations/bfunc/outer.rst", "tensor/operations/bfunc/power.rst", "tensor/operations/bfunc/sub.rst", "tensor/operations/gfunc/arange.rst", "tensor/operations/gfunc/diag.rst", "tensor/operations/gfunc/empty.rst", "tensor/operations/gfunc/empty_like.rst", "tensor/operations/gfunc/eye.rst", "tensor/operations/gfunc/linspace.rst", "tensor/operations/gfunc/ones.rst", "tensor/operations/gfunc/ones_like.rst", "tensor/operations/gfunc/zeros.rst", "tensor/operations/gfunc/zeros_like.rst", "tensor/operations/index.rst", "tensor/operations/ufunc/abs.rst", "tensor/operations/ufunc/arccos.rst", "tensor/operations/ufunc/arcsin.rst", "tensor/operations/ufunc/arctan.rst", "tensor/operations/ufunc/clip.rst", "tensor/operations/ufunc/cos.rst", "tensor/operations/ufunc/cosh.rst", "tensor/operations/ufunc/cube.rst", "tensor/operations/ufunc/exp.rst", "tensor/operations/ufunc/log.rst", "tensor/operations/ufunc/max.rst", "tensor/operations/ufunc/mean.rst", "tensor/operations/ufunc/min.rst", "tensor/operations/ufunc/reciprocal.rst", "tensor/operations/ufunc/sign.rst", "tensor/operations/ufunc/sin.rst", "tensor/operations/ufunc/sinh.rst", "tensor/operations/ufunc/sqrt.rst", "tensor/operations/ufunc/square.rst", "tensor/operations/ufunc/sum.rst", "tensor/operations/ufunc/tan.rst", "tensor/operations/ufunc/tanh.rst", "tensor/operations/ufunc/trace.rst", "tensor/operations/ufunc/transpose.rst", "tensor/operations/ufunc/var.rst", "tensor/tensor.rst", "tensor/utilities/broadcast_to.rst", "tensor/utilities/concatenate.rst", "tensor/utilities/flatten.rst", "tensor/utilities/hstack.rst", "tensor/utilities/index.rst", "tensor/utilities/meshgrid.rst", "tensor/utilities/pad.rst", "tensor/utilities/ravel.rst", "tensor/utilities/repeat.rst", "tensor/utilities/reshape.rst", "tensor/utilities/split.rst", "tensor/utilities/squeeze.rst", "tensor/utilities/stack.rst", "tensor/utilities/tile.rst", "tensor/utilities/tril.rst", "tensor/utilities/triu.rst", "tensor/utilities/unsqueeze.rst", "tensor/utilities/vstack.rst", "transforms/Compose.rst", "transforms/ToTensor.rst", "transforms/image/CenterCrop.rst", "transforms/image/Normalize.rst", "transforms/image/RandomCrop.rst", "transforms/image/RandomGrayscale.rst", "transforms/image/RandomHorizontalFlip.rst", "transforms/image/RandomRotation.rst", "transforms/image/RandomVerticalFlip.rst", "transforms/image/Resize.rst", "transforms/image/index.rst", "transforms/transforms.rst"], "indexentries": {"abs() (in module lucid)": [[349, "lucid.abs", false]], "adadelta (class in lucid.optim)": [[302, "lucid.optim.Adadelta", false]], "adagrad (class in lucid.optim)": [[303, "lucid.optim.Adagrad", false]], "adam (class in lucid.optim)": [[304, "lucid.optim.Adam", false]], "adamax (class in lucid.optim)": [[306, "lucid.optim.Adamax", false]], "adamw (class in lucid.optim)": [[305, "lucid.optim.AdamW", false]], "adaptive_avg_pool1d() (in module lucid.nn.functional)": [[199, "lucid.nn.functional.adaptive_avg_pool1d", false]], "adaptive_avg_pool2d() (in module lucid.nn.functional)": [[200, "lucid.nn.functional.adaptive_avg_pool2d", false]], "adaptive_avg_pool3d() (in module lucid.nn.functional)": [[201, "lucid.nn.functional.adaptive_avg_pool3d", false]], "adaptiveavgpool1d (class in lucid.nn)": [[278, "lucid.nn.AdaptiveAvgPool1d", false]], "adaptiveavgpool2d (class in lucid.nn)": [[279, "lucid.nn.AdaptiveAvgPool2d", false]], "adaptiveavgpool3d (class in lucid.nn)": [[280, "lucid.nn.AdaptiveAvgPool3d", false]], "add() (in module lucid)": [[327, "lucid.add", false]], "alexnet (class in lucid.models)": [[28, "lucid.models.AlexNet", false]], "alexnet() (in module lucid.models)": [[29, "lucid.models.alexnet", false]], "alpha_dropout() (in module lucid.nn.functional)": [[176, "lucid.nn.functional.alpha_dropout", false]], "alphadropout (class in lucid.nn)": [[250, "lucid.nn.AlphaDropout", false]], "arange() (in module lucid)": [[338, "lucid.arange", false]], "arccos() (in module lucid)": [[350, "lucid.arccos", false]], "arcsin() (in module lucid)": [[351, "lucid.arcsin", false]], "arctan() (in module lucid)": [[352, "lucid.arctan", false]], "asgd (class in lucid.optim)": [[301, "lucid.optim.ASGD", false]], "avg_pool1d() (in module lucid.nn.functional)": [[202, "lucid.nn.functional.avg_pool1d", false]], "avg_pool2d() (in module lucid.nn.functional)": [[203, "lucid.nn.functional.avg_pool2d", false]], "avg_pool3d() (in module lucid.nn.functional)": [[204, "lucid.nn.functional.avg_pool3d", false]], "avgpool1d (class in lucid.nn)": [[281, "lucid.nn.AvgPool1d", false]], "avgpool2d (class in lucid.nn)": [[282, "lucid.nn.AvgPool2d", false]], "avgpool3d (class in lucid.nn)": [[283, "lucid.nn.AvgPool3d", false]], "batch_norm() (in module lucid.nn.functional)": [[194, "lucid.nn.functional.batch_norm", false]], "batchnorm1d (class in lucid.nn)": [[269, "lucid.nn.BatchNorm1d", false]], "batchnorm2d (class in lucid.nn)": [[270, "lucid.nn.BatchNorm2d", false]], "batchnorm3d (class in lucid.nn)": [[271, "lucid.nn.BatchNorm3d", false]], "bceloss (class in lucid.nn)": [[263, "lucid.nn.BCELoss", false]], "bernoulli() (in module lucid.random)": [[318, "lucid.random.bernoulli", false]], "bilinear (class in lucid.nn)": [[259, "lucid.nn.Bilinear", false]], "bilinear() (in module lucid.nn.functional)": [[185, "lucid.nn.functional.bilinear", false]], "binary_cross_entropy() (in module lucid.nn.functional)": [[188, "lucid.nn.functional.binary_cross_entropy", false]], "broadcast_to() (in module lucid)": [[375, "lucid.broadcast_to", false]], "buffer (class in lucid.nn)": [[151, "lucid.nn.Buffer", false]], "centercrop (class in lucid.transforms)": [[395, "lucid.transforms.CenterCrop", false]], "cholesky() (in module lucid.linalg)": [[17, "lucid.linalg.cholesky", false]], "cifar10 (class in lucid.datasets)": [[5, "lucid.datasets.CIFAR10", false]], "cifar100 (class in lucid.datasets)": [[6, "lucid.datasets.CIFAR100", false]], "clip() (in module lucid)": [[353, "lucid.clip", false]], "compose (class in lucid.transforms)": [[393, "lucid.transforms.Compose", false]], "concatdataset (class in lucid.data)": [[0, "lucid.data.ConcatDataset", false]], "concatenate() (in module lucid)": [[376, "lucid.concatenate", false]], "constant() (in module lucid.nn.init)": [[222, "lucid.nn.init.constant", false]], "conv1d (class in lucid.nn)": [[246, "lucid.nn.Conv1d", false]], "conv1d() (in module lucid.nn.functional)": [[171, "lucid.nn.functional.conv1d", false]], "conv2d (class in lucid.nn)": [[247, "lucid.nn.Conv2d", false]], "conv2d() (in module lucid.nn.functional)": [[172, "lucid.nn.functional.conv2d", false]], "conv3d (class in lucid.nn)": [[248, "lucid.nn.Conv3d", false]], "conv3d() (in module lucid.nn.functional)": [[173, "lucid.nn.functional.conv3d", false]], "convbnrelu1d (class in lucid.nn)": [[213, "lucid.nn.ConvBNReLU1d", false]], "convbnrelu2d (class in lucid.nn)": [[214, "lucid.nn.ConvBNReLU2d", false]], "convbnrelu3d (class in lucid.nn)": [[215, "lucid.nn.ConvBNReLU3d", false]], "convnext (class in lucid.models)": [[30, "lucid.models.ConvNeXt", false]], "convnext_base() (in module lucid.models)": [[32, "lucid.models.convnext_base", false]], "convnext_large() (in module lucid.models)": [[33, "lucid.models.convnext_large", false]], "convnext_small() (in module lucid.models)": [[34, "lucid.models.convnext_small", false]], "convnext_tiny() (in module lucid.models)": [[35, "lucid.models.convnext_tiny", false]], "convnext_v2 (class in lucid.models)": [[31, "lucid.models.ConvNeXt_V2", false]], "convnext_v2_atto() (in module lucid.models)": [[36, "lucid.models.convnext_v2_atto", false]], "convnext_v2_base() (in module lucid.models)": [[37, "lucid.models.convnext_v2_base", false]], "convnext_v2_femto() (in module lucid.models)": [[38, "lucid.models.convnext_v2_femto", false]], "convnext_v2_huge() (in module lucid.models)": [[39, "lucid.models.convnext_v2_huge", false]], "convnext_v2_large() (in module lucid.models)": [[40, "lucid.models.convnext_v2_large", false]], "convnext_v2_nano() (in module lucid.models)": [[41, "lucid.models.convnext_v2_nano", false]], "convnext_v2_pico() (in module lucid.models)": [[42, "lucid.models.convnext_v2_pico", false]], "convnext_v2_tiny() (in module lucid.models)": [[43, "lucid.models.convnext_v2_tiny", false]], "convnext_xlarge() (in module lucid.models)": [[44, "lucid.models.convnext_xlarge", false]], "cos() (in module lucid)": [[354, "lucid.cos", false]], "cosh() (in module lucid)": [[355, "lucid.cosh", false]], "cross_entropy() (in module lucid.nn.functional)": [[189, "lucid.nn.functional.cross_entropy", false]], "crossentropyloss (class in lucid.nn)": [[264, "lucid.nn.CrossEntropyLoss", false]], "cube() (in module lucid)": [[356, "lucid.cube", false]], "dataloader (class in lucid.data)": [[1, "lucid.data.DataLoader", false]], "dataset (class in lucid.data)": [[2, "lucid.data.Dataset", false]], "densenet (class in lucid.models)": [[45, "lucid.models.DenseNet", false]], "densenet_121() (in module lucid.models)": [[46, "lucid.models.densenet_121", false]], "densenet_169() (in module lucid.models)": [[47, "lucid.models.densenet_169", false]], "densenet_201() (in module lucid.models)": [[48, "lucid.models.densenet_201", false]], "densenet_264() (in module lucid.models)": [[49, "lucid.models.densenet_264", false]], "depthseparableconv1d (class in lucid.nn)": [[216, "lucid.nn.DepthSeparableConv1d", false]], "depthseparableconv2d (class in lucid.nn)": [[217, "lucid.nn.DepthSeparableConv2d", false]], "depthseparableconv3d (class in lucid.nn)": [[218, "lucid.nn.DepthSeparableConv3d", false]], "det() (in module lucid.linalg)": [[18, "lucid.linalg.det", false]], "diag() (in module lucid)": [[339, "lucid.diag", false]], "div() (in module lucid)": [[328, "lucid.div", false]], "dot() (in module lucid)": [[329, "lucid.dot", false]], "drop_block() (in module lucid.nn.functional)": [[177, "lucid.nn.functional.drop_block", false]], "drop_path() (in module lucid.nn.functional)": [[178, "lucid.nn.functional.drop_path", false]], "dropblock (class in lucid.nn)": [[251, "lucid.nn.DropBlock", false]], "dropout (class in lucid.nn)": [[253, "lucid.nn.Dropout", false]], "dropout() (in module lucid.nn.functional)": [[179, "lucid.nn.functional.dropout", false]], "dropout1d (class in lucid.nn)": [[254, "lucid.nn.Dropout1d", false]], "dropout1d() (in module lucid.nn.functional)": [[180, "lucid.nn.functional.dropout1d", false]], "dropout2d (class in lucid.nn)": [[255, "lucid.nn.Dropout2d", false]], "dropout2d() (in module lucid.nn.functional)": [[181, "lucid.nn.functional.dropout2d", false]], "dropout3d (class in lucid.nn)": [[256, "lucid.nn.Dropout3d", false]], "dropout3d() (in module lucid.nn.functional)": [[182, "lucid.nn.functional.dropout3d", false]], "droppath (class in lucid.nn)": [[252, "lucid.nn.DropPath", false]], "efficientnet (class in lucid.models)": [[50, "lucid.models.EfficientNet", false]], "efficientnet_b0() (in module lucid.models)": [[52, "lucid.models.efficientnet_b0", false]], "efficientnet_b1() (in module lucid.models)": [[53, "lucid.models.efficientnet_b1", false]], "efficientnet_b2() (in module lucid.models)": [[54, "lucid.models.efficientnet_b2", false]], "efficientnet_b3() (in module lucid.models)": [[55, "lucid.models.efficientnet_b3", false]], "efficientnet_b4() (in module lucid.models)": [[56, "lucid.models.efficientnet_b4", false]], "efficientnet_b5() (in module lucid.models)": [[57, "lucid.models.efficientnet_b5", false]], "efficientnet_b6() (in module lucid.models)": [[58, "lucid.models.efficientnet_b6", false]], "efficientnet_b7() (in module lucid.models)": [[59, "lucid.models.efficientnet_b7", false]], "efficientnet_v2 (class in lucid.models)": [[51, "lucid.models.EfficientNet_V2", false]], "efficientnet_v2_l() (in module lucid.models)": [[60, "lucid.models.efficientnet_v2_l", false]], "efficientnet_v2_m() (in module lucid.models)": [[61, "lucid.models.efficientnet_v2_m", false]], "efficientnet_v2_s() (in module lucid.models)": [[62, "lucid.models.efficientnet_v2_s", false]], "efficientnet_v2_xl() (in module lucid.models)": [[63, "lucid.models.efficientnet_v2_xl", false]], "eig() (in module lucid.linalg)": [[19, "lucid.linalg.eig", false]], "elu (class in lucid.nn)": [[230, "lucid.nn.ELU", false]], "elu() (in module lucid.nn.functional)": [[160, "lucid.nn.functional.elu", false]], "embedding (class in lucid.nn)": [[288, "lucid.nn.Embedding", false]], "embedding() (in module lucid.nn.functional)": [[209, "lucid.nn.functional.embedding", false]], "empty() (in module lucid)": [[340, "lucid.empty", false]], "empty_like() (in module lucid)": [[341, "lucid.empty_like", false]], "exp() (in module lucid)": [[357, "lucid.exp", false]], "eye() (in module lucid)": [[342, "lucid.eye", false]], "fashionmnist (class in lucid.datasets)": [[7, "lucid.datasets.FashionMNIST", false]], "flatten() (in module lucid)": [[377, "lucid.flatten", false]], "gelu (class in lucid.nn)": [[231, "lucid.nn.GELU", false]], "gelu() (in module lucid.nn.functional)": [[161, "lucid.nn.functional.gelu", false]], "global_response_norm() (in module lucid.nn.functional)": [[195, "lucid.nn.functional.global_response_norm", false]], "globalresponsenorm (class in lucid.nn)": [[272, "lucid.nn.GlobalResponseNorm", false]], "grad_enabled() (in module lucid)": [[313, "lucid.grad_enabled", false]], "hardsigmoid (class in lucid.nn)": [[232, "lucid.nn.HardSigmoid", false]], "hardswish (class in lucid.nn)": [[233, "lucid.nn.HardSwish", false]], "hstack() (in module lucid)": [[378, "lucid.hstack", false]], "huber_loss() (in module lucid.nn.functional)": [[190, "lucid.nn.functional.huber_loss", false]], "huberloss (class in lucid.nn)": [[265, "lucid.nn.HuberLoss", false]], "identity (class in lucid.nn)": [[260, "lucid.nn.Identity", false]], "inception (class in lucid.models)": [[64, "lucid.models.Inception", false]], "inception_next_atto() (in module lucid.models)": [[69, "lucid.models.inception_next_atto", false]], "inception_next_base() (in module lucid.models)": [[70, "lucid.models.inception_next_base", false]], "inception_next_small() (in module lucid.models)": [[71, "lucid.models.inception_next_small", false]], "inception_next_tiny() (in module lucid.models)": [[72, "lucid.models.inception_next_tiny", false]], "inception_resnet_v1() (in module lucid.models)": [[74, "lucid.models.inception_resnet_v1", false]], "inception_resnet_v2() (in module lucid.models)": [[75, "lucid.models.inception_resnet_v2", false]], "inception_v1() (in module lucid.models)": [[65, "lucid.models.inception_v1", false]], "inception_v3() (in module lucid.models)": [[66, "lucid.models.inception_v3", false]], "inception_v4() (in module lucid.models)": [[67, "lucid.models.inception_v4", false]], "inceptionnext (class in lucid.models)": [[68, "lucid.models.InceptionNeXt", false]], "inceptionresnet (class in lucid.models)": [[73, "lucid.models.InceptionResNet", false]], "inner() (in module lucid)": [[330, "lucid.inner", false]], "instance_norm() (in module lucid.nn.functional)": [[197, "lucid.nn.functional.instance_norm", false]], "instancenorm1d (class in lucid.nn)": [[273, "lucid.nn.InstanceNorm1d", false]], "instancenorm2d (class in lucid.nn)": [[274, "lucid.nn.InstanceNorm2d", false]], "instancenorm3d (class in lucid.nn)": [[275, "lucid.nn.InstanceNorm3d", false]], "interpolate() (in module lucid.nn.functional)": [[211, "lucid.nn.functional.interpolate", false]], "inv() (in module lucid.linalg)": [[21, "lucid.linalg.inv", false]], "kaiming_normal() (in module lucid.nn.init)": [[224, "lucid.nn.init.kaiming_normal", false]], "kaiming_uniform() (in module lucid.nn.init)": [[225, "lucid.nn.init.kaiming_uniform", false]], "layer_norm() (in module lucid.nn.functional)": [[198, "lucid.nn.functional.layer_norm", false]], "layernorm (class in lucid.nn)": [[276, "lucid.nn.LayerNorm", false]], "leaky_relu() (in module lucid.nn.functional)": [[163, "lucid.nn.functional.leaky_relu", false]], "leakyrelu (class in lucid.nn)": [[234, "lucid.nn.LeakyReLU", false]], "lenet (class in lucid.models)": [[77, "lucid.models.LeNet", false]], "lenet_1() (in module lucid.models)": [[78, "lucid.models.lenet_1", false]], "lenet_4() (in module lucid.models)": [[79, "lucid.models.lenet_4", false]], "lenet_5() (in module lucid.models)": [[80, "lucid.models.lenet_5", false]], "linear (class in lucid.nn)": [[261, "lucid.nn.Linear", false]], "linear() (in module lucid.nn.functional)": [[187, "lucid.nn.functional.linear", false]], "linspace() (in module lucid)": [[343, "lucid.linspace", false]], "log() (in module lucid)": [[358, "lucid.log", false]], "lucid": [[15, "module-lucid", false]], "matmul() (in module lucid)": [[331, "lucid.matmul", false]], "matrix_power() (in module lucid.linalg)": [[22, "lucid.linalg.matrix_power", false]], "max() (in module lucid)": [[359, "lucid.max", false]], "max_pool1d() (in module lucid.nn.functional)": [[206, "lucid.nn.functional.max_pool1d", false]], "max_pool2d() (in module lucid.nn.functional)": [[207, "lucid.nn.functional.max_pool2d", false]], "max_pool3d() (in module lucid.nn.functional)": [[208, "lucid.nn.functional.max_pool3d", false]], "maximum() (in module lucid)": [[332, "lucid.maximum", false]], "maxpool1d (class in lucid.nn)": [[284, "lucid.nn.MaxPool1d", false]], "maxpool2d (class in lucid.nn)": [[285, "lucid.nn.MaxPool2d", false]], "maxpool3d (class in lucid.nn)": [[286, "lucid.nn.MaxPool3d", false]], "mean() (in module lucid)": [[360, "lucid.mean", false]], "meshgrid() (in module lucid)": [[380, "lucid.meshgrid", false]], "min() (in module lucid)": [[361, "lucid.min", false]], "minimum() (in module lucid)": [[333, "lucid.minimum", false]], "mnist (class in lucid.datasets)": [[8, "lucid.datasets.MNIST", false]], "mobilenet (class in lucid.models)": [[81, "lucid.models.MobileNet", false]], "mobilenet() (in module lucid.models)": [[85, "lucid.models.mobilenet", false]], "mobilenet_v2 (class in lucid.models)": [[82, "lucid.models.MobileNet_V2", false]], "mobilenet_v2() (in module lucid.models)": [[86, "lucid.models.mobilenet_v2", false]], "mobilenet_v3 (class in lucid.models)": [[83, "lucid.models.MobileNet_V3", false]], "mobilenet_v3_large() (in module lucid.models)": [[87, "lucid.models.mobilenet_v3_large", false]], "mobilenet_v3_small() (in module lucid.models)": [[88, "lucid.models.mobilenet_v3_small", false]], "mobilenet_v4 (class in lucid.models)": [[84, "lucid.models.MobileNet_V4", false]], "mobilenet_v4_conv_large() (in module lucid.models)": [[89, "lucid.models.mobilenet_v4_conv_large", false]], "mobilenet_v4_conv_medium() (in module lucid.models)": [[90, "lucid.models.mobilenet_v4_conv_medium", false]], "mobilenet_v4_conv_small() (in module lucid.models)": [[91, "lucid.models.mobilenet_v4_conv_small", false]], "mobilenet_v4_hybrid_large() (in module lucid.models)": [[92, "lucid.models.mobilenet_v4_hybrid_large", false]], "mobilenet_v4_hybrid_medium() (in module lucid.models)": [[93, "lucid.models.mobilenet_v4_hybrid_medium", false]], "module": [[15, "module-lucid", false]], "module (class in lucid.nn)": [[152, "lucid.nn.Module", false]], "moduledict (class in lucid.nn)": [[154, "lucid.nn.ModuleDict", false]], "modulelist (class in lucid.nn)": [[155, "lucid.nn.ModuleList", false]], "mse_loss() (in module lucid.nn.functional)": [[192, "lucid.nn.functional.mse_loss", false]], "mseloss (class in lucid.nn)": [[266, "lucid.nn.MSELoss", false]], "mul() (in module lucid)": [[334, "lucid.mul", false]], "multiheadattention (class in lucid.nn)": [[243, "lucid.nn.MultiHeadAttention", false]], "nadam (class in lucid.optim)": [[307, "lucid.optim.NAdam", false]], "nll_loss() (in module lucid.nn.functional)": [[193, "lucid.nn.functional.nll_loss", false]], "nllloss (class in lucid.nn)": [[267, "lucid.nn.NLLLoss", false]], "no_grad() (in module lucid)": [[315, "lucid.no_grad", false]], "norm() (in module lucid.linalg)": [[23, "lucid.linalg.norm", false]], "normal() (in module lucid.nn.init)": [[226, "lucid.nn.init.normal", false]], "normalize (class in lucid.transforms)": [[396, "lucid.transforms.Normalize", false]], "ones() (in module lucid)": [[344, "lucid.ones", false]], "ones_like() (in module lucid)": [[345, "lucid.ones_like", false]], "optimizer (class in lucid.optim)": [[299, "lucid.optim.Optimizer", false]], "outer() (in module lucid)": [[335, "lucid.outer", false]], "pad() (in module lucid)": [[381, "lucid.pad", false]], "parameter (class in lucid.nn)": [[153, "lucid.nn.Parameter", false]], "parameterdict (class in lucid.nn)": [[156, "lucid.nn.ParameterDict", false]], "parameterlist (class in lucid.nn)": [[157, "lucid.nn.ParameterList", false]], "pinv() (in module lucid.linalg)": [[24, "lucid.linalg.pinv", false]], "power() (in module lucid)": [[336, "lucid.power", false]], "qr() (in module lucid.linalg)": [[25, "lucid.linalg.qr", false]], "radam (class in lucid.optim)": [[308, "lucid.optim.RAdam", false]], "rand() (in module lucid.random)": [[320, "lucid.random.rand", false]], "randint() (in module lucid.random)": [[321, "lucid.random.randint", false]], "randn() (in module lucid.random)": [[322, "lucid.random.randn", false]], "randomcrop (class in lucid.transforms)": [[397, "lucid.transforms.RandomCrop", false]], "randomgrayscale (class in lucid.transforms)": [[398, "lucid.transforms.RandomGrayscale", false]], "randomhorizontalflip (class in lucid.transforms)": [[399, "lucid.transforms.RandomHorizontalFlip", false]], "randomrotation (class in lucid.transforms)": [[400, "lucid.transforms.RandomRotation", false]], "randomverticalflip (class in lucid.transforms)": [[401, "lucid.transforms.RandomVerticalFlip", false]], "ravel() (in module lucid)": [[382, "lucid.ravel", false]], "rearrange() (in module lucid.einops)": [[12, "lucid.einops.rearrange", false]], "reciprocal() (in module lucid)": [[362, "lucid.reciprocal", false]], "reduce() (in module lucid.einops)": [[13, "lucid.einops.reduce", false]], "register_model() (in module lucid)": [[316, "lucid.register_model", false]], "relu (class in lucid.nn)": [[235, "lucid.nn.ReLU", false]], "relu() (in module lucid.nn.functional)": [[164, "lucid.nn.functional.relu", false]], "relu6 (class in lucid.nn)": [[236, "lucid.nn.ReLU6", false]], "repeat() (in module lucid)": [[383, "lucid.repeat", false]], "repeat() (in module lucid.einops)": [[14, "lucid.einops.repeat", false]], "reshape() (in module lucid)": [[384, "lucid.reshape", false]], "resize (class in lucid.transforms)": [[402, "lucid.transforms.Resize", false]], "resnest (class in lucid.models)": [[94, "lucid.models.ResNeSt", false]], "resnest_101() (in module lucid.models)": [[95, "lucid.models.resnest_101", false]], "resnest_14() (in module lucid.models)": [[96, "lucid.models.resnest_14", false]], "resnest_200() (in module lucid.models)": [[97, "lucid.models.resnest_200", false]], "resnest_26() (in module lucid.models)": [[98, "lucid.models.resnest_26", false]], "resnest_269() (in module lucid.models)": [[99, "lucid.models.resnest_269", false]], "resnest_50() (in module lucid.models)": [[100, "lucid.models.resnest_50", false]], "resnest_50_1s4x24d() (in module lucid.models)": [[101, "lucid.models.resnest_50_1s4x24d", false]], "resnest_50_4s2x40d() (in module lucid.models)": [[102, "lucid.models.resnest_50_4s2x40d", false]], "resnet (class in lucid.models)": [[103, "lucid.models.ResNet", false]], "resnet_1001() (in module lucid.models)": [[104, "lucid.models.resnet_1001", false]], "resnet_101() (in module lucid.models)": [[105, "lucid.models.resnet_101", false]], "resnet_152() (in module lucid.models)": [[106, "lucid.models.resnet_152", false]], "resnet_18() (in module lucid.models)": [[107, "lucid.models.resnet_18", false]], "resnet_200() (in module lucid.models)": [[108, "lucid.models.resnet_200", false]], "resnet_269() (in module lucid.models)": [[109, "lucid.models.resnet_269", false]], "resnet_34() (in module lucid.models)": [[110, "lucid.models.resnet_34", false]], "resnet_50() (in module lucid.models)": [[111, "lucid.models.resnet_50", false]], "resnext (class in lucid.models)": [[114, "lucid.models.ResNeXt", false]], "resnext_101_32x16d() (in module lucid.models)": [[115, "lucid.models.resnext_101_32x16d", false]], "resnext_101_32x32d() (in module lucid.models)": [[116, "lucid.models.resnext_101_32x32d", false]], "resnext_101_32x4d() (in module lucid.models)": [[117, "lucid.models.resnext_101_32x4d", false]], "resnext_101_32x8d() (in module lucid.models)": [[118, "lucid.models.resnext_101_32x8d", false]], "resnext_101_64x4d() (in module lucid.models)": [[119, "lucid.models.resnext_101_64x4d", false]], "resnext_50_32x4d() (in module lucid.models)": [[120, "lucid.models.resnext_50_32x4d", false]], "rmsprop (class in lucid.optim)": [[309, "lucid.optim.RMSprop", false]], "rotate() (in module lucid.nn.functional)": [[212, "lucid.nn.functional.rotate", false]], "rprop (class in lucid.optim)": [[310, "lucid.optim.Rprop", false]], "scaled_dot_product_attention() (in module lucid.nn.functional)": [[170, "lucid.nn.functional.scaled_dot_product_attention", false]], "scaleddotproductattention (class in lucid.nn)": [[244, "lucid.nn.ScaledDotProductAttention", false]], "se_resnet_101() (in module lucid.models)": [[122, "lucid.models.se_resnet_101", false]], "se_resnet_152() (in module lucid.models)": [[123, "lucid.models.se_resnet_152", false]], "se_resnet_18() (in module lucid.models)": [[124, "lucid.models.se_resnet_18", false]], "se_resnet_34() (in module lucid.models)": [[125, "lucid.models.se_resnet_34", false]], "se_resnet_50() (in module lucid.models)": [[126, "lucid.models.se_resnet_50", false]], "se_resnext_101_32x4d() (in module lucid.models)": [[127, "lucid.models.se_resnext_101_32x4d", false]], "se_resnext_101_32x8d() (in module lucid.models)": [[128, "lucid.models.se_resnext_101_32x8d", false]], "se_resnext_101_64x4d() (in module lucid.models)": [[129, "lucid.models.se_resnext_101_64x4d", false]], "se_resnext_50_32x4d() (in module lucid.models)": [[130, "lucid.models.se_resnext_50_32x4d", false]], "seed() (in module lucid.random)": [[323, "lucid.random.seed", false]], "selectivekernel (class in lucid.nn)": [[220, "lucid.nn.SelectiveKernel", false]], "selu (class in lucid.nn)": [[237, "lucid.nn.SELU", false]], "selu() (in module lucid.nn.functional)": [[165, "lucid.nn.functional.selu", false]], "semodule (class in lucid.nn)": [[219, "lucid.nn.SEModule", false]], "senet (class in lucid.models)": [[121, "lucid.models.SENet", false]], "sequential (class in lucid.nn)": [[158, "lucid.nn.Sequential", false]], "sgd (class in lucid.optim)": [[311, "lucid.optim.SGD", false]], "sigmoid (class in lucid.nn)": [[238, "lucid.nn.Sigmoid", false]], "sigmoid() (in module lucid.nn.functional)": [[166, "lucid.nn.functional.sigmoid", false]], "sign() (in module lucid)": [[363, "lucid.sign", false]], "sin() (in module lucid)": [[364, "lucid.sin", false]], "sinh() (in module lucid)": [[365, "lucid.sinh", false]], "sk_resnet_18() (in module lucid.models)": [[132, "lucid.models.sk_resnet_18", false]], "sk_resnet_34() (in module lucid.models)": [[133, "lucid.models.sk_resnet_34", false]], "sk_resnet_50() (in module lucid.models)": [[134, "lucid.models.sk_resnet_50", false]], "sk_resnext_50_32x4d() (in module lucid.models)": [[135, "lucid.models.sk_resnext_50_32x4d", false]], "sknet (class in lucid.models)": [[131, "lucid.models.SKNet", false]], "softmax (class in lucid.nn)": [[239, "lucid.nn.Softmax", false]], "softmax() (in module lucid.nn.functional)": [[167, "lucid.nn.functional.softmax", false]], "solve() (in module lucid.linalg)": [[26, "lucid.linalg.solve", false]], "split() (in module lucid)": [[385, "lucid.split", false]], "sqrt() (in module lucid)": [[366, "lucid.sqrt", false]], "square() (in module lucid)": [[367, "lucid.square", false]], "squeeze() (in module lucid)": [[386, "lucid.squeeze", false]], "stack() (in module lucid)": [[387, "lucid.stack", false]], "sub() (in module lucid)": [[337, "lucid.sub", false]], "sum() (in module lucid)": [[368, "lucid.sum", false]], "summarize() (in module lucid.models)": [[146, "lucid.models.summarize", false]], "svd() (in module lucid.linalg)": [[27, "lucid.linalg.svd", false]], "swish (class in lucid.nn)": [[240, "lucid.nn.Swish", false]], "tan() (in module lucid)": [[369, "lucid.tan", false]], "tanh (class in lucid.nn)": [[241, "lucid.nn.Tanh", false]], "tanh() (in module lucid)": [[370, "lucid.tanh", false]], "tanh() (in module lucid.nn.functional)": [[168, "lucid.nn.functional.tanh", false]], "tensor (class in lucid)": [[326, "lucid.Tensor", false]], "tensor() (in module lucid)": [[374, "lucid.tensor", false]], "tile() (in module lucid)": [[388, "lucid.tile", false]], "totensor (class in lucid.transforms)": [[394, "lucid.transforms.ToTensor", false]], "trace() (in module lucid)": [[371, "lucid.trace", false]], "transformer (class in lucid.models)": [[147, "lucid.models.Transformer", false]], "transformer (class in lucid.nn)": [[290, "lucid.nn.Transformer", false]], "transformer_base() (in module lucid.models)": [[148, "lucid.models.transformer_base", false]], "transformer_big() (in module lucid.models)": [[149, "lucid.models.transformer_big", false]], "transformerdecoder (class in lucid.nn)": [[291, "lucid.nn.TransformerDecoder", false]], "transformerdecoderlayer (class in lucid.nn)": [[292, "lucid.nn.TransformerDecoderLayer", false]], "transformerencoder (class in lucid.nn)": [[293, "lucid.nn.TransformerEncoder", false]], "transformerencoderlayer (class in lucid.nn)": [[294, "lucid.nn.TransformerEncoderLayer", false]], "transpose() (in module lucid)": [[372, "lucid.transpose", false]], "tril() (in module lucid)": [[389, "lucid.tril", false]], "triu() (in module lucid)": [[390, "lucid.triu", false]], "unfold() (in module lucid.nn.functional)": [[175, "lucid.nn.functional.unfold", false]], "uniform() (in module lucid.nn.init)": [[227, "lucid.nn.init.uniform", false]], "uniform() (in module lucid.random)": [[324, "lucid.random.uniform", false]], "unsqueeze() (in module lucid)": [[391, "lucid.unsqueeze", false]], "upsample (class in lucid.nn)": [[296, "lucid.nn.Upsample", false]], "var() (in module lucid)": [[373, "lucid.var", false]], "vggnet (class in lucid.models)": [[136, "lucid.models.VGGNet", false]], "vggnet_11() (in module lucid.models)": [[137, "lucid.models.vggnet_11", false]], "vggnet_13() (in module lucid.models)": [[138, "lucid.models.vggnet_13", false]], "vggnet_16() (in module lucid.models)": [[139, "lucid.models.vggnet_16", false]], "vggnet_19() (in module lucid.models)": [[140, "lucid.models.vggnet_19", false]], "vstack() (in module lucid)": [[392, "lucid.vstack", false]], "wide_resnet_101() (in module lucid.models)": [[112, "lucid.models.wide_resnet_101", false]], "wide_resnet_50() (in module lucid.models)": [[113, "lucid.models.wide_resnet_50", false]], "xavier_normal() (in module lucid.nn.init)": [[228, "lucid.nn.init.xavier_normal", false]], "xavier_uniform() (in module lucid.nn.init)": [[229, "lucid.nn.init.xavier_uniform", false]], "xception (class in lucid.models)": [[141, "lucid.models.Xception", false]], "xception() (in module lucid.models)": [[142, "lucid.models.xception", false]], "zeros() (in module lucid)": [[346, "lucid.zeros", false]], "zeros_like() (in module lucid)": [[347, "lucid.zeros_like", false]], "zfnet (class in lucid.models)": [[143, "lucid.models.ZFNet", false]], "zfnet() (in module lucid.models)": [[144, "lucid.models.zfnet", false]]}, "objects": {"": [[15, 0, 0, "-", "lucid"]], "lucid": [[326, 1, 1, "", "Tensor"], [349, 2, 1, "", "abs"], [327, 2, 1, "", "add"], [338, 2, 1, "", "arange"], [350, 2, 1, "", "arccos"], [351, 2, 1, "", "arcsin"], [352, 2, 1, "", "arctan"], [375, 2, 1, "", "broadcast_to"], [353, 2, 1, "", "clip"], [376, 2, 1, "", "concatenate"], [354, 2, 1, "", "cos"], [355, 2, 1, "", "cosh"], [356, 2, 1, "", "cube"], [339, 2, 1, "", "diag"], [328, 2, 1, "", "div"], [329, 2, 1, "", "dot"], [340, 2, 1, "", "empty"], [341, 2, 1, "", "empty_like"], [357, 2, 1, "", "exp"], [342, 2, 1, "", "eye"], [377, 2, 1, "", "flatten"], [313, 2, 1, "", "grad_enabled"], [378, 2, 1, "", "hstack"], [330, 2, 1, "", "inner"], [343, 2, 1, "", "linspace"], [358, 2, 1, "", "log"], [331, 2, 1, "", "matmul"], [359, 2, 1, "", "max"], [332, 2, 1, "", "maximum"], [360, 2, 1, "", "mean"], [380, 2, 1, "", "meshgrid"], [361, 2, 1, "", "min"], [333, 2, 1, "", "minimum"], [334, 2, 1, "", "mul"], [315, 2, 1, "", "no_grad"], [344, 2, 1, "", "ones"], [345, 2, 1, "", "ones_like"], [335, 2, 1, "", "outer"], [381, 2, 1, "", "pad"], [336, 2, 1, "", "power"], [382, 2, 1, "", "ravel"], [362, 2, 1, "", "reciprocal"], [316, 2, 1, "", "register_model"], [383, 2, 1, "", "repeat"], [384, 2, 1, "", "reshape"], [363, 2, 1, "", "sign"], [364, 2, 1, "", "sin"], [365, 2, 1, "", "sinh"], [385, 2, 1, "", "split"], [366, 2, 1, "", "sqrt"], [367, 2, 1, "", "square"], [386, 2, 1, "", "squeeze"], [387, 2, 1, "", "stack"], [337, 2, 1, "", "sub"], [368, 2, 1, "", "sum"], [369, 2, 1, "", "tan"], [370, 2, 1, "", "tanh"], [374, 2, 1, "", "tensor"], [388, 2, 1, "", "tile"], [371, 2, 1, "", "trace"], [372, 2, 1, "", "transpose"], [389, 2, 1, "", "tril"], [390, 2, 1, "", "triu"], [391, 2, 1, "", "unsqueeze"], [373, 2, 1, "", "var"], [392, 2, 1, "", "vstack"], [346, 2, 1, "", "zeros"], [347, 2, 1, "", "zeros_like"]], "lucid.data": [[0, 1, 1, "", "ConcatDataset"], [1, 1, 1, "", "DataLoader"], [2, 1, 1, "", "Dataset"]], "lucid.datasets": [[5, 1, 1, "", "CIFAR10"], [6, 1, 1, "", "CIFAR100"], [7, 1, 1, "", "FashionMNIST"], [8, 1, 1, "", "MNIST"]], "lucid.einops": [[12, 2, 1, "", "rearrange"], [13, 2, 1, "", "reduce"], [14, 2, 1, "", "repeat"]], "lucid.linalg": [[17, 2, 1, "", "cholesky"], [18, 2, 1, "", "det"], [19, 2, 1, "", "eig"], [21, 2, 1, "", "inv"], [22, 2, 1, "", "matrix_power"], [23, 2, 1, "", "norm"], [24, 2, 1, "", "pinv"], [25, 2, 1, "", "qr"], [26, 2, 1, "", "solve"], [27, 2, 1, "", "svd"]], "lucid.models": [[28, 1, 1, "", "AlexNet"], [30, 1, 1, "", "ConvNeXt"], [31, 1, 1, "", "ConvNeXt_V2"], [45, 1, 1, "", "DenseNet"], [50, 1, 1, "", "EfficientNet"], [51, 1, 1, "", "EfficientNet_V2"], [64, 1, 1, "", "Inception"], [68, 1, 1, "", "InceptionNeXt"], [73, 1, 1, "", "InceptionResNet"], [77, 1, 1, "", "LeNet"], [81, 1, 1, "", "MobileNet"], [82, 1, 1, "", "MobileNet_V2"], [83, 1, 1, "", "MobileNet_V3"], [84, 1, 1, "", "MobileNet_V4"], [94, 1, 1, "", "ResNeSt"], [114, 1, 1, "", "ResNeXt"], [103, 1, 1, "", "ResNet"], [121, 1, 1, "", "SENet"], [131, 1, 1, "", "SKNet"], [147, 1, 1, "", "Transformer"], [136, 1, 1, "", "VGGNet"], [141, 1, 1, "", "Xception"], [143, 1, 1, "", "ZFNet"], [29, 2, 1, "", "alexnet"], [32, 2, 1, "", "convnext_base"], [33, 2, 1, "", "convnext_large"], [34, 2, 1, "", "convnext_small"], [35, 2, 1, "", "convnext_tiny"], [36, 2, 1, "", "convnext_v2_atto"], [37, 2, 1, "", "convnext_v2_base"], [38, 2, 1, "", "convnext_v2_femto"], [39, 2, 1, "", "convnext_v2_huge"], [40, 2, 1, "", "convnext_v2_large"], [41, 2, 1, "", "convnext_v2_nano"], [42, 2, 1, "", "convnext_v2_pico"], [43, 2, 1, "", "convnext_v2_tiny"], [44, 2, 1, "", "convnext_xlarge"], [46, 2, 1, "", "densenet_121"], [47, 2, 1, "", "densenet_169"], [48, 2, 1, "", "densenet_201"], [49, 2, 1, "", "densenet_264"], [52, 2, 1, "", "efficientnet_b0"], [53, 2, 1, "", "efficientnet_b1"], [54, 2, 1, "", "efficientnet_b2"], [55, 2, 1, "", "efficientnet_b3"], [56, 2, 1, "", "efficientnet_b4"], [57, 2, 1, "", "efficientnet_b5"], [58, 2, 1, "", "efficientnet_b6"], [59, 2, 1, "", "efficientnet_b7"], [60, 2, 1, "", "efficientnet_v2_l"], [61, 2, 1, "", "efficientnet_v2_m"], [62, 2, 1, "", "efficientnet_v2_s"], [63, 2, 1, "", "efficientnet_v2_xl"], [69, 2, 1, "", "inception_next_atto"], [70, 2, 1, "", "inception_next_base"], [71, 2, 1, "", "inception_next_small"], [72, 2, 1, "", "inception_next_tiny"], [74, 2, 1, "", "inception_resnet_v1"], [75, 2, 1, "", "inception_resnet_v2"], [65, 2, 1, "", "inception_v1"], [66, 2, 1, "", "inception_v3"], [67, 2, 1, "", "inception_v4"], [78, 2, 1, "", "lenet_1"], [79, 2, 1, "", "lenet_4"], [80, 2, 1, "", "lenet_5"], [85, 2, 1, "", "mobilenet"], [86, 2, 1, "", "mobilenet_v2"], [87, 2, 1, "", "mobilenet_v3_large"], [88, 2, 1, "", "mobilenet_v3_small"], [89, 2, 1, "", "mobilenet_v4_conv_large"], [90, 2, 1, "", "mobilenet_v4_conv_medium"], [91, 2, 1, "", "mobilenet_v4_conv_small"], [92, 2, 1, "", "mobilenet_v4_hybrid_large"], [93, 2, 1, "", "mobilenet_v4_hybrid_medium"], [95, 2, 1, "", "resnest_101"], [96, 2, 1, "", "resnest_14"], [97, 2, 1, "", "resnest_200"], [98, 2, 1, "", "resnest_26"], [99, 2, 1, "", "resnest_269"], [100, 2, 1, "", "resnest_50"], [101, 2, 1, "", "resnest_50_1s4x24d"], [102, 2, 1, "", "resnest_50_4s2x40d"], [104, 2, 1, "", "resnet_1001"], [105, 2, 1, "", "resnet_101"], [106, 2, 1, "", "resnet_152"], [107, 2, 1, "", "resnet_18"], [108, 2, 1, "", "resnet_200"], [109, 2, 1, "", "resnet_269"], [110, 2, 1, "", "resnet_34"], [111, 2, 1, "", "resnet_50"], [115, 2, 1, "", "resnext_101_32x16d"], [116, 2, 1, "", "resnext_101_32x32d"], [117, 2, 1, "", "resnext_101_32x4d"], [118, 2, 1, "", "resnext_101_32x8d"], [119, 2, 1, "", "resnext_101_64x4d"], [120, 2, 1, "", "resnext_50_32x4d"], [122, 2, 1, "", "se_resnet_101"], [123, 2, 1, "", "se_resnet_152"], [124, 2, 1, "", "se_resnet_18"], [125, 2, 1, "", "se_resnet_34"], [126, 2, 1, "", "se_resnet_50"], [127, 2, 1, "", "se_resnext_101_32x4d"], [128, 2, 1, "", "se_resnext_101_32x8d"], [129, 2, 1, "", "se_resnext_101_64x4d"], [130, 2, 1, "", "se_resnext_50_32x4d"], [132, 2, 1, "", "sk_resnet_18"], [133, 2, 1, "", "sk_resnet_34"], [134, 2, 1, "", "sk_resnet_50"], [135, 2, 1, "", "sk_resnext_50_32x4d"], [146, 2, 1, "", "summarize"], [148, 2, 1, "", "transformer_base"], [149, 2, 1, "", "transformer_big"], [137, 2, 1, "", "vggnet_11"], [138, 2, 1, "", "vggnet_13"], [139, 2, 1, "", "vggnet_16"], [140, 2, 1, "", "vggnet_19"], [112, 2, 1, "", "wide_resnet_101"], [113, 2, 1, "", "wide_resnet_50"], [142, 2, 1, "", "xception"], [144, 2, 1, "", "zfnet"]], "lucid.nn": [[278, 1, 1, "", "AdaptiveAvgPool1d"], [279, 1, 1, "", "AdaptiveAvgPool2d"], [280, 1, 1, "", "AdaptiveAvgPool3d"], [250, 1, 1, "", "AlphaDropout"], [281, 1, 1, "", "AvgPool1d"], [282, 1, 1, "", "AvgPool2d"], [283, 1, 1, "", "AvgPool3d"], [263, 1, 1, "", "BCELoss"], [269, 1, 1, "", "BatchNorm1d"], [270, 1, 1, "", "BatchNorm2d"], [271, 1, 1, "", "BatchNorm3d"], [259, 1, 1, "", "Bilinear"], [151, 1, 1, "", "Buffer"], [246, 1, 1, "", "Conv1d"], [247, 1, 1, "", "Conv2d"], [248, 1, 1, "", "Conv3d"], [213, 1, 1, "", "ConvBNReLU1d"], [214, 1, 1, "", "ConvBNReLU2d"], [215, 1, 1, "", "ConvBNReLU3d"], [264, 1, 1, "", "CrossEntropyLoss"], [216, 1, 1, "", "DepthSeparableConv1d"], [217, 1, 1, "", "DepthSeparableConv2d"], [218, 1, 1, "", "DepthSeparableConv3d"], [251, 1, 1, "", "DropBlock"], [252, 1, 1, "", "DropPath"], [253, 1, 1, "", "Dropout"], [254, 1, 1, "", "Dropout1d"], [255, 1, 1, "", "Dropout2d"], [256, 1, 1, "", "Dropout3d"], [230, 1, 1, "", "ELU"], [288, 1, 1, "", "Embedding"], [231, 1, 1, "", "GELU"], [272, 1, 1, "", "GlobalResponseNorm"], [232, 1, 1, "", "HardSigmoid"], [233, 1, 1, "", "HardSwish"], [265, 1, 1, "", "HuberLoss"], [260, 1, 1, "", "Identity"], [273, 1, 1, "", "InstanceNorm1d"], [274, 1, 1, "", "InstanceNorm2d"], [275, 1, 1, "", "InstanceNorm3d"], [276, 1, 1, "", "LayerNorm"], [234, 1, 1, "", "LeakyReLU"], [261, 1, 1, "", "Linear"], [266, 1, 1, "", "MSELoss"], [284, 1, 1, "", "MaxPool1d"], [285, 1, 1, "", "MaxPool2d"], [286, 1, 1, "", "MaxPool3d"], [152, 1, 1, "", "Module"], [154, 1, 1, "", "ModuleDict"], [155, 1, 1, "", "ModuleList"], [243, 1, 1, "", "MultiHeadAttention"], [267, 1, 1, "", "NLLLoss"], [153, 1, 1, "", "Parameter"], [156, 1, 1, "", "ParameterDict"], [157, 1, 1, "", "ParameterList"], [235, 1, 1, "", "ReLU"], [236, 1, 1, "", "ReLU6"], [237, 1, 1, "", "SELU"], [219, 1, 1, "", "SEModule"], [244, 1, 1, "", "ScaledDotProductAttention"], [220, 1, 1, "", "SelectiveKernel"], [158, 1, 1, "", "Sequential"], [238, 1, 1, "", "Sigmoid"], [239, 1, 1, "", "Softmax"], [240, 1, 1, "", "Swish"], [241, 1, 1, "", "Tanh"], [290, 1, 1, "", "Transformer"], [291, 1, 1, "", "TransformerDecoder"], [292, 1, 1, "", "TransformerDecoderLayer"], [293, 1, 1, "", "TransformerEncoder"], [294, 1, 1, "", "TransformerEncoderLayer"], [296, 1, 1, "", "Upsample"]], "lucid.nn.functional": [[199, 2, 1, "", "adaptive_avg_pool1d"], [200, 2, 1, "", "adaptive_avg_pool2d"], [201, 2, 1, "", "adaptive_avg_pool3d"], [176, 2, 1, "", "alpha_dropout"], [202, 2, 1, "", "avg_pool1d"], [203, 2, 1, "", "avg_pool2d"], [204, 2, 1, "", "avg_pool3d"], [194, 2, 1, "", "batch_norm"], [185, 2, 1, "", "bilinear"], [188, 2, 1, "", "binary_cross_entropy"], [171, 2, 1, "", "conv1d"], [172, 2, 1, "", "conv2d"], [173, 2, 1, "", "conv3d"], [189, 2, 1, "", "cross_entropy"], [177, 2, 1, "", "drop_block"], [178, 2, 1, "", "drop_path"], [179, 2, 1, "", "dropout"], [180, 2, 1, "", "dropout1d"], [181, 2, 1, "", "dropout2d"], [182, 2, 1, "", "dropout3d"], [160, 2, 1, "", "elu"], [209, 2, 1, "", "embedding"], [161, 2, 1, "", "gelu"], [195, 2, 1, "", "global_response_norm"], [190, 2, 1, "", "huber_loss"], [197, 2, 1, "", "instance_norm"], [211, 2, 1, "", "interpolate"], [198, 2, 1, "", "layer_norm"], [163, 2, 1, "", "leaky_relu"], [187, 2, 1, "", "linear"], [206, 2, 1, "", "max_pool1d"], [207, 2, 1, "", "max_pool2d"], [208, 2, 1, "", "max_pool3d"], [192, 2, 1, "", "mse_loss"], [193, 2, 1, "", "nll_loss"], [164, 2, 1, "", "relu"], [212, 2, 1, "", "rotate"], [170, 2, 1, "", "scaled_dot_product_attention"], [165, 2, 1, "", "selu"], [166, 2, 1, "", "sigmoid"], [167, 2, 1, "", "softmax"], [168, 2, 1, "", "tanh"], [175, 2, 1, "", "unfold"]], "lucid.nn.init": [[222, 2, 1, "", "constant"], [224, 2, 1, "", "kaiming_normal"], [225, 2, 1, "", "kaiming_uniform"], [226, 2, 1, "", "normal"], [227, 2, 1, "", "uniform"], [228, 2, 1, "", "xavier_normal"], [229, 2, 1, "", "xavier_uniform"]], "lucid.optim": [[301, 1, 1, "", "ASGD"], [302, 1, 1, "", "Adadelta"], [303, 1, 1, "", "Adagrad"], [304, 1, 1, "", "Adam"], [305, 1, 1, "", "AdamW"], [306, 1, 1, "", "Adamax"], [307, 1, 1, "", "NAdam"], [299, 1, 1, "", "Optimizer"], [308, 1, 1, "", "RAdam"], [309, 1, 1, "", "RMSprop"], [310, 1, 1, "", "Rprop"], [311, 1, 1, "", "SGD"]], "lucid.random": [[318, 2, 1, "", "bernoulli"], [320, 2, 1, "", "rand"], [321, 2, 1, "", "randint"], [322, 2, 1, "", "randn"], [323, 2, 1, "", "seed"], [324, 2, 1, "", "uniform"]], "lucid.transforms": [[395, 1, 1, "", "CenterCrop"], [393, 1, 1, "", "Compose"], [396, 1, 1, "", "Normalize"], [397, 1, 1, "", "RandomCrop"], [398, 1, 1, "", "RandomGrayscale"], [399, 1, 1, "", "RandomHorizontalFlip"], [400, 1, 1, "", "RandomRotation"], [401, 1, 1, "", "RandomVerticalFlip"], [402, 1, 1, "", "Resize"], [394, 1, 1, "", "ToTensor"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function"}, "terms": {"": [3, 15, 16, 22, 24, 27, 62, 87, 88, 93, 95, 96, 97, 98, 99, 100, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 170, 199, 200, 201, 220, 244, 264, 267, 278, 279, 280, 281, 284, 285, 290, 298, 299, 300, 314, 316, 331, 339, 358, 360, 368, 371, 373, 374, 386, 394, 396, 404], "0": [0, 1, 3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 50, 51, 60, 61, 62, 63, 66, 68, 73, 77, 85, 121, 147, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 376, 378, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404], "000": [5, 6, 7, 8, 148, 149, 340, 341], "0000": [264, 265, 267], "0001": 301, "000e": [340, 341], "001": [301, 304, 305, 307, 308, 311], "002": [306, 307], "004": 307, "005": 234, "008": [85, 145], "00808": 145, "01": [163, 234, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311], "01051757": 322, "013": [48, 145], "016": [104, 145], "0205": 264, "0217": 264, "0227": 264, "024": [91, 126, 145], "026": [115, 145], "028": [120, 145], "0299": 264, "032": [60, 111, 145], "03545": 145, "044715": [161, 231], "0450": 264, "0451": 264, "046": [58, 145], "047": [138, 145], "04719755": 350, "0474259": 166, "048": [128, 145], "0480": 264, "04861": 145, "05": [194, 197, 198, 213, 214, 215, 234, 269, 270, 271, 273, 274, 275, 276, 290, 292, 294], "0507": [165, 237], "06": [30, 68, 195, 272, 302, 310], "066": [42, 145], "069": [98, 109, 145], "07": [177, 188, 189, 251, 263, 264], "070": [93, 145], "0700": 264, "0706508": 241, "071": [104, 145], "0721": 264, "073": [134, 145], "07722396": 240, "0794": 267, "08": [304, 305, 306, 307, 308, 309], "0802": 267, "083": [72, 145], "08333333": 24, "085537": 357, "088": [126, 145], "08955": 145, "0900": [239, 264], "096": [142, 145], "0986": [167, 239], "09861229": 358, "0992": 264, "1": [0, 1, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121, 127, 128, 129, 130, 131, 135, 136, 141, 143, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "10": [0, 1, 2, 3, 5, 6, 7, 28, 29, 30, 45, 77, 78, 79, 80, 95, 96, 97, 98, 99, 100, 101, 102, 136, 143, 144, 145, 146, 154, 155, 158, 172, 173, 185, 187, 199, 243, 246, 247, 248, 255, 256, 259, 261, 270, 271, 274, 278, 282, 283, 285, 290, 291, 292, 293, 294, 303, 316, 321, 324, 325, 328, 331, 334, 335, 343, 352, 368, 395, 397, 398, 400], "100": [6, 29, 60, 61, 62, 63, 137, 138, 139, 140, 145, 316, 404], "1000": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "1000000": 301, "1001": [104, 145, 264], "1003": 264, "1007": 145, "10096": 145, "101": [94, 95, 105, 112, 115, 116, 117, 118, 119, 122, 127, 128, 129, 145], "10106": 145, "1014": 165, "102": [109, 145], "1024": 149, "1025": [155, 158], "1026": [155, 158], "1027": [155, 158], "10499": 166, "1050": 238, "1054": 267, "1056": [155, 158], "10590": 145, "108": [61, 145], "1097": 145, "11": [93, 107, 124, 136, 137, 145, 185, 246, 247, 248, 255, 259, 270, 271, 274, 282, 283, 285, 331, 395, 396, 397, 398, 400], "110": [99, 145], "1105": 145, "1109": 145, "111": [54, 145], "1111": 263, "112": [87, 100, 145], "1134": 185, "114b": 398, "119": 185, "1192": [166, 167, 239], "12": [45, 46, 47, 48, 49, 55, 78, 79, 145, 148, 149, 156, 185, 201, 246, 247, 248, 255, 256, 259, 270, 271, 274, 280, 282, 283, 285, 331, 335, 336, 395, 397, 398, 400], "120": [60, 77, 80, 87, 88, 145], "12000": [148, 149], "121": [45, 46, 145], "123": [224, 225, 226, 227, 228, 229, 323, 324], "124": [224, 225, 228, 229], "125": 283, "1250": 265, "1251": 145, "1258": 145, "126": [112, 145], "128": [30, 35, 58, 74, 103, 112, 113, 136, 145, 158, 220, 393, 404], "1280": 83, "128x128": [393, 404], "13": [65, 136, 138, 145, 185, 246, 247, 248, 259, 271, 282, 283, 285, 331, 395, 397, 398, 400], "1314": 145, "132": [137, 145], "1324": 145, "133": [138, 145], "136": [62, 93, 145], "138": [139, 145], "14": [47, 96, 145, 246, 247, 248, 255, 256, 259, 271, 282, 283, 285, 317, 331, 335, 395, 397, 398, 400], "1409": 145, "143": [140, 145], "144": 88, "145": 185, "148": [34, 145], "149": [47, 104, 145], "15": [0, 41, 145, 185, 246, 247, 248, 259, 271, 282, 283, 285, 331, 335, 371, 395, 397, 398, 400, 404], "1513": 267, "152": [92, 106, 123, 145], "155": 331, "1556": 145, "156": [69, 145], "1588": [161, 231], "16": [45, 46, 77, 80, 83, 87, 88, 115, 121, 136, 139, 145, 155, 156, 158, 170, 200, 201, 213, 214, 215, 219, 220, 243, 244, 246, 247, 248, 255, 256, 259, 270, 271, 279, 280, 282, 283, 285, 290, 291, 292, 293, 294, 298, 331, 335, 366, 395, 397, 398, 400], "160": [87, 105, 145], "16227766": 25, "16425": 267, "1643": 263, "166": 331, "167": 233, "169": [45, 47, 145], "17": [98, 145, 246, 247, 248, 259, 271, 283, 330, 395, 397, 398, 400], "170": 185, "1704": 145, "17520119": 365, "177": [117, 145], "18": [79, 107, 124, 132, 145, 246, 247, 248, 255, 259, 271, 283, 334, 335, 395, 397, 398, 400], "1800": 264, "184": 87, "18877099": 240, "19": [56, 136, 140, 145, 172, 173, 185, 247, 248, 271, 329, 331], "192": [30, 31, 68, 78, 79, 106, 145], "194": [115, 145], "196": [44, 145], "1966": [167, 238, 239], "197": [33, 40, 145], "198": [87, 145], "1998": [145, 264], "1_53": 145, "1d": [171, 199, 202, 206, 213, 216, 269, 273, 278, 324, 331, 339, 371, 380, 381, 382, 383, 388], "1e": [30, 68, 177, 188, 189, 194, 195, 197, 198, 213, 214, 215, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 290, 292, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "1e6": 301, "1s4x24d": 101, "1st": [28, 143], "2": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 50, 51, 60, 61, 62, 63, 78, 79, 80, 83, 87, 88, 94, 95, 96, 97, 98, 99, 100, 102, 107, 124, 132, 143, 145, 146, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "20": [0, 5, 6, 7, 8, 48, 145, 154, 155, 158, 247, 248, 255, 271, 291, 292, 335, 357], "200": [87, 97, 108, 145], "2004": 145, "201": [48, 97, 145], "2011": 219, "2012": 145, "2014": 145, "2015": 145, "2016": 145, "2017": [145, 290], "2018": [145, 219], "2019": 145, "2020": 145, "2021": 145, "2022": 145, "2023": [145, 219], "2024": 145, "2039": 267, "204": 248, "2048": [147, 290, 292, 294], "21": [62, 110, 125, 145, 156, 185, 247, 248, 271, 335], "210": [63, 145], "211": 331, "213": [145, 149], "21841": [39, 44], "22": [74, 142, 145, 185, 247, 248, 255, 271, 329, 331], "2201": 145, "221": [63, 145], "2231": [264, 267], "224": [28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 85, 86, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 143, 145], "2247": [269, 270, 271, 273, 274, 275, 276], "224x224": [50, 65, 127, 128, 129, 130, 135], "226": 331, "22752314": 322, "2278": 145, "23": [95, 105, 112, 115, 116, 117, 118, 119, 122, 247, 248, 271], "2301": 145, "232": [85, 129, 145], "2324": [145, 237], "233": [38, 145], "234": [224, 225, 226, 227, 228, 229, 324], "235": [55, 145], "237": [145, 149], "238": [88, 145], "23840584": 240, "24": [45, 46, 83, 87, 88, 97, 101, 108, 185, 200, 247, 248, 255, 271, 279, 335], "240": [38, 87, 88, 140, 145], "240x240": 50, "2424": [167, 239], "2447": 239, "246": [78, 145], "24d": 101, "25": [0, 101, 111, 120, 132, 145, 166, 178, 238, 248, 266, 271, 282, 283, 328, 343, 362, 373], "2500": [263, 265, 267], "2512": 230, "2547": 237, "256": [30, 103, 136], "26": [98, 145, 156, 187, 248, 261, 271, 335], "260": 145, "260x260": 50, "26325684": 322, "264": [49, 145], "2689": [167, 238, 239], "26894142": 240, "269": [99, 109, 145], "27": [100, 130, 145, 185, 246, 248, 271, 356], "272": [119, 145], "274": [95, 135, 145], "276": [224, 225, 228, 229], "28": [35, 43, 72, 78, 79, 126, 145, 185, 248, 335], "280": [42, 145], "288": [88, 97, 145], "289": [39, 52, 145], "28x28": [7, 8, 78, 79], "29": [135, 145, 248], "299": [141, 145], "299r": 398, "299x299": [66, 67, 74, 75], "2_i": [273, 274, 275], "2d": [172, 181, 200, 203, 207, 214, 217, 270, 274, 279, 331, 339, 342, 371, 377, 380, 381, 383, 388, 400], "2e": 306, "2nd": [28, 143], "2x": 102, "2x2": [175, 395, 397], "3": [1, 2, 3, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 78, 83, 85, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 141, 143, 145, 151, 152, 153, 155, 156, 157, 158, 161, 166, 167, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402], "30": [57, 66, 99, 102, 109, 145, 155, 212, 248, 400], "300": 145, "300x300": 50, "302": [61, 145], "3026": 267, "30823025": 240, "31": [185, 248, 331], "310": [340, 341], "31622777": 25, "319": 145, "32": [45, 47, 48, 80, 89, 94, 95, 96, 97, 98, 99, 100, 115, 116, 117, 118, 120, 145, 155, 158, 185, 187, 200, 213, 214, 215, 219, 220, 247, 248, 261, 279, 298, 329, 330, 335], "320": [98, 145], "321": [224, 225, 228, 229], "326": [122, 145], "32x16d": 145, "32x32": [5, 6, 77, 80], "32x32d": 145, "32x4d": [127, 130, 135, 145], "32x8d": [128, 145], "33": [49, 145, 155, 158, 187, 248, 261], "33333333": 24, "336": [33, 118, 137, 145], "337": [49, 145], "34": [110, 125, 133, 145, 155, 158, 185, 248, 331, 335], "342": [224, 225, 228, 229], "344": [56, 145], "345": [224, 225, 226, 227, 228, 229, 324], "35": [75, 145, 155, 158, 248], "350": [44, 145], "352": [65, 145], "355": [59, 145], "3567": [263, 267], "357": [139, 144, 145], "36": [97, 106, 108, 123, 248], "3679": [160, 165, 230], "368": [132, 134, 145], "36th": 145, "37": [92, 145, 246], "370": [54, 145], "372": 185, "375": 266, "3750": 265, "37754067": 240, "378": [79, 145], "380": 145, "380x380": 50, "38344152": 320, "384": [30, 31, 68], "38629436": 358, "389056": 357, "38th": 145, "392": [66, 145], "393": [57, 65, 145], "3935": 230, "3d": [173, 182, 201, 204, 208, 215, 218, 248, 271, 275, 280], "3x3": [145, 325], "4": [0, 1, 2, 3, 10, 12, 13, 14, 16, 17, 18, 19, 21, 23, 24, 25, 30, 45, 50, 68, 69, 77, 78, 79, 85, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 125, 126, 133, 134, 145, 146, 156, 158, 170, 171, 172, 173, 175, 177, 178, 180, 181, 182, 185, 187, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 296, 301, 304, 308, 309, 311, 314, 317, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 345, 347, 353, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402], "40": [67, 83, 87, 88, 102, 145], "400": [36, 80, 145], "4044": 263, "4076": 264, "4096": [28, 143], "40d": 102, "41421356": 17, "416": [109, 127, 145], "41666667": 24, "417": [102, 145], "41808962": 322, "419974": 168, "4199743": 241, "42": [185, 219, 317, 325], "421": [224, 225, 228, 229], "423": [224, 225, 226, 227], "42718872": 25, "4278": 145, "4284": 145, "4286": 263, "43": [58, 145, 329, 331], "431": [71, 145], "432": [57, 145], "4323": 230, "4375": 265, "43758721": 320, "44": [105, 117, 145], "440": [62, 145], "4472136": 19, "448": [59, 145], "4495": [271, 275], "45": [133, 145, 185, 212, 400], "4510": 145, "4520": 145, "4545": 250, "455": [119, 145], "456": 145, "456x456": 50, "46": [34, 145], "464": [32, 102, 145], "468": [116, 145], "4700": 145, "4708": 145, "47112767": 352, "472": [116, 145, 149], "48": [45, 48, 49, 88, 95, 99, 109, 127, 145, 187, 261], "480": [47, 87, 145], "481": [87, 145], "483": [100, 145], "49": [71, 122, 145], "496": [43, 145], "4979": 230, "4s2x40d": [102, 145], "4x": 101, "4x4": 402, "5": [1, 2, 12, 13, 15, 16, 21, 22, 23, 24, 28, 30, 38, 50, 52, 66, 77, 78, 79, 80, 83, 87, 88, 131, 132, 133, 134, 143, 145, 146, 152, 153, 154, 155, 156, 158, 161, 166, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 192, 194, 197, 198, 199, 202, 203, 209, 211, 213, 214, 215, 220, 222, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 281, 282, 283, 285, 286, 290, 292, 294, 310, 314, 317, 318, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 347, 349, 350, 351, 359, 360, 361, 362, 363, 368, 371, 372, 373, 374, 378, 380, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "50": [5, 6, 94, 100, 101, 102, 103, 111, 113, 120, 126, 130, 134, 135, 145, 187, 261, 310, 329, 331, 343, 398, 399, 401, 404], "5000": [147, 263, 265, 267], "504": [86, 145], "50_1s4x24d": 145, "510": 145, "5108": 267, "512": [30, 75, 90, 103, 107, 133, 145, 147, 148, 243, 290, 291, 292, 293, 294], "519": 145, "520": [69, 145], "52359878": 351, "528": 145, "528x528": 50, "53": [185, 330], "530": [116, 145], "536": [55, 145], "537": [88, 145], "543": [224, 225, 226, 227, 228, 229, 324], "54308063": 355, "544": [71, 139, 145, 148], "545": 336, "5455": 250, "549": [105, 145], "55": [61, 145], "557": [111, 145], "559": [130, 145], "560": [53, 96, 145], "563": [224, 225, 228, 229], "5672": 145, "568": [63, 145], "5683": 145, "569": [128, 145], "57": [134, 145, 185], "57079633": [350, 351], "5720": 145, "5730": 145, "57366333": 323, "576": 88, "584": [145, 148], "586": [67, 145], "587g": 398, "589": [35, 145], "590": [89, 145], "591": [32, 145], "592": [124, 145], "5987": 145, "5995": 145, "5998": 145, "5th": [28, 143], "6": [16, 24, 28, 30, 45, 46, 47, 48, 49, 50, 68, 77, 80, 94, 100, 103, 110, 111, 113, 120, 125, 126, 133, 134, 143, 147, 156, 157, 171, 172, 173, 175, 177, 182, 185, 187, 195, 199, 209, 225, 229, 232, 236, 246, 247, 248, 251, 253, 254, 255, 256, 259, 261, 263, 269, 270, 271, 272, 273, 274, 275, 276, 278, 282, 283, 285, 286, 290, 291, 293, 302, 310, 314, 317, 324, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 345, 347, 359, 360, 361, 368, 371, 372, 373, 374, 378, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402], "60": [5, 6, 106, 145], "600": [50, 145], "6008": 145, "600x600": 50, "6052": 267, "6065": 230, "608": [144, 145], "61": [29, 80, 145], "6105": 145, "611": [96, 145], "6114": 145, "6124": [269, 270, 271, 273, 274, 275, 276], "617": [60, 145], "62": [144, 145, 148, 185], "623": [41, 145], "62686041": 365, "630": 145, "6321": [160, 230], "63245553": 25, "635": [43, 145], "636": [52, 145], "64": [30, 45, 49, 83, 87, 94, 95, 96, 97, 98, 99, 100, 103, 108, 119, 131, 136, 145, 155, 158, 185, 219, 220], "640": [39, 56, 145], "645": 145, "64589411": 320, "647": [132, 145], "64x4d": [129, 145], "654": [224, 225, 226, 227, 228, 229, 324], "657": [224, 225, 228, 229], "6590": [167, 239], "66": [59, 123, 145], "660": [39, 145], "6652": 239, "66666667": 24, "6667": 263, "667": [140, 145], "6682": 263, "669": [108, 145], "67": 331, "672": [87, 110, 145], "67326": 237, "6733": 165, "676": [101, 145], "678": [224, 225, 226, 227, 228, 229], "68811989": 322, "689": [107, 145], "69314718": 358, "696": [112, 145], "7": [10, 13, 23, 46, 53, 136, 145, 156, 171, 172, 173, 175, 177, 182, 185, 187, 188, 189, 199, 209, 220, 231, 236, 237, 238, 241, 246, 247, 248, 251, 255, 256, 259, 261, 263, 264, 266, 270, 271, 274, 275, 278, 282, 283, 285, 286, 317, 318, 321, 324, 327, 329, 330, 331, 335, 337, 339, 343, 357, 360, 368, 371, 372, 373, 385, 388, 389, 390, 394, 395, 396, 397, 398, 400, 402], "70": [7, 8, 97, 145], "7001": 264, "704": [49, 117, 145], "706": [80, 145], "70710678": [19, 364], "708": [36, 145], "7132": 145, "7141": 145, "7147": 267, "715": [90, 145], "717": [37, 145], "7182818": 357, "72": [83, 87, 88], "726791": 145, "7311": [167, 238, 239], "739": [74, 145], "74": 331, "748": [70, 145], "75": [187, 261, 266, 301, 343], "755": [92, 145], "7581": 165, "760": [95, 135, 145], "76159416": [240, 370], "7616": [168, 241], "76219569": 355, "7635": 237, "767": [33, 145], "768": [30, 31, 68], "770": 145, "772": 336, "774": [91, 145], "778": [124, 145], "78": [113, 145], "78357324": 322, "78539816": 352, "791": [118, 145], "79172504": 320, "792": [115, 145], "795": [53, 145], "797": [110, 145], "7x7": 143, "8": [22, 26, 45, 50, 99, 103, 106, 109, 115, 116, 117, 118, 119, 120, 123, 132, 133, 134, 146, 147, 155, 156, 158, 170, 171, 172, 173, 175, 177, 182, 185, 187, 188, 199, 200, 201, 209, 213, 214, 215, 219, 231, 232, 237, 238, 241, 243, 244, 246, 247, 248, 251, 253, 254, 255, 256, 259, 261, 263, 266, 270, 271, 274, 275, 278, 279, 280, 282, 283, 285, 286, 290, 291, 292, 293, 294, 304, 305, 306, 307, 308, 309, 317, 318, 321, 328, 329, 330, 331, 335, 336, 338, 339, 356, 360, 368, 371, 372, 373, 385, 389, 390, 394, 395, 396, 397, 398, 400, 402], "80": [5, 6, 7, 8, 87], "800": [37, 41, 145], "8005": 264, "808": [106, 145], "817": [66, 145], "818": 145, "8182": 250, "82": 185, "821": [123, 145], "83": [119, 145], "832": [72, 145], "833": 145, "84": [77, 79, 80], "840": [29, 40, 70, 145], "8413": [161, 231], "847": [75, 145], "848": [123, 138, 145], "856": [46, 145], "85772238": 240, "8584": 237, "86": [70, 145], "862": [142, 145], "863": [137, 145], "864": [89, 108, 145], "868": [125, 145], "872": [86, 101, 122, 145], "876": [224, 225, 228, 229, 324], "88": [32, 37, 88, 118, 129, 145], "8808": [167, 238, 239], "884": [34, 145], "886": [112, 145], "887": 336, "891773": 320, "89442719": 19, "895": [133, 145], "896": [130, 145], "9": [0, 1, 3, 8, 26, 30, 31, 42, 54, 68, 90, 145, 172, 175, 177, 185, 187, 199, 209, 246, 247, 248, 251, 255, 259, 261, 263, 270, 271, 274, 278, 282, 283, 285, 301, 302, 304, 305, 306, 307, 308, 309, 311, 317, 318, 321, 324, 327, 331, 335, 336, 337, 339, 366, 367, 389, 390, 394, 395, 396, 397, 398, 400], "904": [120, 145], "90709145": 323, "9091": 250, "9120": 267, "9163": 267, "928": [48, 145], "929": [99, 145], "93": [128, 145], "94": 104, "9486833": 25, "949e": [340, 341], "9526": 166, "9545": 231, "955": [127, 145], "956": [40, 145], "958": [125, 145], "96": [30, 31, 68, 88], "960": 87, "96366276": 320, "9640": 241, "96402758": 370, "968": [44, 145], "973": [113, 145], "978": [46, 145], "984": [67, 129, 145], "99": 309, "9957": 267, "99734545": 323, "999": [0, 304, 305, 306, 307, 308], "A": [1, 3, 5, 6, 7, 8, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 51, 73, 77, 81, 84, 94, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 136, 137, 138, 139, 140, 145, 152, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 185, 187, 188, 189, 193, 194, 195, 197, 198, 211, 220, 244, 250, 251, 253, 254, 255, 256, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 288, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 317, 318, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400], "As": 323, "At": 296, "Be": [0, 10], "By": [0, 2, 3, 15, 84, 91, 104, 105, 106, 107, 108, 109, 110, 111, 153, 212, 298, 308, 314, 318, 320, 321, 322, 324, 394, 404], "For": [2, 3, 4, 13, 15, 17, 18, 19, 21, 22, 23, 24, 26, 89, 90, 91, 93, 158, 160, 161, 163, 164, 165, 166, 168, 185, 187, 211, 224, 225, 228, 229, 237, 246, 247, 248, 259, 261, 269, 270, 271, 273, 274, 275, 298, 300, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 357, 358, 359, 360, 361, 364, 366, 368, 371, 372, 373, 381, 383, 386, 388, 391, 404], "If": [0, 1, 2, 5, 6, 7, 8, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 103, 146, 152, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 178, 182, 185, 187, 194, 197, 200, 201, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 225, 243, 244, 246, 247, 248, 252, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 304, 305, 309, 310, 316, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 394, 398, 399, 401, 402], "In": [3, 15, 24, 171, 172, 173, 264, 267, 313, 314, 315, 393, 404], "It": [1, 2, 3, 7, 10, 15, 24, 25, 26, 28, 30, 31, 43, 46, 47, 48, 49, 64, 65, 66, 77, 78, 79, 80, 82, 83, 85, 93, 103, 104, 105, 106, 107, 108, 109, 110, 111, 124, 136, 142, 145, 152, 154, 155, 156, 157, 158, 178, 182, 185, 209, 211, 212, 213, 214, 215, 219, 231, 232, 235, 236, 241, 243, 244, 252, 259, 260, 263, 264, 265, 266, 267, 278, 279, 280, 288, 290, 291, 293, 296, 298, 299, 300, 301, 307, 309, 310, 311, 314, 323, 327, 328, 329, 332, 333, 334, 336, 337, 343, 359, 361, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394], "Its": [26, 325], "Near": 24, "No": [175, 178], "Not": 260, "One": [78, 404], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "There": 384, "These": [4, 10, 15, 16, 19, 22, 25, 27, 60, 61, 62, 63, 89, 90, 91, 92, 93, 112, 113, 132, 133, 134, 142, 145, 250, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 310, 317, 325, 404], "To": [3, 145, 300, 318, 322, 325, 340, 341, 380, 404], "With": [3, 175, 178, 394, 404], "_": [12, 13, 14, 22, 154, 155, 157, 158, 160, 161, 163, 164, 165, 166, 168, 187, 209, 211, 270, 271, 273, 274, 275, 281, 282, 283, 284, 285, 286, 288, 301, 302, 304, 305, 306, 307, 309, 311, 329, 330, 331, 335, 371, 372, 389, 390, 395, 396, 397, 399, 400, 401], "_1": [19, 154, 155, 156, 157, 158, 185, 259, 335, 376, 378, 392], "_2": [19, 154, 155, 156, 157, 158, 185, 259, 335, 376, 378, 392], "__call__": [1, 152], "__getitem__": [0, 2, 3, 5, 6, 7, 8], "__init__": [0, 1, 2, 3, 15, 28, 30, 31, 50, 51, 64, 68, 73, 77, 81, 82, 83, 84, 94, 136, 143, 146, 151, 152, 153, 154, 155, 156, 157, 178, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 326, 393, 394], "__iter__": [0, 1], "__len__": [0, 1, 2, 3, 5, 6, 7, 8], "__repr__": 299, "__setattr__": 152, "_activ": 167, "_arraylik": [317, 339, 341, 345, 347], "_arraylikeint": 381, "_arrayorscalar": [151, 153, 317, 318, 326, 374], "_base_activ": 77, "_base_dtyp": [338, 340, 343, 344, 346], "_block": 251, "_c": 396, "_decai": 307, "_einopspattern": [12, 13, 14], "_fanmod": [224, 225], "_grad_en": [313, 315], "_i": [19, 23, 167, 178, 185, 239, 252, 266, 269, 276, 281, 284, 329, 330, 332, 333, 335, 336, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 383, 386, 391, 392], "_in": [224, 225, 228, 229], "_interpolatetyp": 296, "_j": [167, 239, 281, 284, 335, 360, 368, 372, 373], "_k": 387, "_layer": [291, 293], "_left": 211, "_make_lay": 136, "_mlphead": 68, "_modul": 152, "_n": [19, 154, 155, 156, 157, 158, 376, 378, 392], "_numpyarrai": 317, "_out": [224, 225, 228, 229, 383, 388], "_p": [23, 209, 288], "_pad": 381, "_paddingstr": [213, 214, 215, 216, 217, 218, 246, 247, 248], "_paramet": 152, "_reducestr": 13, "_reductiontyp": [188, 189, 190, 192, 193, 263, 264, 265, 266, 267], "_resnestbottleneck": 94, "_right": 211, "_scalar": [170, 222, 226, 227, 228, 229, 244, 317, 338, 343, 353], "_seresnetbottleneck": [122, 123, 126], "_seresnetmodul": [124, 125], "_shapelik": [146, 198, 276, 317, 321, 344, 346, 375, 384, 386, 391], "_size": [199, 200, 201, 251], "_skresnetmodul": [132, 133, 134], "_slope": 234, "_statedict": 299, "_t": [308, 309], "_tensor": [151, 153, 243, 290, 292, 294, 339, 374], "_tensorop": 326, "_u": 24, "_v": 24, "_valu": [353, 381], "_weight": 288, "_width": 381, "a_": 292, "a_1": [243, 385], "a_2": 385, "a_h": 243, "a_i": [243, 332, 333, 336, 385], "a_k": 385, "aaai": 145, "ab": 348, "abc": [2, 299], "abil": [15, 145, 404], "about": [10, 15, 146], "abov": [15, 313, 315, 323, 339, 342, 389], "absolut": [22, 23, 190, 306, 349], "abstract": [2, 3, 298, 299, 300, 301, 309, 311], "abstractmethod": 299, "abund": [39, 92], "acceler": [145, 237, 269, 270, 271, 301, 307, 309, 311], "accept": [260, 320, 326], "access": [0, 2, 3, 4, 5, 6, 7, 8, 115, 116, 117, 118, 119, 120, 151, 153, 154, 155, 156, 157, 158, 384], "accord": [12, 14, 178, 211, 246, 247, 248, 259, 261, 264, 267, 302, 303, 304, 305, 306, 307, 308, 372, 375], "accordingli": 18, "account": [22, 24, 25, 240], "accumul": [301, 302, 303, 327, 328, 332, 333, 334, 337, 375], "accur": 123, "accuraci": [37, 39, 40, 41, 42, 60, 61, 62, 63, 70, 72, 81, 82, 83, 89, 90, 91, 92, 93, 126, 145], "achiev": [12, 114, 115, 116, 117, 118, 119, 120, 145, 171, 172, 173, 199, 278, 279, 280, 307, 399, 401], "across": [0, 5, 6, 10, 12, 13, 30, 43, 85, 145, 151, 155, 158, 195, 198, 199, 200, 201, 228, 229, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 317, 318, 320, 321, 322, 323, 324, 325, 340, 341, 360, 373], "act": 305, "activ": [15, 28, 30, 77, 87, 88, 104, 108, 109, 121, 136, 143, 145, 154, 158, 160, 161, 163, 164, 165, 166, 167, 168, 176, 213, 214, 215, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 255, 256, 263, 264, 267, 269, 270, 271, 276, 290, 292, 294, 359, 361], "actual": [153, 263, 264, 266, 267, 326, 397], "ad": [14, 45, 83, 103, 152, 154, 155, 156, 157, 158, 171, 172, 173, 177, 185, 187, 188, 189, 194, 195, 197, 198, 202, 203, 204, 206, 207, 208, 213, 214, 215, 243, 246, 247, 248, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 316, 391, 404], "adadelta": 312, "adagrad": [302, 312], "adam": [145, 305, 306, 307, 308, 312], "adamax": 312, "adamw": 312, "adapt": [10, 28, 64, 77, 89, 92, 94, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 143, 145, 199, 200, 201, 219, 220, 278, 279, 280, 302, 303, 304, 307, 308, 309, 310], "adaptive_avg_pool1d": [184, 205, 278], "adaptive_avg_pool2d": [184, 205, 279], "adaptive_avg_pool3d": [184, 205, 280], "adaptiveavgpool1d": [258, 287], "adaptiveavgpool2d": [28, 121, 136, 143, 258, 287], "adaptiveavgpool3d": [258, 287], "add": [4, 152, 154, 155, 158, 185, 187, 243, 246, 247, 248, 259, 261, 276, 299, 301, 304, 309, 311, 314, 348, 381, 391], "add_bias_kv": 243, "add_modul": [152, 158], "add_param_group": 299, "add_zero_attn": 243, "addit": [4, 15, 22, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 152, 155, 158, 185, 187, 194, 197, 259, 261, 269, 270, 271, 273, 274, 275, 301, 307, 314, 325, 327, 387], "addition": 307, "address": [264, 267, 304, 305, 308], "adjust": [74, 81, 83, 85, 93, 127, 128, 129, 130, 131, 135, 199, 200, 201, 220, 250, 251, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 300, 304, 308, 309, 310, 378, 392], "advanc": [3, 24, 51, 68, 82, 92, 108, 145, 155, 158, 171, 172, 173, 199, 200, 201, 278, 279, 280, 298, 301], "advantag": [75, 315], "affect": [313, 382, 386, 393], "affin": [213, 214, 215, 269, 270, 271, 273, 274, 275, 276, 400], "after": [10, 14, 22, 28, 87, 88, 143, 153, 154, 155, 156, 157, 158, 182, 219, 220, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 247, 248, 250, 253, 254, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 290, 292, 294, 305, 315, 326, 327, 328, 332, 333, 334, 336, 337, 343, 381, 385, 394], "afterward": 315, "aggreg": [10, 145, 220, 335, 383, 388], "aim": [4, 15], "al": [65, 145, 290], "alex": [5, 6, 145], "alexnet": [76, 143, 145], "algebra": [15, 16, 342], "algorithm": [7, 15, 22, 24, 25, 299, 300, 325], "align": [10, 26, 92, 211, 296, 330, 331], "align_corn": [211, 296], "all": [0, 3, 4, 15, 25, 50, 145, 152, 154, 155, 156, 157, 158, 172, 173, 199, 200, 201, 203, 204, 207, 208, 211, 214, 215, 220, 234, 235, 243, 248, 278, 279, 280, 282, 283, 286, 290, 298, 299, 300, 301, 304, 309, 310, 311, 336, 359, 360, 361, 368, 371, 373, 376, 377, 378, 383, 386, 387, 388, 389, 390, 392, 395, 396, 404], "allevi": [145, 160], "alloc": [340, 341], "allow": [0, 1, 3, 4, 10, 12, 15, 24, 25, 75, 77, 84, 87, 88, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 114, 127, 128, 129, 130, 131, 135, 145, 153, 154, 155, 156, 157, 158, 160, 163, 164, 167, 173, 175, 212, 220, 230, 231, 234, 237, 238, 239, 241, 244, 246, 247, 248, 288, 296, 298, 302, 303, 314, 338, 344, 346, 347, 372, 374, 380, 393, 394, 404], "along": [10, 13, 14, 167, 211, 220, 239, 330, 331, 335, 359, 360, 361, 368, 371, 373, 375, 376, 378, 380, 383, 385, 387, 388, 391, 392, 399, 401], "alongsid": 151, "alpha": [160, 163, 165, 176, 230, 237, 250, 301, 309], "alpha_dropout": [183, 184, 250], "alphadropout": [257, 258], "alphadropoutmodel": 250, "alreadi": 316, "also": [146, 160, 161, 163, 164, 165, 166, 168, 185, 187, 211, 307, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 375, 376, 378, 381, 382, 383, 384, 386, 387, 388, 391, 392], "alter": [158, 384], "altern": [1, 231, 302, 331], "alwai": [10, 153, 382, 398, 399, 401], "among": [66, 220], "amount": [171, 172, 173, 202, 203, 204, 206, 207, 208, 216, 217, 218, 307], "ampl": 89, "amsgrad": [304, 305], "an": [0, 1, 3, 10, 12, 13, 14, 15, 19, 21, 22, 24, 25, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 82, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 142, 143, 144, 145, 146, 148, 149, 152, 154, 155, 156, 157, 158, 161, 171, 172, 173, 175, 176, 179, 180, 181, 182, 185, 200, 201, 209, 211, 212, 216, 217, 218, 220, 228, 229, 230, 236, 238, 243, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 261, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 299, 300, 301, 304, 307, 309, 315, 316, 317, 326, 331, 339, 342, 353, 360, 368, 373, 375, 376, 383, 385, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "analog": [383, 388], "analysi": [4, 219, 246, 247, 248, 275, 281, 283, 284, 286], "andreetto": 145, "andrew": 145, "angl": [212, 400], "ani": [0, 1, 2, 3, 12, 22, 24, 29, 103, 131, 142, 144, 151, 152, 153, 154, 156, 157, 160, 161, 163, 164, 165, 166, 168, 176, 179, 185, 187, 194, 197, 238, 276, 298, 299, 313, 315, 316, 323, 326, 338, 339, 340, 342, 344, 345, 346, 347, 359, 361, 372, 374, 376, 377, 378, 381, 383, 387, 388, 391, 392, 393, 404], "anoth": [84, 157, 337, 345, 347, 394, 404], "api": [4, 278, 279, 280, 404], "appear": 299, "append": [155, 157, 158, 243], "appli": [2, 4, 5, 6, 7, 8, 10, 12, 13, 15, 22, 28, 30, 50, 51, 68, 114, 131, 141, 143, 145, 147, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 195, 213, 214, 215, 219, 220, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 301, 302, 303, 305, 306, 307, 308, 331, 381, 383, 389, 390, 393, 396, 398, 399, 400, 401, 402, 404], "applic": [4, 10, 13, 24, 32, 33, 34, 37, 39, 44, 45, 71, 74, 75, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 145, 171, 197, 246, 247, 248, 259, 261, 325, 338, 346, 381, 385, 389, 390, 402], "approach": [3, 10, 12, 14, 73, 158, 305], "appropri": [24, 83, 87, 88, 145, 152, 156, 158, 178, 246, 247, 248, 250, 253, 254, 264, 282, 283, 313, 315], "approx": 165, "approxim": [24, 161, 231, 232, 233, 282, 285], "ar": [1, 2, 3, 4, 13, 14, 15, 18, 19, 21, 22, 24, 25, 26, 27, 60, 61, 62, 63, 64, 65, 66, 89, 91, 92, 145, 151, 152, 153, 154, 155, 156, 157, 158, 167, 171, 172, 173, 175, 178, 185, 187, 195, 200, 201, 209, 211, 216, 217, 218, 219, 220, 224, 225, 227, 228, 229, 232, 239, 243, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 294, 296, 298, 301, 304, 305, 307, 308, 309, 310, 311, 313, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 349, 353, 357, 359, 360, 361, 362, 363, 368, 371, 372, 375, 376, 380, 383, 384, 385, 388, 389, 390, 393, 394, 395, 397, 398, 402, 404], "arang": 348, "arbitrari": [155, 260, 340, 341, 353, 358, 360, 364, 366, 368, 372, 373], "arcco": 348, "arch": 316, "architectur": [10, 29, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 154, 155, 156, 157, 158, 161, 219, 232, 233, 235, 240, 243, 244, 259, 260, 290, 298, 316], "arcsin": 348, "arctan": 348, "area": [211, 296], "arg": [152, 260, 316, 340], "argument": [3, 4, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 152, 158, 260, 320, 340, 372], "around": [19, 212, 241], "arr": [317, 376, 378, 387, 392], "arrai": [15, 151, 153, 314, 317, 326, 331, 339, 345, 347, 374, 382, 383, 394, 404], "art": [39, 145], "artifici": 145, "arxiv": 145, "asarrai": 317, "asgd": 312, "ashish": 145, "aspect": 402, "assign": [152, 154, 156, 158, 211, 264, 267], "assist": [64, 65, 66], "associ": [156, 157], "assum": [0, 1, 299, 300, 313], "attempt": [154, 158], "attend": [170, 244, 291, 293, 294], "attent": [94, 101, 102, 131, 145, 147, 157, 185, 219, 243, 244, 290, 291, 292, 293, 294], "attn": [170, 244], "attn_mask": [170, 244], "atto": [36, 69, 145], "attribut": 152, "audio": 246, "augment": [3, 4, 124, 212, 325, 383, 388, 393, 397, 398, 399, 400, 401, 404], "autodiff": 15, "autoencod": 145, "autograd": 298, "automat": [4, 15, 153, 154, 155, 156, 157, 298, 318, 320, 321, 322, 324, 326, 340, 341, 347, 380, 394], "autoregress": [170, 244], "auxiliari": [64, 65, 66, 151], "avail": [4, 5, 6, 7, 8, 15], "avd": 94, "averag": [13, 28, 78, 79, 80, 94, 103, 114, 121, 131, 136, 143, 151, 199, 200, 201, 202, 203, 204, 211, 219, 220, 266, 278, 279, 280, 281, 282, 283, 301, 302, 304, 309, 360], "avg_down": 103, "avg_pool": [281, 282, 283], "avg_pool1d": [184, 205], "avg_pool2d": [184, 205], "avg_pool3d": [184, 205], "avgpool": [28, 121, 136, 143, 220], "avgpool1d": [258, 287], "avgpool1dmodel": 281, "avgpool2d": [258, 287], "avgpool2dmodel": 282, "avgpool3d": [258, 287], "avgpool3dmodel": 283, "avoid": [2, 3, 12, 13, 24, 51, 156, 315, 343], "ax": [10, 12, 13, 14, 16, 314, 359, 360, 361, 368, 372, 373, 375, 383, 386, 388], "axi": [13, 23, 167, 239, 330, 331, 359, 360, 361, 368, 373, 376, 378, 380, 381, 383, 385, 386, 387, 388, 391, 392, 399, 401], "b": [12, 13, 14, 16, 26, 145, 185, 187, 227, 246, 247, 248, 259, 261, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 375, 376, 378, 380, 387, 392, 398], "b0": [50, 52, 145], "b1": [50, 53, 145], "b2": [50, 54, 145], "b3": [50, 55, 145], "b4": [50, 56, 145], "b5": [50, 57, 145], "b6": [50, 58, 145], "b7": [50, 59, 145], "b_1": [292, 294], "b_2": [292, 294], "b_i": [332, 333, 336], "b_k": 243, "b_v": 243, "back": [211, 243, 282, 283, 316, 330, 335, 383, 388], "backbon": [132, 133, 134], "backpropag": [10, 15, 18, 19, 21, 22, 24, 25, 27, 145, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 185, 187, 211, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 298, 315, 322, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 357, 359, 361, 374, 375, 381, 383, 388, 389, 390, 394], "backward": [15, 151, 153, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 326, 343, 394], "balanc": [34, 37, 38, 41, 51, 60, 61, 62, 63, 72, 83, 84, 90, 91, 93, 115, 116, 117, 118, 119, 120, 145, 265], "bar": 301, "base": [3, 12, 13, 16, 21, 22, 25, 26, 32, 35, 37, 45, 64, 65, 66, 67, 70, 73, 74, 75, 77, 84, 90, 91, 93, 94, 101, 102, 114, 115, 116, 117, 118, 119, 120, 131, 136, 141, 145, 147, 148, 152, 154, 155, 156, 157, 170, 175, 185, 199, 200, 201, 220, 244, 250, 264, 265, 278, 279, 280, 298, 299, 300, 301, 305, 309, 310, 311, 318, 327, 328, 332, 333, 334, 336, 337, 347, 357, 358, 359, 361, 372, 380, 381, 385, 397, 398, 399, 400, 401], "base_width": [94, 95, 96, 97, 98, 99, 100, 112, 113, 114, 131], "basic": [15, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 141, 143, 146, 170, 171, 172, 173, 177, 178, 199, 200, 201, 209, 213, 214, 215, 216, 217, 218, 219, 224, 225, 228, 229, 244, 251, 278, 279, 280, 288, 343, 375, 395, 396, 397, 398, 399, 400, 401, 402], "basicblock": [103, 107, 110], "batch": [1, 2, 3, 14, 16, 22, 25, 27, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66, 67, 68, 74, 75, 121, 127, 128, 129, 130, 135, 170, 171, 172, 173, 175, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 243, 244, 246, 247, 248, 259, 261, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 308, 331, 395, 396, 397, 398, 400, 402], "batch_norm": [184, 196, 269, 270, 271], "batch_norm1": 158, "batch_norm2": 158, "batch_siz": [1, 2, 3, 141, 220], "batchnorm": [213, 214, 215], "batchnorm1d": [213, 258, 277], "batchnorm1dmodel": 269, "batchnorm2d": [158, 214, 258, 277], "batchnorm2dmodel": 270, "batchnorm3d": [215, 258, 277], "batchnorm3dmodel": 271, "bceloss": [258, 268], "becaus": [2, 321], "becom": [23, 152, 302, 310], "been": 240, "befor": [10, 14, 22, 121, 146, 153, 170, 244, 290, 292, 294, 301, 307, 315, 323, 381, 396, 404], "begin": [1, 23, 160, 163, 164, 165, 178, 230, 232, 233, 234, 235, 237, 252, 265, 266, 267, 281, 282, 283, 284, 285, 286, 308, 310, 314, 325, 332, 333, 335, 349, 353, 359, 361, 363, 381, 389, 390], "behav": [252, 265, 371], "behavior": [10, 145, 155, 158, 170, 244, 313, 325, 331, 341, 404], "being": [157, 212, 250, 253, 254, 255, 256, 308, 313, 315, 376, 378, 392], "belong": 0, "below": [25, 65, 66, 67, 74, 75, 77, 78, 79, 80, 331, 339, 342, 390], "benchmark": [5, 6, 7, 8, 92], "benefici": 158, "benefit": [93, 160, 298, 307, 317], "bernoulli": [250, 253, 254, 255, 256, 319], "best": [92, 224, 225, 228, 229], "beta": [195, 269, 270, 271, 272, 273, 274, 275, 276, 304, 305, 306, 307, 308], "beta1": [304, 305, 306, 307, 308], "beta2": [304, 305, 306, 307, 308], "beta_1": [304, 305, 306, 307, 308], "beta_2": [304, 305, 306, 307, 308], "beta_c": [195, 272], "better": [21, 91, 143, 145, 161, 224, 225, 228, 229, 240, 251, 273, 274, 275, 298, 305, 307, 309, 396], "between": [34, 37, 41, 60, 61, 62, 63, 72, 84, 90, 91, 93, 115, 116, 117, 118, 119, 120, 145, 152, 171, 172, 173, 175, 185, 190, 213, 214, 215, 216, 217, 218, 220, 236, 246, 247, 248, 250, 253, 254, 255, 256, 259, 263, 264, 265, 266, 267, 301, 309, 310, 311, 325, 327, 328, 331, 334, 337, 338, 343, 373, 398, 399, 401, 402], "beyond": [10, 15, 155], "bia": [171, 172, 173, 185, 187, 194, 197, 198, 213, 214, 215, 216, 217, 218, 243, 246, 247, 248, 259, 261, 269, 270, 271, 273, 274, 275, 276, 290, 292, 294, 304, 305, 306, 307, 308], "bias": [246, 247, 248, 261, 276, 298], "bias1": 156, "bias2": 156, "big": [145, 216, 217, 218], "bilinear": [184, 186, 211, 258, 262, 296], "bilinearmodel": 259, "binari": [166, 188, 238, 250, 253, 254, 255, 256, 263], "binary_cross_entropi": [184, 191], "blend": 93, "block": [45, 46, 47, 48, 49, 50, 51, 68, 73, 82, 83, 84, 86, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 145, 152, 175, 177, 178, 213, 214, 215, 220, 246, 247, 248, 251, 315], "block1": [146, 298], "block2": [146, 298], "block_arg": [103, 121], "block_cfg": 51, "block_config": 45, "block_siz": [177, 251], "blue": 398, "bmatrix": 335, "bn": [213, 214, 215], "bn_affin": [213, 214, 215], "bool": [1, 5, 6, 7, 8, 23, 27, 50, 64, 65, 66, 94, 103, 146, 152, 153, 170, 176, 178, 179, 180, 181, 182, 194, 197, 211, 213, 214, 215, 216, 217, 218, 243, 244, 246, 247, 248, 252, 259, 261, 269, 270, 271, 273, 274, 275, 276, 290, 291, 292, 293, 294, 296, 304, 305, 309, 313, 318, 320, 321, 322, 324, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 359, 360, 361, 368, 373, 374, 394], "boost": 89, "both": [84, 171, 187, 200, 202, 206, 213, 231, 240, 246, 247, 279, 281, 282, 284, 285, 294, 296, 329, 330, 331, 335, 339, 380, 385, 402], "bottleneck": [45, 82, 83, 86, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 145, 219], "bottleneck_cfg": 83, "bottom": 211, "bound": [225, 227, 229, 310, 324], "box": 4, "branch": [64, 65, 66, 145, 220], "break": [10, 298], "brief": 404, "bright": 404, "bring": 10, "broadcast": [14, 255, 256, 360, 368, 373, 384, 391], "broadcast_to": 379, "budget": 41, "buffer": [301, 307, 309, 311], "build": [15, 31, 51, 75, 83, 84, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 131, 132, 133, 134, 145, 147, 152, 155, 158, 298, 404], "built": [3, 15, 104, 108, 109, 158, 298], "burg": 8, "c": [5, 6, 8, 12, 103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 145, 175, 177, 180, 181, 182, 189, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 219, 255, 256, 264, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 314, 378, 392, 396], "c_": [246, 247, 248], "c_in": [171, 172, 173, 213, 214, 215], "c_out": [171, 172, 173], "calcul": [0, 1, 15, 16, 153, 296, 302, 303, 306, 307, 308, 315, 321, 326], "calculu": [17, 24], "call": [1, 152, 313, 316, 327, 328, 331, 332, 333, 334, 336, 337], "callabl": [290, 292, 294, 299, 316, 393], "can": [0, 2, 3, 4, 12, 13, 15, 17, 19, 21, 22, 24, 25, 27, 50, 83, 89, 90, 92, 93, 103, 112, 113, 127, 128, 129, 130, 141, 142, 145, 146, 151, 153, 154, 155, 156, 157, 158, 163, 171, 172, 173, 178, 212, 220, 231, 234, 236, 241, 246, 247, 248, 273, 274, 275, 282, 283, 284, 285, 286, 288, 291, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 317, 324, 325, 326, 331, 340, 341, 342, 344, 346, 347, 360, 368, 373, 375, 378, 380, 381, 383, 384, 388, 391, 392, 393, 394, 397, 399, 400, 401, 404], "cannot": [18, 19, 21, 22, 25, 26, 27, 318], "cap": 236, "capabl": [10, 15, 43, 101, 102, 338, 339, 342, 344, 345, 346, 347], "capac": [32, 33, 34, 40, 44, 81, 89, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 135, 145, 149], "captur": [131, 145, 175, 246, 247, 248, 259], "cardin": [94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 120, 131, 145], "care": 315, "cartesian": 380, "case": [3, 23, 77, 83, 85, 160, 163, 164, 165, 178, 230, 232, 233, 234, 235, 237, 252, 265, 266, 267, 281, 282, 283, 284, 285, 286, 298, 303, 308, 310, 314, 332, 333, 349, 353, 359, 361, 363, 381, 389, 390, 404], "categor": [209, 288], "categori": [7, 104, 105, 106, 107, 108, 109, 110, 111, 288], "caus": [3, 24, 301, 309, 311], "causal": [170, 244], "cautiou": [0, 10], "cdot": [17, 18, 21, 22, 23, 26, 160, 161, 163, 165, 166, 170, 171, 172, 173, 185, 187, 195, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 219, 228, 229, 231, 232, 233, 238, 240, 244, 250, 259, 261, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 288, 302, 303, 304, 305, 306, 307, 308, 310, 329, 330, 331, 334, 336], "center": [212, 241, 309, 395, 404], "centercrop": [403, 404], "central": 317, "certain": [18, 161, 170, 185, 240, 244, 259, 294, 304, 305, 313, 359, 361], "cfg": [84, 87, 88], "chain": [21, 22, 158, 393, 404], "challeng": [7, 145], "cham": 145, "chanc": [398, 399, 401], "chang": [10, 190, 265, 310, 314, 315, 316, 382, 384, 391, 398, 404], "channel": [30, 31, 45, 50, 77, 78, 79, 80, 81, 83, 85, 87, 88, 94, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 129, 130, 135, 136, 141, 145, 171, 172, 173, 175, 180, 181, 182, 194, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 246, 247, 248, 255, 256, 269, 270, 271, 272, 273, 274, 275, 278, 281, 282, 283, 284, 285, 286, 396, 398, 402], "character": [112, 113], "check": [313, 395, 397], "checkpoint": 300, "chen": 145, "choic": [91, 93, 380], "choleski": 20, "chollet": 145, "choos": 145, "chosen": [250, 251], "christian": 145, "christoph": 8, "chu": 145, "cifar": [5, 6], "cifar10": 9, "cifar100": 9, "cifar100_train": 6, "cifar10_train": 5, "clariti": [12, 13, 14, 317], "class": [3, 4, 15, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 146, 148, 149, 167, 178, 189, 193, 298, 300, 316, 339, 342, 343, 374, 404], "classic": 80, "classif": [4, 5, 6, 7, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 166, 167, 188, 189, 193, 238, 239, 263, 264, 267], "classifi": [28, 64, 65, 66, 77, 78, 79, 80, 103, 114, 131, 136, 141, 143], "cleaner": [1, 315, 331], "clear": [153, 326, 340, 341, 343], "clearli": 317, "clf_in_featur": 77, "clf_layer": 77, "clip": [212, 232, 236, 310, 348], "clockwis": 212, "close": [21, 24, 237, 263, 309], "closer": 230, "closur": [299, 300], "cloth": 7, "cnn": 145, "co": [145, 348, 364], "code": [10, 22, 154, 156, 158, 313, 315, 317, 325], "coeffici": [26, 50, 211, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "col": 175, "collaps": 10, "collect": [4, 16, 145, 154, 155, 157, 158, 300], "color": [398, 404], "colorjitt": 404, "column": [18, 19, 21, 25, 26, 27, 146, 175, 342, 378, 380], "com": [7, 8], "combin": [1, 3, 12, 67, 73, 74, 93, 135, 145, 155, 158, 160, 161, 213, 214, 215, 219, 220, 231, 251, 264, 298, 307, 308, 360, 368, 373, 376, 404], "combined_dataset": [0, 1], "common": [175, 212, 300, 404], "commonli": [15, 81, 82, 83, 85, 86, 87, 88, 91, 93, 161, 166, 167, 168, 171, 173, 178, 185, 192, 194, 197, 209, 212, 219, 228, 229, 232, 233, 236, 239, 244, 248, 263, 266, 267, 281, 282, 283, 284, 285, 286, 288, 290, 314, 317, 344, 386, 394, 395, 396, 397, 399, 400, 401, 404], "compact": [35, 36, 38, 43, 72, 91], "compar": [34, 35, 112, 113, 143, 145, 325, 387], "compat": [4, 10, 16, 131, 260, 276, 298, 314, 325, 343, 375, 394, 404], "competit": [36, 42, 43], "complet": [147, 290, 291, 293], "complex": [2, 3, 10, 15, 19, 33, 39, 44, 75, 92, 103, 106, 109, 110, 123, 125, 146, 149, 154, 155, 158, 164, 235, 284, 286, 298, 300, 404], "compon": [24, 64, 65, 66, 67, 73, 74, 75, 147, 152, 155, 300, 326, 404], "compos": [5, 6, 7, 8, 141, 246, 247, 248, 281, 282, 283, 284, 285, 286, 298, 404], "compound": 51, "comprehens": 3, "compris": [112, 113], "compromis": [90, 93], "comput": [10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 41, 42, 69, 72, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128, 129, 130, 135, 145, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 298, 299, 300, 301, 309, 313, 314, 315, 317, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 380, 381, 383, 388, 394, 404], "computation": [3, 12, 24, 104, 232, 233], "compute_loss": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "concat": 243, "concaten": [0, 171, 172, 173, 243, 378, 379, 387, 392], "concept": [15, 24, 82, 145], "concis": [10, 12, 14], "condit": [17, 18, 21], "confer": 145, "config": 136, "configur": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 144, 149, 157, 213, 214, 215, 244], "conjunct": [175, 267], "connect": [28, 30, 45, 46, 47, 48, 49, 50, 51, 67, 73, 74, 75, 77, 78, 79, 80, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 136, 141, 143, 145, 187, 219, 220, 246, 247, 248, 261, 292, 294], "consecut": 136, "consid": [3, 21, 24, 45, 89, 90, 91, 93, 158, 224, 225, 228, 229, 298, 310, 313, 340, 341, 389, 390, 404], "consider": 24, "consist": [2, 4, 7, 13, 28, 78, 79, 80, 103, 151, 199, 200, 201, 220, 243, 278, 279, 280, 290, 292, 294, 317, 323, 325, 381, 395, 402, 404], "consistent_tensor": 325, "consol": 146, "constant": [188, 189, 194, 195, 197, 198, 223, 237, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 317, 381], "constant_pad": 381, "constrain": [36, 38, 41, 91], "constraint": [1, 12, 81, 83, 90, 220], "construct": [15, 46, 47, 48, 49, 68, 93, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 133, 134, 137, 138, 139, 140, 147, 155, 298, 339, 383, 388, 389, 390], "constructor": [46, 47, 48, 49, 60, 61, 62, 63, 85, 86, 87, 88, 95, 96, 97, 98, 99, 100, 101, 102, 112, 113, 127, 128, 129, 130, 135, 137, 138, 139, 140], "consumpt": 93, "contain": [1, 5, 6, 7, 8, 18, 19, 24, 25, 26, 27, 73, 77, 103, 114, 115, 116, 117, 118, 119, 120, 121, 131, 136, 146, 152, 154, 155, 156, 157, 158, 167, 170, 175, 185, 187, 188, 189, 193, 209, 211, 263, 264, 267, 299, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 341, 343, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 377, 380, 385], "content": 212, "context": [313, 315], "contextmanag": 315, "contigu": [177, 251, 382], "continu": [234, 322], "contract": 12, "contrast": [147, 273, 274, 275, 404], "contribut": [177, 211, 250, 253, 254, 255, 256, 281, 284, 285, 286, 301, 307, 371], "control": [10, 14, 30, 114, 220, 230, 265, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 325, 394, 404], "conv": [68, 73, 121, 145, 213, 214, 215, 270, 271], "conv1": [78, 79, 80, 158, 246, 247, 248, 281, 282, 283, 284, 285, 286], "conv1d": [174, 184, 213, 216, 249, 258, 281, 284], "conv1dmodel": 246, "conv2": [78, 79, 80, 158, 246, 247, 248], "conv2d": [155, 158, 174, 184, 214, 217, 249, 258, 270, 282, 285, 298], "conv2dmodel": 247, "conv3d": [174, 184, 215, 218, 249, 258, 271, 283, 286], "conv3dmodel": 248, "conv_bia": [213, 214, 215], "conv_config": 136, "conv_lay": [77, 155], "convblock": 298, "convbnrelu1d": 221, "convbnrelu2d": 221, "convbnrelu3d": 221, "conveni": [4, 29, 144], "convent": 331, "converg": [24, 241, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 396], "convers": [264, 267, 398, 404], "convert": [5, 6, 7, 8, 136, 151, 153, 167, 209, 239, 326, 380, 393, 394, 398, 404], "convnetwork": 155, "convnext": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 76, 145], "convnext_bas": 145, "convnext_larg": 145, "convnext_smal": 145, "convnext_tini": 145, "convnext_v2": [36, 37, 38, 39, 40, 41, 42, 43], "convnext_v2_atto": 145, "convnext_v2_bas": 145, "convnext_v2_femto": 145, "convnext_v2_hug": 145, "convnext_v2_larg": 145, "convnext_v2_nano": 145, "convnext_v2_pico": 145, "convnext_v2_tini": 145, "convnext_xlarg": 145, "convolut": [28, 29, 30, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66, 68, 73, 77, 78, 79, 80, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128, 129, 130, 131, 135, 136, 141, 143, 144, 145, 155, 171, 172, 173, 175, 213, 214, 215, 216, 217, 218, 219, 220, 246, 247, 248, 282, 283, 285, 286, 381], "convolv": [171, 172, 173, 246, 247, 248], "coordin": 380, "copi": [10, 375], "core": [0, 1, 2, 3, 152, 298, 299, 326, 404], "corinna": 8, "corner": [211, 296, 395, 397], "correct": [154, 264, 267, 304, 305, 306, 307, 308, 389, 390, 394], "correctli": [24, 152, 154, 155, 156, 157, 158, 264, 267, 325, 375], "correspond": [0, 1, 2, 5, 6, 7, 8, 19, 84, 85, 87, 88, 112, 113, 132, 133, 134, 154, 156, 158, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 185, 187, 209, 211, 232, 235, 239, 259, 261, 269, 270, 271, 273, 274, 275, 282, 283, 288, 301, 309, 311, 318, 329, 330, 332, 333, 336, 357, 358, 364, 366, 375, 378, 381, 383, 388, 392], "cort": 8, "cosh": [348, 365, 370], "cosin": [350, 354, 355, 364], "cost": [81, 83, 84, 90, 91, 93, 114, 145, 216, 217, 218], "could": 152, "count": [84, 145, 146, 376], "counterclockwis": [212, 400], "cover": [16, 171, 172, 173], "coverag": [199, 200, 201], "creat": [2, 3, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 74, 75, 78, 79, 80, 83, 85, 86, 87, 88, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 151, 152, 155, 158, 220, 236, 243, 290, 291, 292, 293, 294, 298, 314, 316, 325, 338, 342, 343, 344, 345, 346, 347, 375, 380, 387, 393, 404], "creation": [60, 61, 62, 63, 155, 158, 404], "criterion": [263, 264, 265, 266, 267], "critic": [24, 91, 300, 325], "crop": [395, 397, 404], "cross": [188, 189, 263, 264, 290, 291, 292], "cross_entropi": [184, 191], "crossentropyloss": [258, 268], "crucial": 10, "cube": 348, "cumul": [161, 231], "current": [152, 301, 304, 310, 313], "custom": [4, 15, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 54, 55, 56, 57, 58, 59, 69, 70, 71, 72, 74, 75, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 142, 143, 144, 151, 154, 155, 156, 157, 158, 212, 213, 214, 215, 230, 234, 290, 298, 325, 342, 343, 385], "custom_config": 136, "custom_decod": 290, "custom_encod": 290, "custom_lenet": 77, "customiz": 404, "custommodul": 151, "customnetwork": 154, "customparametermodel": [156, 157], "cut": 92, "cvf": 145, "cvpr": 145, "d": [145, 170, 173, 182, 201, 204, 208, 215, 244, 271, 275, 276, 280, 283, 286, 314, 339, 400], "d_": [173, 201, 204, 208, 243, 248, 280, 283, 286, 290, 291, 292, 293, 294], "d_1": [12, 13, 14, 276], "d_2": [12, 13, 14, 276], "d_h": [243, 292, 294], "d_model": [147, 148, 149, 290, 291, 292, 293, 294], "d_n": [12, 13, 14, 276], "d_out": [173, 204, 208], "dampen": [301, 309, 311], "data": [4, 5, 6, 7, 8, 10, 15, 22, 145, 151, 153, 157, 168, 171, 173, 175, 181, 182, 187, 209, 212, 213, 214, 215, 220, 235, 241, 246, 247, 248, 261, 275, 281, 283, 286, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 317, 325, 326, 327, 328, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 375, 381, 382, 383, 384, 385, 386, 388, 393, 394, 397, 398, 399, 400, 401, 404], "databas": 8, "dataload": [2, 3], "dataset": [3, 5, 6, 7, 8, 33, 60, 61, 62, 63, 78, 79, 80, 81, 84, 89, 103, 104, 105, 106, 107, 108, 109, 110, 111, 212, 303, 315, 393, 395, 404], "dataset1": [0, 1], "dataset2": [0, 1], "ddot": 335, "debug": [146, 158, 313, 323, 404], "decai": [251, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "declar": [12, 13, 14], "decod": [147, 290, 291, 292], "decoder_lay": [291, 292], "decoderlay": 291, "decompos": [17, 25, 27], "decomposit": [16, 17, 21, 24, 25, 27], "decor": [115, 116, 117, 118, 119, 120, 316], "decoupl": [145, 302, 303, 305, 306, 307, 308], "decreas": [304, 305, 310], "deep": [1, 3, 4, 10, 13, 15, 70, 71, 73, 103, 104, 105, 106, 108, 109, 115, 116, 117, 118, 119, 120, 122, 123, 126, 145, 194, 231, 237, 298, 325, 343, 385, 389, 390, 393, 394, 404], "deeper": [15, 65, 67, 75, 103, 110, 145, 237], "def": [0, 1, 2, 3, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "default": [1, 5, 6, 7, 8, 13, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 163, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 192, 193, 194, 195, 197, 198, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 234, 239, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 300, 307, 313, 318, 320, 321, 322, 324, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 359, 360, 361, 368, 372, 373, 374, 376, 378, 380, 381, 383, 385, 387, 389, 390, 392, 394, 398, 399, 401], "defin": [1, 3, 4, 10, 13, 15, 30, 45, 51, 64, 65, 66, 67, 73, 74, 75, 77, 83, 93, 94, 103, 121, 132, 133, 134, 136, 154, 155, 156, 157, 158, 178, 231, 233, 236, 240, 263, 264, 265, 266, 267, 281, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 321, 322, 336, 341, 353, 372, 393, 404], "definit": [15, 17, 213, 214, 215, 404], "degre": [212, 400, 404], "delai": 301, "deliv": [91, 92], "delta": [12, 167, 190, 239, 265, 302], "delta_": [12, 167, 239], "demand": 92, "demonstr": [15, 16, 127, 128, 129, 130, 135, 145, 298, 317], "denomin": [194, 195, 197, 198, 213, 214, 215, 269, 270, 271, 272, 273, 274, 275, 276, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 328], "denot": [22, 101, 102, 238, 243, 246, 247, 248, 250, 253, 254, 255, 256, 372], "dens": [15, 45, 46, 47, 48, 49, 145, 178, 209, 288, 303], "dense1": 15, "dense2": 15, "densenet": [46, 47, 48, 49, 76, 145, 219], "densenet_121": 145, "densenet_169": 145, "densenet_201": 145, "densenet_264": 145, "densiti": [161, 231], "depend": [15, 22, 23, 83, 145, 157, 188, 189, 190, 192, 193, 211, 246, 329, 339, 359, 361, 383, 388, 397, 398, 402], "deploy": 93, "depth": [30, 31, 32, 33, 34, 35, 44, 50, 51, 68, 89, 145, 155, 173, 178, 182, 201, 204, 208, 248, 252, 271, 275, 280, 283, 286], "depth_coef": 50, "depthseparableconv1d": 221, "depthseparableconv2d": 221, "depthseparableconv3d": 221, "depthwis": [30, 68, 81, 141, 145, 171, 172, 173, 216, 217, 218], "depthwise_separ": [216, 217, 218], "der": 145, "deriv": [24, 25, 167, 199, 200, 201, 231, 239, 241, 246, 247, 248, 259, 261, 316], "descend": 27, "descent": [15, 301, 311], "describ": [10, 18, 19], "descript": 404, "deseri": 151, "design": [3, 4, 13, 15, 16, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 60, 61, 62, 63, 65, 66, 67, 69, 72, 78, 79, 80, 83, 84, 89, 90, 91, 92, 93, 104, 105, 106, 107, 108, 109, 110, 111, 122, 125, 141, 144, 145, 153, 155, 156, 157, 158, 160, 165, 237, 250, 298, 317, 404], "desir": [10, 14, 142, 151, 199, 200, 201, 251, 278, 279, 280, 296, 372, 374], "destin": 152, "det": [16, 20], "det_a": 18, "detail": [15, 146, 300, 325, 331], "detect": 145, "determin": [0, 15, 16, 17, 18, 77, 112, 113, 199, 200, 201, 224, 225, 228, 229, 246, 247, 248, 278, 279, 280, 282, 283, 285, 286, 309, 313, 318, 320, 321, 322, 324, 340, 341, 385, 395, 397], "determinist": 212, "develop": [10, 15, 84, 298, 325, 404], "deviat": [224, 226, 228, 393, 396, 404], "devic": [82, 83, 89, 90], "diag": [24, 348], "diagon": [24, 25, 27, 339, 342, 371, 389, 390], "diagonaliz": 19, "dict": [10, 12, 13, 14, 29, 32, 33, 34, 35, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 115, 116, 117, 118, 119, 120, 121, 127, 128, 129, 130, 132, 133, 134, 135, 142, 144, 152, 154, 156, 260, 299], "dictionari": [77, 84, 91, 152, 153, 154, 156, 158, 299], "differ": [0, 10, 13, 22, 64, 68, 77, 83, 84, 90, 91, 127, 128, 129, 130, 135, 155, 158, 167, 185, 211, 220, 239, 259, 266, 300, 314, 323, 325, 337, 347, 373, 386, 404], "differenti": [15, 17, 26, 209, 231, 298, 318, 320, 321, 322, 324, 326, 338, 340, 341, 344, 346], "digit": [7, 8, 80, 145], "dilat": [171, 172, 173, 213, 214, 215, 216, 217, 218, 246, 247, 248], "dilation_height": 175, "dilation_width": 175, "dim": [30, 31, 68, 170, 244, 264, 267], "dim_feedforward": [147, 290, 292, 294], "dimens": [10, 12, 13, 14, 18, 19, 21, 22, 25, 26, 27, 28, 30, 32, 33, 34, 35, 44, 103, 114, 131, 136, 143, 145, 147, 153, 167, 170, 185, 187, 194, 195, 197, 198, 200, 201, 211, 219, 220, 239, 243, 244, 246, 247, 248, 251, 269, 270, 271, 273, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 290, 292, 293, 294, 296, 314, 317, 320, 324, 326, 330, 340, 359, 360, 361, 368, 371, 372, 373, 375, 376, 378, 381, 383, 386, 387, 388, 391, 392, 395, 397, 402], "dimension": [10, 22, 24, 25, 27, 68, 171, 172, 173, 202, 203, 204, 206, 207, 208, 220, 243, 246, 247, 248, 254, 255, 256, 269, 270, 271, 273, 274, 275, 281, 282, 283, 284, 285, 286, 290, 292, 294, 314, 330, 331, 335, 339, 357, 360, 368, 371, 373, 377, 382, 383, 386, 388, 389, 390], "diminish": 303, "direct": [19, 263, 264, 265, 266, 267, 301, 309, 310, 311], "directli": [60, 61, 62, 63, 145, 154, 155, 156, 157, 211, 296, 302, 303, 305, 306, 307, 308, 323, 325, 374, 404], "directori": [3, 4, 5, 6, 7, 8], "disabl": [178, 251, 252, 313, 315], "discontinu": 363, "discrep": [263, 264, 267], "discret": [318, 321, 325], "disk": 3, "displai": [29, 144, 146], "distinct": [84, 147], "distribut": [161, 167, 177, 211, 224, 225, 226, 227, 228, 229, 231, 239, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 261, 264, 267, 281, 282, 283, 318, 320, 321, 322, 324, 325, 360, 368, 371, 373, 387, 396, 398, 399, 400, 401], "div": 348, "divers": [37, 145, 212, 399, 401, 404], "diversifi": 404, "divid": [1, 24, 145, 155, 158, 167, 171, 172, 173, 239, 263, 264, 265, 266, 267, 328, 385, 396], "divis": [15, 24, 171, 172, 173, 243, 250, 253, 254, 255, 256, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 328, 385], "do": [24, 26, 151, 154, 155, 156, 157, 176, 179, 180, 181, 298, 308, 313, 347, 371, 381], "document": [4, 15, 145, 300, 317, 325], "doe": [15, 22, 23, 24, 25, 27, 146, 147, 151, 154, 155, 156, 157, 158, 229, 304, 305, 310, 313, 315, 318, 320, 321, 322, 323, 324, 338, 339, 340, 341, 342, 344, 345, 346, 347, 375, 384], "doesn": 315, "doi": 145, "domain": 4, "don": 315, "dot": [12, 13, 14, 19, 22, 154, 155, 156, 157, 158, 170, 243, 244, 276, 284, 285, 286, 330, 335, 348, 376, 378, 387, 392], "down": [3, 298, 402], "download": [4, 5, 6, 7, 8], "downsampl": 94, "drawback": 160, "drawn": [320, 321, 322, 324, 325, 400], "drop": [30, 31, 68, 177, 178, 250, 251, 252, 253, 254, 255, 256], "drop_block": [183, 184], "drop_path": [30, 31, 183, 184, 252], "drop_path_r": [51, 68], "drop_prob": 252, "drop_rat": 68, "dropblock": [177, 257, 258], "dropout": [28, 50, 51, 60, 61, 62, 63, 66, 68, 136, 143, 145, 147, 161, 170, 176, 180, 181, 182, 243, 244, 250, 251, 254, 255, 256, 290, 292, 294], "dropout1d": [183, 184, 257, 258], "dropout1dmodel": 254, "dropout2d": [183, 184, 257, 258], "dropout3d": [183, 184, 257, 258], "dropout_p": [170, 244], "dropout_prob": 66, "dropoutmodel": 253, "droppath": [257, 258], "dtype": [151, 153, 209, 288, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 394], "due": [22, 24, 45, 92, 171, 172, 235, 400], "dummi": 146, "duplic": [10, 14, 154, 156], "dure": [3, 15, 18, 19, 21, 24, 25, 27, 51, 64, 65, 66, 103, 145, 151, 152, 153, 154, 155, 156, 157, 158, 167, 176, 177, 178, 179, 180, 181, 182, 194, 197, 212, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 315, 326, 327, 359, 360, 361, 368, 373, 394, 397, 400, 404], "dy": [163, 234], "dynam": [0, 2, 3, 131, 135, 145, 152, 155, 156, 157, 158, 199, 200, 201, 220, 251, 276, 278, 279, 280, 303, 308, 313], "dynamicnetwork": 155, "e": [0, 10, 18, 19, 21, 22, 25, 27, 50, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66, 67, 74, 75, 77, 78, 79, 80, 94, 136, 151, 167, 220, 238, 239, 240, 243, 250, 264, 299, 302, 309, 310, 342, 355, 357, 358, 365, 370, 371, 376, 398], "each": [1, 2, 3, 4, 19, 22, 24, 25, 27, 28, 30, 31, 45, 51, 68, 77, 81, 83, 84, 85, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 136, 143, 145, 147, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 185, 187, 194, 197, 199, 200, 201, 209, 219, 220, 232, 235, 239, 243, 246, 247, 248, 250, 253, 254, 255, 256, 259, 261, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 318, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 343, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 376, 378, 380, 381, 383, 385, 387, 388, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404], "earli": 308, "earlier": 84, "eas": [4, 15], "easi": [2, 3, 4, 10, 15, 115, 116, 117, 118, 119, 120, 153, 154, 156], "easier": [3, 154, 155, 158], "easili": [4, 84, 153, 157, 404], "eccv": 145, "economi": 27, "edg": [83, 92, 381], "edu": [5, 6], "educ": [15, 145], "effect": [13, 145, 154, 155, 156, 157, 158, 167, 171, 172, 173, 175, 230, 231, 235, 238, 239, 241, 269, 270, 271, 273, 274, 275, 276, 296, 313, 314, 315, 378, 392], "effici": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 21, 26, 31, 34, 35, 36, 38, 41, 42, 43, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 71, 72, 74, 75, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 135, 141, 145, 175, 216, 217, 218, 232, 233, 236, 264, 298, 315], "efficientnet": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 76, 145], "efficientnet_b0": 145, "efficientnet_b1": 145, "efficientnet_b2": 145, "efficientnet_b3": 145, "efficientnet_b4": 145, "efficientnet_b5": 145, "efficientnet_b6": 145, "efficientnet_b7": 145, "efficientnet_v2": [60, 61, 62, 63], "efficientnet_v2_": 145, "efficientnet_v2_l": 145, "efficientnet_v2_m": 145, "efficientnet_v2_xl": 145, "efficientnetv2": 145, "eig": 20, "eigenvalu": [19, 25], "eigenvector": 19, "eigval": 19, "eigvec": 19, "einstein": [10, 12, 13, 14], "either": [187, 296, 317, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 374, 380], "element": [0, 10, 12, 14, 24, 25, 66, 145, 153, 157, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 209, 213, 214, 215, 216, 217, 218, 219, 232, 233, 235, 239, 240, 246, 247, 248, 250, 252, 253, 254, 255, 256, 263, 264, 265, 266, 267, 276, 281, 282, 283, 284, 285, 286, 314, 318, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 377, 380, 381, 383, 384, 385, 386, 388, 389, 390], "elementwise_affin": 276, "elimin": [12, 14], "elsewher": [284, 285, 286, 342], "elu": [162, 184, 242, 258], "elumodel": 230, "embed": [81, 82, 83, 84, 86, 87, 88, 91, 170, 184, 210, 243, 244, 258, 289, 290, 292, 293, 294], "embed_dim": [243, 290, 291, 292, 293, 294], "embedding_dim": [209, 288], "embedding_lay": 288, "embedding_matrix": 209, "emphas": [84, 91], "emploi": [51, 92], "empti": [152, 158, 348], "empty_lik": 348, "enabl": [0, 1, 2, 3, 10, 12, 13, 14, 15, 22, 27, 50, 74, 94, 131, 132, 133, 134, 145, 152, 153, 154, 155, 156, 157, 170, 178, 235, 243, 244, 246, 247, 248, 259, 261, 290, 292, 294, 298, 300, 313, 315, 318, 320, 321, 322, 324, 326, 393], "encapsul": [244, 298, 326], "encod": [147, 264, 267, 290, 291, 292, 293, 294], "encoder_lay": [293, 294], "encoderlay": 293, "encompass": 50, "encourag": [177, 251, 253, 254, 255, 256, 263, 264, 267, 304], "end": [23, 160, 163, 164, 165, 178, 230, 232, 233, 234, 235, 237, 252, 265, 266, 267, 281, 282, 283, 284, 285, 286, 308, 310, 332, 333, 335, 338, 343, 349, 353, 359, 361, 363, 376, 381, 389, 390, 404], "enforc": [12, 152, 154, 156, 291, 292, 293, 294], "engin": 24, "enhanc": [31, 32, 66, 67, 68, 74, 75, 79, 82, 92, 93, 101, 102, 112, 113, 127, 128, 129, 130, 135, 143, 144, 145, 154, 156, 220, 236, 404], "ensur": [3, 5, 6, 7, 8, 10, 12, 13, 14, 24, 25, 26, 51, 60, 61, 62, 63, 151, 152, 153, 154, 155, 156, 157, 158, 167, 170, 199, 200, 201, 209, 213, 214, 215, 234, 239, 244, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 298, 299, 301, 302, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 336, 343, 360, 368, 373, 375, 381, 389, 390, 394, 395, 396, 397, 398, 402, 404], "enter": 315, "entir": [3, 178, 180, 181, 182, 252, 255, 256, 325], "entri": [51, 77, 87, 88, 386], "entropi": [188, 189, 263, 264], "environ": [15, 36, 38, 87, 88, 91], "ep": [177, 188, 189, 194, 195, 197, 198, 213, 214, 215, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 302, 303, 304, 305, 306, 307, 308, 309], "epoch": [1, 3], "epsilon": [195, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 302, 303, 304, 305, 306, 307, 308, 309], "equal": [22, 211, 281, 282, 283, 343, 385, 395, 397], "equat": [19, 24, 26], "equival": [331, 371, 382], "error": [0, 3, 10, 12, 14, 19, 21, 51, 152, 155, 156, 157, 158, 161, 190, 192, 231, 252, 263, 264, 265, 266, 298, 299, 315, 317, 343, 375], "especi": [3, 154, 156, 157, 238, 314, 315, 317, 323, 393, 394, 398, 404], "essenti": [1, 3, 15, 16, 22, 24, 73, 172, 175, 298, 323, 325, 359, 393, 394, 398, 404], "estim": [266, 304, 305, 306, 307, 308, 309], "et": [65, 145, 290], "eta": 310, "eta_": 310, "etc": [10, 45, 51, 84, 94, 263, 296, 394], "euclidean": 23, "european": 145, "eval": 252, "evalu": [152, 194, 197, 250, 251, 252, 253, 254, 255, 256, 269, 270, 271, 273, 274, 275, 404], "even": [302, 315, 338, 339, 342, 344, 345, 346, 347], "evenli": [199, 200, 201, 278, 279, 280, 338, 343, 385], "everi": [1, 404], "everywher": 363, "exact": [152, 155, 372, 398, 400], "exactli": 158, "exampl": [4, 331], "excel": [67, 91], "except": [0, 363, 376, 378, 392], "excit": [50, 83, 87, 88, 121, 124, 127, 128, 129, 130, 145, 219], "exclud": [389, 390], "exclus": [321, 324, 338], "exdb": 8, "execut": [155, 315], "exist": [14, 26, 154, 156, 158, 316, 376], "exit": 315, "exp": [160, 165, 166, 168, 230, 237, 348], "expand": [4, 10, 14, 40, 145, 175, 375, 383, 388], "expans": [10, 12, 14, 44, 68, 84, 87, 88], "expansion_factor": 83, "expect": [17, 155, 158, 178, 243, 250, 252, 253, 254, 255, 256, 276, 290, 291, 292, 293, 294, 298, 317], "expens": 3, "experi": [15, 84, 323, 325, 404], "experiment": 325, "explan": [22, 24, 28, 30, 136, 143, 199, 200, 201, 278, 279, 280, 301], "explicit": [12, 13, 14, 158], "explicitli": [14, 145, 154, 156], "explod": [237, 269, 270, 271], "explor": [90, 298, 325], "expon": [22, 336], "exponenti": [160, 165, 167, 230, 237, 239, 250, 304, 305, 306, 307, 308, 357], "express": [10, 12, 14, 33], "extend": [4, 94, 114, 131, 145], "extens": [145, 300], "extern": [4, 15], "extra": [44, 63, 92, 375], "extract": [64, 70, 73, 103, 114, 131, 141, 145, 175, 248, 281, 283, 316, 339, 359, 361, 389, 390, 395, 397], "extractor": [77, 78, 79, 80, 141], "extrem": [24, 104, 145], "ey": 348, "f": [1, 4, 5, 6, 7, 8, 15, 145, 156, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 236, 239, 290, 292, 294], "f_1": 219, "f_2": 219, "facilit": [10, 13, 64, 154, 158, 167, 239, 246, 247, 248, 298, 300, 396, 404], "factor": [50, 66, 84, 160, 170, 171, 172, 173, 175, 219, 228, 229, 243, 244, 296, 301, 308, 309, 310, 311, 317], "factori": 142, "failur": [154, 155, 156, 157, 298], "fals": [1, 5, 6, 7, 8, 23, 27, 50, 87, 88, 103, 146, 151, 152, 153, 170, 176, 178, 179, 180, 181, 182, 194, 197, 211, 222, 224, 225, 226, 227, 228, 229, 243, 244, 246, 247, 248, 252, 259, 261, 290, 291, 292, 293, 294, 296, 304, 305, 309, 313, 318, 320, 321, 322, 324, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 359, 360, 361, 368, 373, 374, 394], "famili": [44, 84, 145, 316], "fan": [224, 225, 228, 229], "fan_in": [224, 225], "fan_out": [224, 225], "fashion": 7, "fashion_train": 7, "fashionmnist": 9, "fast": 308, "faster": [145, 303, 307, 315], "fc": [73, 103, 114, 121, 131, 155, 219, 247, 248, 281, 282, 283, 284, 285, 286], "fc1": [79, 80, 146, 154, 158, 231, 232, 233, 235, 236, 237, 238, 240, 241, 261], "fc2": [79, 80, 146, 154, 158, 231, 232, 233, 235, 237, 238, 240, 241, 261], "fc3": 80, "featur": [3, 28, 30, 33, 34, 44, 45, 64, 67, 68, 70, 73, 77, 78, 79, 80, 93, 101, 102, 103, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 131, 132, 133, 134, 136, 141, 143, 144, 145, 177, 185, 187, 194, 195, 213, 214, 215, 219, 220, 248, 251, 253, 254, 255, 256, 259, 261, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 298, 303], "feature_extractor": 77, "fed": [3, 404], "feed": [3, 326, 404], "feedforward": [146, 147, 290, 292, 294], "femto": [38, 145], "fergu": [143, 145], "fetch": 0, "few": 146, "fewer": [1, 95, 96, 97, 98, 99, 100, 145, 375], "field": [5, 6, 8, 131, 135, 145, 220], "file": [3, 316], "fill": [222, 226, 227, 320, 321, 322, 324, 344, 345, 346, 347], "filter": [51, 84, 143, 145, 171, 172, 173, 175, 213, 214, 215, 247, 248], "filter_height": 175, "filter_s": 175, "filter_width": 175, "final": [30, 45, 46, 47, 48, 49, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 83, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 147, 154, 155, 156, 157, 158, 170, 220, 243, 290, 291, 293, 393, 404], "find": [26, 359, 361], "fine": [90, 93, 219, 404], "finish": 315, "first": [5, 6, 7, 8, 19, 77, 143, 146, 155, 156, 185, 219, 259, 304, 305, 306, 307, 308, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 380, 392, 393, 394, 404], "fit": [14, 298], "fix": [155, 381], "flatten": [12, 73, 77, 158, 175, 335, 379, 382, 383], "flexibl": [1, 3, 4, 10, 12, 14, 15, 31, 64, 73, 74, 75, 77, 84, 85, 94, 103, 127, 128, 129, 130, 135, 136, 141, 145, 154, 155, 156, 157, 158, 296, 298, 300, 317, 344, 345, 394, 404], "flexibli": 13, "flip": [399, 401, 404], "float": [2, 5, 6, 7, 8, 30, 31, 50, 51, 66, 68, 81, 85, 147, 151, 153, 160, 163, 170, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 194, 195, 197, 198, 209, 212, 213, 214, 215, 222, 226, 227, 228, 229, 230, 234, 243, 244, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 288, 290, 292, 294, 296, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 324, 326, 338, 341, 343, 353, 374, 396, 398, 399, 400, 401], "float32": [151, 153, 326, 338, 339, 342, 343, 344, 346, 374, 394], "float64": [347, 374, 394], "flow": [67, 73, 121, 145, 158, 177, 229, 231, 238, 241, 246, 247, 248, 259, 261, 313], "fly": [2, 3], "fname": 3, "focu": 15, "focus": 15, "follow": [0, 12, 14, 15, 16, 19, 25, 26, 27, 28, 30, 46, 47, 48, 49, 50, 87, 88, 127, 128, 129, 130, 135, 136, 141, 143, 146, 147, 160, 161, 163, 164, 165, 166, 167, 168, 170, 185, 187, 211, 213, 214, 215, 216, 217, 218, 219, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 359, 361, 375, 380, 384, 395, 396, 397, 398, 399, 400, 401, 404], "foral": [291, 293], "forc": 177, "form": [25, 220, 291, 293, 335, 380, 383, 388, 404], "format": [2, 3, 5, 6, 7, 8, 146, 264, 267, 394], "formul": 161, "formula": [19, 27, 167, 199, 200, 201, 239, 240, 265, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 331, 373, 398], "forward": [15, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 143, 146, 151, 152, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "found": 15, "foundat": [73, 84, 121, 152, 298, 300, 326], "four": [46, 47, 48, 49, 95, 96, 97, 98, 99, 100, 381], "frac": [13, 17, 18, 19, 21, 22, 23, 24, 26, 27, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 178, 185, 187, 195, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 396], "frame": 182, "framework": [4, 10, 15, 145, 264, 267, 269, 270, 271, 273, 274, 275, 299, 300, 404], "frequent": [264, 267], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 22, 24, 32, 33, 34, 35, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 68, 69, 70, 71, 72, 73, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 146, 151, 152, 153, 154, 155, 156, 157, 158, 175, 177, 185, 194, 197, 209, 211, 213, 214, 215, 219, 220, 222, 224, 225, 226, 227, 228, 229, 236, 243, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 291, 293, 294, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 331, 332, 333, 337, 339, 359, 360, 361, 368, 373, 376, 378, 380, 383, 385, 386, 387, 388, 392, 395, 396, 397, 398, 399, 400, 401, 404], "full": [27, 85, 87, 88, 147], "full_matric": 27, "fulli": [4, 16, 28, 30, 45, 46, 47, 48, 49, 50, 51, 73, 77, 78, 79, 80, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 136, 141, 143, 145, 187, 219, 220, 261, 325], "func": 316, "function": [3, 4, 5, 6, 7, 8, 10, 15, 16, 68, 152, 154, 155, 156, 157, 158, 213, 214, 215, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 290, 292, 294, 298, 300, 317, 325, 393, 404], "fundament": [15, 170, 187, 261, 394], "further": [13, 15, 32, 33, 34, 35, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 83, 85, 86, 87, 88, 90, 92, 101, 102, 325, 360, 368, 373], "fuse": 131, "fusion": [132, 133, 134], "futur": [170, 244, 260, 293, 294], "g": [0, 10, 18, 19, 22, 25, 27, 50, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66, 67, 74, 75, 77, 78, 79, 80, 94, 136, 145, 219, 220, 250, 299, 302, 309, 376, 398], "g_": 303, "g_t": 309, "gain": [228, 229], "gamma": [195, 269, 270, 271, 272, 273, 274, 275, 276], "gamma_c": [195, 272], "gap": [103, 114, 131, 219], "gaussian": [161, 231], "gelu": [162, 184, 242, 258], "gelunetwork": 231, "gener": [24, 32, 37, 41, 146, 147, 178, 212, 250, 251, 253, 254, 255, 256, 274, 290, 305, 307, 308, 315, 318, 320, 321, 322, 323, 324, 325, 330, 338, 340, 341, 343, 380, 397, 398, 399, 401, 404], "geoffrei": [5, 6], "geq": 389, "get": [5, 6, 7, 8], "github": 7, "give": [15, 301, 309], "given": [12, 13, 14, 18, 19, 22, 24, 25, 27, 148, 175, 209, 243, 244, 263, 264, 267, 299, 313, 318, 345, 347, 385, 393, 398, 399, 401, 404], "global": [0, 50, 103, 114, 121, 131, 195, 219, 272, 313, 315, 323, 325], "global_response_norm": [184, 196], "globalresponsenorm": [258, 277], "go": [10, 65, 145], "goal": [263, 264, 267], "googlenet": [65, 145], "gpu": 145, "grad": [151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 175, 178, 185, 187, 211, 216, 217, 218, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 299, 300, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402], "grad_output": 22, "gradient": [10, 15, 16, 67, 73, 145, 151, 153, 251, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 318, 320, 321, 322, 324, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 394], "grain": 219, "graph": [15, 229, 326, 338, 339, 342, 344, 345, 346, 347, 394], "grayscal": [7, 8, 77, 78, 79, 80, 398, 404], "greater": [40, 353], "green": 398, "grid": 380, "grn": 272, "groundbreak": 145, "group": [84, 94, 101, 102, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 135, 145, 155, 171, 172, 173, 213, 214, 215, 220, 246, 247, 248, 299, 300], "group1": 155, "group2": 155, "groupedconvblock": 114, "growth_rat": [45, 46, 47, 48, 49], "guarante": 323, "h": [10, 12, 13, 14, 103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 145, 170, 172, 173, 175, 177, 181, 182, 195, 200, 201, 203, 204, 207, 208, 211, 212, 214, 215, 219, 243, 244, 270, 271, 272, 274, 275, 279, 280, 283, 286, 290, 292, 294, 395, 397], "h_": [172, 173, 200, 201, 203, 204, 207, 208, 211, 247, 248, 279, 280, 282, 283, 285, 286], "h_out": [172, 173, 203, 204, 207, 208], "h_stack": 378, "ha": [0, 19, 32, 146, 158, 171, 172, 173, 213, 214, 215, 236, 240, 263, 264, 269, 270, 271, 273, 274, 275, 276, 296, 299, 300, 331, 371, 375, 376, 378, 387, 392, 398], "half": 366, "han": 7, "hand": 26, "handl": [0, 3, 10, 15, 24, 145, 152, 154, 155, 156, 157, 158, 209, 264, 267, 298, 300, 315], "handwritten": [7, 8, 80], "hang": 145, "hard": [87, 88, 233], "hard_sigmoid": 232, "hardsigmoid": [233, 242, 258], "hardswish": [242, 258], "hardwar": 15, "hat": [304, 305, 306, 307, 308], "have": [0, 1, 18, 19, 21, 24, 25, 27, 153, 155, 157, 158, 172, 173, 177, 209, 229, 288, 298, 342, 344, 345, 346, 347, 359, 361, 376, 378, 380, 386, 387, 392, 396, 402], "he": 145, "head": [30, 68, 83, 141, 147, 170, 243, 244, 290, 292, 294], "head_fn": 68, "height": [141, 172, 173, 175, 181, 182, 195, 200, 201, 203, 204, 207, 208, 211, 212, 220, 247, 248, 270, 271, 272, 274, 275, 279, 280, 282, 283, 285, 286, 296, 395, 397, 402], "help": [15, 66, 163, 165, 182, 209, 230, 234, 236, 237, 241, 269, 270, 271, 281, 282, 284, 285, 288, 301, 304, 305, 307, 313, 314, 315, 317], "henc": 384, "here": [3, 17, 152, 185, 298, 300, 314, 315, 317, 325, 393, 394, 404], "hidden": [28, 143, 147, 155], "hidden_s": 155, "hierarch": [30, 31, 155, 158, 298], "hierarchi": 247, "hierarchicalnetwork": 155, "high": [15, 33, 39, 40, 60, 61, 62, 63, 70, 83, 91, 92, 111, 126, 135, 321, 324], "higher": [40, 51, 81, 89, 114, 264, 267, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 330, 331, 335, 357], "highest": [44, 92, 321], "highli": [36, 44, 86, 145], "highlight": [219, 284, 285, 286], "hint": 317, "hinton": [5, 6], "histor": 303, "histori": [318, 320, 321, 322, 324, 338, 339, 340, 341, 342, 344, 345, 346, 347], "hold": [84, 154, 155, 156, 157], "horizont": [378, 387, 399, 404], "hot": [264, 267], "how": [2, 3, 12, 14, 15, 127, 128, 129, 130, 135, 155, 158, 298, 317, 404], "howard": 145, "howev": [151, 229], "hstack": 379, "html": [5, 6], "http": [5, 6, 7, 8], "hu": [145, 219], "huang": 145, "huber": [190, 265], "huber_loss": [184, 191], "huberloss": [258, 268], "huberregressionmodel": 265, "hue": 404, "huge": [39, 145], "hybrid": [92, 93, 145], "hyperbol": [168, 241, 355, 365, 370], "hyperparamet": [95, 96, 97, 98, 99, 100, 103, 114, 142, 148, 299, 301], "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 60, 61, 62, 63, 64, 65, 66, 67, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "i_1": [12, 13, 14], "i_2": [12, 13, 14], "i_k": 14, "i_m": [12, 14], "iccv": 145, "idea": 145, "ideal": [15, 33, 37, 41, 81, 84, 93, 158], "ident": [21, 22, 68, 145, 212, 252, 258, 262, 323, 325, 342, 384], "identifi": 156, "idx": [2, 3], "ieee": [145, 219], "ignor": [290, 291, 292, 293, 294], "ii": 371, "ij": [167, 211, 239, 329, 330, 331, 335, 380, 389, 390], "ik": [329, 330, 331], "ill": [18, 24], "ilsvrc": 145, "imag": [3, 4, 5, 6, 7, 8, 14, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 60, 61, 62, 63, 65, 66, 67, 73, 74, 75, 77, 78, 79, 80, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 144, 145, 172, 197, 212, 214, 219, 247, 274, 380, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "image_dir": 3, "image_path": 3, "imagedataset": 3, "imageio": 3, "imagenet": [46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 68, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 112, 113, 127, 128, 129, 130, 135, 145], "imbal": [264, 267], "impact": [145, 307], "implement": [2, 3, 15, 24, 28, 30, 45, 50, 64, 65, 66, 67, 68, 74, 75, 77, 81, 82, 83, 103, 112, 113, 115, 116, 117, 118, 119, 120, 121, 141, 143, 145, 147, 152, 175, 178, 216, 217, 218, 220, 243, 244, 252, 272, 292, 294, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 378, 392, 398], "impli": [246, 247], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 179, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "improp": [10, 155, 158, 325], "improv": [30, 51, 65, 66, 67, 71, 73, 75, 93, 94, 103, 114, 127, 128, 129, 130, 131, 143, 145, 149, 177, 178, 194, 209, 212, 219, 231, 237, 241, 288, 301, 302, 303, 304, 305, 306, 307, 308, 309, 317, 397, 400, 404], "imread": 3, "in1_featur": [185, 259], "in2_featur": [185, 259], "in_channel": [103, 155, 158, 213, 214, 215, 216, 217, 218, 219, 220, 246, 247, 248, 270, 271, 281, 282, 283, 284, 285, 286, 298], "in_featur": [154, 155, 158, 187, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 247, 248, 250, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 273, 276, 281, 282, 283, 284, 285, 286], "incept": [65, 66, 67, 68, 73, 74, 75, 76, 145], "inception_next": 68, "inception_next_atto": 145, "inception_next_bas": 145, "inception_next_smal": 145, "inception_next_tini": 145, "inception_resnet_v1": 145, "inception_resnet_v2": 145, "inception_v1": 145, "inception_v3": 145, "inception_v4": 145, "inceptionnext": [69, 70, 71, 72, 76, 145], "inceptionresnet": [74, 75], "includ": [3, 4, 7, 15, 16, 22, 23, 28, 30, 64, 65, 66, 74, 77, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 136, 142, 143, 146, 147, 152, 153, 155, 157, 158, 211, 213, 214, 215, 216, 217, 218, 292, 294, 296, 298, 299, 300, 307, 317, 325, 331, 381, 389, 390], "inclus": [153, 156, 321, 324, 343], "incom": [187, 261], "incompat": 375, "incomplet": 2, "incompletedataset": 2, "incorpor": [27, 86, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 145, 231], "increas": [33, 34, 81, 89, 92, 114, 115, 116, 117, 118, 119, 120, 131, 149, 171, 172, 173, 175, 212, 303, 310, 314, 378, 392, 398, 399, 401, 404], "independ": [155, 171, 172, 173, 243, 250, 253, 254, 255, 256, 276, 331, 341, 396, 398, 400, 402], "index": [0, 2, 5, 6, 7, 8, 10, 12, 195, 209, 272, 288, 314, 338, 339, 342, 380, 384], "indexerror": 0, "indic": [0, 1, 13, 14, 101, 102, 136, 146, 153, 155, 157, 158, 189, 193, 209, 264, 267, 281, 288, 290, 291, 292, 293, 294, 313, 326, 395, 397], "individu": [3, 155, 158, 265, 276, 300, 303, 310], "induc": [165, 237], "inf": 369, "infer": [127, 128, 129, 130, 135, 155, 158, 315], "infin": [25, 27, 306], "inform": [15, 145, 146, 151, 219, 300, 302, 315], "infti": [23, 308], "inherit": [1, 301, 309, 311], "init": 223, "initi": [1, 30, 45, 68, 73, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 137, 138, 139, 140, 142, 148, 151, 153, 154, 155, 156, 157, 158, 220, 222, 224, 225, 226, 227, 228, 229, 243, 246, 247, 248, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 276, 288, 292, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 320, 323, 324, 325, 338, 342, 343, 344, 345, 346, 347, 374], "initial_accumulator_valu": 303, "inner": [15, 329, 348], "innov": [83, 93], "input": [10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 114, 127, 128, 129, 130, 131, 135, 141, 143, 145, 146, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 317, 325, 326, 327, 329, 330, 331, 335, 339, 341, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "input1": 259, "input2": 259, "input_": [28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 143, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 272, 278, 279, 280, 288, 389, 390], "input_1": 185, "input_2": 185, "input_data": [230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286], "input_indic": [209, 288], "input_s": [155, 157, 239, 264, 267], "input_shap": 146, "input_tensor": [15, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 141, 151, 154, 155, 156, 157, 158, 167, 177, 178, 216, 217, 218, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 296, 298, 395, 396, 397, 398, 399, 400, 401, 402], "insid": [3, 313, 315], "insight": [15, 145], "inspect": [152, 153, 158, 299], "inspir": [10, 12, 14, 30, 145], "instabl": [24, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "instal": 15, "instanc": [0, 1, 15, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 142, 144, 146, 148, 149, 152, 153, 154, 156, 157, 158, 197, 236, 273, 274, 275, 276, 290, 291, 293, 299, 316, 374, 383, 388, 404], "instance_norm": [184, 196, 273, 274, 275], "instancenorm1d": [258, 277], "instancenorm1dmodel": 273, "instancenorm2d": [258, 277], "instancenorm3d": [258, 277], "instanti": [2, 50, 60, 61, 62, 63, 68, 69, 70, 71, 72, 89, 90, 91, 92, 127, 128, 129, 130, 135, 316], "instead": [15, 146, 154, 155, 156, 157, 158, 224, 225, 228, 229, 288, 290, 292, 294, 304, 305, 306, 315, 317, 340, 341], "int": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 153, 167, 170, 171, 172, 173, 175, 177, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 226, 227, 228, 229, 239, 243, 244, 246, 247, 248, 251, 259, 261, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 304, 305, 306, 307, 308, 310, 316, 318, 320, 321, 322, 323, 324, 326, 338, 339, 340, 342, 343, 344, 346, 353, 359, 360, 361, 368, 372, 373, 374, 375, 376, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 397, 402], "int32": 288, "integ": [1, 3, 22, 121, 136, 171, 172, 173, 200, 201, 243, 246, 247, 248, 276, 279, 280, 282, 283, 284, 285, 286, 317, 321, 322, 324, 325, 340, 344, 346, 360, 368, 372, 373, 381, 383, 384, 385, 388], "integr": [1, 2, 4, 5, 6, 7, 8, 13, 16, 92, 94, 145, 147, 153, 155, 157, 158, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 259, 261, 281, 282, 283, 284, 285, 286], "intellig": [145, 219], "intend": [10, 151, 156, 157], "intens": [24, 45, 104, 396, 398], "intent": 317, "interact": [185, 259, 298, 325], "interdepend": 145, "interfac": [2, 152, 155, 300], "interfer": [313, 315], "intermedi": [24, 101, 102, 219, 290, 292, 294], "intern": [104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 145, 154, 155, 156, 157, 158, 264, 267, 298, 395, 396, 397, 398, 399, 400, 401, 402], "interpol": [184, 210, 296, 343, 402], "interpret": [10, 145, 167, 239, 317, 376], "interv": [320, 324, 338], "introduc": [31, 51, 65, 66, 81, 82, 83, 114, 145, 164, 219, 231, 235, 236, 238, 241, 250, 253, 254, 255, 256, 290, 397, 400, 404], "introspect": 158, "intuit": [10, 12, 15, 154, 156, 298, 404], "inv": 20, "inv_a": 21, "invari": [282, 285], "invers": [15, 18, 21, 22, 24, 303, 350, 351, 352], "invert": [18, 21, 22, 26, 82, 83, 86, 145], "invok": 316, "involv": [12, 14, 17, 18, 19, 21, 24, 25, 27, 131, 160, 161, 163, 164, 165, 166, 168, 185, 187, 211, 246, 247, 248, 259, 261, 317, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 347, 357, 358, 359, 361, 364, 366, 380, 381, 383, 388], "is_caus": [170, 244, 293, 294], "is_leaf": 326, "issu": [3, 237, 269, 270, 271, 304, 305], "item": [7, 266], "iter": [0, 1, 2, 3, 151, 152, 155, 157, 291, 293, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 338], "ith": [167, 239], "its": [4, 22, 24, 28, 31, 84, 92, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 124, 125, 126, 132, 133, 134, 143, 145, 146, 151, 154, 155, 156, 157, 171, 172, 173, 175, 212, 220, 229, 231, 235, 240, 251, 284, 285, 286, 298, 299, 302, 310, 313, 314, 315, 316, 338, 340, 341, 346, 359, 361, 374, 375, 384, 385, 396, 399, 401, 404], "itself": [17, 22, 154, 155, 156, 157], "j": [8, 10, 12, 13, 14, 167, 209, 219, 239, 269, 270, 271, 273, 274, 275, 281, 282, 284, 285, 288, 380, 387, 389, 390, 395, 397], "j_1": [12, 14], "j_2": [12, 14], "j_k": 14, "j_n": [12, 14], "jie": 145, "jk": 330, "join": [3, 376], "json": 316, "k": [22, 145, 170, 171, 243, 244, 246, 264, 270, 271, 274, 275, 281, 284, 285, 294, 329, 330, 339, 342, 376, 385], "k_d": [173, 248, 283, 286], "k_h": [172, 173, 247, 248, 282, 283, 286], "k_i": 243, "k_w": [172, 173, 247, 248, 282, 283, 286], "kaim": [145, 224, 225, 228, 229], "kaiming_norm": 223, "kaiming_uniform": 223, "kalenichenko": 145, "karen": 145, "kashif": 7, "kdim": 243, "keep": [152, 178, 235, 302, 315, 384, 389, 390], "keep_grad": [153, 318, 320, 321, 322, 324, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 394], "keep_var": 152, "keepdim": [23, 359, 360, 361, 368, 373], "kei": [84, 145, 152, 154, 156, 158, 170, 243, 244, 294, 299], "kept": [360, 368, 373], "kernel": [77, 78, 79, 80, 84, 87, 88, 131, 132, 133, 134, 135, 143, 145, 171, 172, 173, 175, 199, 200, 201, 202, 203, 204, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 278, 279, 280, 282, 283, 286], "kernel_s": [83, 87, 88, 131, 132, 133, 134, 155, 158, 202, 203, 204, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 270, 271, 281, 282, 283, 284, 285, 286], "keyerror": 152, "keyword": [29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 152, 260], "kj": [329, 331], "known": 145, "kriz": [5, 6], "krizhevski": [5, 6, 145], "kroneck": [12, 167, 239], "kwarg": [29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 152, 260, 316], "l": [17, 24, 60, 145, 170, 171, 180, 199, 202, 206, 213, 219, 244, 250, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 293, 294, 375], "l2": [301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "l_": [145, 171, 199, 202, 206, 246, 278, 281, 284, 290], "l_k": 243, "l_m": [291, 292], "l_out": [171, 202, 206], "l_q": 243, "l_t": [290, 291, 292], "l_v": 243, "label": [4, 5, 6, 7, 8, 66, 263, 264, 267], "lambd": 301, "lambda": [19, 165, 237, 301, 305], "lambda_1": 19, "lambda_2": 19, "lambda_i": 19, "lambda_n": 19, "languag": [4, 246, 259, 281, 284, 290], "larg": [0, 3, 24, 33, 39, 40, 44, 45, 60, 63, 83, 87, 89, 92, 93, 104, 105, 106, 109, 122, 123, 145, 216, 217, 218, 236, 265, 298, 301, 304, 305, 306, 309, 310, 311, 315], "larger": [32, 50, 51, 103, 131, 149, 154, 156, 171, 172, 173, 175, 177, 251, 301, 332, 381, 395, 397, 402], "largest": [44, 359], "last": [1, 167, 198, 239, 330, 331, 376, 399, 401], "last_channel": 83, "latest": 4, "layer": [10, 15, 28, 30, 31, 45, 46, 47, 48, 49, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 93, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 152, 154, 155, 158, 167, 178, 187, 194, 197, 198, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 239, 244, 246, 247, 248, 252, 259, 260, 261, 267, 276, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 298, 325, 381, 394], "layer1": 316, "layer2": 316, "layer_group": 155, "layer_norm": [184, 196, 276], "layer_norm_ep": [290, 292, 294], "layer_scale_init": 30, "layer_sequ": [155, 158], "layernorm": [258, 277, 290, 291, 292, 293, 294], "layernormmodel": 276, "le": 145, "lead": [10, 155, 158, 231, 273, 274, 275, 276, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 325, 375], "leaf": 326, "leaki": [163, 234], "leaky_relu": [162, 184, 234], "leakyrelu": [242, 258], "learn": [1, 3, 4, 7, 8, 10, 13, 15, 22, 24, 51, 70, 71, 114, 115, 116, 117, 118, 119, 120, 143, 144, 145, 154, 155, 156, 157, 164, 167, 219, 230, 234, 235, 239, 246, 247, 248, 253, 254, 255, 256, 259, 261, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 323, 343, 385, 389, 390, 393, 394, 404], "learnabl": [151, 152, 153, 194, 195, 197, 198, 213, 214, 215, 243, 246, 247, 248, 259, 261, 269, 270, 271, 272, 273, 274, 275, 276, 294, 298], "least": [24, 25, 27, 296, 371, 389, 390], "lecun": [8, 145], "left": [22, 23, 24, 27, 161, 167, 231, 239, 243, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 284, 285, 286, 292, 294, 395, 397], "leftarrow": 307, "len": [0, 1, 2, 3, 380], "lenet": [76, 78, 79, 80, 145], "lenet_1": 145, "lenet_4": 145, "lenet_5": 145, "length": [155, 170, 171, 180, 199, 202, 206, 246, 260, 269, 273, 278, 281, 284, 293, 294, 381, 396], "leq": [232, 233, 265, 308, 336, 353, 390], "lerp": 211, "less": [0, 160, 163, 190, 230, 234, 264, 265, 267, 343, 353], "let": 19, "level": [15, 73], "leverag": [12, 13, 14, 26, 67, 68, 75, 89, 92, 115, 116, 117, 118, 119, 120, 141, 145, 220, 298], "li": 145, "librari": [3, 10, 15, 16, 152, 298, 299, 300, 316, 317, 325, 326, 404], "lie": 318, "lightweight": [15, 42, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 82, 87, 88, 95, 96, 97, 98, 99, 100, 107, 124, 220, 233, 236], "like": [12, 13, 14, 15, 51, 73, 84, 92, 115, 116, 117, 118, 119, 120, 132, 133, 134, 145, 147, 151, 152, 155, 158, 171, 177, 228, 229, 237, 250, 251, 269, 270, 271, 273, 274, 275, 313, 314, 317, 374, 394, 404], "likelihood": [193, 264, 267], "limit": [35, 42, 87, 88, 89, 91, 146, 236, 302, 353], "linalg": [15, 20], "linalgerror": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27], "linear": [15, 16, 17, 24, 25, 26, 68, 82, 86, 121, 145, 146, 154, 155, 156, 158, 160, 161, 163, 164, 165, 178, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 247, 248, 250, 252, 253, 254, 259, 260, 263, 264, 265, 266, 267, 269, 273, 276, 281, 282, 283, 284, 285, 286, 290, 292, 294, 316, 342], "linearli": 265, "linspac": 348, "linspace_tensor": 343, "list": [0, 1, 30, 31, 51, 68, 77, 83, 94, 103, 114, 121, 131, 136, 146, 151, 153, 154, 155, 156, 157, 198, 220, 260, 276, 299, 317, 318, 320, 321, 322, 324, 326, 339, 340, 341, 344, 345, 346, 347, 372, 375, 384, 385, 386, 391, 393], "listdir": 3, "liter": [13, 103, 188, 189, 190, 192, 193, 211, 213, 214, 215, 216, 217, 218, 220, 224, 225, 246, 247, 248, 263, 264, 265, 266, 267, 296, 380], "liu": 145, "ln": 336, "load": [3, 4, 5, 6, 7, 8, 151, 152, 153, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316], "load_state_dict": [152, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "loader": [1, 2, 3], "local": [145, 175, 246], "locat": [145, 211], "log": [193, 263, 264, 267, 348], "log_softmax": 267, "logarithm": [336, 357, 358], "logic": [3, 278, 279, 280, 298, 299], "logit": [28, 30, 143, 167, 239, 264], "logsoftmax": [264, 267], "long": [145, 307, 372], "lookup": [209, 288], "loop": [1, 12, 13, 14, 155, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "loss": [15, 24, 154, 155, 156, 157, 158, 167, 188, 189, 190, 192, 193, 230, 231, 234, 235, 237, 238, 239, 241, 250, 253, 254, 255, 256, 260, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "low": [15, 73, 82, 87, 88, 91, 321, 324], "lower": [17, 81, 227, 291, 292, 293, 294, 301, 309, 310, 311, 324, 389, 390], "lower_triangular": 389, "lowest": 321, "lr": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "ls_init_valu": 68, "lu": 21, "lucid": [0, 1, 2, 5, 6, 7, 8, 11, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 319, 348, 379, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "m": [61, 136, 145, 154, 155, 158, 243, 282, 283, 285, 286, 290, 291, 294, 304, 305, 306, 307, 308, 342, 389, 390], "m_": [304, 305, 306, 307, 308, 389, 390], "m_m": 292, "m_t": [292, 307, 308], "maaten": 145, "machin": [3, 7, 8, 15, 24, 145, 147, 219, 290, 304, 314, 323], "magnitud": [178, 209, 288, 309, 310, 404], "mai": [3, 10, 12, 14, 15, 19, 21, 24, 91, 155, 157, 212, 252, 265, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 315, 325, 398, 404], "main": [15, 25, 73, 155, 339, 342, 389, 390], "maintain": [24, 31, 36, 60, 61, 62, 63, 71, 81, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 135, 145, 151, 152, 154, 155, 156, 158, 165, 178, 224, 225, 228, 229, 230, 231, 237, 250, 252, 253, 254, 255, 256, 269, 270, 271, 273, 274, 275, 304, 309, 395, 398, 402], "make": [1, 3, 10, 15, 33, 34, 37, 38, 64, 73, 77, 82, 84, 86, 87, 88, 90, 91, 93, 103, 145, 155, 158, 238, 264, 265, 276, 282, 285, 298, 303, 304, 305, 306, 314, 316, 325, 326, 331, 380, 385, 393, 404], "manag": [15, 152, 154, 155, 156, 157, 158, 298, 300, 313, 315, 316, 325], "manhattan": 23, "mani": 146, "manipul": [10, 12, 15, 154, 156, 404], "manner": [10, 12, 13, 155, 158], "manual": [10, 188, 189, 193, 263, 264, 267, 315], "map": [12, 14, 68, 101, 102, 103, 114, 124, 131, 145, 152, 166, 168, 177, 195, 219, 238, 241, 252, 272, 288], "mask": [145, 151, 170, 243, 244, 250, 253, 254, 255, 256, 290, 291, 292, 293, 294, 389, 390], "match": [10, 14, 26, 152, 155, 158, 170, 188, 190, 192, 198, 213, 214, 215, 251, 288, 299, 357, 375, 383, 384, 385, 388, 391, 396, 404], "math": [243, 354, 364, 369], "mathbb": [243, 385], "mathbf": [12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 141, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 185, 187, 211, 216, 217, 218, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 329, 330, 331, 335, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402], "mathcal": [224, 226, 228, 250, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276], "mathemat": [21, 213, 214, 215, 397, 399, 400, 401], "mathrm": 24, "matmul": 348, "matric": [16, 18, 19, 21, 24, 26, 27, 243, 294, 329, 330, 331, 342, 380, 389, 390], "matrix": [12, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 175, 185, 209, 260, 261, 288, 298, 329, 380], "matrix_pow": 20, "matthew": 145, "max": [10, 23, 121, 136, 164, 206, 207, 208, 209, 232, 233, 235, 236, 284, 285, 286, 288, 306, 332, 348, 353], "max_norm": [209, 288], "max_pool": [284, 285, 286], "max_pool1d": [184, 205], "max_pool2d": [184, 205], "max_pool3d": [184, 205], "max_valu": 353, "maxim": [3, 39, 92], "maximum": [23, 235, 236, 284, 285, 286, 304, 306, 348, 353, 359, 400], "maxpool": [28, 143], "maxpool1d": [258, 287], "maxpool1dmodel": 284, "maxpool2d": [155, 158, 247, 258, 287], "maxpool2dmodel": 285, "maxpool3d": [248, 258, 287], "maxpool3dmodel": 286, "mean": [5, 6, 7, 8, 10, 12, 13, 14, 25, 101, 102, 146, 151, 165, 171, 172, 173, 176, 188, 189, 190, 192, 193, 194, 197, 213, 214, 215, 226, 230, 231, 232, 234, 235, 237, 238, 241, 248, 250, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 304, 305, 306, 307, 308, 309, 313, 322, 348, 353, 357, 358, 359, 361, 364, 366, 368, 371, 372, 373, 393, 396, 404], "meaning": [13, 158, 317], "measur": [263, 264, 266, 267], "mechan": [15, 101, 102, 121, 131, 135, 145, 147, 157, 185, 243], "medium": [38, 42, 61, 89, 90, 93, 145], "meet": 145, "mem_is_caus": [291, 292], "mem_key_padding_mask": [290, 291, 292], "mem_mask": [290, 291, 292], "membership": 263, "memori": [2, 3, 45, 290, 291, 292, 315, 340, 341], "merg": 12, "meshgrid": 379, "method": [3, 10, 13, 15, 16, 21, 51, 121, 141, 142, 154, 155, 156, 157, 158, 188, 189, 190, 192, 193, 224, 225, 228, 229, 263, 264, 265, 266, 267, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 325], "mha": 243, "mid": 71, "mid_channel": [87, 88], "middl": 314, "might": 298, "min": [232, 233, 236, 333, 348, 353], "min_valu": 353, "mind": [0, 3, 15, 155, 158, 315], "mingx": 145, "mini": 1, "minim": [4, 15, 69, 83, 145, 158, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 300], "minimalist": 15, "minimum": [348, 353, 361], "minu": 238, "mirror": [345, 347], "mismatch": [10, 12, 14, 51, 152, 298, 299], "miss": [152, 298], "mitig": [163, 230, 234, 237, 269, 270, 271], "mix": 68, "mixer": 68, "mlp": [68, 220], "mlp_ratio": 68, "mnist": [4, 7, 9, 78, 79], "mnist_train": [4, 8], "mobil": [81, 82, 83, 84, 86, 87, 88, 91, 145], "mobilenet": [76, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 145, 236], "mobilenet_v2": 145, "mobilenet_v3": [87, 88], "mobilenet_v3_larg": 145, "mobilenet_v3_smal": 145, "mobilenet_v4": [89, 90, 91, 92, 93], "mobilenet_v4_conv_larg": 145, "mobilenet_v4_conv_medium": 145, "mobilenet_v4_conv_smal": 145, "mobilenet_v4_hybrid_larg": 145, "mobilenet_v4_hybrid_medium": 145, "mobilenetv2": [82, 145], "mobilenetv3": [83, 87, 88, 145], "mode": [15, 182, 194, 197, 211, 224, 225, 250, 252, 253, 254, 255, 256, 296, 381], "model": [1, 3, 4, 10, 15, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 167, 170, 177, 209, 212, 213, 214, 215, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 325, 393, 394, 404], "model_b0": 50, "model_b7": 50, "model_tini": 68, "moder": [34, 38, 72, 90, 125], "modern": [30, 31, 68, 145], "modif": [142, 158, 315], "modifi": [29, 89, 103, 141, 144, 154, 155, 156, 157, 222, 224, 225, 226, 227, 228, 229, 250, 313, 315, 323, 378, 392], "modul": [5, 6, 7, 8, 10, 15, 28, 29, 30, 31, 50, 51, 64, 67, 68, 73, 74, 75, 77, 81, 82, 83, 84, 93, 103, 114, 121, 131, 136, 141, 143, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 158, 178, 213, 214, 215, 216, 217, 218, 219, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 325, 394, 404], "modular": [3, 15, 145, 147, 152, 155, 158, 298, 404], "moduledict": [155, 156, 158, 159], "modulelist": [157, 158, 159], "moment": [304, 305, 306, 307, 308], "momentum": [194, 197, 213, 214, 215, 269, 270, 271, 273, 274, 275, 301, 307, 309, 311], "momentum_decai": 307, "monoton": 240, "moor": 24, "more": [3, 4, 7, 10, 15, 19, 33, 103, 110, 149, 154, 155, 158, 177, 216, 217, 218, 230, 253, 254, 255, 256, 290, 298, 299, 300, 301, 302, 305, 306, 309, 310, 311, 322, 331, 371, 387, 389, 390, 404], "most": [16, 37, 145, 285, 394, 395, 404], "move": [301, 309], "mse": [190, 192, 265, 266], "mse_loss": [184, 191], "mseloss": [258, 268], "mu": [226, 269, 270, 271, 273, 274, 275, 276, 373], "mu_c": 396, "mu_i": [273, 274, 275], "much": 404, "mul": 348, "multi": [3, 4, 68, 74, 131, 132, 133, 134, 145, 147, 167, 170, 189, 193, 220, 239, 243, 264, 267, 290, 292, 294, 360, 368, 373], "multidimension": [320, 324, 340], "multiheadattent": [245, 258], "multipl": [1, 3, 12, 15, 16, 22, 26, 28, 103, 121, 135, 156, 157, 158, 175, 211, 212, 219, 220, 243, 250, 253, 254, 255, 256, 264, 267, 291, 293, 298, 314, 318, 320, 321, 322, 324, 329, 334, 340, 341, 385, 393, 398, 404], "multipli": [22, 85, 157, 187, 261, 296, 310, 334, 335], "must": [0, 1, 3, 17, 18, 19, 21, 22, 25, 26, 27, 146, 152, 154, 155, 156, 157, 158, 178, 198, 243, 250, 252, 253, 254, 255, 256, 267, 288, 290, 292, 294, 296, 299, 315, 318, 371, 375, 376, 378, 381, 383, 384, 385, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 401], "my_simple_model": 316, "mymodel": [152, 153, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "myoptim": [299, 300], "n": [12, 22, 23, 103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 145, 154, 155, 158, 170, 171, 172, 173, 175, 177, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 224, 226, 228, 243, 244, 246, 247, 248, 255, 256, 259, 261, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 342, 360, 371, 373], "n1": 23, "nabla_": [302, 303, 304, 305, 306, 307, 308, 310], "nabla_t": 308, "nadam": 312, "nair": [5, 6], "name": [10, 12, 13, 14, 145, 146, 152, 154, 156, 158, 316, 317], "nan": [25, 27], "nano": [41, 145], "natur": [24, 145, 246, 259, 281, 284, 290, 336, 357, 358], "ndarrai": [151, 153, 317, 318, 326, 339, 341, 345, 347, 374], "ndim": [25, 27, 153, 326], "ne": 22, "nearest": [211, 296], "necessari": [4, 5, 6, 7, 8, 24, 315, 378, 392], "need": [2, 4, 13, 14, 93, 145, 155, 156, 157, 167, 259, 290, 298, 315, 340, 341, 393, 394, 404], "neg": [22, 24, 27, 160, 193, 212, 230, 234, 235, 237, 264, 267, 310, 376], "negative_slop": [163, 234], "neglect": 157, "neighbor": 211, "neq": 23, "nest": [146, 155, 158, 298], "nestedmodel": 146, "nesterov": 307, "net": [143, 145], "network": [3, 4, 10, 13, 15, 28, 29, 30, 31, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 67, 73, 80, 81, 84, 85, 89, 92, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 131, 136, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 168, 171, 172, 173, 177, 178, 185, 187, 194, 212, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 281, 282, 283, 284, 285, 286, 288, 290, 292, 294, 298, 299, 300, 301, 309, 311, 324, 325, 326, 338, 344, 346, 359, 361, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "neural": [3, 4, 10, 13, 15, 28, 29, 30, 50, 52, 53, 54, 55, 56, 57, 58, 59, 73, 80, 144, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 168, 171, 172, 173, 178, 185, 187, 194, 212, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 281, 282, 283, 284, 285, 286, 288, 298, 299, 300, 301, 309, 311, 324, 325, 326, 338, 344, 346, 359, 361, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "neuralnetwork": [232, 233, 235, 240], "neuron": 234, "never": 398, "new": [14, 152, 153, 160, 161, 163, 164, 165, 166, 168, 185, 187, 211, 220, 224, 225, 226, 227, 228, 229, 299, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 378, 381, 383, 384, 387, 388, 389, 390, 391, 392], "next": [158, 393], "nll": 193, "nll_loss": [184, 191], "nllloss": [258, 268], "nlp": [209, 288], "nn": [5, 6, 7, 8, 15, 28, 30, 31, 45, 50, 51, 64, 68, 73, 77, 81, 82, 83, 84, 103, 114, 121, 127, 128, 129, 130, 131, 135, 136, 143, 146, 159, 162, 169, 174, 183, 186, 191, 196, 205, 210, 221, 223, 242, 245, 249, 257, 258, 262, 268, 277, 287, 289, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 394, 404], "no_grad": 313, "node": 326, "nois": [27, 325], "non": [19, 22, 24, 27, 157, 161, 163, 164, 224, 225, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 250, 253, 254, 255, 256, 290, 291, 292, 293, 294, 304, 305, 315, 336, 353], "none": [0, 1, 2, 5, 6, 7, 8, 23, 50, 51, 64, 68, 73, 77, 81, 82, 83, 84, 94, 103, 141, 146, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 178, 185, 187, 188, 189, 190, 192, 193, 194, 197, 198, 209, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402], "norm": [16, 20, 209, 288, 291, 293, 306], "norm_first": [290, 292, 294], "norm_typ": [209, 288], "normal": [5, 6, 7, 8, 30, 121, 145, 161, 165, 167, 168, 177, 194, 195, 197, 198, 209, 213, 214, 215, 223, 224, 228, 231, 237, 239, 250, 269, 270, 271, 272, 273, 274, 275, 276, 288, 290, 291, 292, 293, 294, 309, 322, 325, 393, 403, 404], "normalized_shap": [198, 276], "notat": [10, 12, 13, 14], "note": [171, 250], "noth": [176, 179, 180, 181], "notimplementederror": [2, 152, 299], "notin": 353, "nov": 145, "novel": [7, 145], "np": [103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 151, 153, 219, 264, 267, 288, 317, 326, 331, 338, 339, 342, 344, 346, 347, 358, 374, 394], "npy": [5, 6, 7, 8], "num": [291, 293, 343], "num_class": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 239, 264, 267], "num_decoder_lay": [147, 290], "num_embed": [209, 288], "num_encoder_lay": [147, 290], "num_featur": [158, 213, 214, 215, 269, 270, 271, 273, 274, 275], "num_head": [147, 243, 290, 291, 292, 293, 294], "num_init_featur": [45, 46, 47, 48, 49], "num_lay": [291, 293], "num_paramet": 157, "number": [0, 1, 2, 5, 6, 7, 8, 10, 12, 14, 18, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 155, 157, 158, 170, 171, 172, 173, 175, 180, 181, 182, 185, 187, 189, 193, 194, 195, 197, 199, 200, 201, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 238, 243, 246, 247, 248, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 301, 320, 323, 324, 326, 336, 338, 340, 342, 343, 359, 360, 361, 372, 373, 376, 378, 381, 383, 384, 386, 388, 392, 396, 398, 399, 401, 404], "numer": [13, 21, 24, 177, 188, 189, 194, 195, 197, 198, 213, 214, 215, 236, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 317, 328, 338, 344, 346], "numpi": [15, 151, 153, 264, 267, 317, 326, 331, 339, 342, 343, 358, 371, 374, 375, 381, 383, 388, 394, 404], "o": [3, 243, 283, 286, 344, 345], "object": [1, 3, 16, 131, 145, 152, 156, 157, 266, 298, 315, 327, 328, 332, 333, 334, 337, 374], "observ": 304, "obtain": 1, "occur": [14, 212, 315, 316, 376], "occurr": 22, "odot": [250, 253, 254, 255, 256], "off": [34, 90, 313], "offer": [4, 10, 15, 31, 32, 34, 44, 71, 90, 298, 300, 325, 404], "offset": 342, "often": [22, 112, 113, 171, 172, 173, 175, 209, 251, 264, 267, 338, 346, 394, 398, 402, 404], "older": 307, "onc": 315, "one": [0, 13, 127, 128, 129, 130, 135, 157, 158, 167, 171, 187, 202, 206, 213, 214, 215, 237, 238, 239, 246, 254, 264, 267, 269, 273, 281, 284, 296, 299, 314, 317, 322, 337, 345, 359, 361, 377, 382, 387, 394], "ones": [185, 187, 246, 247, 248, 261, 269, 270, 271, 273, 274, 275, 276, 298, 342, 345, 348], "ones_lik": 348, "onli": [15, 146, 211, 232, 235, 250, 251, 253, 254, 255, 256, 263, 264, 267, 269, 270, 271, 273, 274, 275, 276, 284, 285, 286, 310, 313, 338, 353, 359, 361, 371, 381, 382, 384, 386, 389, 390], "onto": [25, 27], "openml": [5, 6, 7, 8], "oper": [3, 10, 12, 13, 14, 15, 16, 21, 24, 101, 102, 121, 122, 123, 124, 125, 126, 151, 152, 155, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 178, 182, 185, 187, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 298, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 344, 346, 357, 358, 359, 360, 361, 364, 366, 368, 371, 373, 376, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 402], "operatornam": [22, 24, 243, 290, 291, 292, 293, 294], "opposit": 301, "optim": [3, 10, 13, 15, 16, 22, 24, 25, 27, 30, 35, 36, 39, 42, 44, 45, 51, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 82, 83, 87, 88, 90, 91, 92, 93, 145, 151, 153, 156, 157, 175, 246, 247, 248, 288, 298, 315], "optimizer_st": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "option": [1, 5, 6, 7, 8, 10, 12, 13, 14, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 160, 163, 167, 170, 172, 173, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 234, 239, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 301, 309, 311, 318, 320, 321, 322, 324, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 359, 360, 361, 368, 372, 373, 374, 376, 380, 383, 385, 386, 387, 389, 390, 394, 398, 399, 401], "ord": 23, "order": [1, 3, 10, 23, 27, 154, 155, 156, 157, 158, 372, 393], "ordered_dict": 158, "ordereddict": [152, 154, 155, 158], "organ": [154, 155, 156, 158, 316], "orient": 404, "origin": [31, 66, 80, 176, 212, 219, 241, 381, 382, 383, 384, 388, 391, 402], "orthogon": [24, 25, 27], "orthonorm": 25, "oscil": [301, 309, 311], "other": [2, 3, 15, 21, 66, 75, 77, 80, 90, 151, 152, 155, 158, 224, 225, 250, 251, 298, 299, 313, 315, 325, 326, 338, 340, 344, 346, 371, 380, 404], "otherwis": [104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 160, 163, 164, 165, 167, 178, 230, 232, 233, 234, 235, 237, 239, 252, 253, 254, 255, 256, 265, 281, 282, 283, 284, 285, 286, 291, 293, 299, 310, 316, 332, 333, 359, 361, 389, 390], "otim": [24, 185, 259], "out": [0, 3, 4, 10, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 224, 225, 228, 229, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 292, 301, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392], "out_channel": [77, 83, 87, 88, 155, 158, 213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 270, 271, 281, 282, 283, 284, 285, 286, 298], "out_featur": [154, 155, 158, 185, 187, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 247, 248, 250, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 273, 276, 281, 282, 283, 284, 285, 286], "outcom": [398, 399, 401], "outer": 348, "outlier": [190, 265], "output": [0, 1, 2, 10, 14, 15, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 185, 187, 199, 200, 201, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 321, 322, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 344, 346, 347, 357, 358, 359, 360, 361, 364, 366, 368, 371, 372, 373, 380, 381, 383, 385, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "output_height": 175, "output_lay": [155, 158], "output_s": [155, 199, 200, 201, 278, 279, 280], "output_width": 175, "output_with_norm": [209, 288], "output_with_pad": [209, 288], "outsid": [0, 252], "over": [0, 1, 2, 3, 13, 16, 82, 92, 101, 102, 131, 143, 152, 155, 157, 167, 199, 200, 201, 219, 239, 246, 247, 248, 264, 267, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 301, 302, 303, 304, 305, 320, 324, 359, 360, 361, 368, 371, 373, 398, 399, 401], "overal": [141, 178], "overdetermin": 24, "overfit": [1, 28, 143, 179, 182, 251, 253, 254, 255, 256, 301, 304, 309, 311], "overhead": [83, 145, 219], "overli": 236, "overrid": [2, 3, 90, 91, 92], "overridden": [152, 299], "overwrit": [154, 156], "own": [4, 154, 155, 156, 157, 171, 172, 173, 229, 298, 396], "p": [23, 24, 50, 153, 156, 157, 176, 177, 178, 179, 180, 181, 182, 209, 250, 251, 253, 254, 255, 256, 281, 284, 285, 288, 398, 399, 401, 404], "p_d": [283, 286], "p_h": [282, 283, 286], "p_w": [282, 283, 286], "packag": [2, 3, 4, 10, 16, 145, 298, 300, 316, 323, 325, 394, 404], "pad": [77, 155, 158, 171, 172, 173, 175, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 270, 271, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 379], "pad_after_dim1": 381, "pad_after_dim2": 381, "pad_before_dim1": 381, "pad_before_dim2": 381, "pad_width": 381, "padding_height": 175, "padding_idx": [209, 288], "padding_width": 175, "pair": 185, "pang": 145, "paper": 65, "parallel": [1, 3, 131, 145, 243], "param": [152, 153, 156, 157, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "param1": 152, "param_dict": 156, "param_group": [299, 300], "param_groups_setup": 299, "param_list": 157, "param_s": 316, "paramet": [0, 2, 15, 78, 79, 80, 145, 152, 298, 299, 300, 317, 325, 404], "parameter": 84, "parameterdict": 159, "parameterlist": 159, "parent": 298, "part": [151, 152, 229, 288, 298, 313, 315, 325, 338, 339, 342, 344, 345, 346, 347, 385, 389, 390, 394, 404], "partial": [17, 18, 19, 21, 22, 23, 24, 26, 27, 160, 161, 163, 164, 165, 166, 167, 168, 185, 187, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392], "particip": [153, 394], "particular": [154, 156], "particularli": [15, 24, 82, 90, 115, 116, 117, 118, 119, 120, 155, 156, 157, 158, 167, 177, 187, 213, 214, 215, 216, 217, 218, 239, 261, 264, 267, 273, 274, 275, 276, 305, 313, 316, 343, 393], "partit": 385, "pass": [2, 15, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 152, 153, 154, 155, 156, 157, 158, 211, 213, 214, 215, 219, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 298, 317, 326, 343, 360, 368, 371, 372, 373, 376, 378, 382, 384, 386, 389, 390, 392, 394, 404], "past": [301, 302, 304, 309], "patch": [175, 282], "path": [3, 5, 6, 7, 8, 30, 31, 68, 178, 252], "pathwai": 145, "pattern": [10, 12, 13, 14, 145, 164, 219, 235, 246, 247, 248], "penal": [301, 309, 311], "penalti": [302, 303, 304, 305, 306, 307, 308], "penros": 24, "per": [1, 12, 83, 115, 116, 117, 118, 119, 120, 132, 133, 134, 170, 199, 243, 273, 274, 275, 276, 278, 294, 375], "perceptron": 68, "perform": [3, 10, 13, 15, 16, 17, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 60, 61, 62, 63, 68, 69, 71, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 90, 91, 92, 93, 111, 127, 128, 129, 130, 131, 136, 143, 145, 149, 152, 153, 157, 161, 170, 171, 172, 173, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 296, 299, 313, 315, 323, 325, 327, 328, 331, 334, 337, 357, 359, 361, 368, 372, 375, 385, 393, 395, 397, 402, 404], "permut": [12, 372], "persist": [151, 318, 320, 321, 322, 324, 340, 341], "perturb": [19, 26, 27, 404], "phi": [161, 231], "pi": [161, 231, 354, 364, 369], "pico": [42, 145], "piecewis": [232, 233], "pil": [394, 404], "pinv": 20, "pioneer": 145, "pipelin": [5, 6, 7, 8, 325, 393, 394, 396], "pixel": [5, 6, 7, 8, 211, 296, 396, 398], "place": [222, 224, 225, 226, 227, 228, 229], "placehold": [152, 260], "plai": [317, 325], "plot": 380, "point": [4, 212, 313], "pointwis": [216, 217, 218], "pool": [10, 28, 77, 78, 79, 80, 94, 103, 114, 121, 131, 136, 143, 145, 199, 200, 201, 202, 203, 204, 206, 207, 208, 219, 220, 247, 248, 278, 279, 280, 281, 282, 283, 284, 285, 286, 359, 361], "pool1": 158, "pool2": 158, "poorli": 21, "popul": 152, "popular": [4, 145], "portion": [389, 390, 404], "pose": 24, "posit": [1, 17, 22, 147, 152, 158, 170, 212, 230, 234, 235, 237, 244, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 310, 314, 336, 383, 388, 397], "possibl": [15, 404], "potenti": [24, 260, 309, 386], "power": [10, 15, 22, 41, 82, 87, 88, 94, 145, 219, 314, 315, 348, 393, 394, 404], "pp": 145, "practic": [24, 71, 264, 267], "practition": 404, "pre": [60, 61, 62, 63, 104, 108, 109], "preactbottleneck": [104, 108, 109], "preced": [145, 153, 296, 326], "preconfigur": [52, 53, 54, 55, 56, 57, 58, 59, 74, 75], "predecessor": 31, "predefin": [4, 145, 155, 237, 288], "predict": [141, 263, 264, 266, 267], "prefix": [152, 316], "prepar": [3, 314, 381, 383, 388, 394, 404], "prepend": [152, 375], "preprint": 145, "preprocess": [3, 4, 175, 212, 325, 393, 394, 404], "present": [263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 282], "preserv": [13, 145, 176, 178, 212, 250, 252, 338, 339, 342, 344, 345, 346, 347, 360, 368, 373], "preset": 4, "prevent": [1, 10, 154, 155, 156, 157, 158, 170, 179, 182, 236, 244, 251, 253, 254, 255, 256, 263, 264, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 315], "previou": [145, 301, 310, 315], "previous": 304, "primari": [15, 317], "primarili": 158, "principl": 145, "print": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402], "priorit": [87, 88, 92, 220, 232], "prob": 318, "probabilist": 325, "probabl": [50, 66, 147, 161, 167, 170, 176, 177, 178, 179, 180, 181, 182, 188, 231, 239, 243, 244, 250, 251, 252, 253, 254, 255, 256, 263, 264, 267, 290, 292, 294, 318, 398, 399, 401, 404], "problem": [24, 25, 27, 145, 163, 230, 234, 308], "proceed": 145, "process": [2, 3, 4, 22, 25, 27, 28, 30, 74, 101, 102, 103, 131, 142, 143, 145, 157, 171, 172, 173, 197, 212, 213, 214, 215, 219, 220, 237, 241, 246, 248, 259, 269, 270, 271, 273, 274, 275, 276, 281, 283, 284, 286, 290, 291, 293, 301, 317, 380, 394, 395, 396, 397, 402, 404], "produc": [28, 143, 146, 199, 200, 201, 219, 246, 247, 248, 278, 279, 280, 323, 325], "product": [15, 25, 27, 170, 233, 238, 240, 243, 244, 259, 276, 298, 329, 330, 334, 335], "program": [313, 325], "progress": [51, 303], "project": [25, 27, 147, 243], "projector": 24, "promin": [281, 283, 284, 285, 286], "promot": [158, 264, 267, 298], "propag": [18, 19, 21, 24, 25, 26, 27, 145, 152, 158, 185, 187, 211, 219, 282, 283, 309, 310, 318, 329, 330, 331, 335, 359, 361, 380, 381, 384, 391], "proper": 209, "properli": [0, 157, 167, 239, 298], "properti": [16, 18, 21, 22, 161, 165, 176, 231, 237, 250, 303, 308], "proport": [5, 6, 7, 8, 373], "proportion": 402, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 29, 32, 41, 43, 64, 65, 66, 73, 77, 84, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 136, 141, 142, 144, 145, 147, 152, 154, 155, 156, 157, 161, 170, 187, 200, 201, 209, 212, 244, 263, 264, 265, 267, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 296, 298, 299, 300, 301, 302, 309, 311, 313, 315, 317, 323, 325, 326, 331, 338, 345, 359, 361, 372, 374, 383, 386, 388, 404], "pseudo": [21, 24], "purpos": [32, 37, 41, 320, 324, 338, 344, 346], "python": 317, "pytorch": 374, "q": [25, 145, 170, 243, 244, 294], "q_i": 243, "qk": [292, 294], "qr": 20, "quad": [24, 209, 243, 263, 264, 265, 266, 267, 284, 285, 286, 291, 293, 327, 328, 332, 333, 334, 337, 389, 390, 395], "quadrat": 265, "queri": [170, 243, 244, 294], "quoc": 145, "quotient": 328, "r": [13, 14, 25, 145, 243, 385, 398, 399, 400, 401], "r_t": 308, "radam": 312, "radix": [94, 95, 96, 97, 98, 99, 100, 101, 102], "rais": [0, 1, 2, 152, 298, 299, 336, 375], "rand": [319, 325], "randint": [319, 325], "randn": [12, 14, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 85, 86, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 141, 143, 170, 216, 217, 218, 219, 220, 243, 244, 290, 291, 292, 293, 294, 298, 319, 323, 325], "random": [1, 2, 3, 12, 14, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 85, 86, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 141, 170, 216, 217, 218, 219, 220, 243, 252, 288, 290, 291, 292, 293, 294, 397, 398, 399, 400, 401, 404], "random_integ": 325, "random_tensor": 325, "randomcrop": [403, 404], "randomgrayscal": [403, 404], "randomhorizontalflip": [403, 404], "randomli": [1, 176, 178, 179, 180, 181, 182, 212, 250, 253, 254, 255, 256, 397, 398, 399, 400, 401, 404], "randomnoisedataset": [0, 1, 2], "randomrot": [403, 404], "randomverticalflip": 403, "rang": [0, 1, 16, 34, 43, 93, 103, 111, 145, 157, 166, 168, 171, 172, 178, 189, 193, 229, 236, 238, 241, 252, 301, 309, 311, 318, 321, 343, 350, 351, 353, 396, 400, 404], "rank": 24, "rasul": 7, "rate": [30, 31, 50, 51, 68, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "rather": [7, 12, 14, 156, 157, 305, 384], "ratio": [50, 68, 121, 219, 220, 402], "ravel": 379, "raw": [167, 239, 264, 317], "re": [153, 315], "readabl": [10, 154, 155, 156, 158, 298, 317], "readi": [3, 15, 127, 128, 129, 130, 135, 145, 147], "real": [24, 27, 82, 238], "rearrang": [11, 175], "reassembl": 145, "recalibr": [122, 124, 125, 127, 128, 129, 130, 145, 219], "receiv": [284, 285, 286, 381, 389, 390], "recent": 309, "recept": [131, 135, 145, 220], "reciproc": [24, 348, 358, 366], "recognit": [80, 101, 102, 145, 247], "rectangular": 342, "rectif": 308, "rectifi": [163, 164, 234, 235, 308], "recurr": [145, 155, 276], "recurs": [146, 152], "red": 398, "reduc": [11, 28, 81, 103, 114, 131, 136, 143, 145, 216, 217, 218, 219, 269, 270, 271, 273, 274, 275, 281, 282, 283, 284, 285, 286, 307, 310, 315, 317, 359, 360, 361, 368, 373, 398], "reduct": [10, 13, 27, 50, 121, 188, 189, 190, 192, 193, 219, 220, 263, 264, 265, 266, 267, 359, 361], "reevalu": 299, "refer": [4, 15, 152, 325, 339, 342, 376], "refin": 145, "reflect": 313, "regardless": [24, 382], "region": [173, 177, 199, 200, 201, 211, 232, 251, 279, 280, 381, 395, 404], "regist": [90, 112, 113, 115, 116, 117, 118, 119, 120, 142, 151, 152, 153, 157, 298, 316], "register_buff": 151, "register_model": [29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 133, 134, 137, 138, 139, 140, 142, 144, 148, 149], "register_paramet": 152, "registr": [152, 298], "registri": [115, 116, 117, 118, 119, 120, 316], "registry_path": 316, "regress": [4, 192, 265, 266], "regul": [209, 288], "regular": [24, 28, 30, 50, 51, 66, 143, 178, 182, 244, 251, 253, 254, 255, 256, 301, 302, 303, 306, 307, 308, 309, 311], "reimagin": 145, "relat": [315, 342, 344], "relationship": 402, "relev": [211, 301, 309, 311], "reli": [177, 315], "reliabl": [5, 6, 7, 8], "reliant": [253, 254, 255, 256], "relu": [15, 28, 121, 136, 143, 145, 146, 154, 155, 156, 158, 160, 162, 163, 184, 213, 214, 215, 219, 220, 224, 225, 228, 229, 230, 234, 236, 240, 242, 246, 247, 248, 258, 259, 260, 261, 290, 292, 294], "relu1": 158, "relu2": 158, "relu3": 158, "relu6": [242, 258], "remain": [5, 6, 7, 8, 43, 151, 178, 198, 250, 252, 253, 254, 255, 256, 288, 310], "rememb": 325, "remov": [316, 386], "reorder": [10, 12], "rep": 388, "repeat": [11, 379, 380, 388], "repetit": [10, 14, 383, 388], "replac": [7, 145, 290, 325, 398], "replic": [14, 291, 293, 375], "repres": [7, 12, 13, 14, 21, 23, 27, 77, 84, 95, 96, 97, 98, 99, 100, 152, 153, 158, 185, 187, 194, 197, 198, 209, 246, 247, 248, 259, 261, 264, 267, 276, 288, 291, 299, 300, 301, 307, 308, 309, 310, 311, 317, 318, 327, 328, 334, 337, 339, 360, 371, 372, 373, 380, 395, 397, 399, 400, 401, 402], "represent": [94, 101, 102, 112, 113, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 135, 145, 147, 209, 219, 282, 285, 288, 299], "reproduc": [318, 320, 321, 322, 323, 324, 325, 404], "requir": [2, 3, 4, 13, 15, 33, 39, 40, 72, 83, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 115, 116, 117, 118, 119, 120, 131, 149, 151, 154, 158, 160, 161, 163, 164, 165, 166, 168, 185, 187, 211, 219, 220, 229, 260, 264, 267, 298, 313, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 391, 392, 394, 395, 402], "requires_grad": [151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 175, 185, 187, 209, 211, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 296, 298, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 394], "rescal": [188, 189, 193, 263, 264, 267], "research": 298, "reset": [153, 323, 326], "reshap": [10, 12, 15, 121, 187, 247, 248, 296, 314, 317, 379, 382], "residu": [67, 73, 74, 75, 82, 83, 86, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 124, 125, 126, 145, 292, 294], "residualblock": 103, "resili": 310, "resiz": [211, 393, 403, 404], "resnest": [76, 95, 96, 97, 98, 99, 100, 101, 102, 145], "resnest_101": 145, "resnest_14": 145, "resnest_200": 145, "resnest_26": 145, "resnest_269": 145, "resnest_50": 145, "resnest_50_1s4x24d": 145, "resnest_50_4s2x40d": 145, "resnet": [73, 74, 75, 76, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 131, 132, 133, 134, 145, 219], "resnet_1001": 145, "resnet_101": 145, "resnet_152": 145, "resnet_18": 145, "resnet_200": 145, "resnet_269": 145, "resnet_34": 145, "resnet_50": 145, "resnet_arg": 131, "resnext": [76, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 135, 145], "resnext_101_32x16d": 145, "resnext_101_32x32d": 145, "resnext_101_32x4d": 145, "resnext_101_32x8d": 145, "resnext_101_64x4d": 145, "resnext_50_32x4d": 145, "resolut": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 68, 127, 128, 129, 130, 135, 145], "resolv": [12, 13, 14], "resourc": [35, 36, 38, 39, 42, 43, 69, 83, 87, 88, 89, 90, 91, 92, 93, 145, 315], "respect": [12, 17, 18, 19, 21, 22, 23, 24, 25, 27, 77, 136, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 185, 187, 211, 220, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 353, 357, 358, 359, 360, 361, 364, 366, 368, 371, 372, 373, 380, 381, 383, 388, 398], "respons": [127, 128, 129, 130, 145, 154, 195, 272, 300], "rest": [389, 390], "restor": [219, 315], "restructur": 384, "result": [10, 12, 14, 17, 21, 22, 24, 145, 152, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 185, 187, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 220, 232, 236, 239, 243, 252, 298, 299, 313, 315, 318, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 394, 397, 398, 404], "resum": 300, "retain": [153, 177, 251, 326, 338, 346, 359, 360, 361, 368, 373, 389, 390, 394], "retent": 394, "rethink": 145, "retriev": [0, 2, 154, 156, 157, 209], "return": [0, 1, 2, 3, 5, 6, 7, 8, 15, 73, 77, 91, 93, 121, 151, 152, 154, 155, 156, 157, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 291, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 393, 404], "reus": [145, 394], "reusabl": [158, 252, 298, 393], "revers": [15, 158, 372, 399, 401], "revert": 315, "revolution": 145, "rgb": [5, 6, 65, 66, 67, 74, 75], "rho": 302, "rho_": 308, "rho_t": 308, "right": [22, 23, 24, 26, 27, 161, 167, 231, 239, 243, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 284, 285, 286, 292, 294, 395], "rightarrow": [12, 243, 385], "risk": 317, "rmsprop": 312, "rob": 145, "robust": [32, 37, 70, 91, 177, 212, 250, 253, 254, 255, 256, 265, 298, 302, 397, 398, 400, 404], "roland": 7, "role": [317, 325, 404], "root": [4, 5, 6, 7, 8, 303, 309, 366], "rotat": [184, 210, 400, 404], "rotated_imag": 212, "rout": [284, 285, 286], "routin": 15, "row": [18, 19, 21, 26, 187, 209, 342, 380, 389, 390, 392], "rprop": 312, "rule": [14, 21, 22, 314, 327, 328, 332, 333, 334, 336, 337], "run": [15, 151, 194, 197, 213, 214, 215, 269, 270, 271, 273, 274, 275, 302, 315, 323, 325], "running_mean": [151, 194, 197, 269, 270, 271, 273, 274, 275], "running_var": [194, 197, 269, 270, 271, 273, 274, 275], "runtim": [51, 155, 158, 252, 298, 343], "s_": 310, "s_1": 385, "s_2": 385, "s_d": [283, 286], "s_h": [282, 283, 286], "s_i": 385, "s_n": 385, "s_w": [282, 283, 286], "sain": 145, "same": [18, 19, 21, 22, 26, 167, 176, 177, 178, 179, 180, 181, 182, 194, 195, 197, 198, 200, 201, 212, 213, 214, 215, 216, 217, 218, 220, 236, 246, 247, 248, 250, 253, 254, 255, 256, 260, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 310, 318, 323, 325, 331, 341, 345, 347, 357, 359, 360, 361, 376, 378, 382, 384, 386, 387, 389, 390, 392, 396], "sampl": [0, 1, 2, 3, 5, 6, 7, 8, 15, 60, 61, 62, 63, 65, 66, 67, 74, 75, 77, 78, 79, 80, 85, 86, 94, 95, 96, 97, 98, 99, 100, 101, 102, 127, 128, 129, 130, 135, 199, 200, 201, 224, 225, 226, 227, 228, 229, 250, 253, 254, 255, 256, 259, 261, 264, 267, 276, 278, 279, 280, 318, 322, 325, 343, 395, 397, 399, 400, 401, 402], "sandler": 145, "satisfi": [17, 19, 26, 385], "satur": [230, 404], "save": [2, 151, 153, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316], "scalabl": [3, 37, 50, 115, 116, 117, 118, 119, 120, 141, 145, 298], "scalar": [18, 23, 188, 189, 190, 192, 193, 317, 318], "scale": [13, 19, 24, 30, 36, 38, 39, 40, 42, 44, 45, 50, 51, 68, 74, 78, 79, 80, 81, 85, 89, 90, 92, 93, 94, 101, 102, 104, 105, 106, 109, 122, 123, 131, 132, 133, 134, 145, 160, 165, 167, 170, 178, 194, 195, 197, 198, 209, 219, 220, 228, 229, 230, 232, 234, 237, 238, 239, 241, 243, 244, 250, 252, 253, 254, 255, 256, 264, 269, 270, 271, 272, 273, 274, 275, 276, 288, 296, 301, 303, 304, 305, 317, 325, 373, 402], "scale_by_keep": [178, 252], "scale_factor": 296, "scaled_dot_product_attent": [169, 184], "scaleddotproductattent": [245, 258], "scenario": [35, 40, 42, 90, 91, 92, 93, 156, 157, 276, 305, 306, 394, 398], "schedul": [251, 301], "scientif": 314, "score": [103, 114, 131, 167, 170, 244, 264], "scratch": 15, "script": 325, "se": [50, 122, 123, 124, 125, 126, 127, 128, 129, 130, 145], "se_resnet_101": 145, "se_resnet_152": 145, "se_resnet_18": 145, "se_resnet_34": 145, "se_resnet_50": 145, "se_resnext_101_32x4d": 145, "se_resnext_101_32x8d": 145, "se_resnext_101_64x4d": 145, "se_resnext_50_32x4d": 145, "se_scal": 50, "seamless": [0, 1, 3, 4, 13, 298, 325], "seamlessli": [3, 4, 10, 12, 14, 16, 153, 155, 158, 298, 317, 404], "search": 145, "second": [19, 155, 156, 185, 219, 259, 304, 305, 306, 307, 308, 314, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 378, 380, 401], "section": 331, "see": [15, 331], "seed": [318, 319, 320, 321, 322, 324, 325, 404], "seek": 93, "seen": 302, "select": [13, 14, 131, 132, 133, 134, 135, 145, 211, 219, 220, 284, 286, 368], "selectivekernel": 221, "self": [0, 1, 2, 3, 15, 28, 50, 51, 64, 68, 73, 77, 81, 82, 83, 84, 94, 121, 136, 143, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 165, 178, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 393, 394], "selfattent": 294, "selu": [162, 176, 184, 242, 250, 258], "selunetwork": 237, "semodul": 221, "senet": [76, 122, 123, 124, 125, 126, 127, 128, 129, 130, 145], "sensit": [190, 265, 269, 270, 271], "sentiment": 4, "separ": [0, 81, 101, 102, 141, 145, 171, 172, 173, 216, 217, 218, 273, 274, 275], "seq_len": [170, 243, 244, 290, 291, 292, 293, 294], "sequenc": [22, 103, 114, 131, 147, 154, 156, 170, 171, 243, 288, 290, 291, 293, 294, 338, 343, 376, 378, 381, 383, 387, 388, 392, 393], "sequenti": [28, 73, 77, 121, 136, 141, 143, 145, 146, 154, 155, 159, 171, 213, 214, 215, 260, 291, 293, 393, 404], "seri": [64, 78, 79, 131, 171, 213, 246, 281, 284], "serial": [151, 152, 300], "serv": [3, 7, 45, 73, 121, 136, 147, 152, 154, 155, 156, 157, 158, 298, 310, 394], "set": [3, 4, 5, 6, 7, 8, 89, 90, 91, 101, 102, 112, 113, 127, 128, 129, 130, 135, 146, 153, 157, 170, 171, 172, 173, 209, 234, 235, 237, 244, 246, 247, 248, 250, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 288, 299, 304, 305, 309, 318, 320, 321, 322, 323, 324, 325, 326, 338, 340, 341, 346, 347, 353, 359, 361, 374, 389, 390, 394, 398, 404], "setup": [4, 15, 115, 116, 117, 118, 119, 120], "sever": [24, 246, 247, 248, 281, 282, 283, 284, 285, 286, 315, 393, 404], "sgd": [15, 301, 308, 312], "sgn": 23, "shape": [3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 21, 22, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 68, 69, 70, 71, 72, 73, 77, 83, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 141, 143, 145, 146, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 298, 314, 317, 318, 320, 321, 322, 324, 325, 326, 329, 340, 341, 342, 344, 345, 346, 347, 353, 358, 359, 360, 361, 364, 366, 368, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 404], "shapelik": 321, "share": 145, "shen": 219, "shift": [194, 195, 197, 198, 232, 269, 270, 271, 272, 273, 274, 275, 276], "shorthand": 331, "should": [12, 13, 14, 77, 151, 290, 291, 292, 293, 294, 315, 318, 320, 321, 322, 324, 340, 341, 350, 351, 371, 375, 381, 393], "show": [313, 316], "showcas": 15, "shown": [240, 323], "shrink": 302, "shuffl": [1, 2, 3], "side": [26, 155, 158, 171, 172, 173, 202, 203, 204, 206, 207, 208, 213, 214, 215, 246, 247, 248, 281, 282, 283, 284, 285, 286, 315], "sigma": [24, 219, 224, 226, 228, 238, 240, 269, 270, 271, 273, 274, 275, 276, 372], "sigma_c": 396, "sigma_i": 24, "sigmoid": [162, 184, 219, 224, 225, 228, 229, 232, 233, 240, 242, 258, 263], "sigmoidnetwork": 238, "sign": [22, 265, 310, 348], "signal": [213, 246, 247, 248, 269, 273, 281, 282, 283, 284, 285, 286], "signific": [33, 315], "significantli": [82, 114, 145, 219, 393], "sim": [250, 253, 254, 255, 256], "similar": [10, 15, 224, 225, 331, 358, 374, 375, 381], "similarli": [27, 371], "simonyan": 145, "simpl": [3, 4, 15, 146, 158, 171, 172, 173, 185, 187, 202, 203, 204, 206, 207, 208, 231, 232, 233, 235, 236, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 329, 330, 335, 393], "simplebinaryclassificationmodel": 263, "simpleblock": 178, "simpleclassificationmodel": [264, 267], "simplegelumodel": 231, "simplehardsigmoidmodel": 232, "simplehardswishmodel": 233, "simpleleakyrelumodel": 234, "simplemodel": [15, 146, 236, 252, 261, 316], "simpleregressionmodel": 266, "simplerelumodel": 235, "simpleselumodel": 237, "simplesigmoidmodel": 238, "simpleswishmodel": 240, "simpletanhmodel": 241, "simpli": [313, 371, 372, 384], "simplic": [145, 232, 235], "simplifi": [4, 12, 14, 60, 61, 62, 63, 78, 142, 145, 158, 213, 214, 215], "simul": [146, 404], "simultan": 212, "sin": [348, 354], "sinc": [22, 25, 154, 155, 156, 157, 171, 172, 173, 229, 313, 315, 318, 322, 380, 404], "sine": [351, 364, 365], "singl": [0, 4, 22, 25, 27, 103, 167, 213, 214, 215, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 264, 276, 282, 283, 284, 285, 286, 291, 292, 293, 294, 299, 317, 324, 340, 343, 376, 386, 396, 398, 404], "singleton": [14, 276], "singular": [18, 21, 22, 24, 26, 27], "sinh": [348, 355, 370], "size": [0, 1, 2, 3, 10, 12, 13, 14, 27, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 68, 71, 77, 78, 79, 80, 84, 85, 87, 88, 103, 131, 143, 145, 146, 147, 148, 149, 153, 155, 170, 171, 172, 173, 175, 177, 180, 181, 182, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 243, 246, 247, 248, 251, 259, 261, 263, 264, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 293, 294, 296, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 321, 324, 325, 326, 359, 360, 361, 368, 373, 375, 376, 378, 385, 386, 391, 392, 395, 397, 402, 404], "size_or_sect": 385, "sk": [131, 132, 133, 134, 135, 145, 220], "sk_resnet_18": 145, "sk_resnet_34": 145, "sk_resnet_50": 145, "sk_resnext_50_32x4d": 145, "skblock": 131, "skip": [145, 315], "sknet": [76, 132, 133, 134, 135, 145], "slice": [185, 371], "slide": [175, 281, 283, 284, 286], "slight": 219, "slightli": 404, "slope": [163, 230, 234], "slow": [3, 308], "small": [24, 34, 36, 38, 41, 60, 61, 62, 63, 70, 71, 78, 79, 80, 83, 87, 88, 91, 145, 163, 177, 188, 189, 194, 195, 197, 198, 234, 237, 251, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 282, 285, 290, 292, 294, 302, 303, 304, 305, 306, 307, 308, 309, 310], "smaller": [10, 35, 60, 61, 62, 63, 89, 143, 145, 155, 158, 298, 303, 304, 333, 395, 397, 402], "smallest": 361, "smooth": [66, 161, 230, 231, 240, 301, 309, 404], "smoother": 301, "so": [154, 155, 156, 157, 212, 298, 308, 340, 341, 393], "softmax": [162, 170, 184, 220, 242, 243, 244, 258, 264, 292, 294], "softmaxmodel": 239, "solut": [24, 26], "solv": [16, 17, 20, 24, 25, 27], "solver": 16, "some": [160, 178, 179, 212, 250, 252, 253, 254, 269, 270, 271, 273, 274, 275, 303, 304, 305, 315, 317], "sometim": 314, "sophist": [155, 158], "sourc": [147, 148, 149, 170, 290, 325], "space": [19, 25, 27, 147, 171, 172, 173, 175, 199, 200, 201, 213, 214, 215, 216, 217, 218, 246, 247, 248, 278, 279, 280, 338, 343, 404], "span": 4, "spars": [303, 304], "spatial": [28, 103, 114, 131, 136, 143, 145, 177, 195, 214, 219, 247, 248, 269, 270, 271, 273, 274, 275, 276, 282, 283, 284, 285, 286, 296, 380], "spatial_dim": 219, "spatio": 248, "special": [0, 1, 15, 24, 151, 152, 153, 250, 325], "specif": [4, 15, 46, 47, 48, 49, 60, 61, 62, 63, 73, 81, 89, 90, 91, 92, 93, 101, 102, 112, 113, 154, 155, 156, 157, 158, 220, 229, 250, 253, 254, 255, 256, 273, 274, 275, 288, 298, 299, 313, 325, 340, 359, 361, 383, 388], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 23, 29, 45, 51, 77, 84, 85, 86, 89, 90, 91, 92, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 133, 134, 136, 137, 138, 139, 140, 142, 144, 146, 155, 167, 175, 182, 188, 189, 190, 192, 193, 198, 199, 200, 201, 209, 211, 212, 219, 239, 243, 246, 247, 248, 263, 264, 265, 266, 267, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 296, 299, 317, 320, 321, 322, 323, 324, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 353, 359, 360, 361, 368, 372, 373, 374, 375, 376, 378, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 402, 404], "speech": 273, "speed": [87, 88, 232, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "split": [4, 94, 101, 102, 145, 243, 376, 378, 379, 392], "split_tensor": 385, "springer": 145, "sqrt": [161, 170, 195, 224, 225, 228, 229, 231, 243, 244, 269, 270, 271, 272, 273, 274, 275, 276, 292, 294, 302, 303, 304, 305, 307, 308, 309, 348, 350, 351], "squar": [1, 3, 17, 18, 19, 21, 22, 24, 25, 26, 27, 177, 190, 192, 251, 265, 266, 302, 303, 304, 309, 348, 366], "squaredataset": [0, 1, 2, 3], "squeez": [50, 83, 87, 88, 121, 124, 127, 128, 129, 130, 145, 219, 379], "src": [145, 290, 293, 294], "src_key_pad": 293, "src_key_padding_mask": [290, 294], "src_mask": [290, 293, 294], "src_vocab_s": [147, 148, 149], "stabil": [21, 24, 145, 177, 188, 189, 194, 195, 197, 198, 209, 213, 214, 215, 236, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 288, 290, 292, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 396], "stabl": [224, 225, 228, 229, 250, 264, 301, 305, 306, 309, 310, 311], "stack": [14, 158, 220, 290, 291, 293, 378, 379, 392, 404], "stage": [30, 31, 68, 94, 95, 96, 97, 98, 99, 100, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 131, 132, 133, 134, 145], "stage1": 121, "stage2": 121, "stage3": 121, "stage4": 121, "standalon": 236, "standard": [32, 37, 70, 89, 92, 103, 112, 113, 147, 148, 161, 163, 216, 217, 218, 224, 226, 228, 230, 231, 234, 250, 290, 310, 322, 325, 331, 393, 396, 404], "start": [1, 3, 10, 301, 303, 310, 338, 343, 395, 397], "state": [39, 145, 151, 152, 153, 155, 158, 299, 313, 315, 323], "state_dict": [152, 153, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "static": 158, "statist": [24, 176, 194, 197], "std": [5, 6, 7, 8, 226, 393, 396, 404], "stem": [73, 94, 103, 114, 131, 145], "stem_typ": 103, "stem_width": [94, 95, 96, 97, 98, 99, 100, 103], "step": [10, 153, 175, 220, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 338, 393, 394], "step_siz": 310, "still": [42, 302], "stochast": [15, 30, 31, 50, 51, 68, 178, 252, 301, 311], "stochastic_depth": 50, "stop": [338, 343], "storag": [154, 156, 326], "store": [2, 4, 5, 6, 7, 8, 103, 114, 131, 151, 152, 153, 154, 155, 156, 157, 219, 278, 279, 280, 315, 326, 395, 396, 397, 398, 399, 400, 401, 402], "str": [5, 6, 7, 8, 10, 12, 13, 14, 84, 103, 136, 152, 154, 156, 158, 188, 189, 190, 192, 193, 211, 296, 299, 316, 380], "straightforward": [311, 313, 327], "strategi": [92, 300], "streamlin": [2, 3, 145], "strength": 251, "strict": [152, 299], "stride": [51, 77, 78, 79, 80, 83, 84, 87, 88, 155, 158, 171, 172, 173, 175, 199, 200, 201, 202, 203, 204, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 278, 279, 280, 281, 282, 283, 284, 285, 286], "stride_height": 175, "stride_width": 175, "strike": [37, 84, 91], "string": [10, 12, 13, 14, 152, 154, 156, 158, 246, 247, 248, 299], "structur": [0, 10, 13, 15, 25, 51, 83, 141, 151, 152, 155, 177, 251, 298, 299, 316, 317, 342, 394], "style": [10, 73, 197, 273, 274, 380], "sub": [154, 155, 156, 157, 158, 298, 348, 385, 395, 397], "sub_tensor": 326, "subclass": [1, 2, 3, 15, 152, 153, 154, 298, 299], "sublay": [146, 290, 292, 294], "submodul": [146, 152, 298], "subsequ": [155, 158, 229, 325], "subset": [101, 102, 253, 254], "subspac": 243, "subtract": [15, 337, 396], "suffer": 303, "suit": [42, 46, 47, 48, 49, 66, 81, 89, 90, 92, 131, 224, 225, 228, 229], "suitabl": [32, 34, 35, 38, 40, 52, 53, 54, 55, 56, 57, 58, 59, 73, 78, 79, 80, 82, 87, 88, 90, 93, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 126, 145, 148, 265, 303, 304, 320], "sum": [10, 13, 23, 154, 155, 156, 157, 158, 167, 170, 188, 189, 190, 192, 193, 220, 239, 263, 264, 265, 266, 267, 303, 327, 330, 335, 348, 371, 373, 375, 376, 378, 380, 383, 385, 388, 392], "sum_": [12, 13, 22, 167, 195, 239, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 329, 330, 360, 368, 371, 373, 375, 380, 383], "sum_i": [23, 335], "sum_j": 335, "sum_k": 331, "summar": [50, 112, 113, 141, 281, 282, 283], "summari": [112, 113, 127, 128, 129, 130, 135], "summat": [10, 12, 13, 14, 22], "sun": 219, "super": [15, 146, 151, 152, 153, 154, 155, 156, 157, 178, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 252, 253, 254, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316], "superior": 44, "supplementari": 92, "support": [1, 3, 4, 12, 15, 16, 22, 23, 24, 25, 27, 85, 103, 154, 155, 156, 157, 158, 170, 211, 212, 244, 288, 296, 298, 300, 307, 325, 326, 327, 328, 331, 332, 333, 334, 336, 337, 339, 342, 353, 358, 360, 364, 366, 368, 371, 372, 373, 376, 380, 384, 385, 394, 404], "suppos": 404, "sure": [298, 404], "svd": [20, 24], "swap": 12, "swish": [87, 88, 242, 258], "symbol": [12, 13, 14], "symmetr": [17, 199, 200, 201, 228, 229, 241], "syntax": [1, 10, 12, 13, 14, 331], "system": [16, 17, 24, 25, 26, 91, 145, 313, 380], "systemat": [145, 404], "szegedi": [65, 145], "t": [10, 24, 145, 290, 291, 292, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 326, 331, 374, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "t0": 301, "t1": 374, "t2": 374, "t_": 291, "t_0": 291, "t_i": 291, "tabl": [50, 288], "tabular": 4, "tailor": [4, 83, 91, 95, 96, 97, 98, 99, 100, 298, 404], "take": [25, 281, 282, 283, 284, 285, 286, 296, 315, 393], "taken": 371, "tan": [145, 348], "tangent": [168, 241, 352, 369, 370], "tanh": [77, 155, 158, 161, 162, 184, 224, 225, 228, 229, 231, 242, 258, 348], "tanhnetwork": 241, "target": [5, 6, 7, 8, 42, 147, 148, 149, 158, 188, 189, 190, 192, 193, 199, 200, 201, 211, 263, 264, 265, 266, 267, 278, 279, 280, 290, 291, 292, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 375, 395, 397, 402], "target_tensor": [263, 264, 265, 266, 267], "target_transform": [5, 6, 7, 8], "task": [4, 15, 16, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 141, 145, 147, 148, 149, 166, 167, 172, 185, 188, 189, 192, 193, 219, 220, 238, 239, 246, 247, 248, 263, 264, 265, 266, 267, 273, 274, 275, 281, 283, 284, 286, 290, 304, 314, 325, 342, 343, 404], "techniqu": [17, 21, 30, 51, 68, 92, 143, 145, 178, 194, 250, 251, 253, 254, 255, 256, 273, 274, 275, 300, 402, 404], "templat": 147, "tempor": [246, 248, 283, 286], "temporarili": 315, "tensor": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 60, 61, 62, 63, 65, 66, 67, 73, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 103, 115, 116, 117, 118, 119, 120, 121, 132, 133, 134, 136, 141, 143, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 313, 315, 317, 318, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "term": [12, 24, 43, 185, 213, 214, 215, 216, 217, 218, 243, 290, 292, 294, 301, 305, 307, 308, 309, 311], "test": [4, 5, 6, 7, 8, 343], "test_backward": 146, "test_siz": [5, 6, 7, 8], "text": [4, 18, 22, 23, 103, 114, 131, 132, 133, 134, 141, 154, 160, 163, 164, 165, 167, 170, 171, 172, 173, 178, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 266, 267, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 321, 327, 328, 330, 332, 333, 334, 336, 337, 349, 353, 359, 360, 361, 363, 368, 373, 375, 376, 378, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 396, 397, 399, 400, 401], "tgt": [145, 290, 291, 292], "tgt_is_caus": [291, 292], "tgt_key_padding_mask": [290, 291, 292], "tgt_mask": [290, 291, 292], "tgt_vocab_s": [147, 148, 149], "th": [185, 263, 264, 266, 267, 273, 274, 275, 332, 333, 336], "than": [0, 1, 7, 12, 14, 156, 157, 160, 163, 190, 216, 217, 218, 230, 234, 240, 265, 299, 305, 343, 353, 371, 375, 381, 387, 395, 397, 402], "thei": [0, 15, 27, 145, 151, 155, 157, 158, 243, 317, 380, 384, 395, 397, 404], "them": [3, 10, 145, 152, 157, 175, 301, 314, 376, 387, 393, 396, 404], "therebi": [250, 282, 283, 285, 286], "theta": [301, 302, 400], "theta_": [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "theta_t": [308, 309], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 65, 66, 67, 73, 74, 75, 77, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 145, 146, 147, 151, 153, 155, 156, 157, 158, 164, 166, 167, 168, 171, 172, 173, 175, 177, 178, 185, 187, 199, 209, 211, 212, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 278, 281, 282, 283, 284, 285, 286, 288, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 321, 322, 323, 325, 326, 330, 331, 335, 338, 340, 344, 345, 346, 347, 353, 357, 358, 359, 360, 361, 364, 366, 368, 371, 372, 373, 374, 375, 381, 383, 384, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "thing": 315, "those": [15, 78, 79, 80, 157, 229], "three": [27, 80, 173, 201, 204, 208, 213, 214, 215, 248, 256, 271, 275, 280, 283, 286], "threshold": [24, 190, 265], "through": [0, 3, 4, 14, 15, 19, 24, 25, 27, 28, 30, 64, 73, 77, 84, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 133, 134, 142, 143, 145, 154, 155, 158, 177, 185, 187, 211, 219, 220, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 318, 322, 329, 330, 335, 380, 382, 384, 386, 389, 390, 391, 404], "throughout": [147, 165, 394], "tier": 39, "tile": [14, 379], "time": [0, 3, 22, 78, 79, 80, 82, 171, 213, 234, 237, 243, 246, 281, 282, 283, 284, 285, 286, 291, 293, 301, 302, 303, 304, 305, 309, 311, 315, 383, 388], "tini": [34, 35, 43, 68, 72, 145], "to_tensor": [5, 6, 7, 8], "togeth": [158, 393, 404], "token": [68, 288], "token_mix": 68, "too": 310, "tool": [3, 15, 298, 314, 325, 393, 404], "top": [17, 18, 19, 25, 27, 39, 170, 185, 187, 211, 243, 244, 246, 247, 248, 259, 261, 395, 397], "torch": [136, 374], "toronto": [5, 6], "total": [0, 1, 2, 5, 6, 7, 8, 10, 12, 14, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 146, 148, 149, 153, 243, 326, 384], "totensor": [393, 404], "trace": [16, 348], "track": [15, 213, 214, 215, 269, 270, 271, 273, 274, 275, 298, 313, 315, 318, 320, 321, 322, 324, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 375, 394], "track_running_stat": [213, 214, 215, 269, 270, 271, 273, 274, 275], "trade": [34, 90], "tradit": [7, 10, 93, 145, 302, 303, 306, 307, 308], "trail": 198, "train": [1, 2, 3, 4, 5, 6, 7, 8, 15, 30, 51, 64, 65, 66, 127, 128, 129, 130, 135, 145, 146, 147, 151, 152, 155, 157, 158, 167, 176, 177, 178, 179, 180, 181, 182, 194, 197, 209, 212, 231, 234, 237, 238, 239, 241, 250, 251, 252, 253, 254, 255, 256, 269, 270, 271, 273, 274, 275, 288, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 393, 396, 397, 398, 399, 400, 401, 404], "trainabl": [146, 269, 270, 271, 273, 274, 275, 288, 298], "transact": 219, "transfer": [197, 273, 274], "transform": [2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 19, 30, 148, 149, 156, 170, 185, 187, 243, 244, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 291, 292, 293, 294, 314, 380], "transform_pipelin": [393, 404], "transformed_imag": [393, 404], "transformer_bas": 145, "transformer_big": 145, "transformer_decod": 291, "transformer_encod": 293, "transformerdecod": [258, 290, 295], "transformerdecoderlay": [258, 290, 291, 295], "transformerencod": [258, 290, 295], "transformerencoderlay": [258, 290, 293, 295], "transit": [45, 265], "translat": [147, 282, 285, 290], "transpos": [12, 15, 17, 348], "transposit": 12, "treat": [0, 151, 276, 298], "triangular": [17, 25, 291, 292, 293, 294, 389, 390], "tril": 379, "triu": 379, "true": [1, 2, 3, 4, 5, 6, 7, 8, 27, 64, 65, 66, 87, 88, 94, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 175, 176, 178, 179, 180, 181, 182, 185, 187, 194, 197, 209, 211, 213, 214, 215, 216, 217, 218, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 296, 298, 299, 304, 305, 309, 313, 318, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 394], "truncat": 146, "truncate_from": 146, "try": 0, "tune": [90, 93, 404], "tupl": [2, 3, 5, 6, 7, 8, 19, 23, 25, 27, 45, 103, 146, 152, 153, 171, 172, 173, 175, 198, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 246, 247, 248, 260, 276, 279, 280, 281, 282, 283, 284, 285, 286, 296, 304, 305, 306, 307, 308, 310, 317, 320, 321, 322, 324, 326, 340, 344, 346, 359, 360, 361, 368, 373, 375, 376, 378, 380, 381, 384, 385, 386, 387, 391, 392, 395, 396, 397, 402], "twice": 381, "two": [15, 18, 19, 21, 22, 24, 25, 27, 78, 79, 80, 83, 101, 102, 132, 136, 171, 172, 173, 185, 203, 207, 219, 220, 247, 255, 259, 270, 274, 282, 285, 294, 304, 305, 306, 307, 308, 310, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 371, 380, 385], "type": [68, 77, 94, 103, 121, 131, 151, 152, 153, 185, 259, 290, 292, 294, 326, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 380, 394], "typeerror": [0, 1, 2, 152, 299], "typic": [16, 84, 90, 103, 114, 131, 151, 167, 176, 177, 212, 219, 236, 237, 239, 251, 252, 267, 269, 270, 271, 273, 274, 275, 300, 301, 309, 311, 315, 317, 391, 394, 396, 400, 402, 404], "u": [24, 27, 225, 227, 229], "u_": 306, "ultra": [36, 109], "unchang": [151, 182, 230, 234, 235, 237, 250, 253, 254, 255, 256, 260, 382, 386], "undefin": 336, "under": [115, 116, 117, 118, 119, 120, 298], "underbrac": 22, "underdetermin": 24, "undergo": [178, 294, 404], "underli": [0, 15, 60, 61, 62, 63, 65, 66, 67, 74, 75, 374, 378, 382, 384, 392], "understand": [15, 143, 145, 146, 158, 404], "understood": 12, "unexpect": [10, 152, 155, 158, 325], "unfold": [174, 184], "unifi": 0, "uniform": [223, 225, 229, 246, 247, 248, 259, 261, 319, 320, 321, 325, 398, 399, 400, 401], "uniformli": [320, 324], "uniniti": [340, 341], "unintend": [10, 13, 315], "union": 136, "uniqu": [17, 24, 26, 154, 156, 288], "unit": [28, 77, 143, 160, 161, 163, 164, 165, 224, 225, 228, 229, 230, 231, 234, 235, 237, 250], "unless": [104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 326], "unlik": [151, 154, 155, 156, 157, 163, 230, 234, 250, 276, 302, 303, 305, 306, 307, 308, 310], "unnecessari": [10, 315], "unpad": 381, "unseen": 404, "unsqueez": 379, "unstabl": 21, "unsur": 10, "up": [299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 400, 402], "updat": [4, 31, 151, 157, 158, 250, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315], "upon": [31, 66, 83, 84, 145, 154, 155, 156, 157], "upper": [25, 227, 310, 324, 389, 390], "upper_triangular": 390, "upsampl": [258, 297], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 27, 30, 45, 50, 51, 64, 65, 66, 67, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 185, 187, 192, 194, 195, 197, 200, 201, 209, 211, 212, 213, 214, 215, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 296, 298, 299, 300, 313, 314, 315, 316, 318, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 357, 359, 360, 361, 368, 373, 380, 381, 383, 385, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "usag": [3, 16, 32, 33, 34, 35, 43, 44, 45, 141, 155, 158, 178, 216, 217, 218, 244, 251, 299, 300, 343, 395, 396, 397, 398, 399, 400, 401, 402], "use_aux": [64, 65, 66], "use_h": [87, 88], "use_s": [87, 88], "user": [1, 2, 3, 4, 15, 93, 154, 155, 156, 157, 298, 303, 393, 394, 404], "usual": 264, "util": [3, 15, 16, 84, 132, 133, 134, 156, 157, 177, 298, 325], "v": [19, 24, 27, 145, 170, 243, 244, 292, 294, 304, 305, 307, 308, 339], "v1": [64, 65, 73, 74, 75, 81, 82, 145], "v2": [36, 37, 38, 39, 40, 41, 42, 43, 51, 60, 61, 62, 63, 73, 75, 76, 82, 83, 86, 145], "v3": [64, 66, 67, 76, 83, 87, 88, 145], "v4": [64, 67, 76, 84, 90, 91, 92, 93, 145], "v_": [301, 304, 305, 307, 308, 309, 311], "v_i": 243, "v_stack": 392, "v_t": [308, 309], "val": 222, "valid": [213, 214, 215, 216, 217, 218, 220, 246, 247, 248, 372], "valu": [10, 15, 18, 22, 23, 24, 27, 30, 68, 81, 84, 92, 112, 113, 146, 152, 154, 156, 158, 160, 163, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 211, 212, 213, 214, 215, 219, 222, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 241, 243, 244, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 296, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 317, 318, 320, 321, 322, 323, 324, 325, 338, 339, 340, 341, 342, 343, 349, 350, 351, 353, 356, 357, 358, 359, 361, 363, 364, 366, 367, 376, 381, 382, 384, 391, 396, 398, 399, 401], "valuabl": 325, "valueerror": [1, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 299], "van": 145, "vanish": [145, 230, 237, 269, 270, 271], "var": 348, "vari": [30, 131, 155, 157, 199, 211, 278, 400], "variabl": [152, 158, 199, 200, 201, 260, 278, 279, 280, 298, 313, 315, 320, 340, 397, 400], "varianc": [165, 176, 194, 197, 213, 214, 215, 224, 225, 228, 229, 237, 250, 269, 270, 271, 273, 274, 275, 276, 304, 305, 306, 307, 308, 322, 373, 400, 404], "variant": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 60, 61, 62, 63, 69, 70, 71, 72, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 112, 113, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 149, 304, 305, 306], "variat": [216, 217, 218, 273, 274, 275, 397, 404], "varieti": [4, 73, 94, 325, 404], "variou": [7, 10, 12, 13, 45, 64, 74, 75, 77, 84, 85, 93, 145, 235, 300, 325, 343, 359, 361, 381, 394], "vasudevan": 145, "vaswani": [145, 290], "vdim": 243, "vdot": 335, "vector": [14, 19, 24, 25, 26, 27, 185, 187, 209, 243, 259, 261, 288, 329, 330, 331, 335], "veloc": [301, 309, 311], "verbos": 12, "veri": [24, 38, 106, 108, 145, 302], "verifi": 10, "versa": 310, "versatil": [93, 325, 380], "version": [27, 30, 64, 68, 73, 77, 78, 79, 90, 309, 335, 398], "vertic": [387, 392, 401], "vgg": 136, "vggnet": [76, 137, 138, 139, 140, 145], "vggnet_11": 145, "vggnet_13": 145, "vggnet_16": 145, "vggnet_19": 145, "via": [3, 4, 93, 131], "vice": 310, "video": [173, 182, 215, 248, 275, 283, 286], "view": [73, 77, 155, 282, 283, 284, 285, 286, 375, 384], "vinod": [5, 6], "vision": [81, 82, 86, 94, 103, 145, 172, 247, 259, 404], "visual": [143, 145], "vocabulari": [147, 148, 149, 288], "vol": 145, "vollgraf": 7, "volumetr": [173, 182, 215, 248, 275, 283, 286], "vstack": 379, "w": [10, 12, 13, 14, 103, 115, 116, 117, 118, 119, 120, 132, 133, 134, 145, 172, 173, 175, 177, 181, 182, 185, 187, 195, 200, 201, 203, 204, 207, 208, 211, 212, 214, 215, 219, 243, 246, 247, 248, 259, 261, 270, 271, 272, 274, 275, 279, 280, 283, 286, 395, 397], "w_": [172, 173, 200, 201, 203, 204, 207, 208, 211, 247, 248, 279, 280, 282, 283, 285, 286], "w_1": [292, 294], "w_2": [292, 294], "w_out": [172, 173, 203, 204, 207, 208], "wa": [65, 250, 253, 254, 255, 256, 315], "wai": [1, 10, 12, 14, 29, 144, 313, 315, 384], "wang": 145, "want": [0, 15, 393, 395], "warn": [154, 156, 243], "we": [3, 15, 314, 380], "wei": 145, "weight": [101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 145, 170, 171, 172, 173, 185, 187, 188, 189, 193, 194, 197, 198, 209, 211, 219, 220, 224, 225, 228, 229, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 261, 263, 264, 267, 269, 270, 271, 273, 274, 275, 276, 288, 290, 291, 292, 293, 294, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 320, 325], "weight1": 156, "weight2": 156, "weight_decai": [301, 302, 303, 304, 305, 306, 307, 308, 309, 311], "weihao": 145, "weinberg": 145, "well": [42, 46, 47, 48, 49, 51, 66, 90, 131, 224, 225], "were": 158, "weyand": 145, "what": [12, 14, 315], "when": [0, 1, 3, 10, 13, 15, 22, 50, 145, 152, 155, 157, 158, 160, 163, 171, 172, 173, 209, 230, 252, 260, 269, 270, 271, 273, 274, 275, 296, 299, 302, 310, 313, 315, 316, 317, 325, 336, 375, 393, 395], "where": [3, 4, 5, 6, 7, 8, 12, 13, 14, 18, 19, 21, 22, 23, 24, 25, 27, 87, 88, 89, 90, 91, 92, 141, 145, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 178, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 317, 325, 327, 328, 332, 333, 334, 336, 337, 340, 341, 353, 357, 358, 359, 360, 361, 364, 366, 368, 371, 372, 373, 376, 381, 383, 385, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401], "whether": [1, 18, 50, 64, 65, 66, 87, 88, 94, 152, 153, 224, 225, 252, 309, 313, 318, 320, 321, 322, 324, 326, 340, 341, 359, 360, 361, 368, 373], "which": [0, 7, 13, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 67, 75, 81, 82, 84, 85, 89, 95, 96, 97, 98, 99, 100, 101, 102, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 145, 147, 152, 154, 156, 158, 163, 167, 190, 212, 216, 217, 218, 220, 230, 231, 234, 236, 239, 241, 250, 265, 267, 269, 270, 271, 273, 274, 275, 276, 288, 292, 294, 304, 305, 307, 309, 313, 315, 317, 320, 321, 324, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 373, 375, 376, 383, 384, 385, 387, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404], "while": [15, 31, 36, 42, 43, 60, 61, 62, 63, 71, 75, 81, 91, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 135, 145, 155, 158, 176, 177, 231, 235, 236, 252, 291, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 384, 387, 398, 404], "who": [15, 154, 155, 156, 157], "whose": [27, 341, 345, 347, 349, 353, 357, 363], "wide": [4, 5, 6, 8, 16, 24, 43, 93, 103, 111, 112, 113, 145, 164, 235, 246, 247, 264], "wide_resnet_101": 145, "wide_resnet_50": 145, "wider": [34, 112, 113, 171, 172], "wideresnet": 145, "width": [50, 51, 81, 85, 94, 101, 102, 112, 113, 114, 115, 116, 117, 118, 119, 120, 131, 141, 145, 172, 173, 175, 181, 182, 195, 200, 201, 203, 204, 207, 208, 211, 212, 220, 247, 248, 270, 271, 272, 274, 275, 279, 280, 282, 283, 285, 286, 296, 395, 397, 402], "width_coef": 50, "width_multipli": [81, 85], "window": [202, 203, 204, 206, 207, 208, 281, 282, 283, 284, 285, 286, 302, 359, 361], "wise": [10, 14, 125, 127, 128, 129, 130, 145, 160, 161, 163, 164, 165, 166, 167, 168, 178, 213, 214, 215, 219, 233, 239, 240, 250, 252, 253, 254, 255, 256, 298, 314, 327, 328, 331, 332, 333, 334, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 358, 362, 363, 364, 365, 366, 367, 369, 370, 371, 378, 392], "within": [2, 145, 146, 147, 151, 154, 155, 156, 157, 158, 168, 211, 212, 229, 231, 232, 233, 235, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 260, 263, 264, 265, 266, 267, 269, 270, 271, 273, 276, 281, 282, 283, 284, 285, 286, 300, 315, 338, 353, 400, 404], "without": [10, 15, 114, 154, 155, 156, 185, 187, 246, 247, 248, 259, 261, 313, 316, 359, 382, 384, 391], "won": 315, "word": [209, 288], "work": [1, 2, 3, 10, 12, 13, 14, 15, 17, 314, 317], "workflow": [13, 325, 404], "workload": 15, "wrap": [3, 298, 315, 374], "wrapper": 298, "www": [5, 6], "x": [15, 16, 26, 73, 77, 121, 136, 141, 145, 146, 151, 152, 154, 155, 156, 157, 158, 167, 178, 185, 187, 212, 216, 217, 218, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 292, 293, 294, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 318, 320, 321, 322, 324, 340, 341, 357, 380, 385, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402], "x1": 259, "x2": 259, "x_": [195, 264, 267, 272, 293, 380], "x_0": 293, "x_c": [264, 267], "x_i": [263, 293], "x_k": 264, "xavier": [224, 225, 228, 229], "xavier_norm": 223, "xavier_uniform": 223, "xception": [76, 145], "xiao": 7, "xie": 145, "xl": [63, 145], "xlarg": [44, 145], "xy": 380, "x\u2081": 259, "x\u2082": 259, "y": [141, 145, 154, 155, 156, 157, 158, 212, 216, 217, 218, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 318, 320, 321, 322, 324, 340, 341, 380, 398], "y_": [195, 264, 267, 272, 380], "y_c": [264, 267], "y_i": 263, "yann": [8, 145], "yet": [15, 41, 43, 91, 314], "yield": [0, 1, 152, 315], "you": [0, 12, 14, 83, 145, 146, 155, 157, 158, 290, 298, 300, 313, 315, 325, 340, 341, 342, 347, 372, 374, 393, 395, 404], "your": [10, 83, 91, 298, 300, 313, 315, 325, 404], "yu": 145, "z": [145, 292, 294, 341, 346, 347], "zalandoresearch": 7, "ze": 145, "zeiler": [143, 145], "zero": [22, 24, 25, 66, 146, 160, 163, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 202, 203, 204, 206, 207, 208, 209, 222, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 237, 243, 246, 247, 248, 250, 252, 253, 254, 255, 256, 276, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 340, 341, 342, 347, 348, 353, 363, 381, 389, 390], "zero_grad": [153, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 326], "zeros_lik": [341, 348], "zfnet": [76, 145], "zhang": 145, "zhmoginov": 145, "zhu": 145, "zhuang": 145, "zisserman": 145, "\u03c3\u1d62": 24}, "titles": ["data.ConcatDataset", "data.DataLoader", "data.Dataset", "lucid.data", "lucid.datasets", "CIFAR10", "CIFAR100", "FashionMNIST", "MNIST", "Image Datasets", "lucid.einops", "Einops Functions", "lucid.einops.rearrange", "lucid.einops.reduce", "lucid.einops.repeat", "Lucid", "lucid.linalg", "lucid.linalg.cholesky", "lucid.linalg.det", "lucid.linalg.eig", "Linear Algebra Operations", "lucid.linalg.inv", "lucid.linalg.matrix_power", "lucid.linalg.norm", "lucid.linalg.pinv", "lucid.linalg.qr", "lucid.linalg.solve", "lucid.linalg.svd", "AlexNet", "alexnet", "ConvNeXt", "ConvNeXt_V2", "convnext_base", "convnext_large", "convnext_small", "convnext_tiny", "convnext_v2_atto", "convnext_v2_base", "convnext_v2_femto", "convnext_v2_huge", "convnext_v2_large", "convnext_v2_nano", "convnext_v2_pico", "convnext_v2_tiny", "convnext_xlarge", "DenseNet", "densenet_121", "densenet_169", "densenet_201", "densenet_264", "EfficientNet", "EfficientNet_V2", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3", "efficientnet_b4", "efficientnet_b5", "efficientnet_b6", "efficientnet_b7", "efficientnet_v2_l", "efficientnet_v2_m", "efficientnet_v2_s", "efficientnet_v2_xl", "Inception", "inception_v1", "inception_v3", "inception_v4", "InceptionNeXt", "inception_next_atto", "inception_next_base", "inception_next_small", "inception_next_tiny", "InceptionResNet", "inception_resnet_v1", "inception_resnet_v2", "ConvNets", "LeNet", "lenet_1", "lenet_4", "lenet_5", "MobileNet", "MobileNet_V2", "MobileNet_V3", "MobileNet_V4", "mobilenet", "mobilenet_v2", "mobilenet_v3_large", "mobilenet_v3_small", "mobilenet_v4_conv_large", "mobilenet_v4_conv_medium", "mobilenet_v4_conv_small", "mobilenet_v4_hybrid_large", "mobilenet_v4_hybrid_medium", "ResNeSt", "resnest_101", "resnest_14", "resnest_200", "resnest_26", "resnest_269", "resnest_50", "resnest_50_1s4x24d", "resnest_50_4s2x40d", "ResNet", "resnet_1001", "resnet_101", "resnet_152", "resnet_18", "resnet_200", "resnet_269", "resnet_34", "resnet_50", "wide_resnet_101", "wide_resnet_50", "ResNeXt", "resnext_101_32x16d", "resnext_101_32x32d", "resnext_101_32x4d", "resnext_101_32x8d", "resnext_101_64x4d", "resnext_50_32x4d", "SENet", "se_resnet_101", "se_resnet_152", "se_resnet_18", "se_resnet_34", "se_resnet_50", "se_resnext_101_32x4d", "se_resnext_101_32x8d", "se_resnext_101_64x4d", "se_resnext_50_32x4d", "SKNet", "sk_resnet_18", "sk_resnet_34", "sk_resnet_50", "sk_resnext_50_32x4d", "VGGNet", "vggnet_11", "vggnet_13", "vggnet_16", "vggnet_19", "Xception", "xception", "ZFNet", "zfnet", "lucid.models", "models.summarize", "Transformer", "transformer_base", "transformer_big", "Transformers", "nn.Buffer", "nn.Module", "nn.Parameter", "nn.ModuleDict", "nn.ModuleList", "nn.ParameterDict", "nn.ParameterList", "nn.Sequential", "Containers", "nn.functional.elu", "nn.functional.gelu", "Activation Functions", "nn.functional.leaky_relu", "nn.functional.relu", "nn.functional.selu", "nn.functional.sigmoid", "nn.functional.softmax", "nn.functional.tanh", "Attention Functions", "nn.functional.scaled_dot_product_attention", "nn.functional.conv1d", "nn.functional.conv2d", "nn.functional.conv3d", "Convolution Functions", "nn.functional.unfold", "nn.functional.alpha_dropout", "nn.functional.drop_block", "nn.functional.drop_path", "nn.functional.dropout", "nn.functional.dropout1d", "nn.functional.dropout2d", "nn.functional.dropout3d", "Dropout Functions", "lucid.nn.functional", "nn.functional.bilinear", "Linear Functions", "nn.functional.linear", "nn.functional.binary_cross_entropy", "nn.functional.cross_entropy", "nn.functional.huber_loss", "Loss Functions", "nn.functional.mse_loss", "nn.functional.nll_loss", "nn.functional.batch_norm", "nn.functional.global_response_norm", "Normalization Functions", "nn.functional.instance_norm", "nn.functional.layer_norm", "nn.functional.adaptive_avg_pool1d", "nn.functional.adaptive_avg_pool2d", "nn.functional.adaptive_avg_pool3d", "nn.functional.avg_pool1d", "nn.functional.avg_pool2d", "nn.functional.avg_pool3d", "Pooling Functions", "nn.functional.max_pool1d", "nn.functional.max_pool2d", "nn.functional.max_pool3d", "nn.functional.embedding", "Utility Functions", "nn.functional.interpolate", "nn.functional.rotate", "nn.ConvBNReLU1d", "nn.ConvBNReLU2d", "nn.ConvBNReLU3d", "nn.DepthSeparableConv1d", "nn.DepthSeparableConv2d", "nn.DepthSeparableConv3d", "nn.SEModule", "nn.SelectiveKernel", "Fused Layers", "nn.init.constant", "Weight Initializations", "nn.init.kaiming_normal", "nn.init.kaiming_uniform", "nn.init.normal", "nn.init.uniform", "nn.init.xavier_normal", "nn.init.xavier_uniform", "nn.ELU", "nn.GELU", "nn.HardSigmoid", "nn.HardSwish", "nn.LeakyReLU", "nn.ReLU", "nn.ReLU6", "nn.SELU", "nn.Sigmoid", "nn.Softmax", "nn.Swish", "nn.Tanh", "Activation Layers", "nn.MultiHeadAttention", "nn.ScaledDotProductAttention", "Attention Layers", "nn.Conv1d", "nn.Conv2d", "nn.Conv3d", "Convolution Layers", "nn.AlphaDropout", "nn.DropBlock", "nn.DropPath", "nn.Dropout", "nn.Dropout1d", "nn.Dropout2d", "nn.Dropout3d", "Dropout Layers", "Modules", "nn.Bilinear", "nn.Identity", "nn.Linear", "Linear Layers", "nn.BCELoss", "nn.CrossEntropyLoss", "nn.HuberLoss", "nn.MSELoss", "nn.NLLLoss", "Loss Layers", "nn.BatchNorm1d", "nn.BatchNorm2d", "nn.BatchNorm3d", "nn.GlobalResponseNorm", "nn.InstanceNorm1d", "nn.InstanceNorm2d", "nn.InstanceNorm3d", "nn.LayerNorm", "Normalization Layers", "nn.AdaptiveAvgPool1d", "nn.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool3d", "nn.AvgPool1d", "nn.AvgPool2d", "nn.AvgPool3d", "nn.MaxPool1d", "nn.MaxPool2d", "nn.MaxPool3d", "Pooling Layers", "nn.Embedding", "Sparse Layers", "nn.Transformer", "nn.TransformerDecoder", "nn.TransformerDecoderLayer", "nn.TransformerEncoder", "nn.TransformerEncoderLayer", "Transformer Layers", "nn.Upsample", "Vision Layers", "lucid.nn", "optim.Optimizer", "lucid.optim", "optim.ASGD", "optim.Adadelta", "optim.Adagrad", "optim.Adam", "optim.AdamW", "optim.Adamax", "optim.NAdam", "optim.RAdam", "optim.RMSprop", "optim.Rprop", "optim.SGD", "Optimizers", "lucid.grad_enabled", "lucid.newaxis", "lucid.no_grad", "lucid.register_model", "lucid.types", "lucid.random.bernoulli", "Random Number Generations", "lucid.random.rand", "lucid.random.randint", "lucid.random.randn", "lucid.random.seed", "lucid.random.uniform", "lucid.random", "lucid.Tensor", "lucid.add", "lucid.div", "lucid.dot", "lucid.inner", "lucid.matmul", "lucid.maximum", "lucid.minimum", "lucid.mul", "lucid.outer", "lucid.power", "lucid.sub", "lucid.arange", "lucid.diag", "lucid.empty", "lucid.empty_like", "lucid.eye", "lucid.linspace", "lucid.ones", "lucid.ones_like", "lucid.zeros", "lucid.zeros_like", "Tensor Operations", "lucid.abs", "lucid.arccos", "lucid.arcsin", "lucid.arctan", "lucid.clip", "lucid.cos", "lucid.cosh", "lucid.cube", "lucid.exp", "lucid.log", "lucid.max", "lucid.mean", "lucid.min", "lucid.reciprocal", "lucid.sign", "lucid.sin", "lucid.sinh", "lucid.sqrt", "lucid.square", "lucid.sum", "lucid.tan", "lucid.tanh", "lucid.trace", "lucid.transpose", "lucid.var", "lucid.tensor", "lucid.broadcast_to", "lucid.concatenate", "lucid.flatten", "lucid.hstack", "Tensor Utilites", "lucid.meshgrid", "lucid.pad", "lucid.ravel", "lucid.repeat", "lucid.reshape", "lucid.split", "lucid.squeeze", "lucid.stack", "lucid.tile", "lucid.tril", "lucid.triu", "lucid.unsqueeze", "lucid.vstack", "transforms.Compose", "transforms.ToTensor", "transforms.CenterCrop", "transforms.Normalize", "transforms.RandomCrop", "transforms.RandomGrayscale", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.RandomVerticalFlip", "transforms.Resize", "Image Transformations", "lucid.transforms"], "titleterms": {"1": 314, "1d": 314, "2": 314, "2d": 314, "3": 314, "It": [313, 315], "ab": 349, "activ": [162, 184, 242, 258], "ad": 314, "adadelta": 302, "adagrad": 303, "adam": 304, "adamax": 306, "adamw": 305, "adaptive_avg_pool1d": 199, "adaptive_avg_pool2d": 200, "adaptive_avg_pool3d": 201, "adaptiveavgpool1d": 278, "adaptiveavgpool2d": 279, "adaptiveavgpool3d": 280, "add": 327, "addit": [24, 243], "admonit": 317, "advanc": [175, 404], "advantag": [10, 12, 13, 14], "alexnet": [28, 29], "algebra": 20, "algorithm": [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "alias": 317, "align": 314, "alpha_dropout": 176, "alphadropout": 250, "also": 300, "anoth": 374, "arang": 338, "arcco": 350, "architectur": [28, 30, 78, 79, 80, 112, 113, 143], "arcsin": 351, "arctan": 352, "asgd": 301, "attent": [169, 170, 184, 220, 245, 258], "attribut": [5, 6, 7, 8, 28, 73, 77, 103, 114, 121, 131, 136, 141, 143, 151, 153, 154, 155, 156, 157, 158, 213, 214, 215, 216, 217, 218, 219, 230, 231, 234, 235, 237, 238, 239, 241, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 326, 395, 396, 397, 398, 399, 400, 401, 402], "avg_pool1d": 202, "avg_pool2d": 203, "avg_pool3d": 204, "avgpool1d": 281, "avgpool2d": 282, "avgpool3d": 283, "axi": 314, "backpropag": 326, "backward": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 177, 185, 187, 211, 219, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392], "batch_norm": 194, "batchnorm": 221, "batchnorm1d": 269, "batchnorm2d": 270, "batchnorm3d": 271, "bceloss": 263, "behavior": [199, 200, 201, 278, 279, 280], "benefit": 315, "bernoulli": 318, "bilinear": [185, 259], "binari": 348, "binary_cross_entropi": 188, "bottleneck": [87, 88], "broadcast": [314, 375], "broadcast_to": 375, "buffer": 151, "calcul": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 103, 114, 121, 131, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 175, 177, 178, 185, 187, 199, 200, 201, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402], "captur": 316, "case": 317, "centercrop": 395, "choleski": 17, "cifar10": 5, "cifar100": 6, "class": [0, 1, 2, 5, 6, 7, 8, 28, 30, 31, 45, 50, 51, 64, 68, 73, 77, 81, 82, 83, 84, 94, 103, 114, 121, 131, 136, 141, 143, 147, 151, 152, 153, 154, 155, 156, 157, 158, 213, 214, 215, 216, 217, 218, 219, 220, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 326, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "clip": 353, "co": 354, "combin": 0, "compon": [3, 15, 298], "compos": 393, "concatdataset": [0, 1], "concaten": 376, "conclus": [3, 10, 12, 13, 14, 15, 298, 313, 314, 315, 325, 394, 404], "configur": [50, 87, 88, 95, 96, 97, 98, 99, 100, 101, 102], "constant": 222, "contain": 159, "conv": 221, "conv1d": [171, 246], "conv2d": [172, 247], "conv3d": [173, 248], "convbnrelu1d": 213, "convbnrelu2d": 214, "convbnrelu3d": 215, "convnet": [76, 145], "convnext": 30, "convnext_bas": 32, "convnext_larg": 33, "convnext_smal": 34, "convnext_tini": 35, "convnext_v2": 31, "convnext_v2_atto": 36, "convnext_v2_bas": 37, "convnext_v2_femto": 38, "convnext_v2_hug": 39, "convnext_v2_larg": 40, "convnext_v2_nano": 41, "convnext_v2_pico": 42, "convnext_v2_tini": 43, "convnext_xlarg": 44, "convolut": [174, 184, 221, 249, 258], "core": 15, "cosh": 355, "creat": [153, 326, 374], "cross_entropi": 189, "crossentropyloss": 264, "cube": 356, "custom": [1, 2, 3, 152, 299, 300, 404], "data": [0, 1, 2, 3], "dataload": 1, "dataset": [0, 1, 2, 4, 9], "defin": [2, 152, 299, 300], "definit": [12, 13, 14, 317], "densenet": 45, "densenet_121": 46, "densenet_169": 47, "densenet_201": 48, "densenet_264": 49, "depthseparableconv1d": 216, "depthseparableconv2d": 217, "depthseparableconv3d": 218, "depthwis": 221, "descript": [115, 116, 117, 118, 119, 120, 132, 133, 134, 316], "det": 18, "detail": [24, 89, 90, 91, 92, 93, 112, 113, 243, 290, 291, 292, 293, 294], "diag": 339, "differ": 147, "dilat": 175, "div": 328, "dot": 329, "drop_block": 177, "drop_path": 178, "dropblock": 251, "dropout": [179, 183, 184, 253, 257, 258], "dropout1d": [180, 254], "dropout2d": [181, 255], "dropout3d": [182, 256], "droppath": 252, "efficientnet": 50, "efficientnet_b0": 52, "efficientnet_b1": 53, "efficientnet_b2": 54, "efficientnet_b3": 55, "efficientnet_b4": 56, "efficientnet_b5": 57, "efficientnet_b6": 58, "efficientnet_b7": 59, "efficientnet_v2": 51, "efficientnet_v2_": 62, "efficientnet_v2_l": 60, "efficientnet_v2_m": 61, "efficientnet_v2_xl": 63, "eig": 19, "einop": [10, 11, 12, 13, 14], "elu": [160, 230], "embed": [209, 288], "empti": 340, "empty_lik": 341, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404], "excit": 221, "exp": 357, "express": [195, 385], "ey": 342, "fashionmnist": 7, "featur": [4, 15, 16, 127, 128, 129, 130, 135, 300, 325, 404], "flatten": 377, "forward": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 103, 114, 121, 131, 141, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 175, 178, 185, 187, 199, 200, 201, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402], "from": [147, 374], "function": [11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 146, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 222, 224, 225, 226, 227, 228, 229, 313, 315, 316, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "fuse": 221, "futur": 4, "gelu": [161, 231], "gener": [319, 348], "get": 300, "global_response_norm": 195, "globalresponsenorm": 272, "grad_en": 313, "gradient": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 177, 185, 187, 211, 219, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392], "guidelin": 317, "hardsigmoid": 232, "hardswish": 233, "how": [313, 315], "hstack": 378, "huber_loss": 190, "huberloss": 265, "hyperparamet": [101, 102], "ident": 260, "imag": [9, 403], "incept": 64, "inception_next_atto": 69, "inception_next_bas": 70, "inception_next_smal": 71, "inception_next_tini": 72, "inception_resnet_v1": 74, "inception_resnet_v2": 75, "inception_v1": 65, "inception_v3": 66, "inception_v4": 67, "inceptionnext": 68, "inceptionresnet": 73, "index": 326, "init": [222, 224, 225, 226, 227, 228, 229], "initi": 223, "inner": 330, "input": 374, "inspect": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "instance_norm": 197, "instancenorm1d": 273, "instancenorm2d": 274, "instancenorm3d": 275, "integr": [3, 298, 325, 404], "interpol": 211, "inv": 21, "iter": 326, "kaiming_norm": 224, "kaiming_uniform": 225, "kei": [3, 4, 15, 127, 128, 129, 130, 135, 298, 300, 325, 404], "kernel": 221, "layer": [95, 96, 97, 98, 99, 100, 221, 242, 245, 249, 257, 258, 262, 268, 277, 287, 289, 295, 297], "layer_norm": 198, "layernorm": 276, "leaky_relu": 163, "leakyrelu": 234, "learn": 325, "lenet": 77, "lenet_1": 78, "lenet_4": 79, "lenet_5": 80, "limit": 15, "linalg": [16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27], "linear": [20, 184, 186, 187, 258, 261, 262], "linspac": 343, "list": 374, "load": 1, "log": 358, "loss": [184, 191, 258, 268], "lucid": [3, 4, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 145, 184, 298, 300, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 404], "mathemat": [12, 13, 14, 195, 243, 290, 291, 292, 293, 294, 385], "matmul": 331, "matrix": 331, "matrix_pow": 22, "max": 359, "max_pool1d": 206, "max_pool2d": 207, "max_pool3d": 208, "maximum": 332, "maxpool1d": 284, "maxpool2d": 285, "maxpool3d": 286, "mean": 360, "mechan": [170, 220], "meshgrid": 380, "metadata": 316, "method": [0, 1, 2, 5, 6, 7, 8, 73, 77, 136, 152, 153, 290, 291, 292, 293, 294, 299, 326], "min": 361, "minimum": 333, "mnist": 8, "mobilenet": [81, 85], "mobilenet_v2": [82, 86], "mobilenet_v3": 83, "mobilenet_v3_larg": 87, "mobilenet_v3_smal": 88, "mobilenet_v4": 84, "mobilenet_v4_conv_larg": 89, "mobilenet_v4_conv_medium": 90, "mobilenet_v4_conv_smal": 91, "mobilenet_v4_hybrid_larg": 92, "mobilenet_v4_hybrid_medium": 93, "model": [145, 146, 298], "modul": [152, 258], "moduledict": 154, "modulelist": 155, "more": 325, "mse_loss": 192, "mseloss": 266, "mul": 334, "multiheadattent": 243, "multipl": [0, 331], "nadam": 307, "new": 314, "newaxi": 314, "nll_loss": 193, "nllloss": 267, "nn": [147, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 298], "no_grad": 315, "norm": 23, "normal": [184, 196, 226, 258, 277, 396], "note": 15, "number": 319, "ones": 344, "ones_lik": 345, "oper": [20, 331, 348], "optim": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312], "option": 243, "organ": 298, "outer": 335, "overview": [3, 4, 10, 15, 64, 65, 66, 67, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 243, 290, 291, 292, 293, 294, 298, 300, 325, 404], "pad": 381, "paramet": [1, 5, 6, 7, 8, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 237, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "parameterdict": 156, "parameterlist": 157, "pass": 141, "perform": 326, "pinv": 24, "pipelin": [3, 404], "pitfal": [313, 315], "pool": [184, 205, 258, 287], "potenti": [313, 315], "power": 336, "process": 209, "properti": [153, 326], "qr": 25, "radam": 308, "rais": [17, 18, 19, 21, 22, 23, 24, 25, 26, 27], "rand": 320, "randint": 321, "randn": 322, "random": [318, 319, 320, 321, 322, 323, 324, 325], "randomcrop": 397, "randomgrayscal": 398, "randomhorizontalflip": 399, "randomrot": 400, "randomverticalflip": 401, "ravel": 382, "rearrang": [10, 12], "reciproc": 362, "reduc": [10, 13], "refer": [5, 6, 7, 8, 219, 300], "register_model": 316, "regular": 177, "relu": [164, 221, 235], "relu6": 236, "repeat": [10, 14, 383], "reshap": 384, "resiz": 402, "resnest": 94, "resnest_101": 95, "resnest_14": 96, "resnest_200": 97, "resnest_26": 98, "resnest_269": 99, "resnest_50": 100, "resnest_50_1s4x24d": 101, "resnest_50_4s2x40d": 102, "resnet": 103, "resnet_1001": 104, "resnet_101": 105, "resnet_152": 106, "resnet_18": 107, "resnet_200": 108, "resnet_269": 109, "resnet_34": 110, "resnet_50": 111, "resnext": 114, "resnext_101_32x16d": 115, "resnext_101_32x32d": 116, "resnext_101_32x4d": 117, "resnext_101_32x8d": 118, "resnext_101_64x4d": 119, "resnext_50_32x4d": 120, "return": [12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 85, 86, 87, 88, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 146, 148, 149, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 220, 222, 224, 225, 226, 227, 228, 229, 236, 288, 313, 315, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "rmsprop": 309, "rotat": 212, "rprop": 310, "rule": [331, 375], "scaled_dot_product_attent": 170, "scaleddotproductattent": 244, "se_resnet_101": 122, "se_resnet_152": 123, "se_resnet_18": 124, "se_resnet_34": 125, "se_resnet_50": 126, "se_resnext_101_32x4d": 127, "se_resnext_101_32x8d": 128, "se_resnext_101_64x4d": 129, "se_resnext_50_32x4d": 130, "see": 300, "seed": 323, "select": 221, "selectivekernel": 220, "selu": [165, 237], "semodul": 219, "senet": 121, "separ": 221, "sequenti": 158, "sgd": 311, "sigmoid": [166, 238], "sign": 363, "signatur": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "sin": 364, "sinh": 365, "sk_resnet_18": 132, "sk_resnet_34": 133, "sk_resnet_50": 134, "sk_resnext_50_32x4d": 135, "sknet": 131, "slice": 326, "softmax": [167, 239], "solv": 26, "spars": [258, 289], "split": 385, "sqrt": 366, "squar": 367, "squeez": [221, 386], "stack": 387, "start": 300, "state": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "sub": 337, "sum": 368, "summar": 146, "summari": 146, "svd": 27, "swish": 240, "tabl": 146, "tan": 369, "tanh": [168, 241, 370], "tensor": [314, 326, 348, 374, 379], "through": 326, "tile": 388, "totensor": 394, "trace": 371, "track": 326, "transform": [145, 147, 150, 258, 290, 295, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404], "transformer_bas": 148, "transformer_big": 149, "transformerdecod": 291, "transformerdecoderlay": 292, "transformerencod": 293, "transformerencoderlay": 294, "transpos": 372, "tril": 389, "triu": 390, "type": 317, "unari": 348, "unfold": 175, "uniform": [227, 324], "unsqueez": 391, "upsampl": 296, "us": [1, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 374], "usag": [4, 15, 60, 61, 62, 63, 65, 66, 67, 74, 75, 77, 78, 79, 80, 89, 90, 91, 92, 93, 127, 128, 129, 130, 135, 151, 212, 243, 290, 291, 292, 293, 294, 313, 314, 315, 317, 380, 393, 394, 404], "util": [184, 210], "utilit": 379, "valu": 385, "var": 373, "vggnet": 136, "vggnet_11": 137, "vggnet_13": 138, "vggnet_16": 139, "vggnet_19": 140, "vision": [258, 297], "vstack": 392, "weight": 223, "why": 317, "wide_resnet_101": 112, "wide_resnet_50": 113, "work": [4, 313, 315], "xavier_norm": 228, "xavier_uniform": 229, "xception": [141, 142], "zero": 346, "zeros_lik": 347, "zfnet": [143, 144]}})