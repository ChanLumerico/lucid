Search.setIndex({"alltitles": {"@ Operator": [[286, "operator"]], "Activation Functions": [[133, null]], "Activation Layers": [[209, null], [222, null]], "Additional Details": [[19, "additional-details"]], "Admonitions and Usage Guidelines": [[272, "admonitions-and-usage-guidelines"]], "Advanced Example with Dilation": [[144, "advanced-example-with-dilation"]], "Advanced Features": [[355, "advanced-features"]], "AlexNet": [[23, null]], "Algorithm": [[256, "algorithm"], [257, "algorithm"], [258, "algorithm"], [259, "algorithm"], [260, "algorithm"], [261, "algorithm"], [262, "algorithm"], [263, "algorithm"], [264, "algorithm"], [265, "algorithm"], [266, "algorithm"]], "Architecture": [[23, "architecture"], [25, "architecture"], [59, "architecture"], [60, "architecture"], [61, "architecture"], [118, "architecture"]], "Architecture Details": [[87, "architecture-details"], [88, "architecture-details"]], "Attention Mechanism": [[187, "attention-mechanism"]], "Attributes": [[5, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [23, "attributes"], [54, "attributes"], [58, "attributes"], [78, "attributes"], [89, "attributes"], [96, "attributes"], [106, "attributes"], [111, "attributes"], [116, "attributes"], [118, "attributes"], [122, "attributes"], [124, "attributes"], [125, "attributes"], [126, "attributes"], [127, "attributes"], [128, "attributes"], [129, "attributes"], [180, "attributes"], [181, "attributes"], [182, "attributes"], [183, "attributes"], [184, "attributes"], [185, "attributes"], [186, "attributes"], [197, "attributes"], [198, "attributes"], [201, "attributes"], [202, "attributes"], [204, "attributes"], [205, "attributes"], [206, "attributes"], [208, "attributes"], [210, "attributes"], [211, "attributes"], [212, "attributes"], [214, "attributes"], [216, "attributes"], [217, "attributes"], [218, "attributes"], [219, "attributes"], [220, "attributes"], [223, "attributes"], [224, "attributes"], [225, "attributes"], [227, "attributes"], [228, "attributes"], [229, "attributes"], [230, "attributes"], [231, "attributes"], [233, "attributes"], [234, "attributes"], [235, "attributes"], [236, "attributes"], [237, "attributes"], [238, "attributes"], [239, "attributes"], [241, "attributes"], [242, "attributes"], [243, "attributes"], [244, "attributes"], [245, "attributes"], [246, "attributes"], [247, "attributes"], [248, "attributes"], [249, "attributes"], [281, "attributes"], [346, "attributes"], [347, "attributes"], [348, "attributes"], [349, "attributes"], [350, "attributes"], [351, "attributes"], [352, "attributes"], [353, "attributes"]], "Backward Gradient Calculation": [[12, "backward-gradient-calculation"], [13, "backward-gradient-calculation"], [14, "backward-gradient-calculation"], [16, "backward-gradient-calculation"], [17, "backward-gradient-calculation"], [18, "backward-gradient-calculation"], [19, "backward-gradient-calculation"], [20, "backward-gradient-calculation"], [21, "backward-gradient-calculation"], [22, "backward-gradient-calculation"], [125, "backward-gradient-calculation"], [126, "backward-gradient-calculation"], [127, "backward-gradient-calculation"], [128, "backward-gradient-calculation"], [129, "backward-gradient-calculation"], [131, "backward-gradient-calculation"], [132, "backward-gradient-calculation"], [134, "backward-gradient-calculation"], [135, "backward-gradient-calculation"], [136, "backward-gradient-calculation"], [137, "backward-gradient-calculation"], [138, "backward-gradient-calculation"], [139, "backward-gradient-calculation"], [146, "backward-gradient-calculation"], [154, "backward-gradient-calculation"], [156, "backward-gradient-calculation"], [178, "backward-gradient-calculation"], [186, "backward-gradient-calculation"], [196, "backward-gradient-calculation"], [197, "backward-gradient-calculation"], [198, "backward-gradient-calculation"], [199, "backward-gradient-calculation"], [200, "backward-gradient-calculation"], [201, "backward-gradient-calculation"], [202, "backward-gradient-calculation"], [204, "backward-gradient-calculation"], [205, "backward-gradient-calculation"], [206, "backward-gradient-calculation"], [207, "backward-gradient-calculation"], [208, "backward-gradient-calculation"], [210, "backward-gradient-calculation"], [211, "backward-gradient-calculation"], [212, "backward-gradient-calculation"], [214, "backward-gradient-calculation"], [217, "backward-gradient-calculation"], [218, "backward-gradient-calculation"], [219, "backward-gradient-calculation"], [220, "backward-gradient-calculation"], [223, "backward-gradient-calculation"], [224, "backward-gradient-calculation"], [225, "backward-gradient-calculation"], [227, "backward-gradient-calculation"], [228, "backward-gradient-calculation"], [229, "backward-gradient-calculation"], [230, "backward-gradient-calculation"], [231, "backward-gradient-calculation"], [233, "backward-gradient-calculation"], [234, "backward-gradient-calculation"], [235, "backward-gradient-calculation"], [236, "backward-gradient-calculation"], [237, "backward-gradient-calculation"], [238, "backward-gradient-calculation"], [239, "backward-gradient-calculation"], [244, "backward-gradient-calculation"], [245, "backward-gradient-calculation"], [246, "backward-gradient-calculation"], [247, "backward-gradient-calculation"], [248, "backward-gradient-calculation"], [249, "backward-gradient-calculation"], [282, "backward-gradient-calculation"], [283, "backward-gradient-calculation"], [284, "backward-gradient-calculation"], [285, "backward-gradient-calculation"], [286, "backward-gradient-calculation"], [287, "backward-gradient-calculation"], [288, "backward-gradient-calculation"], [289, "backward-gradient-calculation"], [290, "backward-gradient-calculation"], [291, "backward-gradient-calculation"], [292, "backward-gradient-calculation"], [304, "backward-gradient-calculation"], [305, "backward-gradient-calculation"], [306, "backward-gradient-calculation"], [307, "backward-gradient-calculation"], [308, "backward-gradient-calculation"], [309, "backward-gradient-calculation"], [310, "backward-gradient-calculation"], [311, "backward-gradient-calculation"], [312, "backward-gradient-calculation"], [313, "backward-gradient-calculation"], [314, "backward-gradient-calculation"], [315, "backward-gradient-calculation"], [316, "backward-gradient-calculation"], [317, "backward-gradient-calculation"], [318, "backward-gradient-calculation"], [319, "backward-gradient-calculation"], [320, "backward-gradient-calculation"], [321, "backward-gradient-calculation"], [322, "backward-gradient-calculation"], [323, "backward-gradient-calculation"], [324, "backward-gradient-calculation"], [325, "backward-gradient-calculation"], [326, "backward-gradient-calculation"], [327, "backward-gradient-calculation"], [328, "backward-gradient-calculation"], [330, "backward-gradient-calculation"], [332, "backward-gradient-calculation"], [334, "backward-gradient-calculation"], [335, "backward-gradient-calculation"], [336, "backward-gradient-calculation"], [337, "backward-gradient-calculation"], [338, "backward-gradient-calculation"], [339, "backward-gradient-calculation"], [340, "backward-gradient-calculation"], [341, "backward-gradient-calculation"], [342, "backward-gradient-calculation"], [343, "backward-gradient-calculation"]], "Behavior": [[167, "behavior"], [168, "behavior"], [169, "behavior"], [241, "behavior"], [242, "behavior"], [243, "behavior"]], "Benefits": [[270, "benefits"]], "Binary Functions": [[303, null]], "Bottleneck Configuration": [[67, "bottleneck-configuration"], [68, "bottleneck-configuration"]], "CIFAR10": [[5, null]], "CIFAR100": [[6, null]], "Class Signature": [[0, "class-signature"], [1, "class-signature"], [2, "class-signature"], [5, "class-signature"], [6, "class-signature"], [7, "class-signature"], [8, "class-signature"], [23, "class-signature"], [25, "class-signature"], [31, "class-signature"], [36, "class-signature"], [37, "class-signature"], [50, "class-signature"], [54, "class-signature"], [58, "class-signature"], [62, "class-signature"], [63, "class-signature"], [64, "class-signature"], [69, "class-signature"], [78, "class-signature"], [89, "class-signature"], [96, "class-signature"], [106, "class-signature"], [111, "class-signature"], [116, "class-signature"], [118, "class-signature"], [122, "class-signature"], [123, "class-signature"], [124, "class-signature"], [125, "class-signature"], [126, "class-signature"], [127, "class-signature"], [128, "class-signature"], [129, "class-signature"], [180, "class-signature"], [181, "class-signature"], [182, "class-signature"], [183, "class-signature"], [184, "class-signature"], [185, "class-signature"], [186, "class-signature"], [187, "class-signature"], [197, "class-signature"], [198, "class-signature"], [199, "class-signature"], [200, "class-signature"], [201, "class-signature"], [202, "class-signature"], [203, "class-signature"], [204, "class-signature"], [205, "class-signature"], [206, "class-signature"], [207, "class-signature"], [208, "class-signature"], [210, "class-signature"], [211, "class-signature"], [212, "class-signature"], [214, "class-signature"], [215, "class-signature"], [216, "class-signature"], [217, "class-signature"], [218, "class-signature"], [219, "class-signature"], [220, "class-signature"], [223, "class-signature"], [224, "class-signature"], [225, "class-signature"], [227, "class-signature"], [228, "class-signature"], [229, "class-signature"], [230, "class-signature"], [231, "class-signature"], [233, "class-signature"], [234, "class-signature"], [235, "class-signature"], [236, "class-signature"], [237, "class-signature"], [238, "class-signature"], [239, "class-signature"], [241, "class-signature"], [242, "class-signature"], [243, "class-signature"], [244, "class-signature"], [245, "class-signature"], [246, "class-signature"], [247, "class-signature"], [248, "class-signature"], [249, "class-signature"], [251, "class-signature"], [254, "class-signature"], [256, "class-signature"], [257, "class-signature"], [258, "class-signature"], [259, "class-signature"], [260, "class-signature"], [261, "class-signature"], [262, "class-signature"], [263, "class-signature"], [264, "class-signature"], [265, "class-signature"], [266, "class-signature"], [281, "class-signature"], [344, "class-signature"], [345, "class-signature"], [346, "class-signature"], [347, "class-signature"], [348, "class-signature"], [349, "class-signature"], [350, "class-signature"], [351, "class-signature"], [352, "class-signature"], [353, "class-signature"]], "Combining multiple datasets": [[0, null]], "Conclusion": [[3, "conclusion"], [10, "conclusion"], [253, "conclusion"], [268, "conclusion"], [269, "conclusion"], [270, "conclusion"], [280, "conclusion"], [345, "conclusion"], [355, "conclusion"]], "Configurations": [[36, "configurations"]], "Containers": [[130, null]], "Conv-BatchNorm-ReLU": [[188, null]], "ConvNeXt": [[25, null]], "ConvNets": [[57, null], [120, "convnets"]], "Convolution Functions": [[143, null], [153, null]], "Convolution Layers": [[213, null], [222, null]], "Core Components": [[10, "core-components"]], "Create a Tensor from a list": [[329, null]], "Creating a Parameter": [[124, null]], "Creating a tensor with gradient tracking": [[281, null]], "Custom Data Pipelines": [[3, "custom-data-pipelines"]], "Custom Pipelines": [[355, "custom-pipelines"]], "Defining a Custom Optimizer": [[255, null]], "Defining a custom dataset": [[2, null]], "Defining a custom module": [[123, null]], "Defining a custom optimizer": [[254, null]], "DenseNet": [[31, null]], "Depthwise Separable Convolution": [[188, null]], "Description": [[90, "description"], [91, "description"], [92, "description"], [93, "description"], [94, "description"], [95, "description"], [107, "description"], [108, "description"], [109, "description"], [271, "description"]], "Dropout Functions": [[152, null], [153, null]], "Dropout Layers": [[221, null], [222, null]], "EfficientNet": [[36, null]], "EfficientNet Configurations": [[36, "id1"]], "EfficientNet_V2": [[37, null]], "Example": [[3, null], [3, null], [3, null], [12, "example"], [13, "example"], [14, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [65, "example"], [66, "example"], [144, "example"], [253, null], [253, null], [253, null], [268, "example"], [270, "example"], [273, "example"], [275, "example"], [276, "example"], [277, "example"], [278, "example"], [279, "example"], [280, null], [280, null], [280, null], [293, "example"], [294, "example"], [295, "example"], [296, "example"], [297, "example"], [299, "example"], [300, "example"], [301, "example"], [302, "example"], [304, "example"], [305, "example"], [306, "example"], [307, "example"], [308, "example"], [309, "example"], [310, "example"], [311, "example"], [313, "example"], [315, "example"], [317, "example"], [318, "example"], [319, "example"], [320, "example"], [321, "example"], [322, "example"], [323, "example"], [324, "example"], [325, "example"], [326, "example"], [327, "example"], [328, "example"], [330, "example"], [332, "example"], [336, "example"], [338, "example"], [339, "example"], [340, "example"], [342, "example"], [343, "example"]], "Example 1: Adding a new axis to a 1D tensor": [[269, null]], "Example 2: Adding a new axis to a 2D tensor": [[269, null]], "Example 3: Adding a new axis to align tensors for broadcasting": [[269, null]], "Example Usage": [[10, "example-usage"], [51, "example-usage"], [52, "example-usage"], [53, "example-usage"], [55, "example-usage"], [56, "example-usage"], [58, "example-usage"], [59, "example-usage"], [60, "example-usage"], [61, "example-usage"], [102, "example-usage"], [103, "example-usage"], [104, "example-usage"], [105, "example-usage"], [110, "example-usage"], [179, "example-usage"], [344, "example-usage"], [345, "example-usage"], [355, "example-usage"]], "Example Use Cases": [[272, "example-use-cases"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [11, "examples"], [23, "examples"], [24, "examples"], [25, "examples"], [26, "examples"], [27, "examples"], [28, "examples"], [29, "examples"], [30, "examples"], [31, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [36, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [44, "examples"], [45, "examples"], [46, "examples"], [47, "examples"], [48, "examples"], [49, "examples"], [64, "examples"], [67, "examples"], [68, "examples"], [69, "examples"], [70, "examples"], [71, "examples"], [72, "examples"], [73, "examples"], [74, "examples"], [75, "examples"], [76, "examples"], [77, "examples"], [78, "examples"], [79, "examples"], [80, "examples"], [81, "examples"], [82, "examples"], [83, "examples"], [84, "examples"], [85, "examples"], [86, "examples"], [87, "examples"], [88, "examples"], [90, "examples"], [91, "examples"], [92, "examples"], [93, "examples"], [94, "examples"], [95, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [107, "examples"], [108, "examples"], [109, "examples"], [111, "examples"], [112, "examples"], [113, "examples"], [114, "examples"], [115, "examples"], [116, "examples"], [117, "examples"], [118, "examples"], [119, "examples"], [121, "examples"], [122, "examples"], [123, "examples"], [124, "examples"], [125, "examples"], [126, "examples"], [127, "examples"], [128, "examples"], [129, "examples"], [131, "examples"], [132, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [145, "examples"], [146, "examples"], [147, "examples"], [148, "examples"], [149, "examples"], [150, "examples"], [151, "examples"], [154, "examples"], [156, "examples"], [157, "examples"], [158, "examples"], [159, "examples"], [161, "examples"], [162, "examples"], [163, "examples"], [165, "examples"], [166, "examples"], [167, "examples"], [168, "examples"], [169, "examples"], [170, "examples"], [171, "examples"], [172, "examples"], [174, "examples"], [175, "examples"], [176, "examples"], [178, "examples"], [180, "examples"], [181, "examples"], [182, "examples"], [183, "examples"], [184, "examples"], [185, "examples"], [186, "examples"], [187, "examples"], [189, "examples"], [191, "examples"], [192, "examples"], [193, "examples"], [194, "examples"], [195, "examples"], [196, "examples"], [197, "examples"], [198, "examples"], [199, "examples"], [200, "examples"], [201, "examples"], [202, "examples"], [203, "examples"], [204, "examples"], [205, "examples"], [206, "examples"], [207, "examples"], [208, "examples"], [210, "examples"], [211, "examples"], [212, "examples"], [214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [231, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [236, "examples"], [237, "examples"], [238, "examples"], [239, "examples"], [241, "examples"], [242, "examples"], [243, "examples"], [244, "examples"], [245, "examples"], [246, "examples"], [247, "examples"], [248, "examples"], [249, "examples"], [251, "examples"], [254, "examples"], [255, "examples"], [256, "examples"], [257, "examples"], [258, "examples"], [259, "examples"], [260, "examples"], [261, "examples"], [262, "examples"], [263, "examples"], [264, "examples"], [265, "examples"], [266, "examples"], [271, "examples"], [281, "examples"], [282, "examples"], [283, "examples"], [284, "examples"], [285, "examples"], [287, "examples"], [288, "examples"], [289, "examples"], [290, "examples"], [291, "examples"], [292, "examples"], [298, "examples"], [312, "examples"], [314, "examples"], [316, "examples"], [329, "examples"], [331, "examples"], [334, "examples"], [335, "examples"], [337, "examples"], [341, "examples"], [346, "examples"], [347, "examples"], [348, "examples"], [349, "examples"], [350, "examples"], [351, "examples"], [352, "examples"], [353, "examples"]], "FashionMNIST": [[7, null]], "Features": [[11, "features"]], "Forward Calculation": [[12, "forward-calculation"], [13, "forward-calculation"], [14, "forward-calculation"], [16, "forward-calculation"], [17, "forward-calculation"], [18, "forward-calculation"], [19, "forward-calculation"], [20, "forward-calculation"], [21, "forward-calculation"], [22, "forward-calculation"], [78, "forward-calculation"], [89, "forward-calculation"], [96, "forward-calculation"], [106, "forward-calculation"], [125, "forward-calculation"], [126, "forward-calculation"], [127, "forward-calculation"], [128, "forward-calculation"], [129, "forward-calculation"], [131, "forward-calculation"], [132, "forward-calculation"], [134, "forward-calculation"], [135, "forward-calculation"], [136, "forward-calculation"], [137, "forward-calculation"], [138, "forward-calculation"], [139, "forward-calculation"], [144, "forward-calculation"], [147, "forward-calculation"], [154, "forward-calculation"], [156, "forward-calculation"], [167, "forward-calculation"], [168, "forward-calculation"], [169, "forward-calculation"], [178, "forward-calculation"], [180, "forward-calculation"], [181, "forward-calculation"], [182, "forward-calculation"], [183, "forward-calculation"], [184, "forward-calculation"], [185, "forward-calculation"], [186, "forward-calculation"], [187, "forward-calculation"], [191, "forward-calculation"], [192, "forward-calculation"], [195, "forward-calculation"], [196, "forward-calculation"], [197, "forward-calculation"], [198, "forward-calculation"], [199, "forward-calculation"], [200, "forward-calculation"], [201, "forward-calculation"], [202, "forward-calculation"], [203, "forward-calculation"], [204, "forward-calculation"], [205, "forward-calculation"], [206, "forward-calculation"], [207, "forward-calculation"], [208, "forward-calculation"], [210, "forward-calculation"], [211, "forward-calculation"], [212, "forward-calculation"], [214, "forward-calculation"], [215, "forward-calculation"], [216, "forward-calculation"], [217, "forward-calculation"], [218, "forward-calculation"], [219, "forward-calculation"], [220, "forward-calculation"], [223, "forward-calculation"], [224, "forward-calculation"], [225, "forward-calculation"], [227, "forward-calculation"], [228, "forward-calculation"], [229, "forward-calculation"], [230, "forward-calculation"], [231, "forward-calculation"], [233, "forward-calculation"], [234, "forward-calculation"], [235, "forward-calculation"], [236, "forward-calculation"], [237, "forward-calculation"], [238, "forward-calculation"], [239, "forward-calculation"], [241, "forward-calculation"], [242, "forward-calculation"], [243, "forward-calculation"], [244, "forward-calculation"], [245, "forward-calculation"], [246, "forward-calculation"], [247, "forward-calculation"], [248, "forward-calculation"], [249, "forward-calculation"], [282, "forward-calculation"], [283, "forward-calculation"], [284, "forward-calculation"], [285, "forward-calculation"], [286, "forward-calculation"], [287, "forward-calculation"], [288, "forward-calculation"], [289, "forward-calculation"], [290, "forward-calculation"], [291, "forward-calculation"], [292, "forward-calculation"], [304, "forward-calculation"], [305, "forward-calculation"], [306, "forward-calculation"], [307, "forward-calculation"], [308, "forward-calculation"], [309, "forward-calculation"], [310, "forward-calculation"], [311, "forward-calculation"], [312, "forward-calculation"], [313, "forward-calculation"], [314, "forward-calculation"], [315, "forward-calculation"], [316, "forward-calculation"], [317, "forward-calculation"], [318, "forward-calculation"], [319, "forward-calculation"], [320, "forward-calculation"], [321, "forward-calculation"], [322, "forward-calculation"], [323, "forward-calculation"], [324, "forward-calculation"], [325, "forward-calculation"], [326, "forward-calculation"], [327, "forward-calculation"], [328, "forward-calculation"], [330, "forward-calculation"], [332, "forward-calculation"], [334, "forward-calculation"], [335, "forward-calculation"], [336, "forward-calculation"], [337, "forward-calculation"], [338, "forward-calculation"], [339, "forward-calculation"], [340, "forward-calculation"], [341, "forward-calculation"], [342, "forward-calculation"], [343, "forward-calculation"], [346, "forward-calculation"], [347, "forward-calculation"], [348, "forward-calculation"], [349, "forward-calculation"], [350, "forward-calculation"], [351, "forward-calculation"], [352, "forward-calculation"], [353, "forward-calculation"]], "Forward Pass": [[116, "forward-pass"]], "Function Signature": [[12, "function-signature"], [13, "function-signature"], [14, "function-signature"], [16, "function-signature"], [17, "function-signature"], [18, "function-signature"], [19, "function-signature"], [20, "function-signature"], [21, "function-signature"], [22, "function-signature"], [24, "function-signature"], [26, "function-signature"], [27, "function-signature"], [28, "function-signature"], [29, "function-signature"], [30, "function-signature"], [32, "function-signature"], [33, "function-signature"], [34, "function-signature"], [35, "function-signature"], [38, "function-signature"], [39, "function-signature"], [40, "function-signature"], [41, "function-signature"], [42, "function-signature"], [43, "function-signature"], [44, "function-signature"], [45, "function-signature"], [46, "function-signature"], [47, "function-signature"], [48, "function-signature"], [49, "function-signature"], [51, "function-signature"], [52, "function-signature"], [53, "function-signature"], [55, "function-signature"], [56, "function-signature"], [59, "function-signature"], [60, "function-signature"], [61, "function-signature"], [65, "function-signature"], [66, "function-signature"], [67, "function-signature"], [68, "function-signature"], [70, "function-signature"], [71, "function-signature"], [72, "function-signature"], [73, "function-signature"], [74, "function-signature"], [75, "function-signature"], [76, "function-signature"], [77, "function-signature"], [79, "function-signature"], [80, "function-signature"], [81, "function-signature"], [82, "function-signature"], [83, "function-signature"], [84, "function-signature"], [85, "function-signature"], [86, "function-signature"], [87, "function-signature"], [88, "function-signature"], [90, "function-signature"], [91, "function-signature"], [92, "function-signature"], [93, "function-signature"], [94, "function-signature"], [95, "function-signature"], [97, "function-signature"], [98, "function-signature"], [99, "function-signature"], [100, "function-signature"], [101, "function-signature"], [102, "function-signature"], [103, "function-signature"], [104, "function-signature"], [105, "function-signature"], [107, "function-signature"], [108, "function-signature"], [109, "function-signature"], [110, "function-signature"], [112, "function-signature"], [113, "function-signature"], [114, "function-signature"], [115, "function-signature"], [117, "function-signature"], [119, "function-signature"], [121, "function-signature"], [131, "function-signature"], [132, "function-signature"], [134, "function-signature"], [135, "function-signature"], [136, "function-signature"], [137, "function-signature"], [138, "function-signature"], [139, "function-signature"], [140, "function-signature"], [141, "function-signature"], [142, "function-signature"], [144, "function-signature"], [145, "function-signature"], [146, "function-signature"], [147, "function-signature"], [148, "function-signature"], [149, "function-signature"], [150, "function-signature"], [151, "function-signature"], [154, "function-signature"], [156, "function-signature"], [157, "function-signature"], [158, "function-signature"], [159, "function-signature"], [161, "function-signature"], [162, "function-signature"], [163, "function-signature"], [165, "function-signature"], [166, "function-signature"], [167, "function-signature"], [168, "function-signature"], [169, "function-signature"], [170, "function-signature"], [171, "function-signature"], [172, "function-signature"], [174, "function-signature"], [175, "function-signature"], [176, "function-signature"], [178, "function-signature"], [179, "function-signature"], [189, "function-signature"], [191, "function-signature"], [192, "function-signature"], [193, "function-signature"], [194, "function-signature"], [195, "function-signature"], [196, "function-signature"], [268, "function-signature"], [270, "function-signature"], [271, "function-signature"], [273, "function-signature"], [275, "function-signature"], [276, "function-signature"], [277, "function-signature"], [278, "function-signature"], [279, "function-signature"], [282, "function-signature"], [283, "function-signature"], [284, "function-signature"], [285, "function-signature"], [286, "function-signature"], [287, "function-signature"], [288, "function-signature"], [289, "function-signature"], [290, "function-signature"], [291, "function-signature"], [292, "function-signature"], [293, "function-signature"], [294, "function-signature"], [295, "function-signature"], [296, "function-signature"], [297, "function-signature"], [298, "function-signature"], [299, "function-signature"], [300, "function-signature"], [301, "function-signature"], [302, "function-signature"], [304, "function-signature"], [305, "function-signature"], [306, "function-signature"], [307, "function-signature"], [308, "function-signature"], [309, "function-signature"], [310, "function-signature"], [311, "function-signature"], [312, "function-signature"], [313, "function-signature"], [314, "function-signature"], [315, "function-signature"], [316, "function-signature"], [317, "function-signature"], [318, "function-signature"], [319, "function-signature"], [320, "function-signature"], [321, "function-signature"], [322, "function-signature"], [323, "function-signature"], [324, "function-signature"], [325, "function-signature"], [326, "function-signature"], [327, "function-signature"], [328, "function-signature"], [329, "function-signature"], [330, "function-signature"], [331, "function-signature"], [332, "function-signature"], [334, "function-signature"], [335, "function-signature"], [336, "function-signature"], [337, "function-signature"], [338, "function-signature"], [339, "function-signature"], [340, "function-signature"], [341, "function-signature"], [342, "function-signature"], [343, "function-signature"]], "Fused Layers": [[188, null]], "Future Work": [[4, "future-work"]], "Getting Started": [[255, "getting-started"]], "How It Works": [[268, "how-it-works"], [270, "how-it-works"]], "Hyperparameter Configuration": [[76, "hyperparameter-configuration"], [77, "hyperparameter-configuration"]], "Image Datasets": [[9, null]], "Image Transformations": [[354, null]], "Inception": [[50, null]], "InceptionResNet": [[54, null]], "Indexing and slicing": [[281, null]], "Inspecting Optimizer State": [[255, null], [256, null], [257, null], [258, null], [259, null], [260, null], [261, null], [262, null], [263, null], [264, null], [265, null], [266, null]], "Integration with lucid": [[3, "integration-with-lucid"], [253, "integration-with-lucid"], [280, "integration-with-lucid"], [355, "integration-with-lucid"]], "Iterating through a tensor": [[281, null]], "Key Components": [[3, "key-components"], [253, "key-components"]], "Key Features": [[4, "key-features"], [10, "key-features"], [102, "key-features"], [103, "key-features"], [104, "key-features"], [105, "key-features"], [110, "key-features"], [255, "key-features"], [280, "key-features"]], "Key Transformations": [[355, "key-transformations"]], "Layer Configuration": [[70, "layer-configuration"], [71, "layer-configuration"], [72, "layer-configuration"], [73, "layer-configuration"], [74, "layer-configuration"], [75, "layer-configuration"]], "LeNet": [[58, null]], "Learn More": [[280, null]], "Limitations": [[10, "limitations"]], "Linear Algebra Operations": [[15, null]], "Linear Functions": [[153, null], [155, null]], "Linear Layers": [[222, null], [226, null]], "Loading a custom dataset": [[1, null]], "Loss Functions": [[153, null], [160, null]], "Loss Layers": [[222, null], [232, null]], "Lucid": [[10, null]], "MNIST": [[8, null]], "Matrix Multiplication Rules": [[286, "matrix-multiplication-rules"]], "Metadata Captured": [[271, "metadata-captured"]], "Methods": [[0, "methods"], [1, "methods"], [2, "methods"], [5, "methods"], [6, "methods"], [7, "methods"], [8, "methods"], [54, "methods"], [58, "methods"], [111, "methods"], [123, "methods"], [124, "methods"], [254, "methods"], [281, "methods"]], "MobileNet": [[62, null]], "MobileNet_V2": [[63, null]], "MobileNet_V3": [[64, null]], "Modules": [[222, null]], "Normalization Functions": [[153, null], [164, null]], "Normalization Layers": [[222, null], [240, null]], "Notes": [[10, "notes"]], "Optimizers": [[267, null]], "Organizing Models": [[253, "organizing-models"]], "Overview": [[3, "overview"], [4, "overview"], [10, "overview"], [50, "overview"], [51, "overview"], [52, "overview"], [53, "overview"], [54, "overview"], [55, "overview"], [56, "overview"], [58, "overview"], [59, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [64, "overview"], [79, "overview"], [80, "overview"], [81, "overview"], [82, "overview"], [83, "overview"], [84, "overview"], [85, "overview"], [86, "overview"], [97, "overview"], [98, "overview"], [99, "overview"], [100, "overview"], [101, "overview"], [253, "overview"], [255, "overview"], [280, "overview"], [355, "overview"]], "Parameters": [[1, "parameters"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [8, "parameters"], [12, "parameters"], [13, "parameters"], [14, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [30, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [36, "parameters"], [37, "parameters"], [38, "parameters"], [39, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [45, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [51, "parameters"], [52, "parameters"], [53, "parameters"], [54, "parameters"], [55, "parameters"], [56, "parameters"], [58, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [71, "parameters"], [72, "parameters"], [73, "parameters"], [74, "parameters"], [75, "parameters"], [76, "parameters"], [77, "parameters"], [78, "parameters"], [79, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [84, "parameters"], [85, "parameters"], [86, "parameters"], [87, "parameters"], [88, "parameters"], [89, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [107, "parameters"], [108, "parameters"], [109, "parameters"], [110, "parameters"], [111, "parameters"], [112, "parameters"], [113, "parameters"], [114, "parameters"], [115, "parameters"], [116, "parameters"], [117, "parameters"], [118, "parameters"], [119, "parameters"], [121, "parameters"], [122, "parameters"], [124, "parameters"], [125, "parameters"], [126, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [131, "parameters"], [132, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [137, "parameters"], [138, "parameters"], [139, "parameters"], [140, "parameters"], [141, "parameters"], [142, "parameters"], [144, "parameters"], [145, "parameters"], [146, "parameters"], [147, "parameters"], [148, "parameters"], [149, "parameters"], [150, "parameters"], [151, "parameters"], [154, "parameters"], [156, "parameters"], [157, "parameters"], [158, "parameters"], [159, "parameters"], [161, "parameters"], [162, "parameters"], [163, "parameters"], [165, "parameters"], [166, "parameters"], [167, "parameters"], [168, "parameters"], [169, "parameters"], [170, "parameters"], [171, "parameters"], [172, "parameters"], [174, "parameters"], [175, "parameters"], [176, "parameters"], [178, "parameters"], [179, "parameters"], [180, "parameters"], [181, "parameters"], [182, "parameters"], [183, "parameters"], [184, "parameters"], [185, "parameters"], [186, "parameters"], [187, "parameters"], [189, "parameters"], [191, "parameters"], [192, "parameters"], [193, "parameters"], [194, "parameters"], [195, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [201, "parameters"], [202, "parameters"], [204, "parameters"], [205, "parameters"], [206, "parameters"], [208, "parameters"], [210, "parameters"], [211, "parameters"], [212, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [218, "parameters"], [219, "parameters"], [220, "parameters"], [223, "parameters"], [224, "parameters"], [225, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [230, "parameters"], [231, "parameters"], [233, "parameters"], [234, "parameters"], [235, "parameters"], [236, "parameters"], [237, "parameters"], [238, "parameters"], [239, "parameters"], [241, "parameters"], [242, "parameters"], [243, "parameters"], [244, "parameters"], [245, "parameters"], [246, "parameters"], [247, "parameters"], [248, "parameters"], [249, "parameters"], [251, "parameters"], [256, "parameters"], [257, "parameters"], [258, "parameters"], [259, "parameters"], [260, "parameters"], [261, "parameters"], [262, "parameters"], [263, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [270, "parameters"], [271, "parameters"], [273, "parameters"], [275, "parameters"], [276, "parameters"], [277, "parameters"], [278, "parameters"], [279, "parameters"], [281, "parameters"], [282, "parameters"], [283, "parameters"], [284, "parameters"], [285, "parameters"], [286, "parameters"], [287, "parameters"], [288, "parameters"], [289, "parameters"], [290, "parameters"], [291, "parameters"], [292, "parameters"], [293, "parameters"], [294, "parameters"], [295, "parameters"], [296, "parameters"], [297, "parameters"], [298, "parameters"], [299, "parameters"], [300, "parameters"], [301, "parameters"], [302, "parameters"], [304, "parameters"], [305, "parameters"], [306, "parameters"], [307, "parameters"], [308, "parameters"], [309, "parameters"], [310, "parameters"], [311, "parameters"], [312, "parameters"], [313, "parameters"], [314, "parameters"], [315, "parameters"], [316, "parameters"], [317, "parameters"], [318, "parameters"], [319, "parameters"], [320, "parameters"], [321, "parameters"], [322, "parameters"], [323, "parameters"], [324, "parameters"], [325, "parameters"], [326, "parameters"], [327, "parameters"], [328, "parameters"], [329, "parameters"], [330, "parameters"], [331, "parameters"], [332, "parameters"], [334, "parameters"], [335, "parameters"], [336, "parameters"], [337, "parameters"], [338, "parameters"], [339, "parameters"], [340, "parameters"], [341, "parameters"], [342, "parameters"], [343, "parameters"], [344, "parameters"], [345, "parameters"], [346, "parameters"], [347, "parameters"], [348, "parameters"], [349, "parameters"], [350, "parameters"], [351, "parameters"], [352, "parameters"], [353, "parameters"]], "Performing backpropagation": [[281, null]], "Pooling Functions": [[153, null], [173, null]], "Pooling Layers": [[222, null], [250, null]], "Potential Pitfalls": [[268, "potential-pitfalls"], [270, "potential-pitfalls"]], "Properties": [[124, "properties"], [281, "properties"]], "Raises": [[12, "raises"], [13, "raises"], [14, "raises"], [16, "raises"], [17, "raises"], [18, "raises"], [19, "raises"], [20, "raises"], [21, "raises"], [22, "raises"]], "Random Number Generations": [[274, null]], "References": [[5, "references"], [6, "references"], [7, "references"], [8, "references"], [186, "references"], [255, "references"]], "Regularization": [[146, "regularization"]], "ResNeSt": [[69, null]], "ResNeXt": [[89, null]], "ResNet": [[78, null]], "Returns": [[12, "returns"], [13, "returns"], [14, "returns"], [16, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [22, "returns"], [24, "returns"], [26, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [35, "returns"], [38, "returns"], [39, "returns"], [40, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [44, "returns"], [45, "returns"], [46, "returns"], [47, "returns"], [48, "returns"], [49, "returns"], [51, "returns"], [52, "returns"], [53, "returns"], [55, "returns"], [56, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [68, "returns"], [70, "returns"], [71, "returns"], [72, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [79, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [83, "returns"], [84, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [90, "returns"], [91, "returns"], [92, "returns"], [93, "returns"], [94, "returns"], [95, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [107, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [112, "returns"], [113, "returns"], [114, "returns"], [115, "returns"], [117, "returns"], [119, "returns"], [121, "returns"], [131, "returns"], [132, "returns"], [134, "returns"], [135, "returns"], [136, "returns"], [137, "returns"], [138, "returns"], [139, "returns"], [140, "returns"], [141, "returns"], [142, "returns"], [144, "returns"], [145, "returns"], [146, "returns"], [147, "returns"], [148, "returns"], [149, "returns"], [150, "returns"], [151, "returns"], [154, "returns"], [156, "returns"], [157, "returns"], [158, "returns"], [159, "returns"], [161, "returns"], [162, "returns"], [163, "returns"], [165, "returns"], [166, "returns"], [167, "returns"], [168, "returns"], [169, "returns"], [170, "returns"], [171, "returns"], [172, "returns"], [174, "returns"], [175, "returns"], [176, "returns"], [178, "returns"], [179, "returns"], [187, "returns"], [189, "returns"], [191, "returns"], [192, "returns"], [193, "returns"], [194, "returns"], [195, "returns"], [196, "returns"], [203, "returns"], [268, "returns"], [270, "returns"], [273, "returns"], [275, "returns"], [276, "returns"], [277, "returns"], [278, "returns"], [279, "returns"], [282, "returns"], [283, "returns"], [284, "returns"], [285, "returns"], [286, "returns"], [287, "returns"], [288, "returns"], [289, "returns"], [290, "returns"], [291, "returns"], [292, "returns"], [293, "returns"], [294, "returns"], [295, "returns"], [296, "returns"], [297, "returns"], [298, "returns"], [299, "returns"], [300, "returns"], [301, "returns"], [302, "returns"], [304, "returns"], [305, "returns"], [306, "returns"], [307, "returns"], [308, "returns"], [309, "returns"], [310, "returns"], [311, "returns"], [312, "returns"], [313, "returns"], [314, "returns"], [315, "returns"], [316, "returns"], [317, "returns"], [318, "returns"], [319, "returns"], [320, "returns"], [321, "returns"], [322, "returns"], [323, "returns"], [324, "returns"], [325, "returns"], [326, "returns"], [327, "returns"], [328, "returns"], [329, "returns"], [330, "returns"], [331, "returns"], [332, "returns"], [334, "returns"], [335, "returns"], [336, "returns"], [337, "returns"], [338, "returns"], [339, "returns"], [340, "returns"], [341, "returns"], [342, "returns"], [343, "returns"]], "SENet": [[96, null]], "SKNet": [[106, null]], "See Also": [[255, "see-also"]], "Selective Kernel": [[188, null]], "Squeeze-and-Excitation": [[188, null]], "Summary Table": [[121, "summary-table"]], "Tensor Generating Functions": [[303, null]], "Tensor Operations": [[303, null]], "Tensor Utilites": [[333, null]], "Type Definitions": [[272, "type-definitions"]], "Unary Functions": [[303, null]], "Usage": [[4, "usage"], [46, "usage"], [47, "usage"], [48, "usage"], [49, "usage"], [122, "usage"], [179, "usage"], [268, "usage"], [269, "usage"], [270, "usage"], [334, "usage"], [344, "usage"], [345, "usage"], [355, "usage"]], "Use another Tensor as input": [[329, null]], "Using DataLoader with ConcatDataset": [[1, null]], "Using the ASGD Optimizer": [[256, null]], "Using the Adadelta Optimizer": [[257, null]], "Using the Adagrad Optimizer": [[258, null]], "Using the Adam Optimizer": [[259, null]], "Using the AdamW Optimizer": [[260, null]], "Using the Adamax Optimizer": [[261, null]], "Using the NAdam Optimizer": [[262, null]], "Using the RAdam Optimizer": [[263, null]], "Using the RMSprop Optimizer": [[264, null]], "Using the Rprop Optimizer": [[265, null]], "Using the SGD Optimizer": [[266, null]], "Utility Functions": [[153, null], [177, null]], "VGGNet": [[111, null]], "Vision Layers": [[222, null], [252, null]], "Weight Initializations": [[190, null]], "Why Use Type Aliases?": [[272, null]], "Xception": [[116, null]], "ZFNet": [[118, null]], "activation Functions": [[153, null]], "alexnet": [[24, null]], "convnext_base": [[26, null]], "convnext_large": [[27, null]], "convnext_small": [[28, null]], "convnext_tiny": [[29, null]], "convnext_xlarge": [[30, null]], "data.ConcatDataset": [[0, null]], "data.DataLoader": [[1, null]], "data.Dataset": [[2, null]], "densenet_121": [[32, null]], "densenet_169": [[33, null]], "densenet_201": [[34, null]], "densenet_264": [[35, null]], "efficientnet_b0": [[38, null]], "efficientnet_b1": [[39, null]], "efficientnet_b2": [[40, null]], "efficientnet_b3": [[41, null]], "efficientnet_b4": [[42, null]], "efficientnet_b5": [[43, null]], "efficientnet_b6": [[44, null]], "efficientnet_b7": [[45, null]], "efficientnet_v2_l": [[46, null]], "efficientnet_v2_m": [[47, null]], "efficientnet_v2_s": [[48, null]], "efficientnet_v2_xl": [[49, null]], "inception_resnet_v1": [[55, null]], "inception_resnet_v2": [[56, null]], "inception_v1": [[51, null]], "inception_v3": [[52, null]], "inception_v4": [[53, null]], "lenet_1": [[59, null]], "lenet_4": [[60, null]], "lenet_5": [[61, null]], "lucid.Tensor": [[281, null]], "lucid.abs": [[304, null]], "lucid.add": [[282, null]], "lucid.arange": [[293, null]], "lucid.arccos": [[305, null]], "lucid.arcsin": [[306, null]], "lucid.arctan": [[307, null]], "lucid.clip": [[308, null]], "lucid.concatenate": [[330, null]], "lucid.cos": [[309, null]], "lucid.cosh": [[310, null]], "lucid.cube": [[311, null]], "lucid.data": [[3, null]], "lucid.datasets": [[4, null]], "lucid.diag": [[294, null]], "lucid.div": [[283, null]], "lucid.dot": [[284, null]], "lucid.empty": [[295, null]], "lucid.empty_like": [[296, null]], "lucid.exp": [[312, null]], "lucid.eye": [[297, null]], "lucid.flatten": [[331, null]], "lucid.grad_enabled": [[268, null]], "lucid.hstack": [[332, null]], "lucid.inner": [[285, null]], "lucid.linalg": [[11, null]], "lucid.linalg.cholesky": [[12, null]], "lucid.linalg.det": [[13, null]], "lucid.linalg.eig": [[14, null]], "lucid.linalg.inv": [[16, null]], "lucid.linalg.matrix_power": [[17, null]], "lucid.linalg.norm": [[18, null]], "lucid.linalg.pinv": [[19, null]], "lucid.linalg.qr": [[20, null]], "lucid.linalg.solve": [[21, null]], "lucid.linalg.svd": [[22, null]], "lucid.linspace": [[298, null]], "lucid.log": [[313, null]], "lucid.matmul": [[286, null]], "lucid.max": [[314, null]], "lucid.maximum": [[287, null]], "lucid.mean": [[315, null]], "lucid.meshgrid": [[334, null]], "lucid.min": [[316, null]], "lucid.minimum": [[288, null]], "lucid.models": [[120, null]], "lucid.mul": [[289, null]], "lucid.newaxis": [[269, null]], "lucid.nn": [[253, null]], "lucid.nn.functional": [[153, null]], "lucid.no_grad": [[270, null]], "lucid.ones": [[299, null]], "lucid.ones_like": [[300, null]], "lucid.optim": [[255, null]], "lucid.outer": [[290, null]], "lucid.pad": [[335, null]], "lucid.power": [[291, null]], "lucid.random": [[280, null]], "lucid.random.bernoulli": [[273, null]], "lucid.random.rand": [[275, null]], "lucid.random.randint": [[276, null]], "lucid.random.randn": [[277, null]], "lucid.random.seed": [[278, null]], "lucid.random.uniform": [[279, null]], "lucid.ravel": [[336, null]], "lucid.reciprocal": [[317, null]], "lucid.register_model": [[271, null]], "lucid.repeat": [[337, null]], "lucid.reshape": [[338, null]], "lucid.sign": [[318, null]], "lucid.sin": [[319, null]], "lucid.sinh": [[320, null]], "lucid.sqrt": [[321, null]], "lucid.square": [[322, null]], "lucid.squeeze": [[339, null]], "lucid.stack": [[340, null]], "lucid.sub": [[292, null]], "lucid.sum": [[323, null]], "lucid.tan": [[324, null]], "lucid.tanh": [[325, null]], "lucid.tensor": [[329, null]], "lucid.tile": [[341, null]], "lucid.trace": [[326, null]], "lucid.transforms": [[355, null]], "lucid.transpose": [[327, null]], "lucid.types": [[272, null]], "lucid.unsqueeze": [[342, null]], "lucid.var": [[328, null]], "lucid.vstack": [[343, null]], "lucid.zeros": [[301, null]], "lucid.zeros_like": [[302, null]], "mobilenet": [[65, null]], "mobilenet_v2": [[66, null]], "mobilenet_v3_large": [[67, null]], "mobilenet_v3_small": [[68, null]], "models.summarize": [[121, null]], "nn.AdaptiveAvgPool1d": [[241, null]], "nn.AdaptiveAvgPool2d": [[242, null]], "nn.AdaptiveAvgPool3d": [[243, null]], "nn.AlphaDropout": [[214, null]], "nn.AvgPool1d": [[244, null]], "nn.AvgPool2d": [[245, null]], "nn.AvgPool3d": [[246, null]], "nn.BCELoss": [[227, null]], "nn.BatchNorm1d": [[233, null]], "nn.BatchNorm2d": [[234, null]], "nn.BatchNorm3d": [[235, null]], "nn.Bilinear": [[223, null]], "nn.Buffer": [[122, null]], "nn.Conv1d": [[210, null]], "nn.Conv2d": [[211, null]], "nn.Conv3d": [[212, null]], "nn.ConvBNReLU1d": [[180, null]], "nn.ConvBNReLU2d": [[181, null]], "nn.ConvBNReLU3d": [[182, null]], "nn.CrossEntropyLoss": [[228, null]], "nn.DepthSeparableConv1d": [[183, null]], "nn.DepthSeparableConv2d": [[184, null]], "nn.DepthSeparableConv3d": [[185, null]], "nn.DropBlock": [[215, null]], "nn.DropPath": [[216, null]], "nn.Dropout": [[217, null]], "nn.Dropout1d": [[218, null]], "nn.Dropout2d": [[219, null]], "nn.Dropout3d": [[220, null]], "nn.ELU": [[197, null]], "nn.GELU": [[198, null]], "nn.HardSigmoid": [[199, null]], "nn.HardSwish": [[200, null]], "nn.HuberLoss": [[229, null]], "nn.Identity": [[224, null]], "nn.InstanceNorm1d": [[236, null]], "nn.InstanceNorm2d": [[237, null]], "nn.InstanceNorm3d": [[238, null]], "nn.LayerNorm": [[239, null]], "nn.LeakyReLU": [[201, null]], "nn.Linear": [[225, null]], "nn.MSELoss": [[230, null]], "nn.MaxPool1d": [[247, null]], "nn.MaxPool2d": [[248, null]], "nn.MaxPool3d": [[249, null]], "nn.Module": [[123, null]], "nn.ModuleDict": [[125, null]], "nn.ModuleList": [[126, null]], "nn.NLLLoss": [[231, null]], "nn.Parameter": [[124, null]], "nn.ParameterDict": [[127, null]], "nn.ParameterList": [[128, null]], "nn.ReLU": [[202, null]], "nn.ReLU6": [[203, null]], "nn.SELU": [[204, null]], "nn.SEModule": [[186, null]], "nn.SelectiveKernel": [[187, null]], "nn.Sequential": [[129, null]], "nn.Sigmoid": [[205, null]], "nn.Softmax": [[206, null]], "nn.Swish": [[207, null]], "nn.Tanh": [[208, null]], "nn.Upsample": [[251, null]], "nn.functional.adaptive_avg_pool1d": [[167, null]], "nn.functional.adaptive_avg_pool2d": [[168, null]], "nn.functional.adaptive_avg_pool3d": [[169, null]], "nn.functional.alpha_dropout": [[145, null]], "nn.functional.avg_pool1d": [[170, null]], "nn.functional.avg_pool2d": [[171, null]], "nn.functional.avg_pool3d": [[172, null]], "nn.functional.batch_norm": [[163, null]], "nn.functional.bilinear": [[154, null]], "nn.functional.binary_cross_entropy": [[157, null]], "nn.functional.conv1d": [[140, null]], "nn.functional.conv2d": [[141, null]], "nn.functional.conv3d": [[142, null]], "nn.functional.cross_entropy": [[158, null]], "nn.functional.drop_block": [[146, null]], "nn.functional.drop_path": [[147, null]], "nn.functional.dropout": [[148, null]], "nn.functional.dropout1d": [[149, null]], "nn.functional.dropout2d": [[150, null]], "nn.functional.dropout3d": [[151, null]], "nn.functional.elu": [[131, null]], "nn.functional.gelu": [[132, null]], "nn.functional.huber_loss": [[159, null]], "nn.functional.instance_norm": [[165, null]], "nn.functional.interpolate": [[178, null]], "nn.functional.layer_norm": [[166, null]], "nn.functional.leaky_relu": [[134, null]], "nn.functional.linear": [[156, null]], "nn.functional.max_pool1d": [[174, null]], "nn.functional.max_pool2d": [[175, null]], "nn.functional.max_pool3d": [[176, null]], "nn.functional.mse_loss": [[161, null]], "nn.functional.nll_loss": [[162, null]], "nn.functional.relu": [[135, null]], "nn.functional.rotate": [[179, null]], "nn.functional.selu": [[136, null]], "nn.functional.sigmoid": [[137, null]], "nn.functional.softmax": [[138, null]], "nn.functional.tanh": [[139, null]], "nn.functional.unfold": [[144, null]], "nn.init.constant": [[189, null]], "nn.init.kaiming_normal": [[191, null]], "nn.init.kaiming_uniform": [[192, null]], "nn.init.normal": [[193, null]], "nn.init.uniform": [[194, null]], "nn.init.xavier_normal": [[195, null]], "nn.init.xavier_uniform": [[196, null]], "optim.ASGD": [[256, null]], "optim.Adadelta": [[257, null]], "optim.Adagrad": [[258, null]], "optim.Adam": [[259, null]], "optim.AdamW": [[260, null]], "optim.Adamax": [[261, null]], "optim.NAdam": [[262, null]], "optim.Optimizer": [[254, null]], "optim.RAdam": [[263, null]], "optim.RMSprop": [[264, null]], "optim.Rprop": [[265, null]], "optim.SGD": [[266, null]], "resnest_101": [[70, null]], "resnest_14": [[71, null]], "resnest_200": [[72, null]], "resnest_26": [[73, null]], "resnest_269": [[74, null]], "resnest_50": [[75, null]], "resnest_50_1s4x24d": [[76, null]], "resnest_50_4s2x40d": [[77, null]], "resnet_1001": [[79, null]], "resnet_101": [[80, null]], "resnet_152": [[81, null]], "resnet_18": [[82, null]], "resnet_200": [[83, null]], "resnet_269": [[84, null]], "resnet_34": [[85, null]], "resnet_50": [[86, null]], "resnext_101_32x16d": [[90, null]], "resnext_101_32x32d": [[91, null]], "resnext_101_32x4d": [[92, null]], "resnext_101_32x8d": [[93, null]], "resnext_101_64x4d": [[94, null]], "resnext_50_32x4d": [[95, null]], "se_resnet_101": [[97, null]], "se_resnet_152": [[98, null]], "se_resnet_18": [[99, null]], "se_resnet_34": [[100, null]], "se_resnet_50": [[101, null]], "se_resnext_101_32x4d": [[102, null]], "se_resnext_101_32x8d": [[103, null]], "se_resnext_101_64x4d": [[104, null]], "se_resnext_50_32x4d": [[105, null]], "sk_resnet_18": [[107, null]], "sk_resnet_34": [[108, null]], "sk_resnet_50": [[109, null]], "sk_resnext_50_32x4d": [[110, null]], "transforms.CenterCrop": [[346, null]], "transforms.Compose": [[344, null]], "transforms.Normalize": [[347, null]], "transforms.RandomCrop": [[348, null]], "transforms.RandomGrayscale": [[349, null]], "transforms.RandomHorizontalFlip": [[350, null]], "transforms.RandomRotation": [[351, null]], "transforms.RandomVerticalFlip": [[352, null]], "transforms.Resize": [[353, null]], "transforms.ToTensor": [[345, null]], "vggnet_11": [[112, null]], "vggnet_13": [[113, null]], "vggnet_16": [[114, null]], "vggnet_19": [[115, null]], "wide_resnet_101": [[87, null]], "wide_resnet_50": [[88, null]], "xception": [[117, null]], "zfnet": [[119, null]]}, "docnames": ["data/ConcatDataset", "data/DataLoader", "data/Dataset", "data/data", "datasets/datasets", "datasets/image/CIFAR10", "datasets/image/CIFAR100", "datasets/image/FashionMNIST", "datasets/image/MNIST", "datasets/image/index", "index", "linalg/linalg", "linalg/operations/cholesky", "linalg/operations/det", "linalg/operations/eig", "linalg/operations/index", "linalg/operations/inv", "linalg/operations/matrix_power", "linalg/operations/norm", "linalg/operations/pinv", "linalg/operations/qr", "linalg/operations/solve", "linalg/operations/svd", "models/conv/alex/AlexNet", "models/conv/alex/alexnet", "models/conv/convnext/ConvNeXt", "models/conv/convnext/convnext_base", "models/conv/convnext/convnext_large", "models/conv/convnext/convnext_small", "models/conv/convnext/convnext_tiny", "models/conv/convnext/convnext_xlarge", "models/conv/dense/DenseNet", "models/conv/dense/densenet_121", "models/conv/dense/densenet_169", "models/conv/dense/densenet_201", "models/conv/dense/densenet_264", "models/conv/efficient/EfficientNet", "models/conv/efficient/EfficientNet_V2", "models/conv/efficient/efficientnet_b0", "models/conv/efficient/efficientnet_b1", "models/conv/efficient/efficientnet_b2", "models/conv/efficient/efficientnet_b3", "models/conv/efficient/efficientnet_b4", "models/conv/efficient/efficientnet_b5", "models/conv/efficient/efficientnet_b6", "models/conv/efficient/efficientnet_b7", "models/conv/efficient/efficientnet_v2_l", "models/conv/efficient/efficientnet_v2_m", "models/conv/efficient/efficientnet_v2_s", "models/conv/efficient/efficientnet_v2_xl", "models/conv/inception/Inception", "models/conv/inception/inception_v1", "models/conv/inception/inception_v3", "models/conv/inception/inception_v4", "models/conv/inception_res/InceptionResNet", "models/conv/inception_res/inception_resnet_v1", "models/conv/inception_res/inception_resnet_v2", "models/conv/index", "models/conv/lenet/LeNet", "models/conv/lenet/lenet_1", "models/conv/lenet/lenet_4", "models/conv/lenet/lenet_5", "models/conv/mobile/MobileNet", "models/conv/mobile/MobileNet_V2", "models/conv/mobile/MobileNet_V3", "models/conv/mobile/mobilenet", "models/conv/mobile/mobilenet_v2", "models/conv/mobile/mobilenet_v3_large", "models/conv/mobile/mobilenet_v3_small", "models/conv/resnest/ResNeSt", "models/conv/resnest/resnest_101", "models/conv/resnest/resnest_14", "models/conv/resnest/resnest_200", "models/conv/resnest/resnest_26", "models/conv/resnest/resnest_269", "models/conv/resnest/resnest_50", "models/conv/resnest/resnest_50_1s4x24d", "models/conv/resnest/resnest_50_4s2x40d", "models/conv/resnet/ResNet", "models/conv/resnet/resnet_1001", "models/conv/resnet/resnet_101", "models/conv/resnet/resnet_152", "models/conv/resnet/resnet_18", "models/conv/resnet/resnet_200", "models/conv/resnet/resnet_269", "models/conv/resnet/resnet_34", "models/conv/resnet/resnet_50", "models/conv/resnet/wide_resnet_101", "models/conv/resnet/wide_resnet_50", "models/conv/resnext/ResNeXt", "models/conv/resnext/resnext_101_32x16d", "models/conv/resnext/resnext_101_32x32d", "models/conv/resnext/resnext_101_32x4d", "models/conv/resnext/resnext_101_32x8d", "models/conv/resnext/resnext_101_64x4d", "models/conv/resnext/resnext_50_32x4d", "models/conv/senet/SENet", "models/conv/senet/se_resnet_101", "models/conv/senet/se_resnet_152", "models/conv/senet/se_resnet_18", "models/conv/senet/se_resnet_34", "models/conv/senet/se_resnet_50", "models/conv/senet/se_resnext_101_32x4d", "models/conv/senet/se_resnext_101_32x8d", "models/conv/senet/se_resnext_101_64x4d", "models/conv/senet/se_resnext_50_32x4d", "models/conv/sknet/SKNet", "models/conv/sknet/sk_resnet_18", "models/conv/sknet/sk_resnet_34", "models/conv/sknet/sk_resnet_50", "models/conv/sknet/sk_resnext_50_32x4d", "models/conv/vgg/VGGNet", "models/conv/vgg/vggnet_11", "models/conv/vgg/vggnet_13", "models/conv/vgg/vggnet_16", "models/conv/vgg/vggnet_19", "models/conv/xception/Xception", "models/conv/xception/xception", "models/conv/zfnet/ZFNet", "models/conv/zfnet/zfnet", "models/models", "models/summarize", "nn/Buffer", "nn/Module", "nn/Parameter", "nn/containers/ModuleDict", "nn/containers/ModuleList", "nn/containers/ParameterDict", "nn/containers/ParameterList", "nn/containers/Sequential", "nn/containers/index", "nn/functions/activation/elu", "nn/functions/activation/gelu", "nn/functions/activation/index", "nn/functions/activation/leaky_relu", "nn/functions/activation/relu", "nn/functions/activation/selu", "nn/functions/activation/sigmoid", "nn/functions/activation/softmax", "nn/functions/activation/tanh", "nn/functions/conv/conv1d", "nn/functions/conv/conv2d", "nn/functions/conv/conv3d", "nn/functions/conv/index", "nn/functions/conv/unfold", "nn/functions/drop/alpha_dropout", "nn/functions/drop/drop_block", "nn/functions/drop/drop_path", "nn/functions/drop/dropout", "nn/functions/drop/dropout1d", "nn/functions/drop/dropout2d", "nn/functions/drop/dropout3d", "nn/functions/drop/index", "nn/functions/index", "nn/functions/linear/bilinear", "nn/functions/linear/index", "nn/functions/linear/linear", "nn/functions/loss/binary_cross_entropy", "nn/functions/loss/cross_entropy", "nn/functions/loss/huber_loss", "nn/functions/loss/index", "nn/functions/loss/mse_loss", "nn/functions/loss/nll_loss", "nn/functions/norm/batch_norm", "nn/functions/norm/index", "nn/functions/norm/instance_norm", "nn/functions/norm/layer_norm", "nn/functions/pool/adaptive_avg_pool1d", "nn/functions/pool/adaptive_avg_pool2d", "nn/functions/pool/adaptive_avg_pool3d", "nn/functions/pool/avg_pool1d", "nn/functions/pool/avg_pool2d", "nn/functions/pool/avg_pool3d", "nn/functions/pool/index", "nn/functions/pool/max_pool1d", "nn/functions/pool/max_pool2d", "nn/functions/pool/max_pool3d", "nn/functions/util/index", "nn/functions/util/interpolate", "nn/functions/util/rotate", "nn/fused/ConvBNReLU1d", "nn/fused/ConvBNReLU2d", "nn/fused/ConvBNReLU3d", "nn/fused/DepthSeparableConv1d", "nn/fused/DepthSeparableConv2d", "nn/fused/DepthSeparableConv3d", "nn/fused/SEModule", "nn/fused/SelectiveKernel", "nn/fused/index", "nn/init/constant", "nn/init/index", "nn/init/kaiming_normal", "nn/init/kaiming_uniform", "nn/init/normal", "nn/init/uniform", "nn/init/xavier_normal", "nn/init/xavier_uniform", "nn/modules/activation/ELU", "nn/modules/activation/GELU", "nn/modules/activation/HardSigmoid", "nn/modules/activation/HardSwish", "nn/modules/activation/LeakyReLU", "nn/modules/activation/ReLU", "nn/modules/activation/ReLU6", "nn/modules/activation/SELU", "nn/modules/activation/Sigmoid", "nn/modules/activation/Softmax", "nn/modules/activation/Swish", "nn/modules/activation/Tanh", "nn/modules/activation/index", "nn/modules/conv/Conv1d", "nn/modules/conv/Conv2d", "nn/modules/conv/Conv3d", "nn/modules/conv/index", "nn/modules/drop/AlphaDropout", "nn/modules/drop/DropBlock", "nn/modules/drop/DropPath", "nn/modules/drop/Dropout", "nn/modules/drop/Dropout1d", "nn/modules/drop/Dropout2d", "nn/modules/drop/Dropout3d", "nn/modules/drop/index", "nn/modules/index", "nn/modules/linear/Bilinear", "nn/modules/linear/Identity", "nn/modules/linear/Linear", "nn/modules/linear/index", "nn/modules/loss/BCELoss", "nn/modules/loss/CrossEntropyLoss", "nn/modules/loss/HuberLoss", "nn/modules/loss/MSELoss", "nn/modules/loss/NLLLoss", "nn/modules/loss/index", "nn/modules/norm/BatchNorm1d", "nn/modules/norm/BatchNorm2d", "nn/modules/norm/BatchNorm3d", "nn/modules/norm/InstanceNorm1d", "nn/modules/norm/InstanceNorm2d", "nn/modules/norm/InstanceNorm3d", "nn/modules/norm/LayerNorm", "nn/modules/norm/index", "nn/modules/pool/AdaptiveAvgPool1d", "nn/modules/pool/AdaptiveAvgPool2d", "nn/modules/pool/AdaptiveAvgPool3d", "nn/modules/pool/AvgPool1d", "nn/modules/pool/AvgPool2d", "nn/modules/pool/AvgPool3d", "nn/modules/pool/MaxPool1d", "nn/modules/pool/MaxPool2d", "nn/modules/pool/MaxPool3d", "nn/modules/pool/index", "nn/modules/vision/Upsample", "nn/modules/vision/index", "nn/nn", "optim/Optimizer", "optim/optim", "optim/optimizers/ASGD", "optim/optimizers/Adadelta", "optim/optimizers/Adagrad", "optim/optimizers/Adam", "optim/optimizers/AdamW", "optim/optimizers/Adamax", "optim/optimizers/NAdam", "optim/optimizers/RAdam", "optim/optimizers/RMSprop", "optim/optimizers/Rprop", "optim/optimizers/SGD", "optim/optimizers/index", "others/grad_enabled", "others/newaxis", "others/no_grad", "others/register_model", "others/types", "random/functions/bernoulli", "random/functions/index", "random/functions/rand", "random/functions/randint", "random/functions/randn", "random/functions/seed", "random/functions/uniform", "random/random", "tensor/Tensor_", "tensor/operations/bfunc/add", "tensor/operations/bfunc/div", "tensor/operations/bfunc/dot", "tensor/operations/bfunc/inner", "tensor/operations/bfunc/matmul", "tensor/operations/bfunc/maximum", "tensor/operations/bfunc/minimum", "tensor/operations/bfunc/mul", "tensor/operations/bfunc/outer", "tensor/operations/bfunc/power", "tensor/operations/bfunc/sub", "tensor/operations/gfunc/arange", "tensor/operations/gfunc/diag", "tensor/operations/gfunc/empty", "tensor/operations/gfunc/empty_like", "tensor/operations/gfunc/eye", "tensor/operations/gfunc/linspace", "tensor/operations/gfunc/ones", "tensor/operations/gfunc/ones_like", "tensor/operations/gfunc/zeros", "tensor/operations/gfunc/zeros_like", "tensor/operations/index", "tensor/operations/ufunc/abs", "tensor/operations/ufunc/arccos", "tensor/operations/ufunc/arcsin", "tensor/operations/ufunc/arctan", "tensor/operations/ufunc/clip", "tensor/operations/ufunc/cos", "tensor/operations/ufunc/cosh", "tensor/operations/ufunc/cube", "tensor/operations/ufunc/exp", "tensor/operations/ufunc/log", "tensor/operations/ufunc/max", "tensor/operations/ufunc/mean", "tensor/operations/ufunc/min", "tensor/operations/ufunc/reciprocal", "tensor/operations/ufunc/sign", "tensor/operations/ufunc/sin", "tensor/operations/ufunc/sinh", "tensor/operations/ufunc/sqrt", "tensor/operations/ufunc/square", "tensor/operations/ufunc/sum", "tensor/operations/ufunc/tan", "tensor/operations/ufunc/tanh", "tensor/operations/ufunc/trace", "tensor/operations/ufunc/transpose", "tensor/operations/ufunc/var", "tensor/tensor", "tensor/utilities/concatenate", "tensor/utilities/flatten", "tensor/utilities/hstack", "tensor/utilities/index", "tensor/utilities/meshgrid", "tensor/utilities/pad", "tensor/utilities/ravel", "tensor/utilities/repeat", "tensor/utilities/reshape", "tensor/utilities/squeeze", "tensor/utilities/stack", "tensor/utilities/tile", "tensor/utilities/unsqueeze", "tensor/utilities/vstack", "transforms/Compose", "transforms/ToTensor", "transforms/image/CenterCrop", "transforms/image/Normalize", "transforms/image/RandomCrop", "transforms/image/RandomGrayscale", "transforms/image/RandomHorizontalFlip", "transforms/image/RandomRotation", "transforms/image/RandomVerticalFlip", "transforms/image/Resize", "transforms/image/index", "transforms/transforms"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["data/ConcatDataset.rst", "data/DataLoader.rst", "data/Dataset.rst", "data/data.rst", "datasets/datasets.rst", "datasets/image/CIFAR10.rst", "datasets/image/CIFAR100.rst", "datasets/image/FashionMNIST.rst", "datasets/image/MNIST.rst", "datasets/image/index.rst", "index.rst", "linalg/linalg.rst", "linalg/operations/cholesky.rst", "linalg/operations/det.rst", "linalg/operations/eig.rst", "linalg/operations/index.rst", "linalg/operations/inv.rst", "linalg/operations/matrix_power.rst", "linalg/operations/norm.rst", "linalg/operations/pinv.rst", "linalg/operations/qr.rst", "linalg/operations/solve.rst", "linalg/operations/svd.rst", "models/conv/alex/AlexNet.rst", "models/conv/alex/alexnet.rst", "models/conv/convnext/ConvNeXt.rst", "models/conv/convnext/convnext_base.rst", "models/conv/convnext/convnext_large.rst", "models/conv/convnext/convnext_small.rst", "models/conv/convnext/convnext_tiny.rst", "models/conv/convnext/convnext_xlarge.rst", "models/conv/dense/DenseNet.rst", "models/conv/dense/densenet_121.rst", "models/conv/dense/densenet_169.rst", "models/conv/dense/densenet_201.rst", "models/conv/dense/densenet_264.rst", "models/conv/efficient/EfficientNet.rst", "models/conv/efficient/EfficientNet_V2.rst", "models/conv/efficient/efficientnet_b0.rst", "models/conv/efficient/efficientnet_b1.rst", "models/conv/efficient/efficientnet_b2.rst", "models/conv/efficient/efficientnet_b3.rst", "models/conv/efficient/efficientnet_b4.rst", "models/conv/efficient/efficientnet_b5.rst", "models/conv/efficient/efficientnet_b6.rst", "models/conv/efficient/efficientnet_b7.rst", "models/conv/efficient/efficientnet_v2_l.rst", "models/conv/efficient/efficientnet_v2_m.rst", "models/conv/efficient/efficientnet_v2_s.rst", "models/conv/efficient/efficientnet_v2_xl.rst", "models/conv/inception/Inception.rst", "models/conv/inception/inception_v1.rst", "models/conv/inception/inception_v3.rst", "models/conv/inception/inception_v4.rst", "models/conv/inception_res/InceptionResNet.rst", "models/conv/inception_res/inception_resnet_v1.rst", "models/conv/inception_res/inception_resnet_v2.rst", "models/conv/index.rst", "models/conv/lenet/LeNet.rst", "models/conv/lenet/lenet_1.rst", "models/conv/lenet/lenet_4.rst", "models/conv/lenet/lenet_5.rst", "models/conv/mobile/MobileNet.rst", "models/conv/mobile/MobileNet_V2.rst", "models/conv/mobile/MobileNet_V3.rst", "models/conv/mobile/mobilenet.rst", "models/conv/mobile/mobilenet_v2.rst", "models/conv/mobile/mobilenet_v3_large.rst", "models/conv/mobile/mobilenet_v3_small.rst", "models/conv/resnest/ResNeSt.rst", "models/conv/resnest/resnest_101.rst", "models/conv/resnest/resnest_14.rst", "models/conv/resnest/resnest_200.rst", "models/conv/resnest/resnest_26.rst", "models/conv/resnest/resnest_269.rst", "models/conv/resnest/resnest_50.rst", "models/conv/resnest/resnest_50_1s4x24d.rst", "models/conv/resnest/resnest_50_4s2x40d.rst", "models/conv/resnet/ResNet.rst", "models/conv/resnet/resnet_1001.rst", "models/conv/resnet/resnet_101.rst", "models/conv/resnet/resnet_152.rst", "models/conv/resnet/resnet_18.rst", "models/conv/resnet/resnet_200.rst", "models/conv/resnet/resnet_269.rst", "models/conv/resnet/resnet_34.rst", "models/conv/resnet/resnet_50.rst", "models/conv/resnet/wide_resnet_101.rst", "models/conv/resnet/wide_resnet_50.rst", "models/conv/resnext/ResNeXt.rst", "models/conv/resnext/resnext_101_32x16d.rst", "models/conv/resnext/resnext_101_32x32d.rst", "models/conv/resnext/resnext_101_32x4d.rst", "models/conv/resnext/resnext_101_32x8d.rst", "models/conv/resnext/resnext_101_64x4d.rst", "models/conv/resnext/resnext_50_32x4d.rst", "models/conv/senet/SENet.rst", "models/conv/senet/se_resnet_101.rst", "models/conv/senet/se_resnet_152.rst", "models/conv/senet/se_resnet_18.rst", "models/conv/senet/se_resnet_34.rst", "models/conv/senet/se_resnet_50.rst", "models/conv/senet/se_resnext_101_32x4d.rst", "models/conv/senet/se_resnext_101_32x8d.rst", "models/conv/senet/se_resnext_101_64x4d.rst", "models/conv/senet/se_resnext_50_32x4d.rst", "models/conv/sknet/SKNet.rst", "models/conv/sknet/sk_resnet_18.rst", "models/conv/sknet/sk_resnet_34.rst", "models/conv/sknet/sk_resnet_50.rst", "models/conv/sknet/sk_resnext_50_32x4d.rst", "models/conv/vgg/VGGNet.rst", "models/conv/vgg/vggnet_11.rst", "models/conv/vgg/vggnet_13.rst", "models/conv/vgg/vggnet_16.rst", "models/conv/vgg/vggnet_19.rst", "models/conv/xception/Xception.rst", "models/conv/xception/xception.rst", "models/conv/zfnet/ZFNet.rst", "models/conv/zfnet/zfnet.rst", "models/models.rst", "models/summarize.rst", "nn/Buffer.rst", "nn/Module.rst", "nn/Parameter.rst", "nn/containers/ModuleDict.rst", "nn/containers/ModuleList.rst", "nn/containers/ParameterDict.rst", "nn/containers/ParameterList.rst", "nn/containers/Sequential.rst", "nn/containers/index.rst", "nn/functions/activation/elu.rst", "nn/functions/activation/gelu.rst", "nn/functions/activation/index.rst", "nn/functions/activation/leaky_relu.rst", "nn/functions/activation/relu.rst", "nn/functions/activation/selu.rst", "nn/functions/activation/sigmoid.rst", "nn/functions/activation/softmax.rst", "nn/functions/activation/tanh.rst", "nn/functions/conv/conv1d.rst", "nn/functions/conv/conv2d.rst", "nn/functions/conv/conv3d.rst", "nn/functions/conv/index.rst", "nn/functions/conv/unfold.rst", "nn/functions/drop/alpha_dropout.rst", "nn/functions/drop/drop_block.rst", "nn/functions/drop/drop_path.rst", "nn/functions/drop/dropout.rst", "nn/functions/drop/dropout1d.rst", "nn/functions/drop/dropout2d.rst", "nn/functions/drop/dropout3d.rst", "nn/functions/drop/index.rst", "nn/functions/index.rst", "nn/functions/linear/bilinear.rst", "nn/functions/linear/index.rst", "nn/functions/linear/linear.rst", "nn/functions/loss/binary_cross_entropy.rst", "nn/functions/loss/cross_entropy.rst", "nn/functions/loss/huber_loss.rst", "nn/functions/loss/index.rst", "nn/functions/loss/mse_loss.rst", "nn/functions/loss/nll_loss.rst", "nn/functions/norm/batch_norm.rst", "nn/functions/norm/index.rst", "nn/functions/norm/instance_norm.rst", "nn/functions/norm/layer_norm.rst", "nn/functions/pool/adaptive_avg_pool1d.rst", "nn/functions/pool/adaptive_avg_pool2d.rst", "nn/functions/pool/adaptive_avg_pool3d.rst", "nn/functions/pool/avg_pool1d.rst", "nn/functions/pool/avg_pool2d.rst", "nn/functions/pool/avg_pool3d.rst", "nn/functions/pool/index.rst", "nn/functions/pool/max_pool1d.rst", "nn/functions/pool/max_pool2d.rst", "nn/functions/pool/max_pool3d.rst", "nn/functions/util/index.rst", "nn/functions/util/interpolate.rst", "nn/functions/util/rotate.rst", "nn/fused/ConvBNReLU1d.rst", "nn/fused/ConvBNReLU2d.rst", "nn/fused/ConvBNReLU3d.rst", "nn/fused/DepthSeparableConv1d.rst", "nn/fused/DepthSeparableConv2d.rst", "nn/fused/DepthSeparableConv3d.rst", "nn/fused/SEModule.rst", "nn/fused/SelectiveKernel.rst", "nn/fused/index.rst", "nn/init/constant.rst", "nn/init/index.rst", "nn/init/kaiming_normal.rst", "nn/init/kaiming_uniform.rst", "nn/init/normal.rst", "nn/init/uniform.rst", "nn/init/xavier_normal.rst", "nn/init/xavier_uniform.rst", "nn/modules/activation/ELU.rst", "nn/modules/activation/GELU.rst", "nn/modules/activation/HardSigmoid.rst", "nn/modules/activation/HardSwish.rst", "nn/modules/activation/LeakyReLU.rst", "nn/modules/activation/ReLU.rst", "nn/modules/activation/ReLU6.rst", "nn/modules/activation/SELU.rst", "nn/modules/activation/Sigmoid.rst", "nn/modules/activation/Softmax.rst", "nn/modules/activation/Swish.rst", "nn/modules/activation/Tanh.rst", "nn/modules/activation/index.rst", "nn/modules/conv/Conv1d.rst", "nn/modules/conv/Conv2d.rst", "nn/modules/conv/Conv3d.rst", "nn/modules/conv/index.rst", "nn/modules/drop/AlphaDropout.rst", "nn/modules/drop/DropBlock.rst", "nn/modules/drop/DropPath.rst", "nn/modules/drop/Dropout.rst", "nn/modules/drop/Dropout1d.rst", "nn/modules/drop/Dropout2d.rst", "nn/modules/drop/Dropout3d.rst", "nn/modules/drop/index.rst", "nn/modules/index.rst", "nn/modules/linear/Bilinear.rst", "nn/modules/linear/Identity.rst", "nn/modules/linear/Linear.rst", "nn/modules/linear/index.rst", "nn/modules/loss/BCELoss.rst", "nn/modules/loss/CrossEntropyLoss.rst", "nn/modules/loss/HuberLoss.rst", "nn/modules/loss/MSELoss.rst", "nn/modules/loss/NLLLoss.rst", "nn/modules/loss/index.rst", "nn/modules/norm/BatchNorm1d.rst", "nn/modules/norm/BatchNorm2d.rst", "nn/modules/norm/BatchNorm3d.rst", "nn/modules/norm/InstanceNorm1d.rst", "nn/modules/norm/InstanceNorm2d.rst", "nn/modules/norm/InstanceNorm3d.rst", "nn/modules/norm/LayerNorm.rst", "nn/modules/norm/index.rst", "nn/modules/pool/AdaptiveAvgPool1d.rst", "nn/modules/pool/AdaptiveAvgPool2d.rst", "nn/modules/pool/AdaptiveAvgPool3d.rst", "nn/modules/pool/AvgPool1d.rst", "nn/modules/pool/AvgPool2d.rst", "nn/modules/pool/AvgPool3d.rst", "nn/modules/pool/MaxPool1d.rst", "nn/modules/pool/MaxPool2d.rst", "nn/modules/pool/MaxPool3d.rst", "nn/modules/pool/index.rst", "nn/modules/vision/Upsample.rst", "nn/modules/vision/index.rst", "nn/nn.rst", "optim/Optimizer.rst", "optim/optim.rst", "optim/optimizers/ASGD.rst", "optim/optimizers/Adadelta.rst", "optim/optimizers/Adagrad.rst", "optim/optimizers/Adam.rst", "optim/optimizers/AdamW.rst", "optim/optimizers/Adamax.rst", "optim/optimizers/NAdam.rst", "optim/optimizers/RAdam.rst", "optim/optimizers/RMSprop.rst", "optim/optimizers/Rprop.rst", "optim/optimizers/SGD.rst", "optim/optimizers/index.rst", "others/grad_enabled.rst", "others/newaxis.rst", "others/no_grad.rst", "others/register_model.rst", "others/types.rst", "random/functions/bernoulli.rst", "random/functions/index.rst", "random/functions/rand.rst", "random/functions/randint.rst", "random/functions/randn.rst", "random/functions/seed.rst", "random/functions/uniform.rst", "random/random.rst", "tensor/Tensor_.rst", "tensor/operations/bfunc/add.rst", "tensor/operations/bfunc/div.rst", "tensor/operations/bfunc/dot.rst", "tensor/operations/bfunc/inner.rst", "tensor/operations/bfunc/matmul.rst", "tensor/operations/bfunc/maximum.rst", "tensor/operations/bfunc/minimum.rst", "tensor/operations/bfunc/mul.rst", "tensor/operations/bfunc/outer.rst", "tensor/operations/bfunc/power.rst", "tensor/operations/bfunc/sub.rst", "tensor/operations/gfunc/arange.rst", "tensor/operations/gfunc/diag.rst", "tensor/operations/gfunc/empty.rst", "tensor/operations/gfunc/empty_like.rst", "tensor/operations/gfunc/eye.rst", "tensor/operations/gfunc/linspace.rst", "tensor/operations/gfunc/ones.rst", "tensor/operations/gfunc/ones_like.rst", "tensor/operations/gfunc/zeros.rst", "tensor/operations/gfunc/zeros_like.rst", "tensor/operations/index.rst", "tensor/operations/ufunc/abs.rst", "tensor/operations/ufunc/arccos.rst", "tensor/operations/ufunc/arcsin.rst", "tensor/operations/ufunc/arctan.rst", "tensor/operations/ufunc/clip.rst", "tensor/operations/ufunc/cos.rst", "tensor/operations/ufunc/cosh.rst", "tensor/operations/ufunc/cube.rst", "tensor/operations/ufunc/exp.rst", "tensor/operations/ufunc/log.rst", "tensor/operations/ufunc/max.rst", "tensor/operations/ufunc/mean.rst", "tensor/operations/ufunc/min.rst", "tensor/operations/ufunc/reciprocal.rst", "tensor/operations/ufunc/sign.rst", "tensor/operations/ufunc/sin.rst", "tensor/operations/ufunc/sinh.rst", "tensor/operations/ufunc/sqrt.rst", "tensor/operations/ufunc/square.rst", "tensor/operations/ufunc/sum.rst", "tensor/operations/ufunc/tan.rst", "tensor/operations/ufunc/tanh.rst", "tensor/operations/ufunc/trace.rst", "tensor/operations/ufunc/transpose.rst", "tensor/operations/ufunc/var.rst", "tensor/tensor.rst", "tensor/utilities/concatenate.rst", "tensor/utilities/flatten.rst", "tensor/utilities/hstack.rst", "tensor/utilities/index.rst", "tensor/utilities/meshgrid.rst", "tensor/utilities/pad.rst", "tensor/utilities/ravel.rst", "tensor/utilities/repeat.rst", "tensor/utilities/reshape.rst", "tensor/utilities/squeeze.rst", "tensor/utilities/stack.rst", "tensor/utilities/tile.rst", "tensor/utilities/unsqueeze.rst", "tensor/utilities/vstack.rst", "transforms/Compose.rst", "transforms/ToTensor.rst", "transforms/image/CenterCrop.rst", "transforms/image/Normalize.rst", "transforms/image/RandomCrop.rst", "transforms/image/RandomGrayscale.rst", "transforms/image/RandomHorizontalFlip.rst", "transforms/image/RandomRotation.rst", "transforms/image/RandomVerticalFlip.rst", "transforms/image/Resize.rst", "transforms/image/index.rst", "transforms/transforms.rst"], "indexentries": {"abs() (in module lucid)": [[304, "lucid.abs", false]], "adadelta (class in lucid.optim)": [[257, "lucid.optim.Adadelta", false]], "adagrad (class in lucid.optim)": [[258, "lucid.optim.Adagrad", false]], "adam (class in lucid.optim)": [[259, "lucid.optim.Adam", false]], "adamax (class in lucid.optim)": [[261, "lucid.optim.Adamax", false]], "adamw (class in lucid.optim)": [[260, "lucid.optim.AdamW", false]], "adaptive_avg_pool1d() (in module lucid.nn.functional)": [[167, "lucid.nn.functional.adaptive_avg_pool1d", false]], "adaptive_avg_pool2d() (in module lucid.nn.functional)": [[168, "lucid.nn.functional.adaptive_avg_pool2d", false]], "adaptive_avg_pool3d() (in module lucid.nn.functional)": [[169, "lucid.nn.functional.adaptive_avg_pool3d", false]], "adaptiveavgpool1d (class in lucid.nn)": [[241, "lucid.nn.AdaptiveAvgPool1d", false]], "adaptiveavgpool2d (class in lucid.nn)": [[242, "lucid.nn.AdaptiveAvgPool2d", false]], "adaptiveavgpool3d (class in lucid.nn)": [[243, "lucid.nn.AdaptiveAvgPool3d", false]], "add() (in module lucid)": [[282, "lucid.add", false]], "alexnet (class in lucid.models)": [[23, "lucid.models.AlexNet", false]], "alexnet() (in module lucid.models)": [[24, "lucid.models.alexnet", false]], "alpha_dropout() (in module lucid.nn.functional)": [[145, "lucid.nn.functional.alpha_dropout", false]], "alphadropout (class in lucid.nn)": [[214, "lucid.nn.AlphaDropout", false]], "arange() (in module lucid)": [[293, "lucid.arange", false]], "arccos() (in module lucid)": [[305, "lucid.arccos", false]], "arcsin() (in module lucid)": [[306, "lucid.arcsin", false]], "arctan() (in module lucid)": [[307, "lucid.arctan", false]], "asgd (class in lucid.optim)": [[256, "lucid.optim.ASGD", false]], "avg_pool1d() (in module lucid.nn.functional)": [[170, "lucid.nn.functional.avg_pool1d", false]], "avg_pool2d() (in module lucid.nn.functional)": [[171, "lucid.nn.functional.avg_pool2d", false]], "avg_pool3d() (in module lucid.nn.functional)": [[172, "lucid.nn.functional.avg_pool3d", false]], "avgpool1d (class in lucid.nn)": [[244, "lucid.nn.AvgPool1d", false]], "avgpool2d (class in lucid.nn)": [[245, "lucid.nn.AvgPool2d", false]], "avgpool3d (class in lucid.nn)": [[246, "lucid.nn.AvgPool3d", false]], "batch_norm() (in module lucid.nn.functional)": [[163, "lucid.nn.functional.batch_norm", false]], "batchnorm1d (class in lucid.nn)": [[233, "lucid.nn.BatchNorm1d", false]], "batchnorm2d (class in lucid.nn)": [[234, "lucid.nn.BatchNorm2d", false]], "batchnorm3d (class in lucid.nn)": [[235, "lucid.nn.BatchNorm3d", false]], "bceloss (class in lucid.nn)": [[227, "lucid.nn.BCELoss", false]], "bernoulli() (in module lucid.random)": [[273, "lucid.random.bernoulli", false]], "bilinear (class in lucid.nn)": [[223, "lucid.nn.Bilinear", false]], "bilinear() (in module lucid.nn.functional)": [[154, "lucid.nn.functional.bilinear", false]], "binary_cross_entropy() (in module lucid.nn.functional)": [[157, "lucid.nn.functional.binary_cross_entropy", false]], "buffer (class in lucid.nn)": [[122, "lucid.nn.Buffer", false]], "centercrop (class in lucid.transforms)": [[346, "lucid.transforms.CenterCrop", false]], "cholesky() (in module lucid.linalg)": [[12, "lucid.linalg.cholesky", false]], "cifar10 (class in lucid.datasets)": [[5, "lucid.datasets.CIFAR10", false]], "cifar100 (class in lucid.datasets)": [[6, "lucid.datasets.CIFAR100", false]], "clip() (in module lucid)": [[308, "lucid.clip", false]], "compose (class in lucid.transforms)": [[344, "lucid.transforms.Compose", false]], "concatdataset (class in lucid.data)": [[0, "lucid.data.ConcatDataset", false]], "concatenate() (in module lucid)": [[330, "lucid.concatenate", false]], "constant() (in module lucid.nn.init)": [[189, "lucid.nn.init.constant", false]], "conv1d (class in lucid.nn)": [[210, "lucid.nn.Conv1d", false]], "conv1d() (in module lucid.nn.functional)": [[140, "lucid.nn.functional.conv1d", false]], "conv2d (class in lucid.nn)": [[211, "lucid.nn.Conv2d", false]], "conv2d() (in module lucid.nn.functional)": [[141, "lucid.nn.functional.conv2d", false]], "conv3d (class in lucid.nn)": [[212, "lucid.nn.Conv3d", false]], "conv3d() (in module lucid.nn.functional)": [[142, "lucid.nn.functional.conv3d", false]], "convbnrelu1d (class in lucid.nn)": [[180, "lucid.nn.ConvBNReLU1d", false]], "convbnrelu2d (class in lucid.nn)": [[181, "lucid.nn.ConvBNReLU2d", false]], "convbnrelu3d (class in lucid.nn)": [[182, "lucid.nn.ConvBNReLU3d", false]], "convnext (class in lucid.models)": [[25, "lucid.models.ConvNeXt", false]], "convnext_base() (in module lucid.models)": [[26, "lucid.models.convnext_base", false]], "convnext_large() (in module lucid.models)": [[27, "lucid.models.convnext_large", false]], "convnext_small() (in module lucid.models)": [[28, "lucid.models.convnext_small", false]], "convnext_tiny() (in module lucid.models)": [[29, "lucid.models.convnext_tiny", false]], "convnext_xlarge() (in module lucid.models)": [[30, "lucid.models.convnext_xlarge", false]], "cos() (in module lucid)": [[309, "lucid.cos", false]], "cosh() (in module lucid)": [[310, "lucid.cosh", false]], "cross_entropy() (in module lucid.nn.functional)": [[158, "lucid.nn.functional.cross_entropy", false]], "crossentropyloss (class in lucid.nn)": [[228, "lucid.nn.CrossEntropyLoss", false]], "cube() (in module lucid)": [[311, "lucid.cube", false]], "dataloader (class in lucid.data)": [[1, "lucid.data.DataLoader", false]], "dataset (class in lucid.data)": [[2, "lucid.data.Dataset", false]], "densenet (class in lucid.models)": [[31, "lucid.models.DenseNet", false]], "densenet_121() (in module lucid.models)": [[32, "lucid.models.densenet_121", false]], "densenet_169() (in module lucid.models)": [[33, "lucid.models.densenet_169", false]], "densenet_201() (in module lucid.models)": [[34, "lucid.models.densenet_201", false]], "densenet_264() (in module lucid.models)": [[35, "lucid.models.densenet_264", false]], "depthseparableconv1d (class in lucid.nn)": [[183, "lucid.nn.DepthSeparableConv1d", false]], "depthseparableconv2d (class in lucid.nn)": [[184, "lucid.nn.DepthSeparableConv2d", false]], "depthseparableconv3d (class in lucid.nn)": [[185, "lucid.nn.DepthSeparableConv3d", false]], "det() (in module lucid.linalg)": [[13, "lucid.linalg.det", false]], "diag() (in module lucid)": [[294, "lucid.diag", false]], "div() (in module lucid)": [[283, "lucid.div", false]], "dot() (in module lucid)": [[284, "lucid.dot", false]], "drop_block() (in module lucid.nn.functional)": [[146, "lucid.nn.functional.drop_block", false]], "drop_path() (in module lucid.nn.functional)": [[147, "lucid.nn.functional.drop_path", false]], "dropblock (class in lucid.nn)": [[215, "lucid.nn.DropBlock", false]], "dropout (class in lucid.nn)": [[217, "lucid.nn.Dropout", false]], "dropout() (in module lucid.nn.functional)": [[148, "lucid.nn.functional.dropout", false]], "dropout1d (class in lucid.nn)": [[218, "lucid.nn.Dropout1d", false]], "dropout1d() (in module lucid.nn.functional)": [[149, "lucid.nn.functional.dropout1d", false]], "dropout2d (class in lucid.nn)": [[219, "lucid.nn.Dropout2d", false]], "dropout2d() (in module lucid.nn.functional)": [[150, "lucid.nn.functional.dropout2d", false]], "dropout3d (class in lucid.nn)": [[220, "lucid.nn.Dropout3d", false]], "dropout3d() (in module lucid.nn.functional)": [[151, "lucid.nn.functional.dropout3d", false]], "droppath (class in lucid.nn)": [[216, "lucid.nn.DropPath", false]], "efficientnet (class in lucid.models)": [[36, "lucid.models.EfficientNet", false]], "efficientnet_b0() (in module lucid.models)": [[38, "lucid.models.efficientnet_b0", false]], "efficientnet_b1() (in module lucid.models)": [[39, "lucid.models.efficientnet_b1", false]], "efficientnet_b2() (in module lucid.models)": [[40, "lucid.models.efficientnet_b2", false]], "efficientnet_b3() (in module lucid.models)": [[41, "lucid.models.efficientnet_b3", false]], "efficientnet_b4() (in module lucid.models)": [[42, "lucid.models.efficientnet_b4", false]], "efficientnet_b5() (in module lucid.models)": [[43, "lucid.models.efficientnet_b5", false]], "efficientnet_b6() (in module lucid.models)": [[44, "lucid.models.efficientnet_b6", false]], "efficientnet_b7() (in module lucid.models)": [[45, "lucid.models.efficientnet_b7", false]], "efficientnet_v2 (class in lucid.models)": [[37, "lucid.models.EfficientNet_V2", false]], "efficientnet_v2_l() (in module lucid.models)": [[46, "lucid.models.efficientnet_v2_l", false]], "efficientnet_v2_m() (in module lucid.models)": [[47, "lucid.models.efficientnet_v2_m", false]], "efficientnet_v2_s() (in module lucid.models)": [[48, "lucid.models.efficientnet_v2_s", false]], "efficientnet_v2_xl() (in module lucid.models)": [[49, "lucid.models.efficientnet_v2_xl", false]], "eig() (in module lucid.linalg)": [[14, "lucid.linalg.eig", false]], "elu (class in lucid.nn)": [[197, "lucid.nn.ELU", false]], "elu() (in module lucid.nn.functional)": [[131, "lucid.nn.functional.elu", false]], "empty() (in module lucid)": [[295, "lucid.empty", false]], "empty_like() (in module lucid)": [[296, "lucid.empty_like", false]], "exp() (in module lucid)": [[312, "lucid.exp", false]], "eye() (in module lucid)": [[297, "lucid.eye", false]], "fashionmnist (class in lucid.datasets)": [[7, "lucid.datasets.FashionMNIST", false]], "flatten() (in module lucid)": [[331, "lucid.flatten", false]], "gelu (class in lucid.nn)": [[198, "lucid.nn.GELU", false]], "gelu() (in module lucid.nn.functional)": [[132, "lucid.nn.functional.gelu", false]], "grad_enabled() (in module lucid)": [[268, "lucid.grad_enabled", false]], "hardsigmoid (class in lucid.nn)": [[199, "lucid.nn.HardSigmoid", false]], "hardswish (class in lucid.nn)": [[200, "lucid.nn.HardSwish", false]], "hstack() (in module lucid)": [[332, "lucid.hstack", false]], "huber_loss() (in module lucid.nn.functional)": [[159, "lucid.nn.functional.huber_loss", false]], "huberloss (class in lucid.nn)": [[229, "lucid.nn.HuberLoss", false]], "identity (class in lucid.nn)": [[224, "lucid.nn.Identity", false]], "inception (class in lucid.models)": [[50, "lucid.models.Inception", false]], "inception_resnet_v1() (in module lucid.models)": [[55, "lucid.models.inception_resnet_v1", false]], "inception_resnet_v2() (in module lucid.models)": [[56, "lucid.models.inception_resnet_v2", false]], "inception_v1() (in module lucid.models)": [[51, "lucid.models.inception_v1", false]], "inception_v3() (in module lucid.models)": [[52, "lucid.models.inception_v3", false]], "inception_v4() (in module lucid.models)": [[53, "lucid.models.inception_v4", false]], "inceptionresnet (class in lucid.models)": [[54, "lucid.models.InceptionResNet", false]], "inner() (in module lucid)": [[285, "lucid.inner", false]], "instance_norm() (in module lucid.nn.functional)": [[165, "lucid.nn.functional.instance_norm", false]], "instancenorm1d (class in lucid.nn)": [[236, "lucid.nn.InstanceNorm1d", false]], "instancenorm2d (class in lucid.nn)": [[237, "lucid.nn.InstanceNorm2d", false]], "instancenorm3d (class in lucid.nn)": [[238, "lucid.nn.InstanceNorm3d", false]], "interpolate() (in module lucid.nn.functional)": [[178, "lucid.nn.functional.interpolate", false]], "inv() (in module lucid.linalg)": [[16, "lucid.linalg.inv", false]], "kaiming_normal() (in module lucid.nn.init)": [[191, "lucid.nn.init.kaiming_normal", false]], "kaiming_uniform() (in module lucid.nn.init)": [[192, "lucid.nn.init.kaiming_uniform", false]], "layer_norm() (in module lucid.nn.functional)": [[166, "lucid.nn.functional.layer_norm", false]], "layernorm (class in lucid.nn)": [[239, "lucid.nn.LayerNorm", false]], "leaky_relu() (in module lucid.nn.functional)": [[134, "lucid.nn.functional.leaky_relu", false]], "leakyrelu (class in lucid.nn)": [[201, "lucid.nn.LeakyReLU", false]], "lenet (class in lucid.models)": [[58, "lucid.models.LeNet", false]], "lenet_1() (in module lucid.models)": [[59, "lucid.models.lenet_1", false]], "lenet_4() (in module lucid.models)": [[60, "lucid.models.lenet_4", false]], "lenet_5() (in module lucid.models)": [[61, "lucid.models.lenet_5", false]], "linear (class in lucid.nn)": [[225, "lucid.nn.Linear", false]], "linear() (in module lucid.nn.functional)": [[156, "lucid.nn.functional.linear", false]], "linspace() (in module lucid)": [[298, "lucid.linspace", false]], "log() (in module lucid)": [[313, "lucid.log", false]], "lucid": [[10, "module-lucid", false]], "matmul() (in module lucid)": [[286, "lucid.matmul", false]], "matrix_power() (in module lucid.linalg)": [[17, "lucid.linalg.matrix_power", false]], "max() (in module lucid)": [[314, "lucid.max", false]], "max_pool1d() (in module lucid.nn.functional)": [[174, "lucid.nn.functional.max_pool1d", false]], "max_pool2d() (in module lucid.nn.functional)": [[175, "lucid.nn.functional.max_pool2d", false]], "max_pool3d() (in module lucid.nn.functional)": [[176, "lucid.nn.functional.max_pool3d", false]], "maximum() (in module lucid)": [[287, "lucid.maximum", false]], "maxpool1d (class in lucid.nn)": [[247, "lucid.nn.MaxPool1d", false]], "maxpool2d (class in lucid.nn)": [[248, "lucid.nn.MaxPool2d", false]], "maxpool3d (class in lucid.nn)": [[249, "lucid.nn.MaxPool3d", false]], "mean() (in module lucid)": [[315, "lucid.mean", false]], "meshgrid() (in module lucid)": [[334, "lucid.meshgrid", false]], "min() (in module lucid)": [[316, "lucid.min", false]], "minimum() (in module lucid)": [[288, "lucid.minimum", false]], "mnist (class in lucid.datasets)": [[8, "lucid.datasets.MNIST", false]], "mobilenet (class in lucid.models)": [[62, "lucid.models.MobileNet", false]], "mobilenet() (in module lucid.models)": [[65, "lucid.models.mobilenet", false]], "mobilenet_v2 (class in lucid.models)": [[63, "lucid.models.MobileNet_V2", false]], "mobilenet_v2() (in module lucid.models)": [[66, "lucid.models.mobilenet_v2", false]], "mobilenet_v3 (class in lucid.models)": [[64, "lucid.models.MobileNet_V3", false]], "mobilenet_v3_large() (in module lucid.models)": [[67, "lucid.models.mobilenet_v3_large", false]], "mobilenet_v3_small() (in module lucid.models)": [[68, "lucid.models.mobilenet_v3_small", false]], "module": [[10, "module-lucid", false]], "module (class in lucid.nn)": [[123, "lucid.nn.Module", false]], "moduledict (class in lucid.nn)": [[125, "lucid.nn.ModuleDict", false]], "modulelist (class in lucid.nn)": [[126, "lucid.nn.ModuleList", false]], "mse_loss() (in module lucid.nn.functional)": [[161, "lucid.nn.functional.mse_loss", false]], "mseloss (class in lucid.nn)": [[230, "lucid.nn.MSELoss", false]], "mul() (in module lucid)": [[289, "lucid.mul", false]], "nadam (class in lucid.optim)": [[262, "lucid.optim.NAdam", false]], "nll_loss() (in module lucid.nn.functional)": [[162, "lucid.nn.functional.nll_loss", false]], "nllloss (class in lucid.nn)": [[231, "lucid.nn.NLLLoss", false]], "no_grad() (in module lucid)": [[270, "lucid.no_grad", false]], "norm() (in module lucid.linalg)": [[18, "lucid.linalg.norm", false]], "normal() (in module lucid.nn.init)": [[193, "lucid.nn.init.normal", false]], "normalize (class in lucid.transforms)": [[347, "lucid.transforms.Normalize", false]], "ones() (in module lucid)": [[299, "lucid.ones", false]], "ones_like() (in module lucid)": [[300, "lucid.ones_like", false]], "optimizer (class in lucid.optim)": [[254, "lucid.optim.Optimizer", false]], "outer() (in module lucid)": [[290, "lucid.outer", false]], "pad() (in module lucid)": [[335, "lucid.pad", false]], "parameter (class in lucid.nn)": [[124, "lucid.nn.Parameter", false]], "parameterdict (class in lucid.nn)": [[127, "lucid.nn.ParameterDict", false]], "parameterlist (class in lucid.nn)": [[128, "lucid.nn.ParameterList", false]], "pinv() (in module lucid.linalg)": [[19, "lucid.linalg.pinv", false]], "power() (in module lucid)": [[291, "lucid.power", false]], "qr() (in module lucid.linalg)": [[20, "lucid.linalg.qr", false]], "radam (class in lucid.optim)": [[263, "lucid.optim.RAdam", false]], "rand() (in module lucid.random)": [[275, "lucid.random.rand", false]], "randint() (in module lucid.random)": [[276, "lucid.random.randint", false]], "randn() (in module lucid.random)": [[277, "lucid.random.randn", false]], "randomcrop (class in lucid.transforms)": [[348, "lucid.transforms.RandomCrop", false]], "randomgrayscale (class in lucid.transforms)": [[349, "lucid.transforms.RandomGrayscale", false]], "randomhorizontalflip (class in lucid.transforms)": [[350, "lucid.transforms.RandomHorizontalFlip", false]], "randomrotation (class in lucid.transforms)": [[351, "lucid.transforms.RandomRotation", false]], "randomverticalflip (class in lucid.transforms)": [[352, "lucid.transforms.RandomVerticalFlip", false]], "ravel() (in module lucid)": [[336, "lucid.ravel", false]], "reciprocal() (in module lucid)": [[317, "lucid.reciprocal", false]], "register_model() (in module lucid)": [[271, "lucid.register_model", false]], "relu (class in lucid.nn)": [[202, "lucid.nn.ReLU", false]], "relu() (in module lucid.nn.functional)": [[135, "lucid.nn.functional.relu", false]], "relu6 (class in lucid.nn)": [[203, "lucid.nn.ReLU6", false]], "repeat() (in module lucid)": [[337, "lucid.repeat", false]], "reshape() (in module lucid)": [[338, "lucid.reshape", false]], "resize (class in lucid.transforms)": [[353, "lucid.transforms.Resize", false]], "resnest (class in lucid.models)": [[69, "lucid.models.ResNeSt", false]], "resnest_101() (in module lucid.models)": [[70, "lucid.models.resnest_101", false]], "resnest_14() (in module lucid.models)": [[71, "lucid.models.resnest_14", false]], "resnest_200() (in module lucid.models)": [[72, "lucid.models.resnest_200", false]], "resnest_26() (in module lucid.models)": [[73, "lucid.models.resnest_26", false]], "resnest_269() (in module lucid.models)": [[74, "lucid.models.resnest_269", false]], "resnest_50() (in module lucid.models)": [[75, "lucid.models.resnest_50", false]], "resnest_50_1s4x24d() (in module lucid.models)": [[76, "lucid.models.resnest_50_1s4x24d", false]], "resnest_50_4s2x40d() (in module lucid.models)": [[77, "lucid.models.resnest_50_4s2x40d", false]], "resnet (class in lucid.models)": [[78, "lucid.models.ResNet", false]], "resnet_1001() (in module lucid.models)": [[79, "lucid.models.resnet_1001", false]], "resnet_101() (in module lucid.models)": [[80, "lucid.models.resnet_101", false]], "resnet_152() (in module lucid.models)": [[81, "lucid.models.resnet_152", false]], "resnet_18() (in module lucid.models)": [[82, "lucid.models.resnet_18", false]], "resnet_200() (in module lucid.models)": [[83, "lucid.models.resnet_200", false]], "resnet_269() (in module lucid.models)": [[84, "lucid.models.resnet_269", false]], "resnet_34() (in module lucid.models)": [[85, "lucid.models.resnet_34", false]], "resnet_50() (in module lucid.models)": [[86, "lucid.models.resnet_50", false]], "resnext (class in lucid.models)": [[89, "lucid.models.ResNeXt", false]], "resnext_101_32x16d() (in module lucid.models)": [[90, "lucid.models.resnext_101_32x16d", false]], "resnext_101_32x32d() (in module lucid.models)": [[91, "lucid.models.resnext_101_32x32d", false]], "resnext_101_32x4d() (in module lucid.models)": [[92, "lucid.models.resnext_101_32x4d", false]], "resnext_101_32x8d() (in module lucid.models)": [[93, "lucid.models.resnext_101_32x8d", false]], "resnext_101_64x4d() (in module lucid.models)": [[94, "lucid.models.resnext_101_64x4d", false]], "resnext_50_32x4d() (in module lucid.models)": [[95, "lucid.models.resnext_50_32x4d", false]], "rmsprop (class in lucid.optim)": [[264, "lucid.optim.RMSprop", false]], "rotate() (in module lucid.nn.functional)": [[179, "lucid.nn.functional.rotate", false]], "rprop (class in lucid.optim)": [[265, "lucid.optim.Rprop", false]], "se_resnet_101() (in module lucid.models)": [[97, "lucid.models.se_resnet_101", false]], "se_resnet_152() (in module lucid.models)": [[98, "lucid.models.se_resnet_152", false]], "se_resnet_18() (in module lucid.models)": [[99, "lucid.models.se_resnet_18", false]], "se_resnet_34() (in module lucid.models)": [[100, "lucid.models.se_resnet_34", false]], "se_resnet_50() (in module lucid.models)": [[101, "lucid.models.se_resnet_50", false]], "se_resnext_101_32x4d() (in module lucid.models)": [[102, "lucid.models.se_resnext_101_32x4d", false]], "se_resnext_101_32x8d() (in module lucid.models)": [[103, "lucid.models.se_resnext_101_32x8d", false]], "se_resnext_101_64x4d() (in module lucid.models)": [[104, "lucid.models.se_resnext_101_64x4d", false]], "se_resnext_50_32x4d() (in module lucid.models)": [[105, "lucid.models.se_resnext_50_32x4d", false]], "seed() (in module lucid.random)": [[278, "lucid.random.seed", false]], "selectivekernel (class in lucid.nn)": [[187, "lucid.nn.SelectiveKernel", false]], "selu (class in lucid.nn)": [[204, "lucid.nn.SELU", false]], "selu() (in module lucid.nn.functional)": [[136, "lucid.nn.functional.selu", false]], "semodule (class in lucid.nn)": [[186, "lucid.nn.SEModule", false]], "senet (class in lucid.models)": [[96, "lucid.models.SENet", false]], "sequential (class in lucid.nn)": [[129, "lucid.nn.Sequential", false]], "sgd (class in lucid.optim)": [[266, "lucid.optim.SGD", false]], "sigmoid (class in lucid.nn)": [[205, "lucid.nn.Sigmoid", false]], "sigmoid() (in module lucid.nn.functional)": [[137, "lucid.nn.functional.sigmoid", false]], "sign() (in module lucid)": [[318, "lucid.sign", false]], "sin() (in module lucid)": [[319, "lucid.sin", false]], "sinh() (in module lucid)": [[320, "lucid.sinh", false]], "sk_resnet_18() (in module lucid.models)": [[107, "lucid.models.sk_resnet_18", false]], "sk_resnet_34() (in module lucid.models)": [[108, "lucid.models.sk_resnet_34", false]], "sk_resnet_50() (in module lucid.models)": [[109, "lucid.models.sk_resnet_50", false]], "sk_resnext_50_32x4d() (in module lucid.models)": [[110, "lucid.models.sk_resnext_50_32x4d", false]], "sknet (class in lucid.models)": [[106, "lucid.models.SKNet", false]], "softmax (class in lucid.nn)": [[206, "lucid.nn.Softmax", false]], "softmax() (in module lucid.nn.functional)": [[138, "lucid.nn.functional.softmax", false]], "solve() (in module lucid.linalg)": [[21, "lucid.linalg.solve", false]], "sqrt() (in module lucid)": [[321, "lucid.sqrt", false]], "square() (in module lucid)": [[322, "lucid.square", false]], "squeeze() (in module lucid)": [[339, "lucid.squeeze", false]], "stack() (in module lucid)": [[340, "lucid.stack", false]], "sub() (in module lucid)": [[292, "lucid.sub", false]], "sum() (in module lucid)": [[323, "lucid.sum", false]], "summarize() (in module lucid.models)": [[121, "lucid.models.summarize", false]], "svd() (in module lucid.linalg)": [[22, "lucid.linalg.svd", false]], "swish (class in lucid.nn)": [[207, "lucid.nn.Swish", false]], "tan() (in module lucid)": [[324, "lucid.tan", false]], "tanh (class in lucid.nn)": [[208, "lucid.nn.Tanh", false]], "tanh() (in module lucid)": [[325, "lucid.tanh", false]], "tanh() (in module lucid.nn.functional)": [[139, "lucid.nn.functional.tanh", false]], "tensor (class in lucid)": [[281, "lucid.Tensor", false]], "tensor() (in module lucid)": [[329, "lucid.tensor", false]], "tile() (in module lucid)": [[341, "lucid.tile", false]], "totensor (class in lucid.transforms)": [[345, "lucid.transforms.ToTensor", false]], "trace() (in module lucid)": [[326, "lucid.trace", false]], "transpose() (in module lucid)": [[327, "lucid.transpose", false]], "unfold() (in module lucid.nn.functional)": [[144, "lucid.nn.functional.unfold", false]], "uniform() (in module lucid.nn.init)": [[194, "lucid.nn.init.uniform", false]], "uniform() (in module lucid.random)": [[279, "lucid.random.uniform", false]], "unsqueeze() (in module lucid)": [[342, "lucid.unsqueeze", false]], "upsample (class in lucid.nn)": [[251, "lucid.nn.Upsample", false]], "var() (in module lucid)": [[328, "lucid.var", false]], "vggnet (class in lucid.models)": [[111, "lucid.models.VGGNet", false]], "vggnet_11() (in module lucid.models)": [[112, "lucid.models.vggnet_11", false]], "vggnet_13() (in module lucid.models)": [[113, "lucid.models.vggnet_13", false]], "vggnet_16() (in module lucid.models)": [[114, "lucid.models.vggnet_16", false]], "vggnet_19() (in module lucid.models)": [[115, "lucid.models.vggnet_19", false]], "vstack() (in module lucid)": [[343, "lucid.vstack", false]], "wide_resnet_101() (in module lucid.models)": [[87, "lucid.models.wide_resnet_101", false]], "wide_resnet_50() (in module lucid.models)": [[88, "lucid.models.wide_resnet_50", false]], "xavier_normal() (in module lucid.nn.init)": [[195, "lucid.nn.init.xavier_normal", false]], "xavier_uniform() (in module lucid.nn.init)": [[196, "lucid.nn.init.xavier_uniform", false]], "xception (class in lucid.models)": [[116, "lucid.models.Xception", false]], "xception() (in module lucid.models)": [[117, "lucid.models.xception", false]], "zeros() (in module lucid)": [[301, "lucid.zeros", false]], "zeros_like() (in module lucid)": [[302, "lucid.zeros_like", false]], "zfnet (class in lucid.models)": [[118, "lucid.models.ZFNet", false]], "zfnet() (in module lucid.models)": [[119, "lucid.models.zfnet", false]]}, "objects": {"": [[10, 0, 0, "-", "lucid"]], "lucid": [[281, 1, 1, "", "Tensor"], [304, 2, 1, "", "abs"], [282, 2, 1, "", "add"], [293, 2, 1, "", "arange"], [305, 2, 1, "", "arccos"], [306, 2, 1, "", "arcsin"], [307, 2, 1, "", "arctan"], [308, 2, 1, "", "clip"], [330, 2, 1, "", "concatenate"], [309, 2, 1, "", "cos"], [310, 2, 1, "", "cosh"], [311, 2, 1, "", "cube"], [294, 2, 1, "", "diag"], [283, 2, 1, "", "div"], [284, 2, 1, "", "dot"], [295, 2, 1, "", "empty"], [296, 2, 1, "", "empty_like"], [312, 2, 1, "", "exp"], [297, 2, 1, "", "eye"], [331, 2, 1, "", "flatten"], [268, 2, 1, "", "grad_enabled"], [332, 2, 1, "", "hstack"], [285, 2, 1, "", "inner"], [298, 2, 1, "", "linspace"], [313, 2, 1, "", "log"], [286, 2, 1, "", "matmul"], [314, 2, 1, "", "max"], [287, 2, 1, "", "maximum"], [315, 2, 1, "", "mean"], [334, 2, 1, "", "meshgrid"], [316, 2, 1, "", "min"], [288, 2, 1, "", "minimum"], [289, 2, 1, "", "mul"], [270, 2, 1, "", "no_grad"], [299, 2, 1, "", "ones"], [300, 2, 1, "", "ones_like"], [290, 2, 1, "", "outer"], [335, 2, 1, "", "pad"], [291, 2, 1, "", "power"], [336, 2, 1, "", "ravel"], [317, 2, 1, "", "reciprocal"], [271, 2, 1, "", "register_model"], [337, 2, 1, "", "repeat"], [338, 2, 1, "", "reshape"], [318, 2, 1, "", "sign"], [319, 2, 1, "", "sin"], [320, 2, 1, "", "sinh"], [321, 2, 1, "", "sqrt"], [322, 2, 1, "", "square"], [339, 2, 1, "", "squeeze"], [340, 2, 1, "", "stack"], [292, 2, 1, "", "sub"], [323, 2, 1, "", "sum"], [324, 2, 1, "", "tan"], [325, 2, 1, "", "tanh"], [329, 2, 1, "", "tensor"], [341, 2, 1, "", "tile"], [326, 2, 1, "", "trace"], [327, 2, 1, "", "transpose"], [342, 2, 1, "", "unsqueeze"], [328, 2, 1, "", "var"], [343, 2, 1, "", "vstack"], [301, 2, 1, "", "zeros"], [302, 2, 1, "", "zeros_like"]], "lucid.data": [[0, 1, 1, "", "ConcatDataset"], [1, 1, 1, "", "DataLoader"], [2, 1, 1, "", "Dataset"]], "lucid.datasets": [[5, 1, 1, "", "CIFAR10"], [6, 1, 1, "", "CIFAR100"], [7, 1, 1, "", "FashionMNIST"], [8, 1, 1, "", "MNIST"]], "lucid.linalg": [[12, 2, 1, "", "cholesky"], [13, 2, 1, "", "det"], [14, 2, 1, "", "eig"], [16, 2, 1, "", "inv"], [17, 2, 1, "", "matrix_power"], [18, 2, 1, "", "norm"], [19, 2, 1, "", "pinv"], [20, 2, 1, "", "qr"], [21, 2, 1, "", "solve"], [22, 2, 1, "", "svd"]], "lucid.models": [[23, 1, 1, "", "AlexNet"], [25, 1, 1, "", "ConvNeXt"], [31, 1, 1, "", "DenseNet"], [36, 1, 1, "", "EfficientNet"], [37, 1, 1, "", "EfficientNet_V2"], [50, 1, 1, "", "Inception"], [54, 1, 1, "", "InceptionResNet"], [58, 1, 1, "", "LeNet"], [62, 1, 1, "", "MobileNet"], [63, 1, 1, "", "MobileNet_V2"], [64, 1, 1, "", "MobileNet_V3"], [69, 1, 1, "", "ResNeSt"], [89, 1, 1, "", "ResNeXt"], [78, 1, 1, "", "ResNet"], [96, 1, 1, "", "SENet"], [106, 1, 1, "", "SKNet"], [111, 1, 1, "", "VGGNet"], [116, 1, 1, "", "Xception"], [118, 1, 1, "", "ZFNet"], [24, 2, 1, "", "alexnet"], [26, 2, 1, "", "convnext_base"], [27, 2, 1, "", "convnext_large"], [28, 2, 1, "", "convnext_small"], [29, 2, 1, "", "convnext_tiny"], [30, 2, 1, "", "convnext_xlarge"], [32, 2, 1, "", "densenet_121"], [33, 2, 1, "", "densenet_169"], [34, 2, 1, "", "densenet_201"], [35, 2, 1, "", "densenet_264"], [38, 2, 1, "", "efficientnet_b0"], [39, 2, 1, "", "efficientnet_b1"], [40, 2, 1, "", "efficientnet_b2"], [41, 2, 1, "", "efficientnet_b3"], [42, 2, 1, "", "efficientnet_b4"], [43, 2, 1, "", "efficientnet_b5"], [44, 2, 1, "", "efficientnet_b6"], [45, 2, 1, "", "efficientnet_b7"], [46, 2, 1, "", "efficientnet_v2_l"], [47, 2, 1, "", "efficientnet_v2_m"], [48, 2, 1, "", "efficientnet_v2_s"], [49, 2, 1, "", "efficientnet_v2_xl"], [55, 2, 1, "", "inception_resnet_v1"], [56, 2, 1, "", "inception_resnet_v2"], [51, 2, 1, "", "inception_v1"], [52, 2, 1, "", "inception_v3"], [53, 2, 1, "", "inception_v4"], [59, 2, 1, "", "lenet_1"], [60, 2, 1, "", "lenet_4"], [61, 2, 1, "", "lenet_5"], [65, 2, 1, "", "mobilenet"], [66, 2, 1, "", "mobilenet_v2"], [67, 2, 1, "", "mobilenet_v3_large"], [68, 2, 1, "", "mobilenet_v3_small"], [70, 2, 1, "", "resnest_101"], [71, 2, 1, "", "resnest_14"], [72, 2, 1, "", "resnest_200"], [73, 2, 1, "", "resnest_26"], [74, 2, 1, "", "resnest_269"], [75, 2, 1, "", "resnest_50"], [76, 2, 1, "", "resnest_50_1s4x24d"], [77, 2, 1, "", "resnest_50_4s2x40d"], [79, 2, 1, "", "resnet_1001"], [80, 2, 1, "", "resnet_101"], [81, 2, 1, "", "resnet_152"], [82, 2, 1, "", "resnet_18"], [83, 2, 1, "", "resnet_200"], [84, 2, 1, "", "resnet_269"], [85, 2, 1, "", "resnet_34"], [86, 2, 1, "", "resnet_50"], [90, 2, 1, "", "resnext_101_32x16d"], [91, 2, 1, "", "resnext_101_32x32d"], [92, 2, 1, "", "resnext_101_32x4d"], [93, 2, 1, "", "resnext_101_32x8d"], [94, 2, 1, "", "resnext_101_64x4d"], [95, 2, 1, "", "resnext_50_32x4d"], [97, 2, 1, "", "se_resnet_101"], [98, 2, 1, "", "se_resnet_152"], [99, 2, 1, "", "se_resnet_18"], [100, 2, 1, "", "se_resnet_34"], [101, 2, 1, "", "se_resnet_50"], [102, 2, 1, "", "se_resnext_101_32x4d"], [103, 2, 1, "", "se_resnext_101_32x8d"], [104, 2, 1, "", "se_resnext_101_64x4d"], [105, 2, 1, "", "se_resnext_50_32x4d"], [107, 2, 1, "", "sk_resnet_18"], [108, 2, 1, "", "sk_resnet_34"], [109, 2, 1, "", "sk_resnet_50"], [110, 2, 1, "", "sk_resnext_50_32x4d"], [121, 2, 1, "", "summarize"], [112, 2, 1, "", "vggnet_11"], [113, 2, 1, "", "vggnet_13"], [114, 2, 1, "", "vggnet_16"], [115, 2, 1, "", "vggnet_19"], [87, 2, 1, "", "wide_resnet_101"], [88, 2, 1, "", "wide_resnet_50"], [117, 2, 1, "", "xception"], [119, 2, 1, "", "zfnet"]], "lucid.nn": [[241, 1, 1, "", "AdaptiveAvgPool1d"], [242, 1, 1, "", "AdaptiveAvgPool2d"], [243, 1, 1, "", "AdaptiveAvgPool3d"], [214, 1, 1, "", "AlphaDropout"], [244, 1, 1, "", "AvgPool1d"], [245, 1, 1, "", "AvgPool2d"], [246, 1, 1, "", "AvgPool3d"], [227, 1, 1, "", "BCELoss"], [233, 1, 1, "", "BatchNorm1d"], [234, 1, 1, "", "BatchNorm2d"], [235, 1, 1, "", "BatchNorm3d"], [223, 1, 1, "", "Bilinear"], [122, 1, 1, "", "Buffer"], [210, 1, 1, "", "Conv1d"], [211, 1, 1, "", "Conv2d"], [212, 1, 1, "", "Conv3d"], [180, 1, 1, "", "ConvBNReLU1d"], [181, 1, 1, "", "ConvBNReLU2d"], [182, 1, 1, "", "ConvBNReLU3d"], [228, 1, 1, "", "CrossEntropyLoss"], [183, 1, 1, "", "DepthSeparableConv1d"], [184, 1, 1, "", "DepthSeparableConv2d"], [185, 1, 1, "", "DepthSeparableConv3d"], [215, 1, 1, "", "DropBlock"], [216, 1, 1, "", "DropPath"], [217, 1, 1, "", "Dropout"], [218, 1, 1, "", "Dropout1d"], [219, 1, 1, "", "Dropout2d"], [220, 1, 1, "", "Dropout3d"], [197, 1, 1, "", "ELU"], [198, 1, 1, "", "GELU"], [199, 1, 1, "", "HardSigmoid"], [200, 1, 1, "", "HardSwish"], [229, 1, 1, "", "HuberLoss"], [224, 1, 1, "", "Identity"], [236, 1, 1, "", "InstanceNorm1d"], [237, 1, 1, "", "InstanceNorm2d"], [238, 1, 1, "", "InstanceNorm3d"], [239, 1, 1, "", "LayerNorm"], [201, 1, 1, "", "LeakyReLU"], [225, 1, 1, "", "Linear"], [230, 1, 1, "", "MSELoss"], [247, 1, 1, "", "MaxPool1d"], [248, 1, 1, "", "MaxPool2d"], [249, 1, 1, "", "MaxPool3d"], [123, 1, 1, "", "Module"], [125, 1, 1, "", "ModuleDict"], [126, 1, 1, "", "ModuleList"], [231, 1, 1, "", "NLLLoss"], [124, 1, 1, "", "Parameter"], [127, 1, 1, "", "ParameterDict"], [128, 1, 1, "", "ParameterList"], [202, 1, 1, "", "ReLU"], [203, 1, 1, "", "ReLU6"], [204, 1, 1, "", "SELU"], [186, 1, 1, "", "SEModule"], [187, 1, 1, "", "SelectiveKernel"], [129, 1, 1, "", "Sequential"], [205, 1, 1, "", "Sigmoid"], [206, 1, 1, "", "Softmax"], [207, 1, 1, "", "Swish"], [208, 1, 1, "", "Tanh"], [251, 1, 1, "", "Upsample"]], "lucid.nn.functional": [[167, 2, 1, "", "adaptive_avg_pool1d"], [168, 2, 1, "", "adaptive_avg_pool2d"], [169, 2, 1, "", "adaptive_avg_pool3d"], [145, 2, 1, "", "alpha_dropout"], [170, 2, 1, "", "avg_pool1d"], [171, 2, 1, "", "avg_pool2d"], [172, 2, 1, "", "avg_pool3d"], [163, 2, 1, "", "batch_norm"], [154, 2, 1, "", "bilinear"], [157, 2, 1, "", "binary_cross_entropy"], [140, 2, 1, "", "conv1d"], [141, 2, 1, "", "conv2d"], [142, 2, 1, "", "conv3d"], [158, 2, 1, "", "cross_entropy"], [146, 2, 1, "", "drop_block"], [147, 2, 1, "", "drop_path"], [148, 2, 1, "", "dropout"], [149, 2, 1, "", "dropout1d"], [150, 2, 1, "", "dropout2d"], [151, 2, 1, "", "dropout3d"], [131, 2, 1, "", "elu"], [132, 2, 1, "", "gelu"], [159, 2, 1, "", "huber_loss"], [165, 2, 1, "", "instance_norm"], [178, 2, 1, "", "interpolate"], [166, 2, 1, "", "layer_norm"], [134, 2, 1, "", "leaky_relu"], [156, 2, 1, "", "linear"], [174, 2, 1, "", "max_pool1d"], [175, 2, 1, "", "max_pool2d"], [176, 2, 1, "", "max_pool3d"], [161, 2, 1, "", "mse_loss"], [162, 2, 1, "", "nll_loss"], [135, 2, 1, "", "relu"], [179, 2, 1, "", "rotate"], [136, 2, 1, "", "selu"], [137, 2, 1, "", "sigmoid"], [138, 2, 1, "", "softmax"], [139, 2, 1, "", "tanh"], [144, 2, 1, "", "unfold"]], "lucid.nn.init": [[189, 2, 1, "", "constant"], [191, 2, 1, "", "kaiming_normal"], [192, 2, 1, "", "kaiming_uniform"], [193, 2, 1, "", "normal"], [194, 2, 1, "", "uniform"], [195, 2, 1, "", "xavier_normal"], [196, 2, 1, "", "xavier_uniform"]], "lucid.optim": [[256, 1, 1, "", "ASGD"], [257, 1, 1, "", "Adadelta"], [258, 1, 1, "", "Adagrad"], [259, 1, 1, "", "Adam"], [260, 1, 1, "", "AdamW"], [261, 1, 1, "", "Adamax"], [262, 1, 1, "", "NAdam"], [254, 1, 1, "", "Optimizer"], [263, 1, 1, "", "RAdam"], [264, 1, 1, "", "RMSprop"], [265, 1, 1, "", "Rprop"], [266, 1, 1, "", "SGD"]], "lucid.random": [[273, 2, 1, "", "bernoulli"], [275, 2, 1, "", "rand"], [276, 2, 1, "", "randint"], [277, 2, 1, "", "randn"], [278, 2, 1, "", "seed"], [279, 2, 1, "", "uniform"]], "lucid.transforms": [[346, 1, 1, "", "CenterCrop"], [344, 1, 1, "", "Compose"], [347, 1, 1, "", "Normalize"], [348, 1, 1, "", "RandomCrop"], [349, 1, 1, "", "RandomGrayscale"], [350, 1, 1, "", "RandomHorizontalFlip"], [351, 1, 1, "", "RandomRotation"], [352, 1, 1, "", "RandomVerticalFlip"], [353, 1, 1, "", "Resize"], [345, 1, 1, "", "ToTensor"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function"}, "terms": {"": [3, 10, 11, 17, 19, 22, 48, 67, 68, 70, 71, 72, 73, 74, 75, 120, 121, 122, 123, 124, 125, 127, 128, 129, 167, 168, 169, 187, 228, 231, 241, 242, 243, 244, 247, 248, 253, 254, 255, 269, 271, 286, 294, 313, 315, 323, 326, 328, 329, 339, 345, 347, 355], "0": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 36, 37, 46, 47, 48, 49, 52, 54, 58, 65, 96, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 327, 328, 329, 330, 332, 335, 336, 337, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355], "000": [5, 6, 7, 8, 295, 296], "0000": [228, 229, 231], "0001": 256, "000e": [295, 296], "001": [256, 259, 260, 262, 263, 266], "002": [261, 262], "004": 262, "005": 201, "008": [65, 120], "01": [134, 201, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266], "01051757": 277, "013": [34, 120], "016": [79, 120], "0205": 228, "0217": 228, "0227": 228, "024": [101, 120], "026": [90, 120], "028": [95, 120], "0299": 228, "032": [46, 86, 120], "03545": 120, "044715": [132, 198], "0450": 228, "0451": 228, "046": [44, 120], "047": [113, 120], "04719755": 305, "0474259": 137, "048": [103, 120], "0480": 228, "04861": 120, "05": [163, 165, 166, 180, 181, 182, 201, 233, 234, 235, 236, 237, 238, 239], "0507": [136, 204], "06": [25, 257, 265], "069": [73, 84, 120], "07": [146, 157, 158, 215, 227, 228], "0700": 228, "0706508": 208, "071": [79, 120], "0721": 228, "073": [109, 120], "07722396": 207, "0794": 231, "08": [259, 260, 261, 262, 263, 264], "0802": 231, "08333333": 19, "085537": 312, "088": [101, 120], "08955": 120, "0900": [206, 228], "096": [117, 120], "0986": [138, 206], "09861229": 313, "0992": 228, "1": [0, 1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 96, 102, 103, 104, 105, 106, 110, 111, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "10": [0, 1, 2, 3, 5, 6, 7, 23, 24, 25, 31, 58, 59, 60, 61, 70, 71, 72, 73, 74, 75, 76, 77, 111, 118, 119, 120, 121, 125, 126, 129, 141, 142, 154, 156, 167, 210, 211, 212, 219, 220, 223, 225, 234, 235, 237, 241, 245, 246, 248, 258, 271, 276, 279, 280, 283, 286, 289, 290, 298, 307, 323, 346, 348, 349, 351], "100": [6, 24, 46, 47, 48, 49, 112, 113, 114, 115, 120, 271, 355], "1000": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], "1000000": 256, "1001": [79, 120, 228], "1003": 228, "1007": 120, "10096": 120, "101": [69, 70, 80, 87, 90, 91, 92, 93, 94, 97, 102, 103, 104, 120], "10106": 120, "1014": 136, "102": [84, 120], "1025": [126, 129], "1026": [126, 129], "1027": [126, 129], "10499": 137, "1050": 205, "1054": 231, "1056": [126, 129], "10590": 120, "108": [47, 120], "1097": 120, "11": [82, 99, 111, 112, 120, 154, 210, 211, 212, 219, 223, 234, 235, 237, 245, 246, 248, 286, 346, 347, 348, 349, 351], "110": [74, 120], "1105": 120, "1109": 120, "111": [40, 120], "1111": 227, "112": [67, 75, 120], "1134": 154, "114b": 349, "119": 154, "1192": [137, 138, 206], "12": [31, 32, 33, 34, 35, 41, 59, 60, 120, 127, 154, 169, 210, 211, 212, 219, 220, 223, 234, 235, 237, 243, 245, 246, 248, 286, 290, 291, 346, 348, 349, 351], "120": [46, 58, 61, 67, 68, 120], "121": [31, 32, 120], "123": [191, 192, 193, 194, 195, 196, 278, 279], "124": [191, 192, 195, 196], "125": 246, "1250": 229, "1251": 120, "1258": 120, "126": [87, 120], "128": [25, 29, 44, 55, 78, 87, 88, 111, 120, 129, 187, 344, 355], "1280": 64, "128x128": [344, 355], "13": [51, 111, 113, 120, 154, 210, 211, 212, 223, 235, 245, 246, 248, 286, 346, 348, 349, 351], "1314": 120, "132": [112, 120], "1324": 120, "133": [113, 120], "136": [48, 120], "138": [114, 120], "14": [33, 71, 120, 210, 211, 212, 219, 220, 223, 235, 245, 246, 248, 272, 286, 290, 346, 348, 349, 351], "1409": 120, "143": [115, 120], "144": 68, "145": 154, "148": [28, 120], "149": [33, 79, 120], "15": [0, 154, 210, 211, 212, 223, 235, 245, 246, 248, 286, 290, 326, 346, 348, 349, 351, 355], "1513": 231, "152": [81, 98, 120], "155": 286, "1556": 120, "1588": [132, 198], "16": [31, 32, 58, 61, 64, 67, 68, 90, 96, 111, 114, 120, 126, 127, 129, 168, 169, 180, 181, 182, 186, 187, 210, 211, 212, 219, 220, 223, 234, 235, 242, 243, 245, 246, 248, 253, 286, 290, 321, 346, 348, 349, 351], "160": [67, 80, 120], "16227766": 20, "16425": 231, "1643": 227, "166": 286, "167": 200, "169": [31, 33, 120], "17": [73, 120, 210, 211, 212, 223, 235, 246, 285, 346, 348, 349, 351], "170": 154, "1704": 120, "17520119": 320, "177": [92, 120], "18": [60, 82, 99, 107, 120, 210, 211, 212, 219, 223, 235, 246, 289, 290, 346, 348, 349, 351], "1800": 228, "184": 67, "18877099": 207, "19": [42, 111, 115, 120, 141, 142, 154, 211, 212, 235, 284, 286], "192": [25, 59, 60, 81, 120], "194": [90, 120], "196": [30, 120], "1966": [138, 205, 206], "197": [27, 120], "198": [67, 120], "1998": [120, 228], "1_53": 120, "1d": [140, 167, 170, 174, 180, 183, 233, 236, 241, 279, 286, 294, 326, 334, 335, 336, 337, 341], "1e": [25, 146, 157, 158, 163, 165, 166, 180, 181, 182, 215, 227, 228, 233, 234, 235, 236, 237, 238, 239, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "1e6": 256, "1s4x24d": 76, "1st": [23, 118], "2": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 36, 37, 46, 47, 48, 49, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 82, 99, 107, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "20": [0, 5, 6, 7, 8, 34, 120, 125, 126, 129, 211, 212, 219, 235, 290, 312], "200": [67, 72, 83, 120], "2004": 120, "201": [34, 72, 120], "2011": 186, "2012": 120, "2014": 120, "2015": 120, "2016": 120, "2017": 120, "2018": [120, 186], "2019": 120, "2020": 120, "2021": 120, "2022": 120, "2023": 186, "2039": 231, "204": 212, "21": [48, 85, 100, 120, 127, 154, 211, 212, 235, 290], "210": [49, 120], "211": 286, "21841": 30, "22": [55, 117, 120, 154, 211, 212, 219, 235, 284, 286], "2201": 120, "221": [49, 120], "2231": [228, 231], "224": [23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 88, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 111, 118, 120], "2247": [233, 234, 235, 236, 237, 238, 239], "224x224": [36, 51, 102, 103, 104, 105, 110], "226": 286, "22752314": 277, "2278": 120, "23": [70, 80, 87, 90, 91, 92, 93, 94, 97, 211, 212, 235], "232": [65, 104, 120], "2324": [120, 204], "234": [191, 192, 193, 194, 195, 196, 279], "235": [41, 120], "238": [68, 120], "23840584": 207, "24": [31, 32, 64, 67, 68, 72, 76, 83, 154, 168, 211, 212, 219, 235, 242, 290], "240": [67, 68, 115, 120], "240x240": 36, "2424": [138, 206], "2447": 206, "246": [59, 120], "24d": 76, "25": [0, 76, 86, 95, 107, 120, 137, 147, 205, 212, 230, 235, 245, 246, 283, 298, 317, 328], "2500": [227, 229, 231], "2512": 197, "2547": 204, "256": [25, 78, 111], "26": [73, 120, 127, 156, 212, 225, 235, 290], "260": 120, "260x260": 36, "26325684": 277, "264": [35, 120], "2689": [138, 205, 206], "26894142": 207, "269": [74, 84, 120], "27": [75, 105, 120, 154, 210, 212, 235, 311], "272": [94, 120], "274": [70, 110, 120], "276": [191, 192, 195, 196], "28": [29, 59, 60, 101, 120, 154, 212, 290], "288": [68, 72, 120], "289": [38, 120], "28x28": [7, 8, 59, 60], "29": [110, 120, 212], "299": [116, 120], "299r": 349, "299x299": [52, 53, 55, 56], "2_i": [236, 237, 238], "2d": [141, 150, 168, 171, 175, 181, 184, 234, 237, 242, 286, 294, 297, 326, 331, 334, 335, 337, 341, 351], "2e": 261, "2nd": [23, 118], "2x": 77, "2x2": [144, 346, 348], "3": [1, 2, 3, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 120, 122, 123, 124, 126, 127, 128, 129, 132, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 159, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353], "30": [43, 52, 74, 77, 84, 120, 126, 179, 212, 351], "300": 120, "300x300": 36, "302": [47, 120], "3026": 231, "30823025": 207, "31": [154, 212, 286], "310": [295, 296], "31622777": 20, "319": 120, "32": [31, 33, 34, 61, 69, 70, 71, 72, 73, 74, 75, 90, 91, 92, 93, 95, 120, 126, 129, 154, 156, 168, 180, 181, 182, 186, 187, 211, 212, 225, 242, 253, 284, 285, 290], "320": [73, 120], "321": [191, 192, 195, 196], "326": [97, 120], "32x16d": 120, "32x32": [5, 6, 58, 61], "32x32d": 120, "32x4d": [102, 105, 110, 120], "32x8d": [103, 120], "33": [35, 120, 126, 129, 156, 212, 225], "33333333": 19, "336": [27, 93, 112, 120], "337": [35, 120], "34": [85, 100, 108, 120, 126, 129, 154, 212, 286, 290], "342": [191, 192, 195, 196], "344": [42, 120], "345": [191, 192, 193, 194, 195, 196, 279], "35": [56, 120, 126, 129, 212], "350": [30, 120], "352": [51, 120], "355": [45, 120], "3567": [227, 231], "357": [114, 119, 120], "36": [72, 81, 83, 98, 212], "3679": [131, 136, 197], "368": [107, 109, 120], "36th": 120, "37": 210, "370": [40, 120], "372": 154, "375": 230, "3750": 229, "37754067": 207, "378": [60, 120], "380": 120, "380x380": 36, "38344152": 275, "384": 25, "38629436": 313, "389056": 312, "38th": 120, "392": [52, 120], "393": [43, 51, 120], "3935": 197, "3d": [142, 151, 169, 172, 176, 182, 185, 212, 235, 238, 243], "3x3": [120, 280], "4": [0, 1, 2, 3, 11, 12, 13, 14, 16, 18, 19, 20, 25, 31, 36, 58, 59, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 108, 109, 120, 121, 127, 129, 140, 141, 142, 144, 146, 147, 149, 150, 151, 154, 156, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 263, 264, 266, 269, 272, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 300, 302, 308, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353], "40": [53, 64, 67, 68, 77, 120], "400": 61, "4044": 227, "4076": 228, "4096": [23, 118], "40d": 77, "41421356": 12, "416": [84, 102, 120], "41666667": 19, "417": [77, 120], "41808962": 277, "419974": 139, "4199743": 208, "42": [154, 186, 272, 280], "421": [191, 192, 195, 196], "423": [191, 192, 193, 194], "42718872": 20, "4278": 120, "4284": 120, "4286": 227, "43": [44, 120, 284, 286], "432": [43, 120], "4323": 197, "4375": 229, "43758721": 275, "44": [80, 92, 120], "440": [48, 120], "4472136": 14, "448": [45, 120], "4495": [235, 238], "45": [108, 120, 154, 179, 351], "4510": 120, "4520": 120, "4545": 214, "455": [94, 120], "456": 120, "456x456": 36, "46": [28, 120], "464": [26, 77, 120], "468": [91, 120], "4700": 120, "4708": 120, "47112767": 307, "472": [91, 120], "48": [31, 34, 35, 68, 70, 74, 84, 102, 120, 156, 225], "480": [33, 67, 120], "481": [67, 120], "483": [75, 120], "49": [97, 120], "4979": 197, "4s2x40d": [77, 120], "4x": 76, "4x4": 353, "5": [1, 2, 10, 11, 16, 17, 18, 19, 23, 25, 36, 38, 52, 58, 59, 60, 61, 64, 67, 68, 106, 107, 108, 109, 118, 120, 121, 123, 124, 125, 126, 127, 129, 132, 137, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 159, 161, 163, 165, 166, 167, 170, 171, 178, 180, 181, 182, 187, 189, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 249, 265, 269, 272, 273, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 302, 304, 305, 306, 314, 315, 316, 317, 318, 323, 326, 327, 328, 329, 332, 334, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "50": [5, 6, 69, 75, 76, 77, 78, 86, 88, 95, 101, 105, 109, 110, 120, 156, 225, 265, 284, 286, 298, 349, 350, 352, 355], "5000": [227, 229, 231], "504": [66, 120], "50_1s4x24d": 120, "510": 120, "5108": 231, "512": [25, 56, 78, 82, 108, 120], "519": 120, "52359878": 306, "528": 120, "528x528": 36, "53": [154, 285], "530": [91, 120], "536": [41, 120], "537": [68, 120], "543": [191, 192, 193, 194, 195, 196, 279], "54308063": 310, "544": [114, 120], "545": 291, "5455": 214, "549": [80, 120], "55": [47, 120], "557": [86, 120], "559": [105, 120], "560": [39, 71, 120], "563": [191, 192, 195, 196], "568": [49, 120], "569": [103, 120], "57": [109, 120, 154], "57079633": [305, 306], "57366333": 278, "576": 68, "586": [53, 120], "587g": 349, "589": [29, 120], "591": [26, 120], "592": [99, 120], "5987": 120, "5995": 120, "5th": [23, 118], "6": [11, 19, 23, 25, 31, 32, 33, 34, 35, 36, 58, 61, 69, 75, 78, 85, 86, 88, 95, 100, 101, 108, 109, 118, 127, 128, 140, 141, 142, 144, 146, 151, 154, 156, 167, 192, 196, 199, 203, 210, 211, 212, 215, 217, 218, 219, 220, 223, 225, 227, 233, 234, 235, 236, 237, 238, 239, 241, 245, 246, 248, 249, 257, 265, 269, 272, 279, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 300, 302, 314, 315, 316, 323, 326, 327, 328, 329, 332, 337, 338, 343, 345, 346, 347, 348, 349, 351, 353], "60": [5, 6, 81, 120], "600": [36, 120], "600x600": 36, "6052": 231, "6065": 197, "608": [119, 120], "61": [24, 61, 120], "6105": 120, "611": [71, 120], "6114": 120, "6124": [233, 234, 235, 236, 237, 238, 239], "617": [46, 120], "62": [119, 120, 154], "62686041": 320, "630": 120, "6321": [131, 197], "63245553": 20, "636": [38, 120], "64": [25, 31, 35, 64, 67, 69, 70, 71, 72, 73, 74, 75, 78, 83, 94, 106, 111, 120, 126, 129, 154, 186, 187], "640": [42, 120], "645": 120, "64589411": 275, "647": [107, 120], "64x4d": [104, 120], "654": [191, 192, 193, 194, 195, 196, 279], "657": [191, 192, 195, 196], "6590": [138, 206], "66": [45, 98, 120], "6652": 206, "66666667": 19, "6667": 227, "667": [115, 120], "6682": 227, "669": [83, 120], "67": 286, "672": [67, 85, 120], "67326": 204, "6733": 136, "676": [76, 120], "678": [191, 192, 193, 194, 195, 196], "68811989": 277, "689": [82, 120], "69314718": 313, "696": [87, 120], "7": [18, 32, 39, 111, 120, 127, 140, 141, 142, 144, 146, 151, 154, 156, 157, 158, 167, 187, 198, 203, 204, 205, 208, 210, 211, 212, 215, 219, 220, 223, 225, 227, 228, 230, 234, 235, 237, 238, 241, 245, 246, 248, 249, 272, 273, 276, 279, 282, 284, 285, 286, 290, 292, 294, 298, 312, 315, 323, 326, 327, 328, 341, 345, 346, 347, 348, 349, 351, 353], "70": [7, 8, 72, 120], "7001": 228, "704": [35, 92, 120], "706": [61, 120], "70710678": [14, 319], "7132": 120, "7141": 120, "7147": 231, "7182818": 312, "72": [64, 67, 68], "726791": 120, "7311": [138, 205, 206], "739": [55, 120], "74": 286, "75": [156, 225, 230, 256, 298], "7581": 136, "760": [70, 110, 120], "76159416": [207, 325], "7616": [139, 208], "76219569": 310, "7635": 204, "767": [27, 120], "768": 25, "770": 120, "772": 291, "778": [99, 120], "78": [88, 120], "78357324": 277, "78539816": 307, "791": [93, 120], "79172504": 275, "792": [90, 120], "795": [39, 120], "797": [85, 120], "7x7": 118, "8": [17, 21, 31, 36, 74, 78, 81, 84, 90, 91, 92, 93, 94, 95, 98, 107, 108, 109, 121, 126, 127, 129, 140, 141, 142, 144, 146, 151, 154, 156, 157, 167, 168, 169, 180, 181, 182, 186, 198, 199, 204, 205, 208, 210, 211, 212, 215, 217, 218, 219, 220, 223, 225, 227, 230, 234, 235, 237, 238, 241, 242, 243, 245, 246, 248, 249, 259, 260, 261, 262, 263, 264, 272, 273, 276, 283, 284, 285, 286, 290, 291, 293, 294, 311, 315, 323, 326, 327, 328, 345, 346, 347, 348, 349, 351, 353], "80": [5, 6, 7, 8, 67], "8005": 228, "808": [81, 120], "817": [52, 120], "818": 120, "8182": 214, "82": 154, "821": [98, 120], "83": [94, 120], "833": 120, "84": [58, 60, 61], "840": [24, 120], "8413": [132, 198], "847": [56, 120], "848": [98, 113, 120], "856": [32, 120], "85772238": 207, "8584": 204, "86": 120, "862": [117, 120], "863": [112, 120], "864": [83, 120], "868": [100, 120], "872": [66, 76, 97, 120], "876": [191, 192, 195, 196, 279], "88": [26, 68, 93, 104, 120], "8808": [138, 205, 206], "884": [28, 120], "886": [87, 120], "887": 291, "891773": 275, "89442719": 14, "895": [108, 120], "896": [105, 120], "9": [0, 1, 3, 8, 21, 25, 40, 120, 141, 144, 146, 154, 156, 167, 210, 211, 212, 215, 219, 223, 225, 227, 234, 235, 237, 241, 245, 246, 248, 256, 257, 259, 260, 261, 262, 263, 264, 266, 272, 273, 276, 279, 282, 286, 290, 291, 292, 294, 321, 322, 345, 346, 347, 348, 349, 351], "904": [95, 120], "90709145": 278, "9091": 214, "9120": 231, "9163": 231, "928": [34, 120], "929": [74, 120], "93": [103, 120], "94": 79, "9486833": 20, "949e": [295, 296], "9526": 137, "9545": 198, "955": [102, 120], "958": [100, 120], "96": [25, 68], "960": 67, "96366276": 275, "9640": 208, "96402758": 325, "968": [30, 120], "973": [88, 120], "978": [32, 120], "984": [53, 104, 120], "99": 264, "9957": 231, "99734545": 278, "999": [0, 259, 260, 261, 262, 263], "A": [1, 3, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 37, 54, 58, 62, 69, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 111, 112, 113, 114, 115, 120, 123, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 162, 163, 165, 166, 178, 187, 214, 215, 217, 218, 219, 220, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 272, 273, 275, 276, 277, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 351], "As": 278, "At": 251, "Be": 0, "By": [0, 2, 3, 10, 79, 80, 81, 82, 83, 84, 85, 86, 124, 179, 253, 263, 269, 273, 275, 276, 277, 279, 345, 355], "For": [2, 3, 4, 10, 12, 13, 14, 16, 17, 18, 19, 21, 129, 131, 132, 134, 135, 136, 137, 139, 154, 156, 178, 191, 192, 195, 196, 204, 210, 211, 212, 223, 225, 233, 234, 235, 236, 237, 238, 253, 255, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 312, 313, 314, 315, 316, 319, 321, 323, 326, 327, 328, 335, 337, 339, 341, 342, 355], "If": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 78, 121, 123, 125, 126, 127, 128, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 147, 151, 154, 156, 163, 165, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 187, 191, 192, 210, 211, 212, 216, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 259, 260, 264, 265, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 349, 350, 352, 353], "In": [3, 10, 19, 140, 141, 142, 228, 231, 268, 269, 270, 344, 355], "It": [1, 2, 3, 7, 10, 19, 20, 21, 23, 25, 32, 33, 34, 35, 50, 51, 52, 58, 59, 60, 61, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 86, 99, 111, 117, 120, 123, 125, 126, 127, 128, 129, 147, 151, 154, 178, 179, 180, 181, 182, 186, 198, 199, 202, 203, 208, 216, 223, 224, 227, 228, 229, 230, 231, 241, 242, 243, 251, 253, 254, 255, 256, 262, 264, 265, 266, 269, 278, 282, 283, 284, 287, 288, 289, 291, 292, 298, 314, 316, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345], "Its": [21, 280], "Near": 19, "No": [144, 147], "Not": 224, "One": [59, 355], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "There": 338, "These": [4, 10, 11, 14, 17, 20, 22, 46, 47, 48, 49, 87, 88, 107, 108, 109, 117, 120, 214, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 265, 272, 280, 355], "To": [3, 120, 255, 273, 277, 280, 295, 296, 334, 355], "With": [3, 144, 147, 345, 355], "_": [17, 125, 126, 128, 129, 131, 132, 134, 135, 136, 137, 139, 156, 178, 234, 235, 236, 237, 238, 244, 245, 246, 247, 248, 249, 256, 257, 259, 260, 261, 262, 264, 266, 284, 285, 286, 290, 326, 327, 346, 347, 348, 350, 351, 352], "_1": [14, 125, 126, 127, 128, 129, 154, 223, 290, 330, 332, 343], "_2": [14, 125, 126, 127, 128, 129, 154, 223, 290, 330, 332, 343], "__call__": [1, 123], "__getitem__": [0, 2, 3, 5, 6, 7, 8], "__init__": [0, 1, 2, 3, 10, 23, 25, 36, 37, 50, 54, 58, 62, 63, 64, 69, 111, 118, 121, 122, 123, 124, 125, 126, 127, 128, 147, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 281, 344, 345], "__iter__": [0, 1], "__len__": [0, 1, 2, 3, 5, 6, 7, 8], "__repr__": 254, "__setattr__": 123, "_activ": 138, "_arraylik": [272, 294, 296, 300, 302], "_arraylikeint": 335, "_arrayorscalar": [122, 124, 272, 273, 281, 329], "_base_activ": 58, "_base_dtyp": [293, 295, 298, 299, 301], "_block": 215, "_c": 347, "_decai": 262, "_fanmod": [191, 192], "_grad_en": [268, 270], "_i": [14, 18, 138, 147, 154, 206, 216, 230, 233, 239, 244, 247, 284, 285, 287, 288, 290, 291, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 337, 339, 342, 343], "_in": [191, 192, 195, 196], "_interpolatetyp": 251, "_j": [138, 206, 244, 247, 290, 315, 323, 327, 328], "_k": 340, "_left": 178, "_make_lay": 111, "_modul": 123, "_n": [14, 125, 126, 127, 128, 129, 330, 332, 343], "_numpyarrai": 272, "_out": [191, 192, 195, 196, 337, 341], "_p": 18, "_pad": 335, "_paddingstr": [180, 181, 182, 183, 184, 185, 210, 211, 212], "_paramet": 123, "_reductiontyp": [157, 158, 159, 161, 162, 227, 228, 229, 230, 231], "_resnestbottleneck": 69, "_right": 178, "_scalar": [189, 193, 194, 195, 196, 272, 293, 298, 308], "_seresnetbottleneck": [97, 98, 101], "_seresnetmodul": [99, 100], "_shapelik": [121, 166, 239, 272, 276, 299, 301, 338, 339, 342], "_size": [167, 168, 169, 215], "_skresnetmodul": [107, 108, 109], "_slope": 201, "_statedict": 254, "_t": [263, 264], "_tensor": [122, 124, 294, 329], "_tensorop": 281, "_u": 19, "_v": 19, "_valu": [308, 335], "_width": 335, "a_i": [287, 288, 291], "aaai": 120, "ab": 303, "abc": [2, 254], "abil": [10, 120, 355], "about": [10, 121], "abov": [10, 268, 270, 278, 294, 297], "absolut": [17, 18, 159, 261, 304], "abstract": [2, 3, 253, 254, 255, 256, 264, 266], "abstractmethod": 254, "acceler": [120, 204, 233, 234, 235, 256, 262, 264, 266], "accept": [224, 275, 281], "access": [0, 2, 3, 4, 5, 6, 7, 8, 90, 91, 92, 93, 94, 95, 122, 124, 125, 126, 127, 128, 129, 338], "accord": [147, 178, 210, 211, 212, 223, 225, 228, 231, 257, 258, 259, 260, 261, 262, 263, 327], "accordingli": 13, "account": [17, 19, 20, 207], "accumul": [256, 257, 258, 282, 283, 287, 288, 289, 292], "accur": 98, "accuraci": [46, 47, 48, 49, 62, 63, 64, 101, 120], "achiev": [89, 90, 91, 92, 93, 94, 95, 120, 140, 141, 142, 167, 241, 242, 243, 262, 350, 352], "across": [0, 5, 6, 25, 65, 122, 126, 129, 166, 167, 168, 169, 195, 196, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 272, 273, 275, 276, 277, 278, 279, 280, 295, 296, 315, 328], "act": 260, "activ": [10, 23, 25, 58, 67, 68, 79, 83, 84, 96, 111, 118, 120, 125, 129, 131, 132, 134, 135, 136, 137, 138, 139, 145, 180, 181, 182, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 217, 218, 219, 220, 227, 228, 231, 233, 234, 235, 239, 314, 316], "actual": [124, 227, 228, 230, 231, 281, 348], "ad": [31, 64, 78, 123, 125, 126, 127, 128, 129, 140, 141, 142, 146, 154, 156, 157, 158, 163, 165, 166, 170, 171, 172, 174, 175, 176, 180, 181, 182, 210, 211, 212, 215, 227, 228, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 257, 258, 259, 260, 261, 262, 263, 264, 271, 342, 355], "adadelta": 267, "adagrad": [257, 267], "adam": [120, 260, 261, 262, 263, 267], "adamax": 267, "adamw": 267, "adapt": [23, 50, 58, 69, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 120, 167, 168, 169, 186, 187, 241, 242, 243, 257, 258, 259, 262, 263, 264, 265], "adaptive_avg_pool1d": [153, 173, 241], "adaptive_avg_pool2d": [153, 173, 242], "adaptive_avg_pool3d": [153, 173, 243], "adaptiveavgpool1d": [222, 250], "adaptiveavgpool2d": [23, 96, 111, 118, 222, 250], "adaptiveavgpool3d": [222, 250], "add": [4, 123, 125, 126, 129, 154, 156, 210, 211, 212, 223, 225, 239, 254, 256, 259, 264, 266, 269, 303, 335, 342], "add_modul": [123, 129], "add_param_group": 254, "addit": [4, 10, 17, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 123, 126, 129, 154, 156, 163, 165, 223, 225, 233, 234, 235, 236, 237, 238, 256, 262, 269, 280, 282, 340], "addition": 262, "address": [228, 231, 259, 260, 263], "adjust": [55, 62, 64, 65, 102, 103, 104, 105, 106, 110, 167, 168, 169, 187, 214, 215, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 255, 259, 263, 264, 265, 332, 343], "advanc": [3, 19, 37, 63, 83, 120, 126, 129, 140, 141, 142, 167, 168, 169, 241, 242, 243, 253, 256], "advantag": [56, 270], "affect": [268, 336, 339, 344], "affin": [180, 181, 182, 233, 234, 235, 236, 237, 238, 239, 351], "after": [17, 23, 67, 68, 118, 124, 125, 126, 127, 128, 129, 151, 186, 187, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 214, 217, 218, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 260, 270, 281, 282, 283, 287, 288, 289, 291, 292, 298, 335, 345], "afterward": 270, "aggreg": [120, 187, 290, 337, 341], "aim": [4, 10], "al": [51, 120], "alex": [5, 6, 120], "alexnet": [57, 118, 120], "algebra": [10, 11, 297], "algorithm": [7, 10, 17, 19, 20, 254, 255, 280], "align": [21, 178, 251, 285, 286], "align_corn": [178, 251], "all": [0, 3, 4, 10, 20, 36, 120, 123, 125, 126, 127, 128, 129, 141, 142, 167, 168, 169, 171, 172, 175, 176, 178, 181, 182, 187, 201, 202, 212, 241, 242, 243, 245, 246, 249, 253, 254, 255, 256, 259, 264, 265, 266, 291, 314, 315, 316, 323, 326, 328, 330, 331, 332, 337, 339, 340, 341, 343, 346, 347, 355], "allevi": [120, 131], "alloc": [295, 296], "allow": [0, 1, 3, 4, 10, 19, 20, 56, 58, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 102, 103, 104, 105, 106, 110, 120, 124, 125, 126, 127, 128, 129, 131, 134, 135, 138, 142, 144, 179, 187, 197, 198, 201, 204, 205, 206, 208, 210, 211, 212, 251, 253, 257, 258, 269, 293, 299, 301, 302, 327, 329, 334, 344, 345, 355], "along": [138, 178, 187, 206, 285, 286, 290, 314, 315, 316, 323, 326, 328, 330, 332, 334, 337, 340, 341, 342, 343, 350, 352], "alongsid": 122, "alpha": [131, 134, 136, 145, 197, 204, 214, 256, 264], "alpha_dropout": [152, 153, 214], "alphadropout": [221, 222], "alphadropoutmodel": 214, "alreadi": 271, "also": [121, 131, 132, 134, 135, 136, 137, 139, 154, 156, 178, 262, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343], "alter": [129, 338], "altern": [1, 198, 257, 286], "alwai": [124, 336, 349, 350, 352], "among": [52, 187], "amount": [140, 141, 142, 170, 171, 172, 174, 175, 176, 183, 184, 185, 262], "amsgrad": [259, 260], "an": [0, 1, 3, 10, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 129, 132, 140, 141, 142, 144, 145, 148, 149, 150, 151, 154, 168, 169, 178, 179, 183, 184, 185, 187, 195, 196, 197, 203, 205, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 225, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 259, 262, 264, 270, 271, 272, 281, 286, 294, 297, 308, 315, 323, 328, 330, 337, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "analog": [337, 341], "analysi": [4, 186, 210, 211, 212, 238, 244, 246, 247, 249], "andreetto": 120, "andrew": 120, "angl": [179, 351], "ani": [0, 1, 2, 3, 17, 19, 24, 78, 106, 117, 119, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 139, 145, 148, 154, 156, 163, 165, 205, 239, 253, 254, 268, 270, 271, 278, 281, 293, 294, 295, 297, 299, 300, 301, 302, 314, 316, 327, 329, 330, 331, 332, 335, 337, 340, 341, 342, 343, 344, 355], "anoth": [128, 292, 300, 302, 345, 355], "api": [4, 241, 242, 243, 355], "appear": 254, "append": [126, 128, 129], "appli": [2, 4, 5, 6, 7, 8, 10, 17, 23, 25, 36, 37, 89, 106, 116, 118, 120, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 180, 181, 182, 186, 187, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 256, 257, 258, 260, 261, 262, 263, 286, 335, 337, 344, 347, 349, 350, 351, 352, 353, 355], "applic": [4, 19, 26, 27, 28, 30, 31, 55, 56, 62, 63, 64, 66, 67, 68, 120, 140, 165, 210, 211, 212, 223, 225, 280, 293, 301, 335, 353], "approach": [3, 54, 129, 260], "appropri": [19, 64, 67, 68, 120, 123, 127, 129, 147, 210, 211, 212, 214, 217, 218, 228, 245, 246, 268, 270], "approx": 136, "approxim": [19, 132, 198, 199, 200, 245, 248], "ar": [1, 2, 3, 4, 10, 13, 14, 16, 17, 19, 20, 21, 22, 46, 47, 48, 49, 50, 51, 52, 120, 122, 123, 124, 125, 126, 127, 128, 129, 138, 140, 141, 142, 144, 147, 154, 156, 168, 169, 178, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 199, 206, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 225, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 256, 259, 260, 262, 263, 264, 265, 266, 268, 270, 271, 272, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 304, 308, 312, 314, 315, 316, 317, 318, 323, 326, 327, 330, 334, 337, 338, 341, 344, 345, 346, 348, 349, 353, 355], "arang": 303, "arbitrari": [126, 224, 295, 296, 308, 313, 315, 319, 321, 323, 327, 328], "arcco": 303, "arch": 271, "architectur": [24, 29, 31, 32, 33, 34, 35, 36, 37, 50, 51, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 125, 126, 127, 128, 129, 132, 186, 199, 200, 202, 207, 223, 224, 253, 271], "arcsin": 303, "arctan": 303, "area": [178, 251], "arg": [123, 224, 271, 295], "argument": [3, 4, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 123, 129, 224, 275, 295, 327], "around": [14, 179, 208], "arr": [272, 330, 332, 340, 343], "arrai": [10, 122, 124, 269, 272, 281, 286, 294, 300, 302, 329, 336, 337, 345, 355], "art": 120, "artifici": 120, "arxiv": 120, "asarrai": 272, "asgd": 267, "aspect": 353, "assign": [123, 125, 127, 129, 178, 228, 231], "assist": [50, 51, 52], "associ": [127, 128], "assum": [0, 1, 254, 255, 268], "attempt": [125, 129], "attent": [69, 76, 77, 106, 120, 128, 154, 186], "attribut": 123, "audio": 210, "augment": [3, 4, 99, 179, 280, 337, 341, 344, 348, 349, 350, 351, 352, 355], "autodiff": 10, "autograd": 253, "automat": [4, 10, 124, 125, 126, 127, 128, 253, 273, 275, 276, 277, 279, 281, 295, 296, 302, 334, 345], "auxiliari": [50, 51, 52, 122], "avail": [4, 5, 6, 7, 8, 10], "avd": 69, "averag": [23, 59, 60, 61, 69, 78, 89, 96, 106, 111, 118, 122, 167, 168, 169, 170, 171, 172, 178, 186, 187, 230, 241, 242, 243, 244, 245, 246, 256, 257, 259, 264, 315], "avg_down": 78, "avg_pool": [244, 245, 246], "avg_pool1d": [153, 173], "avg_pool2d": [153, 173], "avg_pool3d": [153, 173], "avgpool": [23, 96, 111, 118, 187], "avgpool1d": [222, 250], "avgpool1dmodel": 244, "avgpool2d": [222, 250], "avgpool2dmodel": 245, "avgpool3d": [222, 250], "avgpool3dmodel": 246, "avoid": [2, 3, 19, 37, 127, 270, 298], "ax": [11, 269, 314, 315, 316, 323, 327, 328, 337, 339, 341], "axi": [138, 206, 285, 286, 314, 315, 316, 323, 328, 330, 332, 334, 335, 337, 339, 340, 341, 342, 343, 350, 352], "b": [11, 21, 120, 154, 156, 194, 210, 211, 212, 223, 225, 269, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 330, 332, 340, 343, 349], "b0": [36, 38, 120], "b1": [36, 39, 120], "b2": [36, 40, 120], "b3": [36, 41, 120], "b4": [36, 42, 120], "b5": [36, 43, 120], "b6": [36, 44, 120], "b7": [36, 45, 120], "b_i": [287, 288, 291], "back": [178, 245, 246, 271, 285, 290, 337, 341], "backbon": [107, 108, 109], "backpropag": [10, 13, 14, 16, 17, 19, 20, 22, 120, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 154, 156, 178, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 253, 270, 277, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 312, 314, 316, 329, 335, 337, 341, 345], "backward": [10, 122, 124, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 281, 298, 345], "balanc": [28, 37, 46, 47, 48, 49, 64, 90, 91, 92, 93, 94, 95, 120, 229], "bar": 256, "base": [3, 11, 16, 17, 20, 21, 26, 29, 31, 50, 51, 52, 53, 54, 55, 56, 58, 69, 76, 77, 89, 90, 91, 92, 93, 94, 95, 106, 111, 116, 120, 123, 125, 126, 127, 128, 144, 154, 167, 168, 169, 187, 214, 228, 229, 241, 242, 243, 253, 254, 255, 256, 260, 264, 265, 266, 273, 282, 283, 287, 288, 289, 291, 292, 302, 312, 313, 314, 316, 327, 334, 335, 348, 349, 350, 351, 352], "base_width": [69, 70, 71, 72, 73, 74, 75, 87, 88, 89, 106], "basic": [10, 23, 25, 26, 27, 28, 29, 30, 78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 116, 118, 121, 140, 141, 142, 146, 147, 167, 168, 169, 180, 181, 182, 183, 184, 185, 186, 191, 192, 195, 196, 215, 241, 242, 243, 298, 346, 347, 348, 349, 350, 351, 352, 353], "basicblock": [78, 82, 85], "batch": [1, 2, 3, 11, 17, 20, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 55, 56, 96, 102, 103, 104, 105, 110, 140, 141, 142, 144, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 210, 211, 212, 223, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 263, 286, 346, 347, 348, 349, 351, 353], "batch_norm": [153, 164, 233, 234, 235], "batch_norm1": 129, "batch_norm2": 129, "batch_siz": [1, 2, 3, 116, 187], "batchnorm": [180, 181, 182], "batchnorm1d": [180, 222, 240], "batchnorm1dmodel": 233, "batchnorm2d": [129, 181, 222, 240], "batchnorm2dmodel": 234, "batchnorm3d": [182, 222, 240], "batchnorm3dmodel": 235, "bceloss": [222, 232], "becaus": [2, 276], "becom": [18, 123, 257, 265], "been": 207, "befor": [17, 96, 121, 124, 256, 262, 270, 278, 335, 347, 355], "begin": [1, 18, 131, 134, 135, 136, 147, 197, 199, 200, 201, 202, 204, 216, 229, 230, 231, 244, 245, 246, 247, 248, 249, 263, 265, 269, 280, 287, 288, 290, 304, 308, 314, 316, 318, 335], "behav": [216, 229, 326], "behavior": [120, 126, 129, 268, 280, 286, 296, 355], "being": [128, 179, 214, 217, 218, 219, 220, 263, 268, 270, 330, 332, 343], "belong": 0, "below": [20, 51, 52, 53, 55, 56, 58, 59, 60, 61, 286, 294, 297], "benchmark": [5, 6, 7, 8], "benefici": 129, "benefit": [131, 253, 262, 272], "bernoulli": [214, 217, 218, 219, 220, 274], "best": [191, 192, 195, 196], "beta": [233, 234, 235, 236, 237, 238, 239, 259, 260, 261, 262, 263], "beta1": [259, 260, 261, 262, 263], "beta2": [259, 260, 261, 262, 263], "beta_1": [259, 260, 261, 262, 263], "beta_2": [259, 260, 261, 262, 263], "better": [16, 118, 120, 132, 191, 192, 195, 196, 207, 215, 236, 237, 238, 253, 260, 262, 264, 347], "between": [28, 46, 47, 48, 49, 90, 91, 92, 93, 94, 95, 120, 123, 140, 141, 142, 144, 154, 159, 180, 181, 182, 183, 184, 185, 187, 203, 210, 211, 212, 214, 217, 218, 219, 220, 223, 227, 228, 229, 230, 231, 256, 264, 265, 266, 280, 282, 283, 286, 289, 292, 293, 298, 328, 349, 350, 352, 353], "beyond": [10, 126], "bia": [140, 141, 142, 154, 156, 163, 165, 166, 180, 181, 182, 183, 184, 185, 210, 211, 212, 223, 225, 233, 234, 235, 236, 237, 238, 239, 259, 260, 261, 262, 263], "bias": [210, 211, 212, 225, 239, 253], "bias1": 127, "bias2": 127, "big": [183, 184, 185], "bilinear": [153, 155, 178, 222, 226, 251], "bilinearmodel": 223, "binari": [137, 157, 205, 214, 217, 218, 219, 220, 227], "binary_cross_entropi": [153, 160], "block": [31, 32, 33, 34, 35, 36, 37, 54, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120, 123, 144, 146, 147, 180, 181, 182, 187, 210, 211, 212, 215, 270], "block1": [121, 253], "block2": [121, 253], "block_arg": [78, 96], "block_cfg": 37, "block_config": 31, "block_siz": [146, 215], "blue": 349, "bmatrix": 290, "bn": [180, 181, 182], "bn_affin": [180, 181, 182], "bool": [1, 5, 6, 7, 8, 22, 36, 50, 51, 52, 69, 78, 121, 123, 124, 145, 147, 148, 149, 150, 151, 163, 165, 178, 180, 181, 182, 183, 184, 185, 210, 211, 212, 216, 223, 225, 233, 234, 235, 236, 237, 238, 239, 251, 259, 260, 264, 268, 273, 275, 276, 277, 279, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 314, 315, 316, 323, 328, 329, 345], "both": [140, 156, 168, 170, 174, 180, 198, 207, 210, 211, 242, 244, 245, 247, 248, 251, 284, 285, 286, 290, 294, 334, 353], "bottleneck": [31, 63, 64, 66, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 120, 186], "bottleneck_cfg": 64, "bottom": 178, "bound": [192, 194, 196, 265, 279], "box": 4, "branch": [50, 51, 52, 120, 187], "break": 253, "brief": 355, "bright": 355, "broadcast": [219, 220, 315, 323, 328, 338, 342], "buffer": [256, 262, 264, 266], "build": [10, 37, 56, 64, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 106, 107, 108, 109, 120, 123, 126, 129, 253, 355], "built": [3, 10, 79, 83, 84, 129, 253], "burg": 8, "c": [5, 6, 8, 78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 120, 144, 146, 149, 150, 151, 158, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 186, 219, 220, 228, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 269, 332, 343, 347], "c_": [210, 211, 212], "c_in": [140, 141, 142, 180, 181, 182], "c_out": [140, 141, 142], "calcul": [0, 1, 10, 11, 124, 251, 257, 258, 261, 262, 263, 270, 276, 281], "calculu": [12, 19], "call": [1, 123, 268, 271, 282, 283, 286, 287, 288, 289, 291, 292], "callabl": [254, 271, 344], "can": [0, 2, 3, 4, 10, 12, 14, 16, 17, 19, 20, 22, 36, 64, 78, 87, 88, 102, 103, 104, 105, 116, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 134, 140, 141, 142, 147, 179, 187, 198, 201, 203, 208, 210, 211, 212, 236, 237, 238, 245, 246, 247, 248, 249, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 272, 279, 280, 281, 286, 295, 296, 297, 299, 301, 302, 315, 323, 328, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 350, 351, 352, 355], "cannot": [13, 14, 16, 17, 20, 21, 22, 273], "cap": 203, "capabl": [10, 76, 77, 293, 294, 297, 299, 300, 301, 302], "capac": [26, 27, 28, 30, 62, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 110, 120], "captur": [106, 120, 144, 210, 211, 212, 223], "cardin": [69, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 91, 92, 93, 94, 95, 106, 120], "care": 270, "cartesian": 334, "case": [3, 18, 58, 64, 65, 131, 134, 135, 136, 147, 197, 199, 200, 201, 202, 204, 216, 229, 230, 231, 244, 245, 246, 247, 248, 249, 253, 258, 263, 265, 269, 287, 288, 304, 308, 314, 316, 318, 335, 355], "categori": [7, 79, 80, 81, 82, 83, 84, 85, 86], "caus": [3, 19, 256, 264, 266], "cautiou": 0, "cdot": [12, 13, 16, 17, 18, 21, 131, 132, 134, 136, 137, 140, 141, 142, 154, 156, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 186, 195, 196, 198, 199, 200, 205, 207, 214, 223, 225, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 265, 284, 285, 286, 289, 291], "center": [179, 208, 264, 346, 355], "centercrop": [354, 355], "central": 272, "certain": [13, 132, 154, 207, 223, 259, 260, 268, 314, 316], "cfg": [67, 68], "chain": [16, 17, 129, 344, 355], "challeng": [7, 120], "cham": 120, "chanc": [349, 350, 352], "chang": [159, 229, 265, 269, 270, 271, 336, 338, 342, 349, 355], "channel": [25, 31, 36, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 76, 77, 78, 89, 90, 91, 92, 93, 94, 95, 100, 102, 103, 104, 105, 110, 111, 116, 120, 140, 141, 142, 144, 149, 150, 151, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 210, 211, 212, 219, 220, 233, 234, 235, 236, 237, 238, 241, 244, 245, 246, 247, 248, 249, 347, 349, 353], "character": [87, 88], "check": [268, 346, 348], "checkpoint": 255, "chen": 120, "choic": 334, "choleski": 15, "chollet": 120, "choos": 120, "chosen": [214, 215], "christian": 120, "christoph": 8, "chu": 120, "cifar": [5, 6], "cifar10": 9, "cifar100": 9, "cifar100_train": 6, "cifar10_train": 5, "clariti": 272, "class": [3, 4, 10, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 121, 138, 147, 158, 162, 253, 255, 271, 294, 297, 298, 329, 355], "classic": 61, "classif": [4, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 137, 138, 157, 158, 162, 205, 206, 227, 228, 231], "classifi": [23, 50, 51, 52, 58, 59, 60, 61, 78, 89, 106, 111, 116, 118], "cleaner": [1, 270, 286], "clear": [124, 281, 295, 296, 298], "clearli": 272, "clf_in_featur": 58, "clf_layer": 58, "clip": [179, 199, 203, 265, 303], "clockwis": 179, "close": [16, 19, 204, 227, 264], "closer": 197, "closur": [254, 255], "cloth": 7, "cnn": 120, "co": [303, 319], "code": [17, 125, 127, 129, 268, 270, 272, 280], "coeffici": [21, 36, 178, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "col": 144, "collect": [4, 11, 120, 125, 126, 128, 129, 255], "color": [349, 355], "colorjitt": 355, "column": [13, 14, 16, 20, 21, 22, 121, 144, 297, 332, 334], "com": [7, 8], "combin": [1, 3, 53, 54, 55, 110, 120, 126, 129, 131, 132, 180, 181, 182, 186, 187, 198, 215, 228, 253, 262, 263, 315, 323, 328, 330, 355], "combined_dataset": [0, 1], "common": [144, 179, 255, 355], "commonli": [10, 62, 63, 64, 65, 66, 67, 68, 132, 137, 138, 139, 140, 142, 147, 154, 161, 163, 165, 179, 186, 195, 196, 199, 200, 203, 206, 212, 227, 230, 231, 244, 245, 246, 247, 248, 249, 269, 272, 299, 339, 345, 346, 347, 348, 350, 351, 352, 355], "compact": 29, "compar": [28, 29, 87, 88, 118, 120, 280, 340], "compat": [4, 11, 106, 224, 239, 253, 269, 280, 298, 345, 355], "complex": [2, 3, 10, 14, 27, 30, 56, 78, 81, 84, 85, 98, 100, 121, 125, 126, 129, 135, 202, 247, 249, 253, 255, 355], "compon": [19, 50, 51, 52, 53, 54, 55, 56, 123, 126, 255, 281, 355], "compos": [5, 6, 7, 8, 116, 210, 211, 212, 244, 245, 246, 247, 248, 249, 253, 355], "compound": 37, "comprehens": 3, "compris": [87, 88], "comput": [10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 28, 29, 62, 64, 67, 68, 76, 77, 78, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 110, 120, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 144, 154, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 169, 178, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 264, 268, 269, 270, 272, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 335, 337, 341, 345, 355], "computation": [3, 19, 79, 199, 200], "compute_loss": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "concaten": [0, 140, 141, 142, 332, 333, 340, 343], "concept": [10, 19, 63, 120], "condit": [12, 13, 16], "confer": 120, "config": 111, "configur": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 119, 128, 180, 181, 182], "conjunct": [144, 231], "connect": [23, 25, 31, 32, 33, 34, 35, 36, 37, 53, 54, 55, 56, 58, 59, 60, 61, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 111, 116, 118, 120, 156, 186, 187, 210, 211, 212, 225], "consecut": 111, "consid": [3, 16, 19, 31, 129, 191, 192, 195, 196, 253, 265, 268, 295, 296, 355], "consider": 19, "consist": [2, 4, 7, 23, 59, 60, 61, 78, 122, 167, 168, 169, 187, 241, 242, 243, 272, 278, 280, 335, 346, 353, 355], "consistent_tensor": 280, "consol": 121, "constant": [157, 158, 163, 165, 166, 190, 204, 227, 228, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 264, 272, 335], "constant_pad": 335, "constraint": [1, 62, 64, 187], "construct": [10, 32, 33, 34, 35, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 107, 108, 109, 112, 113, 114, 115, 126, 253, 294, 337, 341], "constructor": [32, 33, 34, 35, 46, 47, 48, 49, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 87, 88, 102, 103, 104, 105, 110, 112, 113, 114, 115], "contain": [1, 5, 6, 7, 8, 13, 14, 19, 20, 21, 22, 54, 58, 78, 89, 90, 91, 92, 93, 94, 95, 96, 106, 111, 121, 123, 125, 126, 127, 128, 129, 138, 144, 154, 156, 157, 158, 162, 178, 227, 228, 231, 254, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 296, 298, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 334], "content": 179, "context": [268, 270], "contextmanag": 270, "contigu": [146, 215, 336], "continu": [201, 277], "contrast": [236, 237, 238, 355], "contribut": [146, 178, 214, 217, 218, 219, 220, 244, 247, 248, 249, 256, 262, 326], "control": [25, 89, 187, 197, 229, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 280, 345, 355], "conv": [54, 96, 180, 181, 182, 234, 235], "conv1": [59, 60, 61, 129, 210, 211, 212, 244, 245, 246, 247, 248, 249], "conv1d": [143, 153, 180, 183, 213, 222, 244, 247], "conv1dmodel": 210, "conv2": [59, 60, 61, 129, 210, 211, 212], "conv2d": [126, 129, 143, 153, 181, 184, 213, 222, 234, 245, 248, 253], "conv2dmodel": 211, "conv3d": [143, 153, 182, 185, 213, 222, 235, 246, 249], "conv3dmodel": 212, "conv_bia": [180, 181, 182], "conv_config": 111, "conv_lay": [58, 126], "convblock": 253, "convbnrelu1d": 188, "convbnrelu2d": 188, "convbnrelu3d": 188, "conveni": [4, 24, 119], "convent": 286, "converg": [19, 208, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 347], "convers": [228, 231, 349, 355], "convert": [5, 6, 7, 8, 111, 122, 124, 138, 206, 281, 334, 344, 345, 349, 355], "convnetwork": 126, "convnext": [26, 27, 28, 29, 30, 57, 120], "convnext_bas": 120, "convnext_larg": 120, "convnext_smal": 120, "convnext_tini": 120, "convnext_xlarg": 120, "convolut": [23, 24, 25, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 58, 59, 60, 61, 62, 64, 67, 68, 69, 76, 77, 78, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 110, 111, 116, 118, 119, 120, 126, 140, 141, 142, 144, 180, 181, 182, 183, 184, 185, 186, 187, 210, 211, 212, 245, 246, 248, 249, 335], "convolv": [140, 141, 142, 210, 211, 212], "coordin": 334, "core": [0, 1, 2, 3, 123, 253, 254, 281, 355], "corinna": 8, "corner": [178, 251, 346, 348], "correct": [125, 228, 231, 259, 260, 261, 262, 263, 345], "correctli": [19, 123, 125, 126, 127, 128, 129, 228, 231, 280], "correspond": [0, 1, 2, 5, 6, 7, 8, 14, 65, 67, 68, 87, 88, 107, 108, 109, 125, 127, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 154, 156, 178, 199, 202, 206, 223, 225, 233, 234, 235, 236, 237, 238, 245, 246, 256, 264, 266, 273, 284, 285, 287, 288, 291, 312, 313, 319, 321, 332, 335, 337, 341, 343], "cort": 8, "cosh": [303, 320, 325], "cosin": [305, 309, 310, 319], "cost": [62, 64, 89, 120, 183, 184, 185], "could": 123, "count": [120, 121, 330], "counterclockwis": [179, 351], "cover": [11, 140, 141, 142], "coverag": [167, 168, 169], "creat": [2, 3, 10, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 126, 129, 187, 203, 253, 269, 271, 280, 293, 297, 298, 299, 300, 301, 302, 334, 340, 344, 355], "creation": [46, 47, 48, 49, 126, 129, 355], "criterion": [227, 228, 229, 230, 231], "critic": [19, 255, 280], "crop": [346, 348, 355], "cross": [157, 158, 227, 228], "cross_entropi": [153, 160], "crossentropyloss": [222, 232], "cube": 303, "cumul": [132, 198], "current": [123, 256, 259, 265, 268], "custom": [4, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 117, 118, 119, 122, 125, 126, 127, 128, 129, 179, 180, 181, 182, 197, 201, 253, 280, 297, 298], "custom_config": 111, "custom_lenet": 58, "customiz": 355, "custommodul": 122, "customnetwork": 125, "customparametermodel": [127, 128], "cvpr": 120, "d": [120, 142, 151, 169, 172, 176, 182, 235, 238, 239, 243, 246, 249, 269, 294, 351], "d_": [142, 169, 172, 176, 212, 243, 246, 249], "d_1": 239, "d_2": 239, "d_n": 239, "d_out": [142, 172, 176], "dampen": [256, 264, 266], "data": [4, 5, 6, 7, 8, 10, 17, 122, 124, 128, 139, 140, 142, 144, 150, 151, 156, 179, 180, 181, 182, 187, 202, 208, 210, 211, 212, 225, 238, 244, 246, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 272, 280, 281, 282, 283, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 335, 336, 337, 338, 339, 341, 344, 345, 348, 349, 350, 351, 352, 355], "databas": 8, "dataload": [2, 3], "dataset": [3, 5, 6, 7, 8, 27, 46, 47, 48, 49, 59, 60, 61, 62, 78, 79, 80, 81, 82, 83, 84, 85, 86, 179, 258, 270, 344, 346, 355], "dataset1": [0, 1], "dataset2": [0, 1], "ddot": 290, "debug": [121, 129, 268, 278, 355], "decai": [215, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "decompos": [12, 20, 22], "decomposit": [11, 12, 16, 19, 20, 22], "decor": [90, 91, 92, 93, 94, 95, 271], "decoupl": [120, 257, 258, 260, 261, 262, 263], "decreas": [259, 260, 265], "deep": [1, 3, 4, 10, 54, 78, 79, 80, 81, 83, 84, 90, 91, 92, 93, 94, 95, 97, 98, 101, 120, 163, 198, 204, 253, 280, 298, 344, 345, 355], "deeper": [10, 51, 53, 56, 78, 85, 120, 204], "def": [0, 1, 2, 3, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "default": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 138, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 157, 158, 159, 161, 162, 163, 165, 166, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 201, 206, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 254, 255, 262, 268, 273, 275, 276, 277, 279, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 314, 315, 316, 323, 327, 328, 329, 330, 332, 334, 335, 337, 340, 343, 345, 349, 350, 352], "defin": [1, 3, 4, 10, 25, 31, 37, 50, 51, 52, 53, 54, 55, 56, 58, 64, 69, 78, 96, 107, 108, 109, 111, 125, 126, 127, 128, 129, 147, 198, 200, 203, 207, 227, 228, 229, 230, 231, 244, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 276, 277, 291, 296, 308, 327, 344, 355], "definit": [10, 12, 180, 181, 182, 355], "degre": [179, 351, 355], "delai": 256, "delta": [138, 159, 206, 229, 257], "delta_": [138, 206], "demonstr": [10, 11, 102, 103, 104, 105, 110, 120, 253, 272], "denomin": [163, 165, 166, 180, 181, 182, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 264, 283], "denot": [17, 76, 77, 205, 210, 211, 212, 214, 217, 218, 219, 220, 327], "dens": [10, 31, 32, 33, 34, 35, 120, 147, 258], "dense1": 10, "dense2": 10, "densenet": [32, 33, 34, 35, 57, 120, 186], "densenet_121": 120, "densenet_169": 120, "densenet_201": 120, "densenet_264": 120, "densiti": [132, 198], "depend": [10, 17, 18, 64, 128, 157, 158, 159, 161, 162, 178, 210, 284, 294, 314, 316, 337, 341, 348, 349, 353], "depth": [25, 26, 27, 28, 29, 30, 36, 37, 120, 126, 142, 147, 151, 169, 172, 176, 212, 216, 235, 238, 243, 246, 249], "depth_coef": 36, "depthseparableconv1d": 188, "depthseparableconv2d": 188, "depthseparableconv3d": 188, "depthwis": [25, 62, 116, 120, 140, 141, 142, 183, 184, 185], "depthwise_separ": [183, 184, 185], "der": 120, "deriv": [19, 20, 138, 167, 168, 169, 198, 206, 208, 210, 211, 212, 223, 225, 271], "descend": 22, "descent": [10, 256, 266], "describ": [13, 14], "descript": 355, "deseri": 122, "design": [3, 4, 10, 11, 23, 24, 25, 27, 29, 46, 47, 48, 49, 51, 52, 53, 59, 60, 61, 64, 79, 80, 81, 82, 83, 84, 85, 86, 97, 100, 116, 119, 120, 124, 126, 127, 128, 129, 131, 136, 204, 214, 253, 272, 355], "desir": [117, 122, 167, 168, 169, 215, 241, 242, 243, 251, 327, 329], "destin": 123, "det": [11, 15], "det_a": 13, "detail": [10, 121, 255, 280, 286], "detect": 120, "determin": [0, 10, 11, 12, 13, 58, 87, 88, 167, 168, 169, 191, 192, 195, 196, 210, 211, 212, 241, 242, 243, 245, 246, 248, 249, 264, 268, 273, 275, 276, 277, 279, 295, 296, 346, 348], "determinist": 179, "develop": [10, 253, 280, 355], "deviat": [191, 193, 195, 344, 347, 355], "devic": [63, 64], "diag": [19, 303], "diagon": [19, 20, 22, 294, 297, 326], "diagonaliz": 14, "dict": [24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 107, 108, 109, 110, 117, 119, 123, 125, 127, 224, 254], "dictionari": [58, 123, 124, 125, 127, 129, 254], "differ": [0, 17, 50, 58, 64, 102, 103, 104, 105, 110, 126, 129, 138, 154, 178, 187, 206, 223, 230, 255, 269, 278, 280, 292, 302, 328, 339, 355], "differenti": [10, 12, 21, 198, 253, 273, 275, 276, 277, 279, 281, 293, 295, 296, 299, 301], "digit": [7, 8, 61, 120], "dilat": [140, 141, 142, 180, 181, 182, 183, 184, 185, 210, 211, 212], "dilation_height": 144, "dilation_width": 144, "dim": [25, 228, 231], "dimens": [13, 14, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 78, 89, 106, 111, 118, 120, 124, 138, 154, 156, 163, 165, 166, 168, 169, 178, 186, 187, 206, 210, 211, 212, 215, 233, 234, 235, 236, 237, 238, 239, 242, 243, 245, 246, 247, 248, 249, 251, 269, 272, 275, 279, 281, 285, 295, 314, 315, 316, 323, 326, 327, 328, 330, 332, 335, 337, 339, 340, 341, 342, 343, 346, 348, 353], "dimension": [17, 19, 20, 22, 140, 141, 142, 170, 171, 172, 174, 175, 176, 187, 210, 211, 212, 218, 219, 220, 233, 234, 235, 236, 237, 238, 244, 245, 246, 247, 248, 249, 269, 285, 286, 290, 294, 312, 315, 323, 326, 328, 331, 336, 337, 339, 341], "diminish": 258, "direct": [14, 227, 228, 229, 230, 231, 256, 264, 265, 266], "directli": [46, 47, 48, 49, 120, 125, 126, 127, 128, 178, 251, 257, 258, 260, 261, 262, 263, 278, 280, 329, 355], "directori": [3, 4, 5, 6, 7, 8], "disabl": [147, 215, 216, 268, 270], "discontinu": 318, "discrep": [227, 228, 231], "discret": [273, 276, 280], "disk": 3, "displai": [24, 119, 121], "distribut": [132, 138, 146, 178, 191, 192, 193, 194, 195, 196, 198, 206, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 228, 231, 244, 245, 246, 273, 275, 276, 277, 279, 280, 315, 323, 326, 328, 340, 347, 349, 350, 351, 352], "div": 303, "divers": [179, 350, 352, 355], "diversifi": 355, "divid": [1, 19, 120, 126, 129, 138, 140, 141, 142, 206, 227, 228, 229, 230, 231, 283, 347], "divis": [10, 19, 140, 141, 142, 214, 217, 218, 219, 220, 257, 258, 259, 260, 261, 262, 263, 264, 283], "do": [19, 21, 122, 125, 126, 127, 128, 145, 148, 149, 150, 253, 263, 268, 302, 326, 335], "document": [4, 10, 120, 255, 272, 280], "doe": [10, 17, 18, 19, 20, 22, 121, 122, 125, 126, 127, 128, 129, 196, 259, 260, 265, 268, 270, 273, 275, 276, 277, 278, 279, 293, 294, 295, 296, 297, 299, 300, 301, 302, 338], "doesn": 270, "doi": 120, "domain": 4, "don": 270, "dot": [14, 17, 125, 126, 127, 128, 129, 239, 247, 248, 249, 285, 290, 303, 330, 332, 340, 343], "down": [3, 253, 353], "download": [4, 5, 6, 7, 8], "downsampl": 69, "drawback": 131, "drawn": [275, 276, 277, 279, 280, 351], "drop": [25, 146, 147, 214, 215, 216, 217, 218, 219, 220], "drop_block": [152, 153], "drop_path": [25, 152, 153, 216], "drop_path_r": 37, "drop_prob": 216, "dropblock": [146, 221, 222], "dropout": [23, 36, 37, 46, 47, 48, 49, 52, 111, 118, 120, 132, 145, 149, 150, 151, 214, 215, 218, 219, 220], "dropout1d": [152, 153, 221, 222], "dropout1dmodel": 218, "dropout2d": [152, 153, 221, 222], "dropout3d": [152, 153, 221, 222], "dropout_prob": 52, "dropoutmodel": 217, "droppath": [221, 222], "dtype": [122, 124, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 345], "due": [17, 19, 31, 140, 141, 202, 351], "dummi": 121, "duplic": [125, 127], "dure": [3, 10, 13, 14, 16, 19, 20, 22, 37, 50, 51, 52, 78, 120, 122, 123, 124, 125, 126, 127, 128, 129, 138, 145, 146, 147, 148, 149, 150, 151, 163, 165, 179, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 270, 281, 282, 314, 315, 316, 323, 328, 345, 348, 351, 355], "dy": [134, 201], "dynam": [0, 2, 3, 106, 110, 120, 123, 126, 127, 128, 129, 167, 168, 169, 187, 215, 239, 241, 242, 243, 258, 263, 268], "dynamicnetwork": 126, "e": [0, 13, 14, 16, 17, 20, 22, 36, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 55, 56, 58, 59, 60, 61, 69, 111, 122, 138, 187, 205, 206, 207, 214, 228, 254, 257, 264, 265, 297, 310, 312, 313, 320, 325, 326, 330, 349], "each": [1, 2, 3, 4, 14, 17, 19, 20, 22, 23, 25, 31, 37, 58, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 111, 118, 120, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 154, 156, 163, 165, 167, 168, 169, 186, 187, 199, 202, 206, 210, 211, 212, 214, 217, 218, 219, 220, 223, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 273, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 334, 335, 337, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355], "earli": 263, "eas": [4, 10], "easi": [2, 3, 4, 10, 90, 91, 92, 93, 94, 95, 124, 125, 127], "easier": [3, 125, 126, 129], "easili": [4, 124, 128, 355], "eccv": 120, "economi": 22, "edg": [64, 335], "edu": [5, 6], "educ": [10, 120], "effect": [120, 125, 126, 127, 128, 129, 138, 140, 141, 142, 144, 197, 198, 202, 205, 206, 208, 233, 234, 235, 236, 237, 238, 239, 251, 268, 269, 270, 332, 343], "effici": [1, 2, 3, 5, 6, 7, 8, 10, 11, 16, 21, 28, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 63, 64, 66, 67, 68, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 110, 116, 120, 144, 183, 184, 185, 199, 200, 203, 228, 253, 270], "efficientnet": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 120], "efficientnet_b0": 120, "efficientnet_b1": 120, "efficientnet_b2": 120, "efficientnet_b3": 120, "efficientnet_b4": 120, "efficientnet_b5": 120, "efficientnet_b6": 120, "efficientnet_b7": 120, "efficientnet_v2": [46, 47, 48, 49], "efficientnet_v2_": 120, "efficientnet_v2_l": 120, "efficientnet_v2_m": 120, "efficientnet_v2_xl": 120, "efficientnetv2": 120, "eig": 15, "eigenvalu": [14, 20], "eigenvector": 14, "eigval": 14, "eigvec": 14, "either": [156, 251, 272, 273, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 329, 334], "element": [0, 19, 20, 52, 120, 124, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 180, 181, 182, 183, 184, 185, 186, 199, 200, 202, 206, 207, 210, 211, 212, 214, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 239, 244, 245, 246, 247, 248, 249, 269, 273, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 334, 335, 337, 338, 339, 341], "elementwise_affin": 239, "elsewher": [247, 248, 249, 297], "elu": [133, 153, 209, 222], "elumodel": 197, "embed": [62, 63, 64, 66, 67, 68], "emploi": 37, "empti": [123, 129, 303], "empty_lik": 303, "enabl": [0, 1, 2, 3, 10, 17, 22, 36, 55, 69, 106, 107, 108, 109, 120, 123, 124, 125, 126, 127, 128, 147, 202, 210, 211, 212, 223, 225, 253, 255, 268, 270, 273, 275, 276, 277, 279, 281, 344], "encapsul": [253, 281], "encod": [228, 231], "encompass": 36, "encourag": [146, 215, 217, 218, 219, 220, 227, 228, 231, 259], "end": [18, 131, 134, 135, 136, 147, 197, 199, 200, 201, 202, 204, 216, 229, 230, 231, 244, 245, 246, 247, 248, 249, 263, 265, 287, 288, 290, 293, 298, 304, 308, 314, 316, 318, 330, 335, 355], "enforc": [123, 125, 127], "engin": 19, "enhanc": [26, 52, 53, 55, 56, 60, 63, 76, 77, 87, 88, 102, 103, 104, 105, 110, 118, 119, 120, 125, 127, 187, 203, 355], "ensur": [3, 5, 6, 7, 8, 19, 20, 21, 37, 46, 47, 48, 49, 122, 123, 124, 125, 126, 127, 128, 129, 138, 167, 168, 169, 180, 181, 182, 201, 206, 214, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 291, 298, 315, 323, 328, 335, 345, 346, 347, 348, 349, 353, 355], "enter": 270, "entir": [3, 147, 149, 150, 151, 216, 219, 220, 280], "entri": [37, 58, 67, 68, 339], "entropi": [157, 158, 227, 228], "environ": [10, 67, 68], "ep": [146, 157, 158, 163, 165, 166, 180, 181, 182, 215, 227, 228, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 264], "epoch": [1, 3], "epsilon": [227, 228, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 264], "equal": [17, 178, 244, 245, 246, 298, 346, 348], "equat": [14, 19, 21], "equival": [286, 326, 336], "error": [0, 3, 14, 16, 37, 123, 126, 127, 128, 129, 132, 159, 161, 198, 216, 227, 228, 229, 230, 253, 254, 270, 272, 298], "especi": [3, 125, 127, 128, 205, 269, 270, 272, 278, 344, 345, 349, 355], "essenti": [1, 3, 10, 11, 17, 19, 54, 141, 144, 253, 278, 280, 314, 344, 345, 349, 355], "estim": [230, 259, 260, 261, 262, 263, 264], "et": [51, 120], "eta": 265, "eta_": 265, "etc": [31, 37, 69, 227, 251, 345], "euclidean": 18, "european": 120, "eval": 216, "evalu": [123, 163, 165, 214, 215, 216, 217, 218, 219, 220, 233, 234, 235, 236, 237, 238, 355], "even": [257, 270, 293, 294, 297, 299, 300, 301, 302], "evenli": [167, 168, 169, 241, 242, 243, 293, 298], "everi": [1, 355], "everywher": 318, "exact": [123, 126, 327, 349, 351], "exactli": 129, "exampl": [4, 286], "excel": 53, "except": [0, 318, 330, 332, 343], "excit": [36, 64, 67, 68, 96, 99, 102, 103, 104, 105, 120, 186], "exclus": [276, 279, 293], "exdb": 8, "execut": [126, 270], "exist": [21, 125, 127, 129, 271, 330], "exit": 270, "exp": [131, 136, 137, 139, 197, 204, 303], "expand": [4, 120, 144, 337, 341], "expans": [30, 67, 68], "expansion_factor": 64, "expect": [12, 126, 129, 147, 214, 216, 217, 218, 219, 220, 239, 253, 272], "expens": 3, "experi": [10, 278, 280, 355], "experiment": 280, "explan": [17, 19, 23, 25, 111, 118, 167, 168, 169, 241, 242, 243, 256], "explicit": 129, "explicitli": [120, 125, 127], "explod": [204, 233, 234, 235], "explor": [253, 280], "expon": [17, 291], "exponenti": [131, 136, 138, 197, 204, 206, 214, 259, 260, 261, 262, 263, 312], "express": 27, "extend": [4, 69, 89, 106, 120], "extens": [120, 255], "extern": [4, 10], "extra": [30, 49], "extract": [50, 54, 78, 89, 106, 116, 120, 144, 212, 244, 246, 271, 294, 314, 316, 346, 348], "extractor": [58, 59, 60, 61, 116], "extrem": [19, 79, 120], "ey": 303, "f": [1, 4, 5, 6, 7, 8, 10, 120, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 203, 206], "f_1": 186, "f_2": 186, "facilit": [50, 125, 129, 138, 206, 210, 211, 212, 253, 255, 347, 355], "factor": [36, 52, 131, 140, 141, 142, 144, 186, 195, 196, 251, 256, 263, 264, 265, 266, 272], "factori": 117, "failur": [125, 126, 127, 128, 253], "fals": [1, 5, 6, 7, 8, 22, 36, 67, 68, 78, 121, 122, 123, 124, 145, 147, 148, 149, 150, 151, 163, 165, 178, 189, 191, 192, 193, 194, 195, 196, 210, 211, 212, 216, 223, 225, 251, 259, 260, 264, 268, 273, 275, 276, 277, 279, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 314, 315, 316, 323, 328, 329, 345], "famili": [30, 120, 271], "fan": [191, 192, 195, 196], "fan_in": [191, 192], "fan_out": [191, 192], "fashion": 7, "fashion_train": 7, "fashionmnist": 9, "fast": 263, "faster": [120, 258, 262, 270], "fc": [54, 78, 89, 96, 106, 126, 186, 211, 212, 244, 245, 246, 247, 248, 249], "fc1": [60, 61, 121, 125, 129, 198, 199, 200, 202, 203, 204, 205, 207, 208, 225], "fc2": [60, 61, 121, 125, 129, 198, 199, 200, 202, 204, 205, 207, 208, 225], "fc3": 61, "featur": [3, 23, 25, 27, 28, 30, 31, 50, 53, 54, 58, 59, 60, 61, 76, 77, 78, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 106, 107, 108, 109, 111, 116, 118, 119, 120, 146, 154, 156, 163, 180, 181, 182, 186, 187, 212, 215, 217, 218, 219, 220, 223, 225, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 253, 258], "feature_extractor": 58, "fed": [3, 355], "feed": [3, 281, 355], "feedforward": 121, "fergu": [118, 120], "fetch": 0, "few": 121, "fewer": [1, 70, 71, 72, 73, 74, 75, 120], "field": [5, 6, 8, 106, 110, 120, 187], "file": [3, 271], "fill": [189, 193, 194, 275, 276, 277, 279, 299, 300, 301, 302], "filter": [37, 118, 120, 140, 141, 142, 144, 180, 181, 182, 211, 212], "filter_height": 144, "filter_s": 144, "filter_width": 144, "final": [25, 31, 32, 33, 34, 35, 36, 37, 50, 51, 52, 53, 54, 55, 56, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 125, 126, 127, 128, 129, 187, 344, 355], "find": [21, 314, 316], "fine": [186, 355], "finish": 270, "first": [5, 6, 7, 8, 14, 58, 118, 121, 126, 127, 154, 186, 223, 259, 260, 261, 262, 263, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 334, 343, 344, 345, 355], "fit": 253, "fix": [126, 335], "flatten": [54, 58, 129, 144, 290, 333, 336, 337], "flexibl": [1, 3, 4, 10, 50, 54, 55, 56, 58, 65, 69, 78, 102, 103, 104, 105, 110, 111, 116, 120, 125, 126, 127, 128, 129, 251, 253, 255, 272, 299, 300, 345, 355], "flip": [350, 352, 355], "float": [2, 5, 6, 7, 8, 25, 36, 37, 52, 62, 65, 122, 124, 131, 134, 145, 146, 147, 148, 149, 150, 151, 157, 158, 159, 163, 165, 166, 179, 180, 181, 182, 189, 193, 194, 195, 196, 197, 201, 214, 215, 216, 217, 218, 219, 220, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 279, 281, 293, 296, 298, 308, 329, 347, 349, 350, 351, 352], "float32": [122, 124, 281, 293, 294, 297, 298, 299, 301, 329, 345], "float64": [302, 329, 345], "flow": [53, 54, 96, 120, 129, 146, 196, 198, 205, 208, 210, 211, 212, 223, 225, 268], "fly": [2, 3], "fname": 3, "focu": 10, "focus": 10, "follow": [0, 10, 11, 14, 20, 21, 22, 23, 25, 32, 33, 34, 35, 36, 67, 68, 102, 103, 104, 105, 110, 111, 116, 118, 121, 131, 132, 134, 135, 136, 137, 138, 139, 154, 156, 178, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 272, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 314, 316, 334, 338, 346, 347, 348, 349, 350, 351, 352, 355], "forc": 146, "form": [20, 187, 290, 334, 337, 341, 355], "format": [2, 3, 5, 6, 7, 8, 121, 228, 231, 345], "formul": 132, "formula": [14, 22, 138, 167, 168, 169, 206, 207, 229, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 286, 328, 349], "forward": [10, 23, 25, 26, 27, 28, 29, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 111, 118, 121, 122, 123, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "found": 10, "foundat": [54, 96, 123, 253, 255, 281], "four": [32, 33, 34, 35, 70, 71, 72, 73, 74, 75, 335], "frac": [12, 13, 14, 16, 17, 18, 19, 21, 22, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 154, 156, 167, 168, 169, 170, 171, 172, 174, 175, 176, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 257, 258, 259, 260, 261, 262, 263, 264, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347], "frame": 151, "framework": [4, 10, 120, 228, 231, 233, 234, 235, 236, 237, 238, 254, 255, 355], "frequent": [228, 231], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 17, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 144, 146, 154, 163, 165, 178, 180, 181, 182, 186, 187, 189, 191, 192, 193, 194, 195, 196, 203, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 286, 287, 288, 292, 294, 314, 315, 316, 323, 328, 330, 332, 334, 337, 339, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 355], "full": [22, 65, 67, 68], "full_matric": 22, "fulli": [4, 11, 23, 25, 31, 32, 33, 34, 35, 36, 37, 54, 58, 59, 60, 61, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 111, 116, 118, 120, 156, 186, 187, 225, 280], "func": 271, "function": [3, 4, 5, 6, 7, 8, 10, 11, 123, 125, 126, 127, 128, 129, 180, 181, 182, 186, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 253, 255, 272, 280, 344, 355], "fundament": [10, 156, 225, 345], "further": [10, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 64, 65, 66, 67, 68, 76, 77, 280, 315, 323, 328], "fuse": 106, "fusion": [107, 108, 109], "futur": 224, "g": [0, 13, 14, 17, 20, 22, 36, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 55, 56, 58, 59, 60, 61, 69, 111, 120, 186, 187, 214, 254, 257, 264, 330, 349], "g_": 258, "g_t": 264, "gain": [195, 196], "gamma": [233, 234, 235, 236, 237, 238, 239], "gap": [78, 89, 106, 186], "gaussian": [132, 198], "gelu": [133, 153, 209, 222], "gelunetwork": 198, "gener": [19, 26, 121, 147, 179, 214, 215, 217, 218, 219, 220, 237, 260, 262, 263, 270, 273, 275, 276, 277, 278, 279, 280, 285, 293, 295, 296, 298, 334, 348, 349, 350, 352, 355], "geoffrei": [5, 6], "get": [5, 6, 7, 8], "github": 7, "give": [10, 256, 264], "given": [13, 14, 17, 19, 20, 22, 144, 227, 228, 231, 254, 268, 273, 300, 302, 344, 349, 350, 352, 355], "global": [0, 36, 78, 89, 96, 106, 186, 268, 270, 278, 280], "go": [51, 120], "goal": [227, 228, 231], "googlenet": [51, 120], "gpu": 120, "grad": [122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 144, 147, 154, 156, 178, 183, 184, 185, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 254, 255, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 352, 353], "grad_output": 17, "gradient": [10, 11, 53, 54, 120, 122, 124, 215, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 273, 275, 276, 277, 279, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 345], "grain": 186, "graph": [10, 196, 281, 293, 294, 297, 299, 300, 301, 302, 345], "grayscal": [7, 8, 58, 59, 60, 61, 349, 355], "greater": 308, "green": 349, "grid": 334, "groundbreak": 120, "group": [69, 76, 77, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 110, 120, 126, 140, 141, 142, 180, 181, 182, 187, 210, 211, 212, 254, 255], "group1": 126, "group2": 126, "groupedconvblock": 89, "growth_rat": [31, 32, 33, 34, 35], "guarante": 278, "h": [78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 120, 141, 142, 144, 146, 150, 151, 168, 169, 171, 172, 175, 176, 178, 179, 181, 182, 186, 234, 235, 237, 238, 242, 243, 246, 249, 346, 348], "h_": [141, 142, 168, 169, 171, 172, 175, 176, 178, 211, 212, 242, 243, 245, 246, 248, 249], "h_out": [141, 142, 171, 172, 175, 176], "h_stack": 332, "ha": [0, 14, 26, 121, 129, 140, 141, 142, 180, 181, 182, 203, 207, 227, 228, 233, 234, 235, 236, 237, 238, 239, 251, 254, 255, 286, 326, 330, 332, 340, 343, 349], "half": 321, "han": 7, "hand": 21, "handl": [0, 3, 10, 19, 123, 125, 126, 127, 128, 129, 228, 231, 253, 255, 270], "handwritten": [7, 8, 61], "hang": 120, "hard": [67, 68, 200], "hard_sigmoid": 199, "hardsigmoid": [200, 209, 222], "hardswish": [209, 222], "hardwar": 10, "hat": [259, 260, 261, 262, 263], "have": [0, 1, 13, 14, 16, 19, 20, 22, 124, 126, 128, 129, 141, 142, 146, 196, 253, 297, 299, 300, 301, 302, 314, 316, 330, 332, 334, 339, 340, 343, 347, 353], "he": 120, "head": [25, 64, 116], "height": [116, 141, 142, 144, 150, 151, 168, 169, 171, 172, 175, 176, 178, 179, 187, 211, 212, 234, 235, 237, 238, 242, 243, 245, 246, 248, 249, 251, 346, 348, 353], "help": [10, 52, 134, 136, 151, 197, 201, 203, 204, 208, 233, 234, 235, 244, 245, 247, 248, 256, 259, 260, 262, 268, 269, 270, 272], "henc": 338, "here": [3, 12, 123, 154, 253, 255, 269, 270, 272, 280, 344, 345, 355], "hidden": [23, 118, 126], "hidden_s": 126, "hierarch": [25, 126, 129, 253], "hierarchi": 211, "hierarchicalnetwork": 126, "high": [10, 27, 46, 47, 48, 49, 64, 86, 101, 110, 276, 279], "higher": [37, 62, 89, 228, 231, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 285, 286, 290, 312], "highest": [30, 276], "highli": [30, 66, 120], "highlight": [186, 247, 248, 249], "hint": 272, "hinton": [5, 6], "histor": 258, "histori": [273, 275, 276, 277, 279, 293, 294, 295, 296, 297, 299, 300, 301, 302], "hold": [125, 126, 127, 128], "horizont": [332, 340, 350, 355], "hot": [228, 231], "how": [2, 3, 10, 102, 103, 104, 105, 110, 126, 129, 253, 272, 355], "howard": 120, "howev": [122, 196], "hstack": 333, "html": [5, 6], "http": [5, 6, 7, 8], "hu": [120, 186], "huang": 120, "huber": [159, 229], "huber_loss": [153, 160], "huberloss": [222, 232], "huberregressionmodel": 229, "hue": 355, "hyperbol": [139, 208, 310, 320, 325], "hyperparamet": [70, 71, 72, 73, 74, 75, 78, 89, 117, 254, 256], "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "iccv": 120, "idea": 120, "ideal": [10, 27, 62, 129], "ident": [16, 17, 120, 179, 216, 222, 226, 278, 280, 297, 338], "identifi": 127, "idx": [2, 3], "ieee": [120, 186], "ii": 326, "ij": [138, 178, 206, 284, 285, 286, 290, 334], "ik": [284, 285, 286], "ill": [13, 19], "ilsvrc": 120, "imag": [3, 4, 5, 6, 7, 8, 23, 24, 25, 26, 32, 33, 34, 35, 37, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 119, 120, 141, 165, 179, 181, 186, 211, 237, 334, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "image_dir": 3, "image_path": 3, "imagedataset": 3, "imageio": 3, "imagenet": [32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 62, 63, 64, 65, 66, 67, 68, 87, 88, 102, 103, 104, 105, 110, 120], "imbal": [228, 231], "impact": [120, 262], "implement": [2, 3, 10, 19, 23, 25, 31, 36, 50, 51, 52, 53, 55, 56, 58, 62, 63, 64, 78, 87, 88, 90, 91, 92, 93, 94, 95, 96, 116, 118, 120, 123, 144, 147, 183, 184, 185, 187, 216, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 332, 343, 349], "impli": [210, 211], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "improp": [126, 129, 280], "improv": [25, 37, 51, 52, 53, 54, 56, 69, 78, 89, 102, 103, 104, 105, 106, 118, 120, 146, 147, 163, 179, 186, 198, 204, 208, 256, 257, 258, 259, 260, 261, 262, 263, 264, 272, 348, 351, 355], "imread": 3, "in1_featur": [154, 223], "in2_featur": [154, 223], "in_channel": [78, 126, 129, 180, 181, 182, 183, 184, 185, 186, 187, 210, 211, 212, 234, 235, 244, 245, 246, 247, 248, 249, 253], "in_featur": [125, 126, 129, 156, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 214, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 236, 239, 244, 245, 246, 247, 248, 249], "incept": [51, 52, 53, 54, 55, 56, 57, 120], "inception_resnet_v1": 120, "inception_resnet_v2": 120, "inception_v1": 120, "inception_v3": 120, "inception_v4": 120, "inceptionresnet": [55, 56], "includ": [3, 4, 7, 10, 11, 17, 18, 23, 25, 50, 51, 52, 55, 58, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 111, 117, 118, 121, 123, 124, 126, 128, 129, 178, 180, 181, 182, 183, 184, 185, 251, 253, 254, 255, 262, 272, 280, 286, 335], "inclus": [124, 127, 276, 279, 298], "incom": [156, 225], "incomplet": 2, "incompletedataset": 2, "incorpor": [22, 66, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 120, 198], "increas": [27, 28, 62, 89, 90, 91, 92, 93, 94, 95, 106, 140, 141, 142, 144, 179, 258, 265, 269, 332, 343, 349, 350, 352, 355], "independ": [126, 140, 141, 142, 214, 217, 218, 219, 220, 239, 286, 296, 347, 349, 351, 353], "index": [0, 2, 5, 6, 7, 8, 269, 293, 294, 297, 334, 338], "indexerror": 0, "indic": [0, 1, 76, 77, 111, 121, 124, 126, 128, 129, 158, 162, 228, 231, 244, 268, 281, 346, 348], "individu": [3, 126, 129, 229, 239, 255, 258, 265], "induc": [136, 204], "inf": 324, "infer": [102, 103, 104, 105, 110, 126, 129, 270], "infin": [20, 22, 261], "inform": [10, 120, 121, 122, 186, 255, 257, 270], "infti": [18, 263], "inherit": [1, 256, 264, 266], "init": 190, "initi": [1, 25, 31, 54, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 112, 113, 114, 115, 117, 122, 124, 125, 126, 127, 128, 129, 187, 189, 191, 192, 193, 194, 195, 196, 210, 211, 212, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 239, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 275, 278, 279, 280, 293, 297, 298, 299, 300, 301, 302, 329], "initial_accumulator_valu": 258, "inner": [10, 284, 303], "innov": 64, "input": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 102, 103, 104, 105, 106, 110, 116, 118, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 272, 280, 281, 282, 284, 285, 286, 290, 294, 296, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "input1": 223, "input2": 223, "input_": [23, 25, 26, 27, 28, 29, 30, 118, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 241, 242, 243], "input_1": 154, "input_2": 154, "input_data": [197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249], "input_s": [126, 128, 206, 228, 231], "input_shap": 121, "input_tensor": [10, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 111, 116, 122, 125, 126, 127, 128, 129, 138, 146, 147, 183, 184, 185, 186, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 253, 346, 347, 348, 349, 350, 351, 352, 353], "insid": [3, 268, 270], "insight": [10, 120], "inspect": [123, 124, 129, 254], "inspir": [25, 120], "instabl": [19, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "instal": 10, "instanc": [0, 1, 10, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 117, 119, 121, 123, 124, 125, 127, 128, 129, 165, 203, 236, 237, 238, 239, 254, 271, 329, 337, 341, 355], "instance_norm": [153, 164, 236, 237, 238], "instancenorm1d": [222, 240], "instancenorm1dmodel": 236, "instancenorm2d": [222, 240], "instancenorm3d": [222, 240], "instanti": [2, 36, 46, 47, 48, 49, 102, 103, 104, 105, 110, 271], "instead": [10, 121, 125, 126, 127, 128, 129, 191, 192, 195, 196, 259, 260, 261, 270, 272, 295, 296], "int": [0, 1, 2, 5, 6, 7, 8, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 138, 140, 141, 142, 144, 146, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 193, 194, 195, 196, 206, 210, 211, 212, 215, 223, 225, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 259, 260, 261, 262, 263, 265, 271, 273, 275, 276, 277, 278, 279, 281, 293, 294, 295, 297, 298, 299, 301, 308, 314, 315, 316, 323, 327, 328, 329, 330, 335, 337, 338, 339, 340, 341, 342, 346, 348, 353], "integ": [1, 3, 17, 96, 111, 140, 141, 142, 168, 169, 210, 211, 212, 239, 242, 243, 245, 246, 247, 248, 249, 272, 276, 277, 279, 280, 295, 299, 301, 315, 323, 327, 328, 335, 337, 338, 341], "integr": [1, 2, 4, 5, 6, 7, 8, 11, 69, 120, 124, 126, 128, 129, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 223, 225, 244, 245, 246, 247, 248, 249], "intellig": [120, 186], "intend": [122, 127, 128], "intens": [19, 31, 79, 347, 349], "intent": 272, "interact": [154, 223, 253, 280], "interdepend": 120, "interfac": [2, 123, 126, 255], "interfer": [268, 270], "intermedi": [19, 76, 77, 186], "intern": [79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 120, 125, 126, 127, 128, 129, 228, 231, 253, 346, 347, 348, 349, 350, 351, 352, 353], "interpol": [153, 177, 251, 298, 353], "interpret": [120, 138, 206, 272, 330], "interv": [275, 279, 293], "introduc": [37, 51, 52, 62, 63, 64, 89, 120, 135, 186, 198, 202, 203, 205, 208, 214, 217, 218, 219, 220, 348, 351, 355], "introspect": 129, "intuit": [10, 125, 127, 253, 355], "inv": 15, "inv_a": 16, "invari": [245, 248], "invers": [10, 13, 16, 17, 19, 258, 305, 306, 307], "invert": [13, 16, 17, 21, 63, 64, 66, 120], "invok": 271, "involv": [12, 13, 14, 16, 19, 20, 22, 106, 131, 132, 134, 135, 136, 137, 139, 154, 156, 178, 210, 211, 212, 223, 225, 272, 273, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 302, 312, 313, 314, 316, 319, 321, 334, 335, 337, 341], "is_leaf": 281, "issu": [3, 204, 233, 234, 235, 259, 260], "item": [7, 230], "iter": [0, 1, 2, 3, 122, 123, 126, 128, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 293], "ith": [138, 206], "its": [4, 17, 19, 23, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 107, 108, 109, 118, 120, 121, 122, 125, 126, 127, 128, 140, 141, 142, 144, 179, 187, 196, 198, 202, 207, 215, 247, 248, 249, 253, 254, 257, 265, 268, 269, 270, 271, 293, 295, 296, 301, 314, 316, 329, 338, 347, 350, 352, 355], "itself": [12, 17, 125, 126, 127, 128], "j": [8, 138, 186, 206, 233, 234, 235, 236, 237, 238, 244, 245, 247, 248, 334, 340, 346, 348], "jie": 120, "jk": 285, "join": [3, 330], "json": 271, "k": [17, 120, 140, 210, 228, 234, 235, 237, 238, 244, 247, 248, 284, 285, 294, 297, 330], "k_d": [142, 212, 246, 249], "k_h": [141, 142, 211, 212, 245, 246, 249], "k_w": [141, 142, 211, 212, 245, 246, 249], "kaim": [120, 191, 192, 195, 196], "kaiming_norm": 190, "kaiming_uniform": 190, "kalenichenko": 120, "karen": 120, "kashif": 7, "keep": [123, 147, 202, 257, 270, 338], "keep_grad": [124, 273, 275, 276, 277, 279, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 345], "keep_var": 123, "keepdim": [314, 315, 316, 323, 328], "kei": [120, 123, 125, 127, 129, 254], "kept": [315, 323, 328], "kernel": [58, 59, 60, 61, 67, 68, 106, 107, 108, 109, 110, 118, 120, 140, 141, 142, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 241, 242, 243, 245, 246, 249], "kernel_s": [64, 67, 68, 106, 107, 108, 109, 126, 129, 170, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 234, 235, 244, 245, 246, 247, 248, 249], "keyerror": 123, "keyword": [24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 119, 123, 224], "kj": [284, 286], "known": 120, "kriz": [5, 6], "krizhevski": [5, 6, 120], "kroneck": [138, 206], "kwarg": [24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 123, 224, 271], "l": [12, 19, 46, 120, 140, 149, 167, 170, 174, 180, 186, 214, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241], "l2": [256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "l_": [140, 167, 170, 174, 210, 241, 244, 247], "l_out": [140, 170, 174], "label": [4, 5, 6, 7, 8, 52, 227, 228, 231], "lambd": 256, "lambda": [14, 136, 204, 256, 260], "lambda_1": 14, "lambda_2": 14, "lambda_i": 14, "lambda_n": 14, "languag": [4, 210, 223, 244, 247], "larg": [0, 3, 19, 27, 30, 31, 46, 49, 64, 67, 79, 80, 81, 84, 97, 98, 120, 183, 184, 185, 203, 229, 253, 256, 259, 260, 261, 264, 265, 266, 270], "larger": [26, 36, 37, 78, 106, 125, 127, 140, 141, 142, 144, 146, 215, 256, 287, 335, 346, 348, 353], "largest": [30, 314], "last": [1, 138, 166, 206, 285, 286, 330, 350, 352], "last_channel": 64, "latest": 4, "layer": [10, 23, 25, 31, 32, 33, 34, 35, 36, 37, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 120, 121, 123, 125, 126, 129, 138, 147, 156, 163, 165, 166, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 206, 210, 211, 212, 216, 223, 224, 225, 231, 239, 244, 245, 246, 247, 248, 249, 253, 280, 335, 345], "layer1": 271, "layer2": 271, "layer_group": 126, "layer_norm": [153, 164, 239], "layer_scale_init": 25, "layer_sequ": [126, 129], "layernorm": [222, 240], "layernormmodel": 239, "le": 120, "lead": [126, 129, 198, 236, 237, 238, 239, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 280], "leaf": 281, "leaki": [134, 201], "leaky_relu": [133, 153, 201], "leakyrelu": [209, 222], "learn": [1, 3, 4, 7, 8, 10, 17, 19, 37, 89, 90, 91, 92, 93, 94, 95, 118, 119, 120, 125, 126, 127, 128, 135, 138, 186, 197, 201, 202, 206, 210, 211, 212, 217, 218, 219, 220, 223, 225, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 278, 298, 344, 345, 355], "learnabl": [122, 123, 124, 163, 165, 166, 180, 181, 182, 210, 211, 212, 223, 225, 233, 234, 235, 236, 237, 238, 239, 253], "least": [19, 20, 22, 251, 326], "lecun": [8, 120], "left": [17, 18, 19, 22, 132, 138, 198, 206, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 247, 248, 249, 346, 348], "leftarrow": 262, "len": [0, 1, 2, 3, 334], "lenet": [57, 59, 60, 61, 120], "lenet_1": 120, "lenet_4": 120, "lenet_5": 120, "length": [126, 140, 149, 167, 170, 174, 210, 224, 233, 236, 241, 244, 247, 335, 347], "leq": [199, 200, 229, 263, 291, 308], "lerp": 178, "less": [0, 131, 134, 159, 197, 201, 228, 229, 231, 298, 308], "let": 14, "level": [10, 54], "leverag": [21, 53, 56, 90, 91, 92, 93, 94, 95, 116, 120, 187, 253], "li": 120, "librari": [3, 10, 11, 123, 253, 254, 255, 271, 272, 280, 281, 355], "lie": 273, "lightweight": [10, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 67, 68, 70, 71, 72, 73, 74, 75, 82, 99, 187, 200, 203], "like": [10, 37, 54, 90, 91, 92, 93, 94, 95, 107, 108, 109, 120, 122, 123, 126, 129, 140, 146, 195, 196, 204, 214, 215, 233, 234, 235, 236, 237, 238, 268, 269, 272, 329, 345, 355], "likelihood": [162, 228, 231], "limit": [29, 67, 68, 121, 203, 257, 308], "linalg": [10, 15], "linalgerror": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [10, 11, 12, 19, 20, 21, 63, 66, 96, 120, 121, 125, 126, 127, 129, 131, 132, 134, 135, 136, 147, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 223, 224, 227, 228, 229, 230, 231, 233, 236, 239, 244, 245, 246, 247, 248, 249, 271, 297], "linearli": 229, "linspac": 303, "linspace_tensor": 298, "list": [0, 1, 25, 37, 58, 64, 69, 78, 89, 96, 106, 111, 121, 122, 124, 125, 126, 127, 128, 166, 187, 224, 239, 254, 272, 273, 275, 276, 277, 279, 281, 294, 295, 296, 299, 300, 301, 302, 327, 338, 339, 342, 344], "listdir": 3, "liter": [78, 157, 158, 159, 161, 162, 178, 180, 181, 182, 183, 184, 185, 187, 191, 192, 210, 211, 212, 227, 228, 229, 230, 231, 251, 334], "liu": 120, "ln": 291, "load": [3, 4, 5, 6, 7, 8, 122, 123, 124, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271], "load_state_dict": [123, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "loader": [1, 2, 3], "local": [120, 144, 210], "locat": [120, 178], "log": [162, 227, 228, 231, 303], "log_softmax": 231, "logarithm": [291, 312, 313], "logic": [3, 241, 242, 243, 253, 254], "logit": [23, 25, 118, 138, 206, 228], "logsoftmax": [228, 231], "long": [262, 327], "loop": [1, 126, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "loss": [10, 19, 125, 126, 127, 128, 129, 138, 157, 158, 159, 161, 162, 197, 198, 201, 202, 204, 205, 206, 208, 214, 217, 218, 219, 220, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "low": [10, 54, 63, 67, 68, 276, 279], "lower": [12, 62, 194, 256, 264, 265, 266, 279], "lowest": 276, "lr": [254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "lu": 16, "lucid": [0, 1, 2, 5, 6, 7, 8, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 274, 303, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "m": [47, 111, 120, 125, 126, 129, 245, 246, 248, 249, 259, 260, 261, 262, 263, 297], "m_": [259, 260, 261, 262, 263], "m_t": [262, 263], "maaten": 120, "machin": [3, 7, 8, 10, 19, 120, 186, 259, 269, 278], "magnitud": [147, 264, 265, 355], "mai": [3, 10, 14, 16, 19, 126, 128, 179, 216, 229, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 270, 280, 349, 355], "main": [10, 20, 54, 126, 294, 297], "maintain": [19, 46, 47, 48, 49, 62, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 110, 120, 122, 123, 125, 126, 127, 129, 136, 147, 191, 192, 195, 196, 197, 198, 204, 214, 216, 217, 218, 219, 220, 233, 234, 235, 236, 237, 238, 259, 264, 346, 349, 353], "make": [1, 3, 10, 27, 28, 50, 54, 58, 63, 66, 67, 68, 78, 120, 126, 129, 205, 228, 229, 239, 245, 248, 253, 258, 259, 260, 261, 269, 271, 280, 281, 286, 334, 344, 355], "manag": [10, 123, 125, 126, 127, 128, 129, 253, 255, 268, 270, 271, 280], "manhattan": 18, "mani": 121, "manipul": [10, 125, 127, 355], "manner": [126, 129], "manual": [157, 158, 162, 227, 228, 231, 270], "map": [76, 77, 78, 89, 99, 106, 120, 123, 137, 139, 146, 186, 205, 208, 216], "mask": [122, 214, 217, 218, 219, 220], "match": [21, 123, 126, 129, 157, 159, 161, 166, 180, 181, 182, 215, 254, 312, 337, 338, 341, 342, 347, 355], "math": [309, 319, 324], "mathbf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 116, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 154, 156, 178, 183, 184, 185, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 284, 285, 286, 290, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353], "mathcal": [191, 193, 195, 214, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239], "mathemat": [16, 180, 181, 182, 348, 350, 351, 352], "mathrm": 19, "matmul": 303, "matric": [11, 13, 14, 16, 19, 21, 22, 284, 285, 286, 297, 334], "matrix": [10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 144, 154, 224, 225, 253, 284, 334], "matrix_pow": 15, "matthew": 120, "max": [18, 96, 111, 135, 174, 175, 176, 199, 200, 202, 203, 247, 248, 249, 261, 287, 303, 308], "max_pool": [247, 248, 249], "max_pool1d": [153, 173], "max_pool2d": [153, 173], "max_pool3d": [153, 173], "max_valu": 308, "maxim": 3, "maximum": [18, 202, 203, 247, 248, 249, 259, 261, 303, 308, 314, 351], "maxpool": [23, 118], "maxpool1d": [222, 250], "maxpool1dmodel": 247, "maxpool2d": [126, 129, 211, 222, 250], "maxpool2dmodel": 248, "maxpool3d": [212, 222, 250], "maxpool3dmodel": 249, "mean": [5, 6, 7, 8, 20, 76, 77, 121, 122, 136, 140, 141, 142, 145, 157, 158, 159, 161, 162, 163, 165, 180, 181, 182, 193, 197, 198, 199, 201, 202, 204, 205, 208, 212, 214, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 259, 260, 261, 262, 263, 264, 268, 277, 303, 308, 312, 313, 314, 316, 319, 321, 323, 326, 327, 328, 344, 347, 355], "meaning": [129, 272], "measur": [227, 228, 230, 231], "mechan": [10, 76, 77, 96, 106, 110, 128, 154], "medium": 47, "membership": 227, "memori": [2, 3, 31, 270, 295, 296], "meshgrid": 333, "method": [3, 10, 11, 16, 37, 96, 116, 117, 125, 126, 127, 128, 129, 157, 158, 159, 161, 162, 191, 192, 195, 196, 227, 228, 229, 230, 231, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 280], "mid_channel": [67, 68], "middl": 269, "might": 253, "min": [199, 200, 203, 288, 303, 308], "min_valu": 308, "mind": [0, 3, 10, 126, 129, 270], "mingx": 120, "mini": 1, "minim": [4, 10, 64, 120, 129, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 255], "minimalist": 10, "minimum": [303, 308, 316], "minu": 205, "mirror": [300, 302], "mismatch": [37, 123, 253, 254], "miss": [123, 253], "mitig": [134, 197, 201, 204, 233, 234, 235], "mlp": 187, "mnist": [4, 7, 9, 59, 60], "mnist_train": [4, 8], "mobil": [62, 63, 64, 66, 67, 68, 120], "mobilenet": [57, 63, 64, 66, 67, 68, 120, 203], "mobilenet_v2": 120, "mobilenet_v3": [67, 68], "mobilenet_v3_larg": 120, "mobilenet_v3_smal": 120, "mobilenetv2": [63, 120], "mobilenetv3": [64, 67, 68, 120], "mode": [10, 151, 163, 165, 178, 191, 192, 214, 216, 217, 218, 219, 220, 251, 335], "model": [1, 3, 4, 10, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 138, 146, 179, 180, 181, 182, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 280, 344, 345, 355], "model_b0": 36, "model_b7": 36, "moder": [28, 100], "modern": [25, 120], "modif": [117, 129, 270], "modifi": [24, 78, 116, 119, 125, 126, 127, 128, 189, 191, 192, 193, 194, 195, 196, 214, 268, 270, 278, 332, 343], "modul": [5, 6, 7, 8, 10, 23, 24, 25, 36, 37, 50, 53, 54, 55, 56, 58, 62, 63, 64, 78, 89, 96, 106, 111, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 147, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 280, 345, 355], "modular": [3, 10, 120, 123, 126, 129, 253, 355], "moduledict": [126, 127, 129, 130], "modulelist": [128, 129, 130], "moment": [259, 260, 261, 262, 263], "momentum": [163, 165, 180, 181, 182, 233, 234, 235, 236, 237, 238, 256, 262, 264, 266], "momentum_decai": 262, "monoton": 207, "moor": 19, "more": [3, 4, 7, 10, 14, 27, 78, 85, 125, 126, 129, 146, 183, 184, 185, 197, 217, 218, 219, 220, 253, 254, 255, 256, 257, 260, 261, 264, 265, 266, 277, 286, 326, 340, 355], "most": [11, 120, 248, 345, 346, 355], "move": [256, 264], "mse": [159, 161, 229, 230], "mse_loss": [153, 160], "mseloss": [222, 232], "mu": [193, 233, 234, 235, 236, 237, 238, 239, 328], "mu_c": 347, "mu_i": [236, 237, 238], "much": 355, "mul": 303, "multi": [3, 4, 55, 106, 107, 108, 109, 120, 138, 158, 162, 187, 206, 228, 231, 315, 323, 328], "multidimension": [275, 279, 295], "multipl": [1, 3, 10, 11, 17, 21, 23, 78, 96, 110, 127, 128, 129, 144, 178, 179, 186, 187, 214, 217, 218, 219, 220, 228, 231, 253, 269, 273, 275, 276, 277, 279, 284, 289, 295, 296, 344, 349, 355], "multipli": [17, 65, 128, 156, 225, 251, 265, 289, 290], "must": [0, 1, 3, 12, 13, 14, 16, 17, 20, 21, 22, 121, 123, 125, 126, 127, 128, 129, 147, 166, 214, 216, 217, 218, 219, 220, 231, 251, 254, 270, 273, 326, 330, 332, 335, 337, 338, 340, 341, 343, 346, 347, 348, 349, 350, 352], "my_simple_model": 271, "mymodel": [123, 124, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "myoptim": [254, 255], "n": [17, 18, 78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 120, 125, 126, 129, 140, 141, 142, 144, 146, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 186, 191, 193, 195, 210, 211, 212, 219, 220, 223, 225, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 297, 315, 326, 328], "n1": 18, "nabla_": [257, 258, 259, 260, 261, 262, 263, 265], "nabla_t": 263, "nadam": 267, "nair": [5, 6], "name": [120, 121, 123, 125, 127, 129, 271, 272], "nan": [20, 22], "natur": [19, 120, 210, 223, 244, 247, 291, 312, 313], "ndarrai": [122, 124, 272, 273, 281, 294, 296, 300, 302, 329], "ndim": [20, 22, 124, 281], "ne": 17, "nearest": [178, 251], "necessari": [4, 5, 6, 7, 8, 19, 270, 332, 343], "need": [2, 4, 126, 127, 128, 138, 223, 253, 270, 295, 296, 344, 345, 355], "neg": [17, 19, 22, 131, 162, 179, 197, 201, 202, 204, 228, 231, 265, 330], "negative_slop": [134, 201], "neglect": 128, "neighbor": 178, "neq": 18, "nest": [121, 126, 129, 253], "nestedmodel": 121, "nesterov": 262, "net": [118, 120], "network": [3, 4, 10, 23, 24, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 61, 62, 65, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 106, 111, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 154, 156, 163, 179, 186, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 264, 266, 279, 280, 281, 293, 299, 301, 314, 316, 335, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "neural": [3, 4, 10, 23, 24, 25, 36, 38, 39, 40, 41, 42, 43, 44, 45, 54, 61, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 141, 142, 147, 154, 156, 163, 179, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 264, 266, 279, 280, 281, 293, 299, 301, 314, 316, 335, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "neuralnetwork": [199, 200, 202, 207], "neuron": 201, "never": 349, "new": [123, 124, 131, 132, 134, 135, 136, 137, 139, 154, 156, 178, 187, 191, 192, 193, 194, 195, 196, 254, 271, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 332, 335, 337, 338, 340, 341, 342, 343], "next": [129, 344], "nll": 162, "nll_loss": [153, 160], "nllloss": [222, 232], "nn": [5, 6, 7, 8, 10, 23, 25, 31, 36, 37, 50, 54, 58, 62, 63, 64, 78, 89, 96, 102, 103, 104, 105, 106, 110, 111, 118, 121, 130, 133, 143, 152, 155, 160, 164, 173, 177, 188, 190, 209, 213, 221, 222, 226, 232, 240, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 345, 355], "no_grad": 268, "node": 281, "nois": [22, 280], "non": [14, 17, 19, 22, 128, 132, 134, 135, 191, 192, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 214, 217, 218, 219, 220, 259, 260, 270, 291, 308], "none": [0, 1, 2, 5, 6, 7, 8, 36, 37, 50, 54, 58, 62, 63, 64, 69, 78, 116, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 147, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353], "norm": [11, 15, 261], "normal": [5, 6, 7, 8, 25, 96, 132, 136, 138, 139, 146, 163, 165, 166, 180, 181, 182, 190, 191, 195, 198, 204, 206, 214, 233, 234, 235, 236, 237, 238, 239, 264, 277, 280, 344, 354, 355], "normalized_shap": [166, 239], "note": [140, 214], "noth": [145, 148, 149, 150], "notimplementederror": [2, 123, 254], "notin": 308, "nov": 120, "novel": [7, 120], "np": [78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 122, 124, 186, 228, 231, 272, 281, 286, 293, 294, 297, 299, 301, 302, 313, 329, 345], "npy": [5, 6, 7, 8], "num": 298, "num_class": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 206, 228, 231], "num_featur": [129, 180, 181, 182, 233, 234, 235, 236, 237, 238], "num_init_featur": [31, 32, 33, 34, 35], "num_paramet": 128, "number": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 140, 141, 142, 144, 149, 150, 151, 154, 156, 158, 162, 163, 165, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 205, 210, 211, 212, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 256, 275, 278, 279, 281, 291, 293, 295, 297, 298, 314, 315, 316, 327, 328, 330, 332, 335, 337, 338, 339, 341, 343, 347, 349, 350, 352, 355], "numer": [16, 19, 146, 157, 158, 163, 165, 166, 180, 181, 182, 203, 215, 227, 228, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 261, 262, 263, 264, 272, 283, 293, 299, 301], "numpi": [10, 122, 124, 228, 231, 272, 281, 286, 294, 297, 298, 313, 326, 329, 335, 337, 341, 345, 355], "o": [3, 246, 249, 299, 300], "object": [1, 3, 11, 106, 120, 123, 127, 128, 230, 253, 270, 282, 283, 287, 288, 289, 292, 329], "observ": 259, "obtain": 1, "occur": [179, 270, 271, 330], "occurr": 17, "odot": [214, 217, 218, 219, 220], "off": [28, 268], "offer": [4, 10, 26, 28, 30, 253, 255, 280, 355], "offset": 297, "often": [17, 87, 88, 140, 141, 142, 144, 215, 228, 231, 293, 301, 345, 349, 353, 355], "older": 262, "onc": 270, "one": [0, 102, 103, 104, 105, 110, 128, 129, 138, 140, 156, 170, 174, 180, 181, 182, 204, 205, 206, 210, 218, 228, 231, 233, 236, 244, 247, 251, 254, 269, 272, 277, 292, 300, 314, 316, 331, 336, 340, 345], "ones": [154, 156, 210, 211, 212, 225, 233, 234, 235, 236, 237, 238, 239, 253, 297, 300, 303], "ones_lik": 303, "onli": [10, 121, 178, 199, 202, 214, 215, 217, 218, 219, 220, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 247, 248, 249, 265, 268, 293, 308, 314, 316, 326, 335, 336, 338, 339], "onto": [20, 22], "openml": [5, 6, 7, 8], "oper": [3, 10, 11, 16, 19, 76, 77, 96, 97, 98, 99, 100, 101, 122, 123, 126, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 144, 147, 151, 154, 156, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 295, 296, 299, 301, 312, 313, 314, 315, 316, 319, 321, 323, 326, 328, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 353], "operatornam": [17, 19], "opposit": 256, "optim": [3, 10, 11, 17, 19, 20, 22, 25, 29, 30, 31, 37, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 67, 68, 120, 122, 124, 127, 128, 144, 210, 211, 212, 253, 270], "optimizer_st": [254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "option": [1, 5, 6, 7, 8, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 138, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 201, 206, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 254, 256, 264, 266, 273, 275, 276, 277, 279, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 314, 315, 316, 323, 327, 328, 329, 330, 334, 337, 339, 340, 345, 349, 350, 352], "ord": 18, "order": [1, 3, 18, 22, 125, 126, 127, 128, 129, 327, 344], "ordered_dict": 129, "ordereddict": [123, 125, 126, 129], "organ": [125, 126, 127, 129, 271], "orient": 355, "origin": [52, 61, 145, 179, 186, 208, 335, 336, 337, 338, 341, 342, 353], "orthogon": [19, 20, 22], "orthonorm": 20, "oscil": [256, 264, 266], "other": [2, 3, 10, 16, 52, 56, 58, 61, 122, 123, 126, 129, 191, 192, 214, 215, 253, 254, 268, 270, 280, 281, 293, 295, 299, 301, 326, 334, 355], "otherwis": [79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 131, 134, 135, 136, 138, 147, 197, 199, 200, 201, 202, 204, 206, 216, 217, 218, 219, 220, 229, 244, 245, 246, 247, 248, 249, 254, 265, 271, 287, 288, 314, 316], "otim": [19, 154, 223], "out": [0, 3, 4, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 191, 192, 195, 196, 210, 211, 212, 214, 216, 217, 218, 219, 220, 241, 242, 243, 244, 245, 246, 247, 248, 249, 256, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343], "out_channel": [58, 64, 67, 68, 126, 129, 180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 234, 235, 244, 245, 246, 247, 248, 249, 253], "out_featur": [125, 126, 129, 154, 156, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 214, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 236, 239, 244, 245, 246, 247, 248, 249], "outcom": [349, 350, 352], "outer": 303, "outlier": [159, 229], "output": [0, 1, 2, 10, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 301, 302, 312, 313, 314, 315, 316, 319, 321, 323, 326, 327, 328, 334, 335, 337, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "output_height": 144, "output_lay": [126, 129], "output_s": [126, 167, 168, 169, 241, 242, 243], "output_width": 144, "outsid": [0, 216], "over": [0, 1, 2, 3, 11, 63, 76, 77, 106, 118, 123, 126, 128, 138, 167, 168, 169, 186, 206, 210, 211, 212, 228, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 256, 257, 258, 259, 260, 275, 279, 314, 315, 316, 323, 326, 328, 349, 350, 352], "overal": [116, 147], "overdetermin": 19, "overfit": [1, 23, 118, 148, 151, 215, 217, 218, 219, 220, 256, 259, 264, 266], "overhead": [64, 120, 186], "overli": 203, "overrid": [2, 3], "overridden": [123, 254], "overwrit": [125, 127], "own": [4, 125, 126, 127, 128, 140, 141, 142, 196, 253, 347], "p": [18, 19, 36, 124, 127, 128, 145, 146, 147, 148, 149, 150, 151, 214, 215, 217, 218, 219, 220, 244, 247, 248, 349, 350, 352, 355], "p_d": [246, 249], "p_h": [245, 246, 249], "p_w": [245, 246, 249], "packag": [2, 3, 4, 11, 120, 253, 255, 271, 278, 280, 345, 355], "pad": [58, 126, 129, 140, 141, 142, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 234, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 333], "pad_after_dim1": 335, "pad_after_dim2": 335, "pad_before_dim1": 335, "pad_before_dim2": 335, "pad_width": 335, "padding_height": 144, "padding_width": 144, "pair": 154, "pang": 120, "paper": 51, "parallel": [1, 3, 106, 120], "param": [123, 124, 127, 128, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "param1": 123, "param_dict": 127, "param_group": [254, 255], "param_groups_setup": 254, "param_list": 128, "param_s": 271, "paramet": [0, 2, 10, 59, 60, 61, 120, 123, 253, 254, 255, 272, 280, 355], "parameterdict": 130, "parameterlist": 130, "parent": 253, "part": [122, 123, 196, 253, 268, 270, 280, 293, 294, 297, 299, 300, 301, 302, 345, 355], "partial": [12, 13, 14, 16, 17, 18, 19, 21, 22, 131, 132, 134, 135, 136, 137, 138, 139, 154, 156, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "particip": [124, 345], "particular": [125, 127], "particularli": [10, 19, 63, 90, 91, 92, 93, 94, 95, 126, 127, 128, 129, 138, 146, 156, 180, 181, 182, 183, 184, 185, 206, 225, 228, 231, 236, 237, 238, 239, 260, 268, 271, 298, 344], "pass": [2, 10, 19, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 121, 123, 124, 125, 126, 127, 128, 129, 178, 180, 181, 182, 186, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 253, 272, 281, 298, 315, 323, 326, 327, 328, 330, 332, 336, 338, 339, 343, 345, 355], "past": [256, 257, 259, 264], "patch": [144, 245], "path": [3, 5, 6, 7, 8, 25, 147, 216], "pathwai": 120, "pattern": [120, 135, 186, 202, 210, 211, 212], "penal": [256, 264, 266], "penalti": [257, 258, 259, 260, 261, 262, 263], "penros": 19, "per": [1, 64, 90, 91, 92, 93, 94, 95, 107, 108, 109, 167, 236, 237, 238, 239, 241], "perform": [3, 10, 11, 12, 19, 23, 25, 26, 27, 28, 29, 30, 37, 46, 47, 48, 49, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 86, 102, 103, 104, 105, 106, 111, 118, 120, 123, 124, 128, 132, 140, 141, 142, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 268, 270, 278, 280, 282, 283, 286, 289, 292, 312, 314, 316, 323, 327, 344, 346, 348, 353, 355], "permut": 327, "persist": [122, 273, 275, 276, 277, 279, 295, 296], "perturb": [14, 21, 22, 355], "phi": [132, 198], "pi": [132, 198, 309, 319, 324], "piecewis": [199, 200], "pil": [345, 355], "pinv": 15, "pioneer": 120, "pipelin": [5, 6, 7, 8, 280, 344, 345, 347], "pixel": [5, 6, 7, 8, 178, 251, 347, 349], "place": [189, 191, 192, 193, 194, 195, 196], "placehold": [123, 224], "plai": [272, 280], "plot": 334, "point": [4, 179, 268], "pointwis": [183, 184, 185], "pool": [23, 58, 59, 60, 61, 69, 78, 89, 96, 106, 111, 118, 120, 167, 168, 169, 170, 171, 172, 174, 175, 176, 186, 187, 211, 212, 241, 242, 243, 244, 245, 246, 247, 248, 249, 314, 316], "pool1": 129, "pool2": 129, "poorli": 16, "popul": 123, "popular": [4, 120], "portion": 355, "pose": 19, "posit": [1, 12, 17, 123, 129, 179, 197, 201, 202, 204, 244, 245, 246, 247, 248, 249, 265, 269, 291, 337, 341, 348], "possibl": [10, 355], "potenti": [19, 224, 264, 339], "power": [10, 17, 63, 67, 68, 69, 120, 186, 269, 270, 303, 344, 345, 355], "pp": 120, "practic": [19, 228, 231], "practition": 355, "pre": [46, 47, 48, 49, 79, 83, 84], "preactbottleneck": [79, 83, 84], "preced": [120, 124, 251, 281], "preconfigur": [38, 39, 40, 41, 42, 43, 44, 45, 55, 56], "predefin": [4, 120, 126, 204], "predict": [116, 227, 228, 230, 231], "prefix": [123, 271], "prepar": [3, 269, 335, 337, 341, 345, 355], "prepend": 123, "preprint": 120, "preprocess": [3, 4, 144, 179, 280, 344, 345, 355], "present": [227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 245], "preserv": [120, 145, 147, 179, 214, 216, 293, 294, 297, 299, 300, 301, 302, 315, 323, 328], "preset": 4, "prevent": [1, 125, 126, 127, 128, 129, 148, 151, 203, 215, 217, 218, 219, 220, 227, 228, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 270], "previou": [120, 256, 265, 270], "previous": 259, "primari": [10, 272], "primarili": 129, "principl": 120, "print": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 268, 269, 270, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353], "priorit": [67, 68, 187, 199], "prob": 273, "probabilist": 280, "probabl": [36, 52, 132, 138, 145, 146, 147, 148, 149, 150, 151, 157, 198, 206, 214, 215, 216, 217, 218, 219, 220, 227, 228, 231, 273, 349, 350, 352, 355], "problem": [19, 20, 22, 120, 134, 197, 201, 263], "proceed": 120, "process": [2, 3, 4, 17, 20, 22, 23, 25, 55, 76, 77, 78, 106, 117, 118, 120, 128, 140, 141, 142, 165, 179, 180, 181, 182, 186, 187, 204, 208, 210, 212, 223, 233, 234, 235, 236, 237, 238, 239, 244, 246, 247, 249, 256, 272, 334, 345, 346, 347, 348, 353, 355], "produc": [23, 118, 121, 167, 168, 169, 186, 210, 211, 212, 241, 242, 243, 278, 280], "product": [10, 20, 22, 200, 205, 207, 223, 239, 253, 284, 285, 289, 290], "program": [268, 280], "progress": [37, 258], "project": [20, 22], "projector": 19, "promin": [244, 246, 247, 248, 249], "promot": [129, 228, 231, 253], "propag": [13, 14, 16, 19, 20, 21, 22, 120, 123, 129, 154, 156, 178, 186, 245, 246, 264, 265, 273, 284, 285, 286, 290, 314, 316, 334, 335, 338, 342], "properli": [0, 128, 138, 206, 253], "properti": [11, 13, 16, 17, 132, 136, 145, 198, 204, 214, 258, 263], "proport": [5, 6, 7, 8, 328], "proportion": 353, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 24, 26, 50, 51, 52, 54, 58, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 111, 116, 117, 119, 120, 123, 125, 126, 127, 128, 132, 156, 168, 169, 179, 227, 228, 229, 231, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 264, 266, 268, 270, 272, 278, 280, 281, 286, 293, 300, 314, 316, 327, 329, 337, 339, 341, 355], "pseudo": [16, 19], "purpos": [26, 275, 279, 293, 299, 301], "python": 272, "pytorch": 329, "q": [20, 120], "qr": 15, "quad": [19, 227, 228, 229, 230, 231, 247, 248, 249, 282, 283, 287, 288, 289, 292, 346], "quadrat": 229, "quoc": 120, "quotient": 283, "r": [20, 120, 349, 350, 351, 352], "r_t": 263, "radam": 267, "radix": [69, 70, 71, 72, 73, 74, 75, 76, 77], "rais": [0, 1, 2, 123, 253, 254, 291], "rand": [274, 280], "randint": [274, 280], "randn": [23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 111, 116, 118, 183, 184, 185, 186, 187, 253, 274, 278, 280], "random": [1, 2, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 107, 108, 109, 110, 116, 183, 184, 185, 186, 187, 216, 348, 349, 350, 351, 352, 355], "random_integ": 280, "random_tensor": 280, "randomcrop": [354, 355], "randomgrayscal": [354, 355], "randomhorizontalflip": [354, 355], "randomli": [1, 145, 147, 148, 149, 150, 151, 179, 214, 217, 218, 219, 220, 348, 349, 350, 351, 352, 355], "randomnoisedataset": [0, 1, 2], "randomrot": [354, 355], "randomverticalflip": 354, "rang": [0, 1, 11, 28, 78, 86, 120, 128, 137, 139, 140, 141, 147, 158, 162, 196, 203, 205, 208, 216, 256, 264, 266, 273, 276, 298, 305, 306, 308, 347, 351, 355], "rank": 19, "rasul": 7, "rate": [25, 36, 37, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "rather": [7, 127, 128, 260, 338], "ratio": [36, 96, 186, 187, 353], "ravel": 333, "raw": [138, 206, 228, 272], "re": [124, 270], "readabl": [125, 126, 127, 129, 253, 272], "readi": [3, 10, 102, 103, 104, 105, 110, 120], "real": [19, 22, 63, 205], "rearrang": 144, "reassembl": 120, "recalibr": [97, 99, 100, 102, 103, 104, 105, 120, 186], "receiv": [247, 248, 249, 335], "recent": 264, "recept": [106, 110, 120, 187], "reciproc": [19, 303, 313, 321], "recognit": [61, 76, 77, 120, 211], "rectangular": 297, "rectif": 263, "rectifi": [134, 135, 201, 202, 263], "recurr": [126, 239], "recurs": [121, 123], "red": 349, "reduc": [23, 62, 78, 89, 106, 111, 118, 120, 183, 184, 185, 186, 233, 234, 235, 236, 237, 238, 244, 245, 246, 247, 248, 249, 262, 265, 270, 272, 314, 315, 316, 323, 328, 349], "reduct": [22, 36, 96, 157, 158, 159, 161, 162, 186, 187, 227, 228, 229, 230, 231, 314, 316], "reevalu": 254, "refer": [4, 10, 123, 280, 294, 297, 330], "reflect": 268, "regardless": [19, 336], "region": [142, 146, 167, 168, 169, 178, 199, 215, 242, 243, 335, 346, 355], "regist": [87, 88, 90, 91, 92, 93, 94, 95, 117, 122, 123, 124, 128, 253, 271], "register_buff": 122, "register_model": [24, 26, 27, 28, 29, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 107, 108, 109, 112, 113, 114, 115, 117, 119], "register_paramet": 123, "registr": [123, 253], "registri": [90, 91, 92, 93, 94, 95, 271], "registry_path": 271, "regress": [4, 161, 229, 230], "regular": [19, 23, 25, 36, 37, 52, 118, 147, 151, 215, 217, 218, 219, 220, 256, 257, 258, 261, 262, 263, 264, 266], "reimagin": 120, "relat": [270, 297, 299], "relationship": 353, "relev": [178, 256, 264, 266], "reli": [146, 270], "reliabl": [5, 6, 7, 8], "reliant": [217, 218, 219, 220], "relu": [10, 23, 96, 111, 118, 120, 121, 125, 126, 127, 129, 131, 133, 134, 153, 180, 181, 182, 186, 187, 191, 192, 195, 196, 197, 201, 203, 207, 209, 210, 211, 212, 222, 223, 224, 225], "relu1": 129, "relu2": 129, "relu3": 129, "relu6": [209, 222], "remain": [5, 6, 7, 8, 122, 147, 166, 214, 216, 217, 218, 219, 220, 265], "rememb": 280, "remov": [271, 339], "rep": 341, "repeat": [333, 334, 341], "repetit": [337, 341], "replac": [7, 280, 349], "repres": [7, 16, 18, 22, 58, 70, 71, 72, 73, 74, 75, 123, 124, 129, 154, 156, 163, 165, 166, 210, 211, 212, 223, 225, 228, 231, 239, 254, 255, 256, 262, 263, 264, 265, 266, 272, 273, 282, 283, 289, 292, 294, 315, 326, 327, 328, 334, 346, 348, 350, 351, 352, 353], "represent": [69, 76, 77, 87, 88, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 110, 120, 186, 245, 248, 254], "reproduc": [273, 275, 276, 277, 278, 279, 280, 355], "requir": [2, 3, 4, 10, 27, 64, 70, 71, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 106, 122, 125, 129, 131, 132, 134, 135, 136, 137, 139, 154, 156, 178, 186, 187, 196, 224, 228, 231, 253, 268, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 353], "requires_grad": [122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 144, 154, 156, 178, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 253, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345], "rescal": [157, 158, 162, 227, 228, 231], "research": 253, "reset": [124, 278, 281], "reshap": [10, 96, 156, 211, 212, 251, 269, 272, 333, 336], "residu": [53, 54, 55, 56, 63, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 120], "residualblock": 78, "resili": 265, "resiz": [178, 344, 354, 355], "resnest": [57, 70, 71, 72, 73, 74, 75, 76, 77, 120], "resnest_101": 120, "resnest_14": 120, "resnest_200": 120, "resnest_26": 120, "resnest_269": 120, "resnest_50": 120, "resnest_50_1s4x24d": 120, "resnest_50_4s2x40d": 120, "resnet": [54, 55, 56, 57, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 99, 100, 101, 106, 107, 108, 109, 120, 186], "resnet_1001": 120, "resnet_101": 120, "resnet_152": 120, "resnet_18": 120, "resnet_200": 120, "resnet_269": 120, "resnet_34": 120, "resnet_50": 120, "resnet_arg": 106, "resnext": [57, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 110, 120], "resnext_101_32x16d": 120, "resnext_101_32x32d": 120, "resnext_101_32x4d": 120, "resnext_101_32x8d": 120, "resnext_101_64x4d": 120, "resnext_50_32x4d": 120, "resolut": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 102, 103, 104, 105, 110, 120], "resourc": [29, 64, 67, 68, 120, 270], "respect": [12, 13, 14, 16, 17, 18, 19, 20, 22, 58, 111, 122, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 154, 156, 178, 187, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 308, 312, 313, 314, 315, 316, 319, 321, 323, 326, 327, 328, 334, 335, 337, 341, 349], "respons": [102, 103, 104, 105, 120, 125, 255], "restor": [186, 270], "restructur": 338, "result": [12, 16, 17, 19, 120, 123, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 154, 156, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 187, 199, 203, 206, 216, 253, 254, 268, 270, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 355], "resum": 255, "retain": [124, 146, 215, 281, 293, 301, 314, 315, 316, 323, 328, 345], "retent": 345, "rethink": 120, "retriev": [0, 2, 125, 127, 128], "return": [0, 1, 2, 3, 5, 6, 7, 8, 10, 54, 58, 96, 122, 123, 125, 126, 127, 128, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 344, 355], "reus": [120, 345], "reusabl": [129, 216, 253, 344], "revers": [10, 129, 327, 350, 352], "revert": 270, "revolution": 120, "rgb": [5, 6, 51, 52, 53, 55, 56], "rho": 257, "rho_": 263, "rho_t": 263, "right": [17, 18, 19, 21, 22, 132, 138, 198, 206, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 247, 248, 249, 346], "risk": 272, "rmsprop": 267, "rob": 120, "robust": [26, 146, 179, 214, 217, 218, 219, 220, 229, 253, 257, 348, 349, 351, 355], "roland": 7, "role": [272, 280, 355], "root": [4, 5, 6, 7, 8, 258, 264, 321], "rotat": [153, 177, 351, 355], "rotated_imag": 179, "rout": [247, 248, 249], "routin": 10, "row": [13, 14, 16, 21, 156, 297, 334, 343], "rprop": 267, "rule": [16, 17, 269, 282, 283, 287, 288, 289, 291, 292], "run": [10, 122, 163, 165, 180, 181, 182, 233, 234, 235, 236, 237, 238, 257, 270, 278, 280], "running_mean": [122, 163, 165, 233, 234, 235, 236, 237, 238], "running_var": [163, 165, 233, 234, 235, 236, 237, 238], "runtim": [37, 126, 129, 216, 253, 298], "s_": 265, "s_d": [246, 249], "s_h": [245, 246, 249], "s_w": [245, 246, 249], "sain": 120, "same": [13, 14, 16, 17, 21, 138, 145, 146, 147, 148, 149, 150, 151, 163, 165, 166, 168, 169, 179, 180, 181, 182, 183, 184, 185, 187, 203, 210, 211, 212, 214, 217, 218, 219, 220, 224, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 265, 273, 278, 280, 286, 296, 300, 302, 312, 314, 315, 316, 330, 332, 336, 338, 339, 340, 343, 347], "sampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 102, 103, 104, 105, 110, 167, 168, 169, 191, 192, 193, 194, 195, 196, 214, 217, 218, 219, 220, 223, 225, 228, 231, 239, 241, 242, 243, 273, 277, 280, 298, 346, 348, 350, 351, 352, 353], "sandler": 120, "satisfi": [12, 14, 21], "satur": [197, 355], "save": [2, 122, 124, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271], "scalabl": [3, 36, 90, 91, 92, 93, 94, 95, 116, 120, 253], "scalar": [13, 18, 157, 158, 159, 161, 162, 272, 273], "scale": [14, 19, 25, 30, 31, 36, 37, 55, 59, 60, 61, 62, 65, 69, 76, 77, 79, 80, 81, 84, 97, 98, 106, 107, 108, 109, 120, 131, 136, 138, 147, 163, 165, 166, 186, 187, 195, 196, 197, 199, 201, 204, 205, 206, 208, 214, 216, 217, 218, 219, 220, 228, 233, 234, 235, 236, 237, 238, 239, 251, 256, 258, 259, 260, 272, 280, 328, 353], "scale_by_keep": [147, 216], "scale_factor": 251, "scenario": [29, 127, 128, 239, 260, 261, 345, 349], "schedul": [215, 256], "scientif": 269, "score": [78, 89, 106, 138, 228], "scratch": 10, "script": 280, "se": [36, 97, 98, 99, 100, 101, 102, 103, 104, 105, 120], "se_resnet_101": 120, "se_resnet_152": 120, "se_resnet_18": 120, "se_resnet_34": 120, "se_resnet_50": 120, "se_resnext_101_32x4d": 120, "se_resnext_101_32x8d": 120, "se_resnext_101_64x4d": 120, "se_resnext_50_32x4d": 120, "se_scal": 36, "seamless": [0, 1, 3, 4, 253, 280], "seamlessli": [3, 4, 11, 124, 126, 129, 253, 272, 355], "search": 120, "second": [14, 126, 127, 154, 186, 223, 259, 260, 261, 262, 263, 269, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 332, 334, 352], "section": 286, "see": [10, 286], "seed": [273, 274, 275, 276, 277, 279, 280, 355], "seen": 257, "select": [106, 107, 108, 109, 110, 120, 178, 186, 187, 247, 249, 323], "selectivekernel": 188, "self": [0, 1, 2, 3, 10, 23, 36, 37, 50, 54, 58, 62, 63, 64, 69, 96, 111, 118, 121, 122, 123, 124, 125, 126, 127, 128, 136, 147, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 334, 344, 345], "selu": [133, 145, 153, 209, 214, 222], "selunetwork": 204, "semodul": 188, "senet": [57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 120], "sensit": [159, 229, 233, 234, 235], "sentiment": 4, "separ": [0, 62, 76, 77, 116, 120, 140, 141, 142, 183, 184, 185, 236, 237, 238], "sequenc": [17, 78, 89, 106, 125, 127, 140, 293, 298, 330, 332, 335, 337, 340, 341, 343, 344], "sequenti": [23, 54, 58, 96, 111, 116, 118, 121, 125, 126, 130, 140, 180, 181, 182, 224, 344, 355], "seri": [50, 59, 60, 106, 140, 180, 210, 244, 247], "serial": [122, 123, 255], "serv": [3, 7, 31, 54, 96, 111, 123, 125, 126, 127, 128, 129, 253, 265, 345], "set": [3, 4, 5, 6, 7, 8, 76, 77, 87, 88, 102, 103, 104, 105, 110, 121, 124, 128, 140, 141, 142, 201, 202, 204, 210, 211, 212, 214, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 254, 259, 260, 264, 273, 275, 276, 277, 278, 279, 280, 281, 293, 295, 296, 301, 302, 308, 314, 316, 329, 345, 349, 355], "setup": [4, 10, 90, 91, 92, 93, 94, 95], "sever": [19, 210, 211, 212, 244, 245, 246, 247, 248, 249, 270, 344, 355], "sgd": [10, 256, 263, 267], "sgn": 18, "shape": [3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 58, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 107, 108, 109, 110, 111, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 269, 272, 273, 275, 276, 277, 279, 280, 281, 284, 295, 296, 297, 299, 300, 301, 302, 308, 313, 314, 315, 316, 319, 321, 323, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355], "shapelik": 276, "share": 120, "shen": 186, "shift": [163, 165, 166, 199, 233, 234, 235, 236, 237, 238, 239], "shorthand": 286, "should": [58, 122, 270, 273, 275, 276, 277, 279, 295, 296, 305, 306, 326, 335, 344], "show": [268, 271], "showcas": 10, "shown": [207, 278], "shrink": 257, "shuffl": [1, 2, 3], "side": [21, 126, 129, 140, 141, 142, 170, 171, 172, 174, 175, 176, 180, 181, 182, 210, 211, 212, 244, 245, 246, 247, 248, 249, 270], "sigma": [19, 186, 191, 193, 195, 205, 207, 233, 234, 235, 236, 237, 238, 239, 327], "sigma_c": 347, "sigma_i": 19, "sigmoid": [133, 153, 186, 191, 192, 195, 196, 199, 200, 207, 209, 222, 227], "sigmoidnetwork": 205, "sign": [17, 229, 265, 303], "signal": [180, 210, 211, 212, 233, 236, 244, 245, 246, 247, 248, 249], "signific": [27, 270], "significantli": [63, 89, 120, 186, 344], "sim": [214, 217, 218, 219, 220], "similar": [10, 191, 192, 286, 313, 329, 335], "similarli": [22, 326], "simonyan": 120, "simpl": [3, 4, 10, 121, 129, 140, 141, 142, 154, 156, 170, 171, 172, 174, 175, 176, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 284, 285, 290, 344], "simplebinaryclassificationmodel": 227, "simpleblock": 147, "simpleclassificationmodel": [228, 231], "simplegelumodel": 198, "simplehardsigmoidmodel": 199, "simplehardswishmodel": 200, "simpleleakyrelumodel": 201, "simplemodel": [10, 121, 203, 216, 225, 271], "simpleregressionmodel": 230, "simplerelumodel": 202, "simpleselumodel": 204, "simplesigmoidmodel": 205, "simpleswishmodel": 207, "simpletanhmodel": 208, "simpli": [268, 326, 327, 338], "simplic": [120, 199, 202], "simplifi": [4, 46, 47, 48, 49, 59, 117, 120, 129, 180, 181, 182], "simul": [121, 355], "simultan": 179, "sin": [303, 309], "sinc": [17, 20, 125, 126, 127, 128, 140, 141, 142, 196, 268, 270, 273, 277, 334, 355], "sine": [306, 319, 320], "singl": [0, 4, 17, 20, 22, 78, 138, 180, 181, 182, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 228, 239, 245, 246, 247, 248, 249, 254, 272, 279, 295, 298, 330, 339, 347, 349, 355], "singleton": 239, "singular": [13, 16, 17, 19, 21, 22], "sinh": [303, 310, 325], "size": [0, 1, 2, 3, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 58, 59, 60, 61, 65, 67, 68, 78, 106, 118, 120, 121, 124, 126, 140, 141, 142, 144, 146, 149, 150, 151, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 210, 211, 212, 215, 223, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 276, 279, 280, 281, 314, 315, 316, 323, 328, 330, 332, 339, 342, 343, 346, 348, 353, 355], "sk": [106, 107, 108, 109, 110, 120, 187], "sk_resnet_18": 120, "sk_resnet_34": 120, "sk_resnet_50": 120, "sk_resnext_50_32x4d": 120, "skblock": 106, "skip": [120, 270], "sknet": [57, 107, 108, 109, 110, 120], "slice": [154, 326], "slide": [144, 244, 246, 247, 249], "slight": 186, "slightli": 355, "slope": [134, 197, 201], "slow": [3, 263], "small": [19, 28, 46, 47, 48, 49, 59, 60, 61, 64, 67, 68, 120, 134, 146, 157, 158, 163, 165, 166, 201, 204, 215, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 245, 248, 257, 258, 259, 260, 261, 262, 263, 264, 265], "smaller": [29, 46, 47, 48, 49, 118, 120, 126, 129, 253, 258, 259, 288, 346, 348, 353], "smallest": 316, "smooth": [52, 132, 197, 198, 207, 256, 264, 355], "smoother": 256, "so": [125, 126, 127, 128, 179, 253, 263, 295, 296, 344], "softmax": [133, 153, 187, 209, 222, 228], "softmaxmodel": 206, "solut": [19, 21], "solv": [11, 12, 15, 19, 20, 22], "solver": 11, "some": [131, 147, 148, 179, 214, 216, 217, 218, 233, 234, 235, 236, 237, 238, 258, 259, 260, 270, 272], "sometim": 269, "sophist": [126, 129], "sourc": 280, "space": [14, 20, 22, 140, 141, 142, 144, 167, 168, 169, 180, 181, 182, 183, 184, 185, 210, 211, 212, 241, 242, 243, 293, 298, 355], "span": 4, "spars": [258, 259], "spatial": [23, 78, 89, 106, 111, 118, 120, 146, 181, 186, 211, 212, 233, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 251, 334], "spatial_dim": 186, "spatio": 212, "special": [0, 1, 10, 19, 122, 123, 124, 214, 280], "specif": [4, 10, 32, 33, 34, 35, 46, 47, 48, 49, 54, 62, 76, 77, 87, 88, 125, 126, 127, 128, 129, 187, 196, 214, 217, 218, 219, 220, 236, 237, 238, 253, 254, 268, 280, 295, 314, 316, 337, 341], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 18, 24, 31, 37, 58, 65, 66, 69, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 112, 113, 114, 115, 117, 119, 121, 126, 138, 144, 151, 157, 158, 159, 161, 162, 166, 167, 168, 169, 178, 179, 186, 206, 210, 211, 212, 227, 228, 229, 230, 231, 239, 241, 242, 243, 245, 246, 247, 248, 249, 251, 254, 272, 275, 276, 277, 278, 279, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 308, 314, 315, 316, 323, 327, 328, 329, 330, 332, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 353, 355], "speech": 236, "speed": [67, 68, 199, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "split": [4, 69, 76, 77, 120, 330, 332, 343], "springer": 120, "sqrt": [132, 191, 192, 195, 196, 198, 233, 234, 235, 236, 237, 238, 239, 257, 258, 259, 260, 262, 263, 264, 303, 305, 306], "squar": [1, 3, 12, 13, 14, 16, 17, 19, 20, 21, 22, 146, 159, 161, 215, 229, 230, 257, 258, 259, 264, 303, 321], "squaredataset": [0, 1, 2, 3], "squeez": [36, 64, 67, 68, 96, 99, 102, 103, 104, 105, 120, 186, 333], "stabil": [16, 19, 120, 146, 157, 158, 163, 165, 166, 180, 181, 182, 203, 215, 227, 228, 233, 234, 235, 236, 237, 238, 239, 256, 257, 258, 259, 260, 261, 262, 263, 264, 347], "stabl": [191, 192, 195, 196, 214, 228, 256, 260, 261, 264, 265, 266], "stack": [129, 187, 332, 333, 343, 355], "stage": [25, 69, 70, 71, 72, 73, 74, 75, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 120], "stage1": 96, "stage2": 96, "stage3": 96, "stage4": 96, "standalon": 203, "standard": [26, 78, 87, 88, 132, 134, 183, 184, 185, 191, 193, 195, 197, 198, 201, 214, 265, 277, 280, 286, 344, 347, 355], "start": [1, 3, 256, 258, 265, 293, 298, 346, 348], "state": [120, 122, 123, 124, 126, 129, 254, 268, 270, 278], "state_dict": [123, 124, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "static": 129, "statist": [19, 145, 163, 165], "std": [5, 6, 7, 8, 193, 344, 347, 355], "stem": [54, 69, 78, 89, 106, 120], "stem_typ": 78, "stem_width": [69, 70, 71, 72, 73, 74, 75, 78], "step": [124, 144, 187, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 293, 344, 345], "step_siz": 265, "still": 257, "stochast": [10, 25, 36, 37, 147, 216, 256, 266], "stochastic_depth": 36, "stop": [293, 298], "storag": [125, 127, 281], "store": [2, 4, 5, 6, 7, 8, 78, 89, 106, 122, 123, 124, 125, 126, 127, 128, 186, 241, 242, 243, 270, 281, 346, 347, 348, 349, 350, 351, 352, 353], "str": [5, 6, 7, 8, 78, 111, 123, 125, 127, 129, 157, 158, 159, 161, 162, 178, 251, 254, 271, 334], "straightforward": [266, 268, 282], "strategi": 255, "streamlin": [2, 3, 120], "strength": 215, "strict": [123, 254], "stride": [37, 58, 59, 60, 61, 64, 67, 68, 126, 129, 140, 141, 142, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 241, 242, 243, 244, 245, 246, 247, 248, 249], "stride_height": 144, "stride_width": 144, "string": [123, 125, 127, 129, 210, 211, 212, 254], "structur": [0, 10, 20, 37, 64, 116, 122, 123, 126, 146, 215, 253, 254, 271, 272, 297, 345], "style": [54, 165, 236, 237, 334], "sub": [125, 126, 127, 128, 129, 253, 303, 346, 348], "sub_tensor": 281, "subclass": [1, 2, 3, 10, 123, 124, 125, 253, 254], "sublay": 121, "submodul": [121, 123, 253], "subsequ": [126, 129, 196, 280], "subset": [76, 77, 217, 218], "subtract": [10, 292, 347], "suffer": 258, "suit": [32, 33, 34, 35, 52, 62, 106, 191, 192, 195, 196], "suitabl": [26, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 63, 67, 68, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 101, 120, 229, 258, 259, 275], "sum": [18, 125, 126, 127, 128, 129, 138, 157, 158, 159, 161, 162, 187, 206, 227, 228, 229, 230, 231, 258, 282, 285, 290, 303, 326, 328, 330, 332, 334, 337, 341, 343], "sum_": [17, 138, 206, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 284, 285, 315, 323, 326, 328, 334, 337], "sum_i": [18, 290], "sum_j": 290, "sum_k": 286, "summar": [36, 87, 88, 116, 244, 245, 246], "summari": [87, 88, 102, 103, 104, 105, 110], "summat": 17, "sun": 186, "super": [10, 121, 122, 123, 124, 125, 126, 127, 128, 147, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 223, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271], "superior": 30, "support": [1, 3, 4, 10, 11, 17, 18, 19, 20, 22, 65, 78, 125, 126, 127, 128, 129, 178, 179, 251, 253, 255, 262, 280, 281, 282, 283, 286, 287, 288, 289, 291, 292, 294, 297, 308, 313, 315, 319, 321, 323, 326, 327, 328, 330, 334, 338, 345, 355], "suppos": 355, "sure": [253, 355], "svd": [15, 19], "swish": [67, 68, 209, 222], "symmetr": [12, 167, 168, 169, 195, 196, 208], "syntax": [1, 286], "system": [11, 12, 19, 20, 21, 120, 268, 334], "systemat": [120, 355], "szegedi": [51, 120], "t": [19, 120, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 281, 286, 329, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "t0": 256, "t1": 329, "t2": 329, "tabl": 36, "tabular": 4, "tailor": [4, 64, 70, 71, 72, 73, 74, 75, 253, 355], "take": [20, 244, 245, 246, 247, 248, 249, 251, 270, 344], "taken": 326, "tan": [120, 303], "tangent": [139, 208, 307, 324, 325], "tanh": [58, 126, 129, 132, 133, 153, 191, 192, 195, 196, 198, 209, 222, 303], "tanhnetwork": 208, "target": [5, 6, 7, 8, 129, 157, 158, 159, 161, 162, 167, 168, 169, 178, 227, 228, 229, 230, 231, 241, 242, 243, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 346, 348, 353], "target_tensor": [227, 228, 229, 230, 231], "target_transform": [5, 6, 7, 8], "task": [4, 10, 11, 23, 24, 25, 26, 27, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 116, 120, 137, 138, 141, 154, 157, 158, 161, 162, 186, 187, 205, 206, 210, 211, 212, 227, 228, 229, 230, 231, 236, 237, 238, 244, 246, 247, 249, 259, 269, 280, 297, 298, 355], "techniqu": [12, 16, 25, 37, 118, 147, 163, 214, 215, 217, 218, 219, 220, 236, 237, 238, 255, 353, 355], "tempor": [210, 212, 246, 249], "temporarili": 270, "tensor": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 78, 90, 91, 92, 93, 94, 95, 96, 107, 108, 109, 111, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 268, 270, 272, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "term": [19, 154, 180, 181, 182, 183, 184, 185, 256, 260, 262, 263, 264, 266], "test": [4, 5, 6, 7, 8, 298], "test_backward": 121, "test_siz": [5, 6, 7, 8], "text": [4, 13, 17, 18, 78, 89, 106, 107, 108, 109, 116, 125, 131, 134, 135, 136, 138, 140, 141, 142, 147, 167, 168, 169, 170, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 244, 245, 246, 247, 248, 249, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 276, 282, 283, 285, 287, 288, 289, 291, 292, 304, 308, 314, 315, 316, 318, 323, 328, 330, 332, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 350, 351, 352], "th": [154, 227, 228, 230, 231, 236, 237, 238, 287, 288, 291], "than": [0, 1, 7, 127, 128, 131, 134, 159, 183, 184, 185, 197, 201, 207, 229, 254, 260, 298, 308, 326, 335, 340, 346, 348, 353], "thei": [0, 10, 22, 120, 122, 126, 128, 129, 272, 334, 338, 346, 348, 355], "them": [3, 120, 123, 128, 144, 256, 269, 330, 340, 344, 347, 355], "therebi": [214, 245, 246, 248, 249], "theta": [256, 257, 351], "theta_": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "theta_t": [263, 264], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 51, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 120, 121, 122, 124, 126, 127, 128, 129, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 154, 156, 167, 178, 179, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 276, 277, 278, 280, 281, 285, 286, 290, 293, 295, 299, 300, 301, 302, 308, 312, 313, 314, 315, 316, 319, 321, 323, 326, 327, 328, 329, 335, 337, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "thing": 270, "those": [10, 59, 60, 61, 128, 196], "three": [22, 61, 142, 169, 172, 176, 180, 181, 182, 212, 220, 235, 238, 243, 246, 249], "threshold": [19, 159, 229], "through": [0, 3, 4, 10, 14, 19, 20, 22, 23, 25, 50, 54, 58, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 107, 108, 109, 117, 118, 125, 126, 129, 146, 154, 156, 178, 186, 187, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 273, 277, 284, 285, 290, 334, 336, 338, 339, 342, 355], "throughout": [136, 345], "tile": 333, "time": [0, 3, 17, 59, 60, 61, 63, 140, 180, 201, 204, 210, 244, 245, 246, 247, 248, 249, 256, 257, 258, 259, 260, 264, 266, 270, 337, 341], "tini": [28, 29, 120], "to_tensor": [5, 6, 7, 8], "togeth": [129, 344, 355], "too": 265, "tool": [3, 10, 253, 269, 280, 344, 355], "top": [12, 13, 14, 20, 22, 154, 156, 178, 210, 211, 212, 223, 225, 346, 348], "torch": [111, 329], "toronto": [5, 6], "total": [0, 1, 2, 5, 6, 7, 8, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 121, 124, 281, 338], "totensor": [344, 355], "trace": [11, 303], "track": [10, 180, 181, 182, 233, 234, 235, 236, 237, 238, 253, 268, 270, 273, 275, 276, 277, 279, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 345], "track_running_stat": [180, 181, 182, 233, 234, 235, 236, 237, 238], "trade": 28, "tradit": [7, 120, 257, 258, 261, 262, 263], "trail": 166, "train": [1, 2, 3, 4, 5, 6, 7, 8, 10, 25, 37, 50, 51, 52, 102, 103, 104, 105, 110, 120, 121, 122, 123, 126, 128, 129, 138, 145, 146, 147, 148, 149, 150, 151, 163, 165, 179, 198, 201, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 220, 233, 234, 235, 236, 237, 238, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 344, 347, 348, 349, 350, 351, 352, 355], "trainabl": [121, 233, 234, 235, 236, 237, 238, 253], "transact": 186, "transfer": [165, 236, 237], "transform": [2, 4, 5, 6, 7, 8, 10, 14, 25, 120, 127, 154, 156, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 269, 334], "transform_pipelin": [344, 355], "transformed_imag": [344, 355], "transit": [31, 229], "translat": [245, 248], "transpos": [10, 12, 303], "treat": [0, 122, 239, 253], "triangular": [12, 20], "true": [1, 2, 3, 4, 5, 6, 7, 8, 22, 50, 51, 52, 67, 68, 69, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 144, 145, 147, 148, 149, 150, 151, 154, 156, 163, 165, 178, 180, 181, 182, 183, 184, 185, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 251, 253, 254, 259, 260, 264, 268, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345], "truncat": 121, "truncate_from": 121, "try": 0, "tune": 355, "tupl": [2, 3, 5, 6, 7, 8, 14, 20, 22, 31, 78, 121, 123, 124, 140, 141, 142, 144, 166, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 210, 211, 212, 224, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 259, 260, 261, 262, 263, 265, 272, 275, 276, 277, 279, 281, 295, 299, 301, 314, 315, 316, 323, 328, 330, 332, 334, 335, 338, 339, 340, 342, 343, 346, 347, 348, 353], "twice": 335, "two": [10, 13, 14, 16, 17, 19, 20, 22, 59, 60, 61, 64, 76, 77, 107, 111, 140, 141, 142, 154, 171, 175, 186, 187, 211, 219, 223, 234, 237, 245, 248, 259, 260, 261, 262, 263, 265, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 326, 334], "type": [58, 69, 78, 96, 106, 122, 123, 124, 154, 223, 281, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 329, 334, 345], "typeerror": [0, 1, 2, 123, 254], "typic": [11, 78, 89, 106, 122, 138, 145, 146, 179, 186, 203, 204, 206, 215, 216, 231, 233, 234, 235, 236, 237, 238, 255, 256, 264, 266, 270, 272, 342, 345, 347, 351, 353, 355], "u": [19, 22, 192, 194, 196], "u_": 261, "ultra": 84, "unchang": [122, 151, 197, 201, 202, 204, 214, 217, 218, 219, 220, 224, 336, 339], "undefin": 291, "under": [90, 91, 92, 93, 94, 95, 253], "underbrac": 17, "underdetermin": 19, "undergo": [147, 355], "underli": [0, 10, 46, 47, 48, 49, 51, 52, 53, 55, 56, 329, 332, 336, 338, 343], "understand": [10, 118, 120, 121, 129, 355], "unexpect": [123, 126, 129, 280], "unfold": [143, 153], "unifi": 0, "uniform": [190, 192, 196, 210, 211, 212, 223, 225, 274, 275, 276, 280, 349, 350, 351, 352], "uniformli": [275, 279], "uniniti": [295, 296], "unintend": 270, "union": 111, "uniqu": [12, 19, 21, 125, 127], "unit": [23, 58, 118, 131, 132, 134, 135, 136, 191, 192, 195, 196, 197, 198, 201, 202, 204, 214], "unless": [79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 281], "unlik": [122, 125, 126, 127, 128, 134, 197, 201, 214, 239, 257, 258, 260, 261, 262, 263, 265], "unnecessari": 270, "unpad": 335, "unseen": 355, "unsqueez": 333, "unstabl": 16, "up": [254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 351, 353], "updat": [4, 122, 128, 129, 214, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270], "upon": [52, 64, 120, 125, 126, 127, 128], "upper": [20, 194, 265, 279], "upsampl": [222, 252], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 22, 25, 31, 36, 37, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 154, 156, 161, 163, 165, 168, 169, 178, 179, 180, 181, 182, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 312, 314, 315, 316, 323, 328, 334, 335, 337, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "usag": [3, 11, 26, 27, 28, 29, 30, 31, 116, 126, 129, 147, 183, 184, 185, 215, 254, 255, 298, 346, 347, 348, 349, 350, 351, 352, 353], "use_aux": [50, 51, 52], "use_h": [67, 68], "use_s": [67, 68], "user": [1, 2, 3, 4, 10, 125, 126, 127, 128, 253, 258, 344, 345, 355], "usual": 228, "util": [3, 10, 11, 107, 108, 109, 127, 128, 146, 253, 280], "v": [14, 19, 22, 120, 259, 260, 262, 263, 294], "v1": [50, 51, 54, 55, 56, 62, 63, 120], "v2": [37, 46, 47, 48, 49, 54, 56, 57, 63, 64, 66, 120], "v3": [50, 52, 53, 57, 64, 67, 68, 120], "v4": [50, 53, 120], "v_": [256, 259, 260, 262, 263, 264, 266], "v_stack": 343, "v_t": [263, 264], "val": 189, "valid": [180, 181, 182, 183, 184, 185, 187, 210, 211, 212, 327], "valu": [10, 13, 17, 18, 19, 22, 25, 62, 87, 88, 121, 123, 125, 127, 129, 131, 134, 137, 138, 139, 140, 141, 142, 144, 146, 147, 157, 158, 159, 161, 162, 163, 165, 166, 167, 178, 179, 180, 181, 182, 186, 189, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 208, 214, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 272, 273, 275, 276, 277, 278, 279, 280, 293, 294, 295, 296, 297, 298, 304, 305, 306, 308, 311, 312, 313, 314, 316, 318, 319, 321, 322, 330, 335, 336, 338, 342, 347, 349, 350, 352], "valuabl": 280, "valueerror": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 254], "van": 120, "vanish": [120, 197, 204, 233, 234, 235], "var": 303, "vari": [25, 106, 126, 128, 167, 178, 241, 351], "variabl": [123, 129, 167, 168, 169, 224, 241, 242, 243, 253, 268, 270, 275, 295, 348, 351], "varianc": [136, 145, 163, 165, 180, 181, 182, 191, 192, 195, 196, 204, 214, 233, 234, 235, 236, 237, 238, 239, 259, 260, 261, 262, 263, 277, 328, 351, 355], "variant": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 46, 47, 48, 49, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 88, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 259, 260, 261], "variat": [183, 184, 185, 236, 237, 238, 348, 355], "varieti": [4, 54, 69, 280, 355], "variou": [7, 31, 50, 55, 56, 58, 65, 120, 202, 255, 280, 298, 314, 316, 335, 345], "vasudevan": 120, "vdot": 290, "vector": [14, 19, 20, 21, 22, 154, 156, 223, 225, 284, 285, 286, 290], "veloc": [256, 264, 266], "veri": [19, 81, 83, 120, 257], "versa": 265, "versatil": [280, 334], "version": [22, 25, 50, 54, 58, 59, 60, 264, 290, 349], "vertic": [340, 343, 352], "vgg": 111, "vggnet": [57, 112, 113, 114, 115, 120], "vggnet_11": 120, "vggnet_13": 120, "vggnet_16": 120, "vggnet_19": 120, "via": [3, 4, 106], "vice": 265, "video": [142, 151, 182, 212, 238, 246, 249], "view": [54, 58, 126, 245, 246, 247, 248, 249, 338], "vinod": [5, 6], "vision": [62, 63, 66, 69, 78, 120, 141, 211, 223, 355], "visual": [118, 120], "vol": 120, "vollgraf": 7, "volumetr": [142, 151, 182, 212, 238, 246, 249], "vstack": 333, "w": [78, 90, 91, 92, 93, 94, 95, 107, 108, 109, 120, 141, 142, 144, 146, 150, 151, 154, 156, 168, 169, 171, 172, 175, 176, 178, 179, 181, 182, 186, 210, 211, 212, 223, 225, 234, 235, 237, 238, 242, 243, 246, 249, 346, 348], "w_": [141, 142, 168, 169, 171, 172, 175, 176, 178, 211, 212, 242, 243, 245, 246, 248, 249], "w_out": [141, 142, 171, 172, 175, 176], "wa": [51, 214, 217, 218, 219, 220, 270], "wai": [1, 24, 119, 268, 270, 338], "wang": 120, "want": [0, 10, 344, 346], "warn": [125, 127], "we": [3, 10, 269, 334], "weight": [76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 120, 140, 141, 142, 154, 156, 157, 158, 162, 163, 165, 166, 178, 186, 187, 191, 192, 195, 196, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 275, 280], "weight1": 127, "weight2": 127, "weight_decai": [256, 257, 258, 259, 260, 261, 262, 263, 264, 266], "weinberg": 120, "well": [32, 33, 34, 35, 37, 52, 106, 191, 192], "were": 129, "weyand": 120, "what": 270, "when": [0, 1, 3, 10, 17, 36, 123, 126, 128, 129, 131, 134, 140, 141, 142, 197, 216, 224, 233, 234, 235, 236, 237, 238, 251, 254, 257, 265, 268, 270, 271, 272, 280, 291, 344, 346], "where": [3, 4, 5, 6, 7, 8, 13, 14, 16, 17, 18, 19, 20, 22, 67, 68, 116, 120, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 147, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 272, 280, 282, 283, 287, 288, 289, 291, 292, 295, 296, 308, 312, 313, 314, 315, 316, 319, 321, 323, 326, 327, 328, 330, 335, 337, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352], "whether": [1, 13, 36, 50, 51, 52, 67, 68, 69, 123, 124, 191, 192, 216, 264, 268, 273, 275, 276, 277, 279, 281, 295, 296, 314, 315, 316, 323, 328], "which": [0, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 37, 53, 56, 62, 63, 65, 70, 71, 72, 73, 74, 75, 76, 77, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 120, 123, 125, 127, 129, 134, 138, 159, 179, 183, 184, 185, 187, 197, 198, 201, 203, 206, 208, 214, 229, 231, 233, 234, 235, 236, 237, 238, 239, 259, 260, 262, 264, 268, 270, 272, 275, 276, 279, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 328, 330, 337, 338, 340, 342, 345, 346, 348, 349, 350, 351, 352, 353, 355], "while": [10, 46, 47, 48, 49, 56, 62, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 110, 120, 126, 129, 145, 146, 198, 202, 203, 216, 253, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 270, 338, 340, 349, 355], "who": [10, 125, 126, 127, 128], "whose": [22, 296, 300, 302, 304, 308, 312, 318], "wide": [4, 5, 6, 8, 11, 19, 78, 86, 87, 88, 120, 135, 202, 210, 211, 228], "wide_resnet_101": 120, "wide_resnet_50": 120, "wider": [28, 87, 88, 140, 141], "wideresnet": 120, "width": [36, 37, 62, 65, 69, 76, 77, 87, 88, 89, 90, 91, 92, 93, 94, 95, 106, 116, 120, 141, 142, 144, 150, 151, 168, 169, 171, 172, 175, 176, 178, 179, 187, 211, 212, 234, 235, 237, 238, 242, 243, 245, 246, 248, 249, 251, 346, 348, 353], "width_coef": 36, "width_multipli": [62, 65], "window": [170, 171, 172, 174, 175, 176, 244, 245, 246, 247, 248, 249, 257, 314, 316], "wise": [100, 102, 103, 104, 105, 120, 131, 132, 134, 135, 136, 137, 138, 139, 147, 180, 181, 182, 186, 200, 206, 207, 214, 216, 217, 218, 219, 220, 253, 269, 282, 283, 286, 287, 288, 289, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 313, 317, 318, 319, 320, 321, 322, 324, 325, 326, 332, 343], "within": [2, 120, 121, 122, 125, 126, 127, 128, 129, 139, 178, 179, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 244, 245, 246, 247, 248, 249, 255, 270, 293, 308, 351, 355], "without": [10, 89, 125, 126, 127, 154, 156, 210, 211, 212, 223, 225, 268, 271, 314, 336, 338, 342], "won": 270, "work": [1, 2, 3, 10, 12, 269, 272], "workflow": [280, 355], "workload": 10, "wrap": [3, 253, 270, 329], "wrapper": 253, "www": [5, 6], "x": [10, 11, 21, 54, 58, 96, 111, 116, 120, 121, 122, 123, 125, 126, 127, 128, 129, 138, 147, 154, 156, 179, 183, 184, 185, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 273, 275, 276, 277, 279, 295, 296, 312, 334, 346, 347, 348, 349, 350, 351, 352, 353], "x1": 223, "x2": 223, "x_": [228, 231, 334], "x_c": [228, 231], "x_i": 227, "x_k": 228, "xavier": [191, 192, 195, 196], "xavier_norm": 190, "xavier_uniform": 190, "xception": [57, 120], "xiao": 7, "xie": 120, "xl": [49, 120], "xlarg": [30, 120], "xy": 334, "x\u2081": 223, "x\u2082": 223, "y": [116, 120, 125, 126, 127, 128, 129, 179, 183, 184, 185, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 273, 275, 276, 277, 279, 295, 296, 334, 349], "y_": [228, 231, 334], "y_c": [228, 231], "y_i": 227, "yann": [8, 120], "yet": [10, 269], "yield": [0, 1, 123, 270], "you": [0, 64, 121, 126, 128, 129, 253, 255, 268, 270, 280, 295, 296, 297, 302, 327, 329, 344, 346, 355], "your": [64, 253, 255, 268, 270, 280, 355], "z": [120, 296, 301, 302], "zalandoresearch": 7, "zeiler": [118, 120], "zero": [17, 19, 20, 52, 121, 131, 134, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 170, 171, 172, 174, 175, 176, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 204, 210, 211, 212, 214, 216, 217, 218, 219, 220, 239, 244, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 295, 296, 297, 302, 303, 308, 318, 335], "zero_grad": [124, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 281], "zeros_lik": [296, 303], "zfnet": [57, 120], "zhang": 120, "zhmoginov": 120, "zhu": 120, "zhuang": 120, "zisserman": 120, "\u03c3\u1d62": 19}, "titles": ["data.ConcatDataset", "data.DataLoader", "data.Dataset", "lucid.data", "lucid.datasets", "CIFAR10", "CIFAR100", "FashionMNIST", "MNIST", "Image Datasets", "Lucid", "lucid.linalg", "lucid.linalg.cholesky", "lucid.linalg.det", "lucid.linalg.eig", "Linear Algebra Operations", "lucid.linalg.inv", "lucid.linalg.matrix_power", "lucid.linalg.norm", "lucid.linalg.pinv", "lucid.linalg.qr", "lucid.linalg.solve", "lucid.linalg.svd", "AlexNet", "alexnet", "ConvNeXt", "convnext_base", "convnext_large", "convnext_small", "convnext_tiny", "convnext_xlarge", "DenseNet", "densenet_121", "densenet_169", "densenet_201", "densenet_264", "EfficientNet", "EfficientNet_V2", "efficientnet_b0", "efficientnet_b1", "efficientnet_b2", "efficientnet_b3", "efficientnet_b4", "efficientnet_b5", "efficientnet_b6", "efficientnet_b7", "efficientnet_v2_l", "efficientnet_v2_m", "efficientnet_v2_s", "efficientnet_v2_xl", "Inception", "inception_v1", "inception_v3", "inception_v4", "InceptionResNet", "inception_resnet_v1", "inception_resnet_v2", "ConvNets", "LeNet", "lenet_1", "lenet_4", "lenet_5", "MobileNet", "MobileNet_V2", "MobileNet_V3", "mobilenet", "mobilenet_v2", "mobilenet_v3_large", "mobilenet_v3_small", "ResNeSt", "resnest_101", "resnest_14", "resnest_200", "resnest_26", "resnest_269", "resnest_50", "resnest_50_1s4x24d", "resnest_50_4s2x40d", "ResNet", "resnet_1001", "resnet_101", "resnet_152", "resnet_18", "resnet_200", "resnet_269", "resnet_34", "resnet_50", "wide_resnet_101", "wide_resnet_50", "ResNeXt", "resnext_101_32x16d", "resnext_101_32x32d", "resnext_101_32x4d", "resnext_101_32x8d", "resnext_101_64x4d", "resnext_50_32x4d", "SENet", "se_resnet_101", "se_resnet_152", "se_resnet_18", "se_resnet_34", "se_resnet_50", "se_resnext_101_32x4d", "se_resnext_101_32x8d", "se_resnext_101_64x4d", "se_resnext_50_32x4d", "SKNet", "sk_resnet_18", "sk_resnet_34", "sk_resnet_50", "sk_resnext_50_32x4d", "VGGNet", "vggnet_11", "vggnet_13", "vggnet_16", "vggnet_19", "Xception", "xception", "ZFNet", "zfnet", "lucid.models", "models.summarize", "nn.Buffer", "nn.Module", "nn.Parameter", "nn.ModuleDict", "nn.ModuleList", "nn.ParameterDict", "nn.ParameterList", "nn.Sequential", "Containers", "nn.functional.elu", "nn.functional.gelu", "Activation Functions", "nn.functional.leaky_relu", "nn.functional.relu", "nn.functional.selu", "nn.functional.sigmoid", "nn.functional.softmax", "nn.functional.tanh", "nn.functional.conv1d", "nn.functional.conv2d", "nn.functional.conv3d", "Convolution Functions", "nn.functional.unfold", "nn.functional.alpha_dropout", "nn.functional.drop_block", "nn.functional.drop_path", "nn.functional.dropout", "nn.functional.dropout1d", "nn.functional.dropout2d", "nn.functional.dropout3d", "Dropout Functions", "lucid.nn.functional", "nn.functional.bilinear", "Linear Functions", "nn.functional.linear", "nn.functional.binary_cross_entropy", "nn.functional.cross_entropy", "nn.functional.huber_loss", "Loss Functions", "nn.functional.mse_loss", "nn.functional.nll_loss", "nn.functional.batch_norm", "Normalization Functions", "nn.functional.instance_norm", "nn.functional.layer_norm", "nn.functional.adaptive_avg_pool1d", "nn.functional.adaptive_avg_pool2d", "nn.functional.adaptive_avg_pool3d", "nn.functional.avg_pool1d", "nn.functional.avg_pool2d", "nn.functional.avg_pool3d", "Pooling Functions", "nn.functional.max_pool1d", "nn.functional.max_pool2d", "nn.functional.max_pool3d", "Utility Functions", "nn.functional.interpolate", "nn.functional.rotate", "nn.ConvBNReLU1d", "nn.ConvBNReLU2d", "nn.ConvBNReLU3d", "nn.DepthSeparableConv1d", "nn.DepthSeparableConv2d", "nn.DepthSeparableConv3d", "nn.SEModule", "nn.SelectiveKernel", "Fused Layers", "nn.init.constant", "Weight Initializations", "nn.init.kaiming_normal", "nn.init.kaiming_uniform", "nn.init.normal", "nn.init.uniform", "nn.init.xavier_normal", "nn.init.xavier_uniform", "nn.ELU", "nn.GELU", "nn.HardSigmoid", "nn.HardSwish", "nn.LeakyReLU", "nn.ReLU", "nn.ReLU6", "nn.SELU", "nn.Sigmoid", "nn.Softmax", "nn.Swish", "nn.Tanh", "Activation Layers", "nn.Conv1d", "nn.Conv2d", "nn.Conv3d", "Convolution Layers", "nn.AlphaDropout", "nn.DropBlock", "nn.DropPath", "nn.Dropout", "nn.Dropout1d", "nn.Dropout2d", "nn.Dropout3d", "Dropout Layers", "Modules", "nn.Bilinear", "nn.Identity", "nn.Linear", "Linear Layers", "nn.BCELoss", "nn.CrossEntropyLoss", "nn.HuberLoss", "nn.MSELoss", "nn.NLLLoss", "Loss Layers", "nn.BatchNorm1d", "nn.BatchNorm2d", "nn.BatchNorm3d", "nn.InstanceNorm1d", "nn.InstanceNorm2d", "nn.InstanceNorm3d", "nn.LayerNorm", "Normalization Layers", "nn.AdaptiveAvgPool1d", "nn.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool3d", "nn.AvgPool1d", "nn.AvgPool2d", "nn.AvgPool3d", "nn.MaxPool1d", "nn.MaxPool2d", "nn.MaxPool3d", "Pooling Layers", "nn.Upsample", "Vision Layers", "lucid.nn", "optim.Optimizer", "lucid.optim", "optim.ASGD", "optim.Adadelta", "optim.Adagrad", "optim.Adam", "optim.AdamW", "optim.Adamax", "optim.NAdam", "optim.RAdam", "optim.RMSprop", "optim.Rprop", "optim.SGD", "Optimizers", "lucid.grad_enabled", "lucid.newaxis", "lucid.no_grad", "lucid.register_model", "lucid.types", "lucid.random.bernoulli", "Random Number Generations", "lucid.random.rand", "lucid.random.randint", "lucid.random.randn", "lucid.random.seed", "lucid.random.uniform", "lucid.random", "lucid.Tensor", "lucid.add", "lucid.div", "lucid.dot", "lucid.inner", "lucid.matmul", "lucid.maximum", "lucid.minimum", "lucid.mul", "lucid.outer", "lucid.power", "lucid.sub", "lucid.arange", "lucid.diag", "lucid.empty", "lucid.empty_like", "lucid.eye", "lucid.linspace", "lucid.ones", "lucid.ones_like", "lucid.zeros", "lucid.zeros_like", "Tensor Operations", "lucid.abs", "lucid.arccos", "lucid.arcsin", "lucid.arctan", "lucid.clip", "lucid.cos", "lucid.cosh", "lucid.cube", "lucid.exp", "lucid.log", "lucid.max", "lucid.mean", "lucid.min", "lucid.reciprocal", "lucid.sign", "lucid.sin", "lucid.sinh", "lucid.sqrt", "lucid.square", "lucid.sum", "lucid.tan", "lucid.tanh", "lucid.trace", "lucid.transpose", "lucid.var", "lucid.tensor", "lucid.concatenate", "lucid.flatten", "lucid.hstack", "Tensor Utilites", "lucid.meshgrid", "lucid.pad", "lucid.ravel", "lucid.repeat", "lucid.reshape", "lucid.squeeze", "lucid.stack", "lucid.tile", "lucid.unsqueeze", "lucid.vstack", "transforms.Compose", "transforms.ToTensor", "transforms.CenterCrop", "transforms.Normalize", "transforms.RandomCrop", "transforms.RandomGrayscale", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.RandomVerticalFlip", "transforms.Resize", "Image Transformations", "lucid.transforms"], "titleterms": {"1": 269, "1d": 269, "2": 269, "2d": 269, "3": 269, "It": [268, 270], "ab": 304, "activ": [133, 153, 209, 222], "ad": 269, "adadelta": 257, "adagrad": 258, "adam": 259, "adamax": 261, "adamw": 260, "adaptive_avg_pool1d": 167, "adaptive_avg_pool2d": 168, "adaptive_avg_pool3d": 169, "adaptiveavgpool1d": 241, "adaptiveavgpool2d": 242, "adaptiveavgpool3d": 243, "add": 282, "addit": 19, "admonit": 272, "advanc": [144, 355], "alexnet": [23, 24], "algebra": 15, "algorithm": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "alias": 272, "align": 269, "alpha_dropout": 145, "alphadropout": 214, "also": 255, "anoth": 329, "arang": 293, "arcco": 305, "architectur": [23, 25, 59, 60, 61, 87, 88, 118], "arcsin": 306, "arctan": 307, "asgd": 256, "attent": 187, "attribut": [5, 6, 7, 8, 23, 54, 58, 78, 89, 96, 106, 111, 116, 118, 122, 124, 125, 126, 127, 128, 129, 180, 181, 182, 183, 184, 185, 186, 197, 198, 201, 202, 204, 205, 206, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 281, 346, 347, 348, 349, 350, 351, 352, 353], "avg_pool1d": 170, "avg_pool2d": 171, "avg_pool3d": 172, "avgpool1d": 244, "avgpool2d": 245, "avgpool3d": 246, "axi": 269, "backpropag": 281, "backward": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 146, 154, 156, 178, 186, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "batch_norm": 163, "batchnorm": 188, "batchnorm1d": 233, "batchnorm2d": 234, "batchnorm3d": 235, "bceloss": 227, "behavior": [167, 168, 169, 241, 242, 243], "benefit": 270, "bernoulli": 273, "bilinear": [154, 223], "binari": 303, "binary_cross_entropi": 157, "bottleneck": [67, 68], "broadcast": 269, "buffer": 122, "calcul": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 78, 89, 96, 106, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 144, 146, 147, 154, 156, 167, 168, 169, 178, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353], "captur": 271, "case": 272, "centercrop": 346, "choleski": 12, "cifar10": 5, "cifar100": 6, "class": [0, 1, 2, 5, 6, 7, 8, 23, 25, 31, 36, 37, 50, 54, 58, 62, 63, 64, 69, 78, 89, 96, 106, 111, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 281, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "clip": 308, "co": 309, "combin": 0, "compon": [3, 10, 253], "compos": 344, "concatdataset": [0, 1], "concaten": 330, "conclus": [3, 10, 253, 268, 269, 270, 280, 345, 355], "configur": [36, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77], "constant": 189, "contain": 130, "conv": 188, "conv1d": [140, 210], "conv2d": [141, 211], "conv3d": [142, 212], "convbnrelu1d": 180, "convbnrelu2d": 181, "convbnrelu3d": 182, "convnet": [57, 120], "convnext": 25, "convnext_bas": 26, "convnext_larg": 27, "convnext_smal": 28, "convnext_tini": 29, "convnext_xlarg": 30, "convolut": [143, 153, 188, 213, 222], "core": 10, "cosh": 310, "creat": [124, 281, 329], "cross_entropi": 158, "crossentropyloss": 228, "cube": 311, "custom": [1, 2, 3, 123, 254, 255, 355], "data": [0, 1, 2, 3], "dataload": 1, "dataset": [0, 1, 2, 4, 9], "defin": [2, 123, 254, 255], "definit": 272, "densenet": 31, "densenet_121": 32, "densenet_169": 33, "densenet_201": 34, "densenet_264": 35, "depthseparableconv1d": 183, "depthseparableconv2d": 184, "depthseparableconv3d": 185, "depthwis": 188, "descript": [90, 91, 92, 93, 94, 95, 107, 108, 109, 271], "det": 13, "detail": [19, 87, 88], "diag": 294, "dilat": 144, "div": 283, "dot": 284, "drop_block": 146, "drop_path": 147, "dropblock": 215, "dropout": [148, 152, 153, 217, 221, 222], "dropout1d": [149, 218], "dropout2d": [150, 219], "dropout3d": [151, 220], "droppath": 216, "efficientnet": 36, "efficientnet_b0": 38, "efficientnet_b1": 39, "efficientnet_b2": 40, "efficientnet_b3": 41, "efficientnet_b4": 42, "efficientnet_b5": 43, "efficientnet_b6": 44, "efficientnet_b7": 45, "efficientnet_v2": 37, "efficientnet_v2_": 48, "efficientnet_v2_l": 46, "efficientnet_v2_m": 47, "efficientnet_v2_xl": 49, "eig": 14, "elu": [131, 197], "empti": 295, "empty_lik": 296, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "excit": 188, "exp": 312, "ey": 297, "fashionmnist": 7, "featur": [4, 10, 11, 102, 103, 104, 105, 110, 255, 280, 355], "flatten": 331, "forward": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 78, 89, 96, 106, 116, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 144, 147, 154, 156, 167, 168, 169, 178, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353], "from": 329, "function": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 192, 193, 194, 195, 196, 268, 270, 271, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "fuse": 188, "futur": 4, "gelu": [132, 198], "gener": [274, 303], "get": 255, "grad_en": 268, "gradient": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 146, 154, 156, 178, 186, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "guidelin": 272, "hardsigmoid": 199, "hardswish": 200, "how": [268, 270], "hstack": 332, "huber_loss": 159, "huberloss": 229, "hyperparamet": [76, 77], "ident": 224, "imag": [9, 354], "incept": 50, "inception_resnet_v1": 55, "inception_resnet_v2": 56, "inception_v1": 51, "inception_v3": 52, "inception_v4": 53, "inceptionresnet": 54, "index": 281, "init": [189, 191, 192, 193, 194, 195, 196], "initi": 190, "inner": 285, "input": 329, "inspect": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "instance_norm": 165, "instancenorm1d": 236, "instancenorm2d": 237, "instancenorm3d": 238, "integr": [3, 253, 280, 355], "interpol": 178, "inv": 16, "iter": 281, "kaiming_norm": 191, "kaiming_uniform": 192, "kei": [3, 4, 10, 102, 103, 104, 105, 110, 253, 255, 280, 355], "kernel": 188, "layer": [70, 71, 72, 73, 74, 75, 188, 209, 213, 221, 222, 226, 232, 240, 250, 252], "layer_norm": 166, "layernorm": 239, "leaky_relu": 134, "leakyrelu": 201, "learn": 280, "lenet": 58, "lenet_1": 59, "lenet_4": 60, "lenet_5": 61, "limit": 10, "linalg": [11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "linear": [15, 153, 155, 156, 222, 225, 226], "linspac": 298, "list": 329, "load": 1, "log": 313, "loss": [153, 160, 222, 232], "lucid": [3, 4, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 120, 153, 253, 255, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 355], "matmul": 286, "matrix": 286, "matrix_pow": 17, "max": 314, "max_pool1d": 174, "max_pool2d": 175, "max_pool3d": 176, "maximum": 287, "maxpool1d": 247, "maxpool2d": 248, "maxpool3d": 249, "mean": 315, "mechan": 187, "meshgrid": 334, "metadata": 271, "method": [0, 1, 2, 5, 6, 7, 8, 54, 58, 111, 123, 124, 254, 281], "min": 316, "minimum": 288, "mnist": 8, "mobilenet": [62, 65], "mobilenet_v2": [63, 66], "mobilenet_v3": 64, "mobilenet_v3_larg": 67, "mobilenet_v3_smal": 68, "model": [120, 121, 253], "modul": [123, 222], "moduledict": 125, "modulelist": 126, "more": 280, "mse_loss": 161, "mseloss": 230, "mul": 289, "multipl": [0, 286], "nadam": 262, "new": 269, "newaxi": 269, "nll_loss": 162, "nllloss": 231, "nn": [122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253], "no_grad": 270, "norm": 18, "normal": [153, 164, 193, 222, 240, 347], "note": 10, "number": 274, "ones": 299, "ones_lik": 300, "oper": [15, 286, 303], "optim": [254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "organ": 253, "outer": 290, "overview": [3, 4, 10, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 79, 80, 81, 82, 83, 84, 85, 86, 97, 98, 99, 100, 101, 253, 255, 280, 355], "pad": 335, "paramet": [1, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "parameterdict": 127, "parameterlist": 128, "pass": 116, "perform": 281, "pinv": 19, "pipelin": [3, 355], "pitfal": [268, 270], "pool": [153, 173, 222, 250], "potenti": [268, 270], "power": 291, "properti": [124, 281], "qr": 20, "radam": 263, "rais": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22], "rand": 275, "randint": 276, "randn": 277, "random": [273, 274, 275, 276, 277, 278, 279, 280], "randomcrop": 348, "randomgrayscal": 349, "randomhorizontalflip": 350, "randomrot": 351, "randomverticalflip": 352, "ravel": 336, "reciproc": 317, "refer": [5, 6, 7, 8, 186, 255], "register_model": 271, "regular": 146, "relu": [135, 188, 202], "relu6": 203, "repeat": 337, "reshap": 338, "resiz": 353, "resnest": 69, "resnest_101": 70, "resnest_14": 71, "resnest_200": 72, "resnest_26": 73, "resnest_269": 74, "resnest_50": 75, "resnest_50_1s4x24d": 76, "resnest_50_4s2x40d": 77, "resnet": 78, "resnet_1001": 79, "resnet_101": 80, "resnet_152": 81, "resnet_18": 82, "resnet_200": 83, "resnet_269": 84, "resnet_34": 85, "resnet_50": 86, "resnext": 89, "resnext_101_32x16d": 90, "resnext_101_32x32d": 91, "resnext_101_32x4d": 92, "resnext_101_32x8d": 93, "resnext_101_64x4d": 94, "resnext_50_32x4d": 95, "return": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 119, 121, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 187, 189, 191, 192, 193, 194, 195, 196, 203, 268, 270, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "rmsprop": 264, "rotat": 179, "rprop": 265, "rule": 286, "se_resnet_101": 97, "se_resnet_152": 98, "se_resnet_18": 99, "se_resnet_34": 100, "se_resnet_50": 101, "se_resnext_101_32x4d": 102, "se_resnext_101_32x8d": 103, "se_resnext_101_64x4d": 104, "se_resnext_50_32x4d": 105, "see": 255, "seed": 278, "select": 188, "selectivekernel": 187, "selu": [136, 204], "semodul": 186, "senet": 96, "separ": 188, "sequenti": 129, "sgd": 266, "sigmoid": [137, 205], "sign": 318, "signatur": [0, 1, 2, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "sin": 319, "sinh": 320, "sk_resnet_18": 107, "sk_resnet_34": 108, "sk_resnet_50": 109, "sk_resnext_50_32x4d": 110, "sknet": 106, "slice": 281, "softmax": [138, 206], "solv": 21, "sqrt": 321, "squar": 322, "squeez": [188, 339], "stack": 340, "start": 255, "state": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "sub": 292, "sum": 323, "summar": 121, "summari": 121, "svd": 22, "swish": 207, "tabl": 121, "tan": 324, "tanh": [139, 208, 325], "tensor": [269, 281, 303, 329, 333], "through": 281, "tile": 341, "totensor": 345, "trace": 326, "track": 281, "transform": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355], "transpos": 327, "type": 272, "unari": 303, "unfold": 144, "uniform": [194, 279], "unsqueez": 342, "upsampl": 251, "us": [1, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 329], "usag": [4, 10, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 102, 103, 104, 105, 110, 122, 179, 268, 269, 270, 272, 334, 344, 345, 355], "util": [153, 177], "utilit": 333, "var": 328, "vggnet": 111, "vggnet_11": 112, "vggnet_13": 113, "vggnet_16": 114, "vggnet_19": 115, "vision": [222, 252], "vstack": 343, "weight": 190, "why": 272, "wide_resnet_101": 87, "wide_resnet_50": 88, "work": [4, 268, 270], "xavier_norm": 195, "xavier_uniform": 196, "xception": [116, 117], "zero": 301, "zeros_lik": 302, "zfnet": [118, 119]}})